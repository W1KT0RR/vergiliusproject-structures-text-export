Structure: BATTERY_REPORTING_SCALE

//0x8 bytes (sizeof)
struct BATTERY_REPORTING_SCALE
{
    ULONG Granularity;                                                      //0x0
    ULONG Capacity;                                                         //0x4
}; 

----------------------------------------
Structure: CMP_OFFSET_ARRAY

//0x18 bytes (sizeof)
struct CMP_OFFSET_ARRAY
{
    ULONG FileOffset;                                                       //0x0
    VOID* DataBuffer;                                                       //0x8
    ULONG DataLength;                                                       //0x10
}; 

----------------------------------------
Structure: Changenew

//0x8 bytes (sizeof)
struct Change
{
    enum wil_details_ServiceReportingKind kind;                             //0x0
    ULONG count;                                                            //0x4
}; 

----------------------------------------
Structure: DEBUG_DEVICE_ADDRESS

//0x18 bytes (sizeof)
struct DEBUG_DEVICE_ADDRESS
{
    UCHAR Type;                                                             //0x0
    UCHAR Valid;                                                            //0x1
    union
    {
        UCHAR Reserved[2];                                                  //0x2
        struct
        {
            UCHAR BitWidth;                                                 //0x2
            UCHAR AccessSize;                                               //0x3
        };
    };
    UCHAR* TranslatedAddress;                                               //0x8
    ULONG Length;                                                           //0x10
}; 

----------------------------------------
Structure: DEBUG_MEMORY_REQUIREMENTS

//0x20 bytes (sizeof)
struct DEBUG_MEMORY_REQUIREMENTS
{
    union _LARGE_INTEGER Start;                                             //0x0
    union _LARGE_INTEGER MaxEnd;                                            //0x8
    VOID* VirtualAddress;                                                   //0x10
    ULONG Length;                                                           //0x18
    UCHAR Cached;                                                           //0x1c
    UCHAR Aligned;                                                          //0x1d
}; 

----------------------------------------
Structure: DOCK_INTERFACE

//0x30 bytes (sizeof)
struct DOCK_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    ULONG (*ProfileDepartureSetMode)(VOID* arg1, enum PROFILE_DEPARTURE_STYLE arg2); //0x20
    ULONG (*ProfileDepartureUpdate)(VOID* arg1);                            //0x28
}; 

----------------------------------------
Structure: FEATURE_ERROR

//0x68 bytes (sizeof)
struct FEATURE_ERROR
{
    HRESULT hr;                                                             //0x0
    USHORT lineNumber;                                                      //0x4
    CHAR* file;                                                             //0x8
    CHAR* process;                                                          //0x10
    CHAR* modulePath;                                                       //0x18
    ULONG callerReturnAddressOffset;                                        //0x20
    CHAR* callerModule;                                                     //0x28
    CHAR* message;                                                          //0x30
    USHORT originLineNumber;                                                //0x38
    CHAR* originFile;                                                       //0x40
    CHAR* originModule;                                                     //0x48
    ULONG originCallerReturnAddressOffset;                                  //0x50
    CHAR* originCallerModule;                                               //0x58
    CHAR* originName;                                                       //0x60
}; 

----------------------------------------
Structure: FEATURE_LOGGED_TRAITS

//0x6 bytes (sizeof)
struct FEATURE_LOGGED_TRAITS
{
    USHORT version;                                                         //0x0
    USHORT baseVersion;                                                     //0x2
    UCHAR stage;                                                            //0x4
}; 

----------------------------------------
Structure: FEATURE_STATE_CHANGE_SUBSCRIPTION__

//0x4 bytes (sizeof)
struct FEATURE_STATE_CHANGE_SUBSCRIPTION__
{
    LONG unused;                                                            //0x0
}; 

----------------------------------------
Structure: HAL_PRIVATE_DISPATCH

//0x4b0 bytes (sizeof)
struct HAL_PRIVATE_DISPATCH
{
    ULONG Version;                                                          //0x0
    struct _BUS_HANDLER* (*HalHandlerForBus)(enum _INTERFACE_TYPE arg1, ULONG arg2); //0x8
    struct _BUS_HANDLER* (*HalHandlerForConfigSpace)(enum _BUS_DATA_TYPE arg1, ULONG arg2); //0x10
    VOID (*HalLocateHiberRanges)(VOID* arg1);                               //0x18
    LONG (*HalRegisterBusHandler)(enum _INTERFACE_TYPE arg1, enum _BUS_DATA_TYPE arg2, ULONG arg3, enum _INTERFACE_TYPE arg4, ULONG arg5, ULONG arg6, LONG (*arg7)(struct _BUS_HANDLER* arg1), struct _BUS_HANDLER** arg8); //0x20
    VOID (*HalSetWakeEnable)(UCHAR arg1);                                   //0x28
    LONG (*HalSetWakeAlarm)(ULONGLONG arg1, ULONGLONG arg2);                //0x30
    UCHAR (*HalPciTranslateBusAddress)(enum _INTERFACE_TYPE arg1, ULONG arg2, union _LARGE_INTEGER arg3, ULONG* arg4, union _LARGE_INTEGER* arg5); //0x38
    LONG (*HalPciAssignSlotResources)(struct _UNICODE_STRING* arg1, struct _UNICODE_STRING* arg2, struct _DRIVER_OBJECT* arg3, struct _DEVICE_OBJECT* arg4, enum _INTERFACE_TYPE arg5, ULONG arg6, ULONG arg7, struct _CM_RESOURCE_LIST** arg8); //0x40
    VOID (*HalHaltSystem)();                                                //0x48
    UCHAR (*HalFindBusAddressTranslation)(union _LARGE_INTEGER arg1, ULONG* arg2, union _LARGE_INTEGER* arg3, ULONGLONG* arg4, UCHAR arg5); //0x50
    UCHAR (*HalResetDisplay)();                                             //0x58
    LONG (*HalAllocateMapRegisters)(struct _ADAPTER_OBJECT* arg1, ULONG arg2, ULONG arg3, struct _MAP_REGISTER_ENTRY* arg4); //0x60
    LONG (*KdSetupPciDeviceForDebugging)(VOID* arg1, struct _DEBUG_DEVICE_DESCRIPTOR* arg2); //0x68
    LONG (*KdReleasePciDeviceForDebugging)(struct _DEBUG_DEVICE_DESCRIPTOR* arg1); //0x70
    VOID* (*KdGetAcpiTablePhase0)(struct _LOADER_PARAMETER_BLOCK* arg1, ULONG arg2); //0x78
    VOID (*KdCheckPowerButton)();                                           //0x80
    UCHAR (*HalVectorToIDTEntry)(ULONG arg1);                               //0x88
    VOID* (*KdMapPhysicalMemory64)(union _LARGE_INTEGER arg1, ULONG arg2, UCHAR arg3); //0x90
    VOID (*KdUnmapVirtualAddress)(VOID* arg1, ULONG arg2, UCHAR arg3);      //0x98
    ULONG (*KdGetPciDataByOffset)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4, ULONG arg5); //0xa0
    ULONG (*KdSetPciDataByOffset)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4, ULONG arg5); //0xa8
    ULONG (*HalGetInterruptVectorOverride)(enum _INTERFACE_TYPE arg1, ULONG arg2, ULONG arg3, ULONG arg4, UCHAR* arg5, ULONGLONG* arg6); //0xb0
    LONG (*HalGetVectorInputOverride)(ULONG arg1, struct _GROUP_AFFINITY* arg2, ULONG* arg3, enum _KINTERRUPT_POLARITY* arg4, struct _INTERRUPT_REMAPPING_INFO* arg5); //0xb8
    LONG (*HalLoadMicrocode)(VOID* arg1);                                   //0xc0
    LONG (*HalUnloadMicrocode)();                                           //0xc8
    LONG (*HalPostMicrocodeUpdate)();                                       //0xd0
    LONG (*HalAllocateMessageTargetOverride)(struct _DEVICE_OBJECT* arg1, struct _GROUP_AFFINITY* arg2, ULONG arg3, enum _KINTERRUPT_MODE arg4, UCHAR arg5, ULONG* arg6, UCHAR* arg7, ULONG* arg8); //0xd8
    VOID (*HalFreeMessageTargetOverride)(struct _DEVICE_OBJECT* arg1, ULONG arg2, struct _GROUP_AFFINITY* arg3); //0xe0
    LONG (*HalDpReplaceBegin)(struct _HAL_DP_REPLACE_PARAMETERS* arg1, VOID** arg2); //0xe8
    VOID (*HalDpReplaceTarget)(VOID* arg1);                                 //0xf0
    LONG (*HalDpReplaceControl)(ULONG arg1, VOID* arg2);                    //0xf8
    VOID (*HalDpReplaceEnd)(VOID* arg1);                                    //0x100
    VOID (*HalPrepareForBugcheck)(ULONG arg1);                              //0x108
    UCHAR (*HalQueryWakeTime)(ULONGLONG* arg1, ULONGLONG* arg2);            //0x110
    VOID (*HalReportIdleStateUsage)(UCHAR arg1, struct _KAFFINITY_EX* arg2); //0x118
    VOID (*HalTscSynchronization)(UCHAR arg1, ULONG* arg2);                 //0x120
    LONG (*HalWheaInitProcessorGenericSection)(struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR* arg1, struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION* arg2); //0x128
    VOID (*HalStopLegacyUsbInterrupts)(enum _SYSTEM_POWER_STATE arg1);      //0x130
    LONG (*HalReadWheaPhysicalMemory)(union _LARGE_INTEGER arg1, ULONG arg2, VOID* arg3); //0x138
    LONG (*HalWriteWheaPhysicalMemory)(union _LARGE_INTEGER arg1, ULONG arg2, VOID* arg3); //0x140
    LONG (*HalDpMaskLevelTriggeredInterrupts)();                            //0x148
    LONG (*HalDpUnmaskLevelTriggeredInterrupts)();                          //0x150
    LONG (*HalDpGetInterruptReplayState)(VOID* arg1, VOID** arg2);          //0x158
    LONG (*HalDpReplayInterrupts)(VOID* arg1);                              //0x160
    UCHAR (*HalQueryIoPortAccessSupported)();                               //0x168
    LONG (*KdSetupIntegratedDeviceForDebugging)(VOID* arg1, struct _DEBUG_DEVICE_DESCRIPTOR* arg2); //0x170
    LONG (*KdReleaseIntegratedDeviceForDebugging)(struct _DEBUG_DEVICE_DESCRIPTOR* arg1); //0x178
    VOID (*HalGetEnlightenmentInformation)(struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION* arg1); //0x180
    VOID* (*HalAllocateEarlyPages)(struct _LOADER_PARAMETER_BLOCK* arg1, ULONG arg2, ULONGLONG* arg3, ULONG arg4); //0x188
    VOID* (*HalMapEarlyPages)(ULONGLONG arg1, ULONG arg2, ULONG arg3);      //0x190
    VOID* Dummy1;                                                           //0x198
    VOID* Dummy2;                                                           //0x1a0
    VOID (*HalNotifyProcessorFreeze)(UCHAR arg1, UCHAR arg2);               //0x1a8
    LONG (*HalPrepareProcessorForIdle)(ULONG arg1);                         //0x1b0
    VOID (*HalRegisterLogRoutine)(struct _HAL_LOG_REGISTER_CONTEXT* arg1);  //0x1b8
    VOID (*HalResumeProcessorFromIdle)();                                   //0x1c0
    VOID* Dummy;                                                            //0x1c8
    ULONG (*HalVectorToIDTEntryEx)(ULONG arg1);                             //0x1d0
    LONG (*HalSecondaryInterruptQueryPrimaryInformation)(struct _INTERRUPT_VECTOR_DATA* arg1, ULONG* arg2); //0x1d8
    LONG (*HalMaskInterrupt)(ULONG arg1, ULONG arg2);                       //0x1e0
    LONG (*HalUnmaskInterrupt)(ULONG arg1, ULONG arg2);                     //0x1e8
    UCHAR (*HalIsInterruptTypeSecondary)(ULONG arg1, ULONG arg2);           //0x1f0
    LONG (*HalAllocateGsivForSecondaryInterrupt)(CHAR* arg1, USHORT arg2, ULONG* arg3); //0x1f8
    LONG (*HalAddInterruptRemapping)(ULONG arg1, ULONG arg2, struct _PCI_BUSMASTER_DESCRIPTOR* arg3, UCHAR arg4, struct _INTERRUPT_VECTOR_DATA* arg5, ULONG arg6); //0x200
    VOID (*HalRemoveInterruptRemapping)(ULONG arg1, ULONG arg2, struct _PCI_BUSMASTER_DESCRIPTOR* arg3, UCHAR arg4, struct _INTERRUPT_VECTOR_DATA* arg5, ULONG arg6); //0x208
    VOID (*HalSaveAndDisableHvEnlightenment)();                             //0x210
    VOID (*HalRestoreHvEnlightenment)();                                    //0x218
    VOID (*HalFlushIoBuffersExternalCache)(struct _MDL* arg1, UCHAR arg2);  //0x220
    VOID (*HalFlushExternalCache)(UCHAR arg1);                              //0x228
    LONG (*HalPciEarlyRestore)(enum _SYSTEM_POWER_STATE arg1);              //0x230
    LONG (*HalGetProcessorId)(ULONG arg1, ULONG* arg2, ULONG* arg3);        //0x238
    LONG (*HalAllocatePmcCounterSet)(ULONG arg1, enum _KPROFILE_SOURCE* arg2, ULONG arg3, struct _HAL_PMC_COUNTERS** arg4); //0x240
    VOID (*HalCollectPmcCounters)(struct _HAL_PMC_COUNTERS* arg1, ULONGLONG* arg2); //0x248
    VOID (*HalFreePmcCounterSet)(struct _HAL_PMC_COUNTERS* arg1);           //0x250
    LONG (*HalProcessorHalt)(ULONG arg1, VOID* arg2, LONG (*arg3)(VOID* arg1)); //0x258
    ULONGLONG (*HalTimerQueryCycleCounter)(ULONGLONG* arg1);                //0x260
    VOID* Dummy3;                                                           //0x268
    VOID (*HalPciMarkHiberPhase)();                                         //0x270
    LONG (*HalQueryProcessorRestartEntryPoint)(union _LARGE_INTEGER* arg1); //0x278
    LONG (*HalRequestInterrupt)(ULONG arg1);                                //0x280
    LONG (*HalEnumerateUnmaskedInterrupts)(UCHAR (*arg1)(VOID* arg1, struct _HAL_UNMASKED_INTERRUPT_INFORMATION* arg2), VOID* arg2, struct _HAL_UNMASKED_INTERRUPT_INFORMATION* arg3); //0x288
    VOID (*HalFlushAndInvalidatePageExternalCache)(union _LARGE_INTEGER arg1); //0x290
    LONG (*KdEnumerateDebuggingDevices)(VOID* arg1, struct _DEBUG_DEVICE_DESCRIPTOR* arg2, enum KD_CALLBACK_ACTION (*arg3)(struct _DEBUG_DEVICE_DESCRIPTOR* arg1)); //0x298
    VOID (*HalFlushIoRectangleExternalCache)(struct _MDL* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, UCHAR arg6); //0x2a0
    VOID (*HalPowerEarlyRestore)(ULONG arg1);                               //0x2a8
    LONG (*HalQueryCapsuleCapabilities)(VOID* arg1, ULONG arg2, ULONGLONG* arg3, ULONG* arg4); //0x2b0
    LONG (*HalUpdateCapsule)(VOID* arg1, ULONG arg2, union _LARGE_INTEGER arg3); //0x2b8
    UCHAR (*HalPciMultiStageResumeCapable)();                               //0x2c0
    VOID (*HalDmaFreeCrashDumpRegisters)(ULONG arg1);                       //0x2c8
    UCHAR (*HalAcpiAoacCapable)();                                          //0x2d0
    LONG (*HalInterruptSetDestination)(struct _INTERRUPT_VECTOR_DATA* arg1, struct _GROUP_AFFINITY* arg2, ULONG* arg3); //0x2d8
    VOID (*HalGetClockConfiguration)(struct _HAL_CLOCK_TIMER_CONFIGURATION* arg1); //0x2e0
    VOID (*HalClockTimerActivate)(UCHAR arg1);                              //0x2e8
    VOID (*HalClockTimerInitialize)();                                      //0x2f0
    VOID (*HalClockTimerStop)();                                            //0x2f8
    LONG (*HalClockTimerArm)(enum _HAL_CLOCK_TIMER_MODE arg1, ULONGLONG arg2, ULONGLONG* arg3); //0x300
    UCHAR (*HalTimerOnlyClockInterruptPending)();                           //0x308
    VOID* (*HalAcpiGetMultiNode)();                                         //0x310
    VOID (*)(ULONG arg1, volatile LONG* arg2)(*HalPowerSetRebootHandler)(VOID (*arg1)(ULONG arg1, volatile LONG* arg2)); //0x318
    VOID (*HalIommuRegisterDispatchTable)(struct _HAL_IOMMU_DISPATCH* arg1); //0x320
    VOID (*HalTimerWatchdogStart)();                                        //0x328
    VOID (*HalTimerWatchdogResetCountdown)();                               //0x330
    VOID (*HalTimerWatchdogStop)();                                         //0x338
    UCHAR (*HalTimerWatchdogGeneratedLastReset)();                          //0x340
    LONG (*HalTimerWatchdogTriggerSystemReset)(UCHAR arg1);                 //0x348
    LONG (*HalInterruptVectorDataToGsiv)(struct _INTERRUPT_VECTOR_DATA* arg1, ULONG* arg2); //0x350
    LONG (*HalInterruptGetHighestPriorityInterrupt)(ULONG* arg1, UCHAR* arg2); //0x358
    LONG (*HalProcessorOn)(ULONG arg1);                                     //0x360
    LONG (*HalProcessorOff)();                                              //0x368
    LONG (*HalProcessorFreeze)();                                           //0x370
    LONG (*HalDmaLinkDeviceObjectByToken)(ULONGLONG arg1, struct _DEVICE_OBJECT* arg2); //0x378
    LONG (*HalDmaCheckAdapterToken)(ULONGLONG arg1);                        //0x380
    VOID* Dummy4;                                                           //0x388
    LONG (*HalTimerConvertPerformanceCounterToAuxiliaryCounter)(ULONGLONG arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x390
    LONG (*HalTimerConvertAuxiliaryCounterToPerformanceCounter)(ULONGLONG arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x398
    LONG (*HalTimerQueryAuxiliaryCounterFrequency)(ULONGLONG* arg1);        //0x3a0
    LONG (*HalConnectThermalInterrupt)(UCHAR (*arg1)(struct _KINTERRUPT* arg1, VOID* arg2)); //0x3a8
    UCHAR (*HalIsEFIRuntimeActive)();                                       //0x3b0
    UCHAR (*HalTimerQueryAndResetRtcErrors)(UCHAR arg1);                    //0x3b8
    VOID (*HalAcpiLateRestore)();                                           //0x3c0
    LONG (*KdWatchdogDelayExpiration)(ULONGLONG* arg1);                     //0x3c8
    LONG (*HalGetProcessorStats)(enum _HAL_PROCESSOR_STAT_TYPE arg1, ULONG arg2, ULONG arg3, ULONGLONG* arg4); //0x3d0
    ULONGLONG (*HalTimerWatchdogQueryDueTime)(UCHAR arg1);                  //0x3d8
    LONG (*HalConnectSyntheticInterrupt)(UCHAR (*arg1)(struct _KINTERRUPT* arg1, VOID* arg2)); //0x3e0
    VOID (*HalPreprocessNmi)(ULONG arg1);                                   //0x3e8
    LONG (*HalEnumerateEnvironmentVariablesWithFilter)(ULONG arg1, UCHAR (*arg2)(struct _GUID* arg1, WCHAR* arg2), VOID* arg3, ULONG* arg4); //0x3f0
    LONG (*HalCaptureLastBranchRecordStack)(ULONG arg1, struct _HAL_LBR_ENTRY* arg2, ULONG* arg3); //0x3f8
    UCHAR (*HalClearLastBranchRecordStack)();                               //0x400
    LONG (*HalConfigureLastBranchRecord)(ULONG arg1, ULONG arg2);           //0x408
    UCHAR (*HalGetLastBranchInformation)(ULONG* arg1, ULONG* arg2);         //0x410
    VOID (*HalResumeLastBranchRecord)(UCHAR arg1);                          //0x418
    LONG (*HalStartLastBranchRecord)(ULONG arg1, ULONG* arg2);              //0x420
    LONG (*HalStopLastBranchRecord)(ULONG arg1);                            //0x428
    LONG (*HalIommuBlockDevice)(VOID* arg1);                                //0x430
    LONG (*HalIommuUnblockDevice)(struct _EXT_IOMMU_DEVICE_ID* arg1, VOID** arg2); //0x438
    LONG (*HalGetIommuInterface)(ULONG arg1, struct _DMA_IOMMU_INTERFACE* arg2); //0x440
    LONG (*HalRequestGenericErrorRecovery)(VOID* arg1, ULONG* arg2);        //0x448
    LONG (*HalTimerQueryHostPerformanceCounter)(ULONGLONG* arg1);           //0x450
    LONG (*HalTopologyQueryProcessorRelationships)(ULONG arg1, ULONG arg2, UCHAR* arg3, UCHAR* arg4, UCHAR* arg5, ULONG* arg6, ULONG* arg7); //0x458
    VOID (*HalInitPlatformDebugTriggers)();                                 //0x460
    VOID (*HalRunPlatformDebugTriggers)(UCHAR arg1);                        //0x468
    VOID* (*HalTimerGetReferencePage)();                                    //0x470
    LONG (*HalGetHiddenProcessorPowerInterface)(struct _HIDDEN_PROCESSOR_POWER_INTERFACE* arg1); //0x478
    ULONG (*HalGetHiddenProcessorPackageId)(ULONG arg1);                    //0x480
    ULONG (*HalGetHiddenPackageProcessorCount)(ULONG arg1);                 //0x488
    LONG (*HalGetHiddenProcessorApicIdByIndex)(ULONG arg1, ULONG* arg2);    //0x490
    LONG (*HalRegisterHiddenProcessorIdleState)(ULONG arg1, ULONGLONG arg2); //0x498
    VOID (*HalIommuReportIommuFault)(ULONGLONG arg1, struct _FAULT_INFORMATION* arg2); //0x4a0
    UCHAR (*HalIommuDmaRemappingCapable)(struct _EXT_IOMMU_DEVICE_ID* arg1, ULONG* arg2); //0x4a8
}; 

----------------------------------------
Structure: LIST_ENTRY32

//0x8 bytes (sizeof)
struct LIST_ENTRY32
{
    ULONG Flink;                                                            //0x0
    ULONG Blink;                                                            //0x4
}; 

----------------------------------------
Structure: LIST_ENTRY64

//0x10 bytes (sizeof)
struct LIST_ENTRY64
{
    ULONGLONG Flink;                                                        //0x0
    ULONGLONG Blink;                                                        //0x8
}; 

----------------------------------------
Structure: PEPHANDLE__

//0x4 bytes (sizeof)
struct PEPHANDLE__
{
    LONG unused;                                                            //0x0
}; 

----------------------------------------
Structure: PERIODIC_CAPTURE_STATE_CONTEXTnew

//0x48 bytes (sizeof)
struct PERIODIC_CAPTURE_STATE_CONTEXT
{
    LONGLONG RelativeTimerDueTime;                                          //0x0
    struct _EX_TIMER* Timer;                                                //0x8
    struct _PERIODIC_CAPTURE_STATE_GUIDS Guids;                             //0x10
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x20
    enum _ETW_PERIODIC_TIMER_STATE TimerState;                              //0x40
}; 

----------------------------------------
Structure: POHANDLE__

//0x4 bytes (sizeof)
struct POHANDLE__
{
    LONG unused;                                                            //0x0
}; 

----------------------------------------
Structure: POWER_ACTION_POLICY

//0xc bytes (sizeof)
struct POWER_ACTION_POLICY
{
    enum POWER_ACTION Action;                                               //0x0
    ULONG Flags;                                                            //0x4
    ULONG EventCode;                                                        //0x8
}; 

----------------------------------------
Structure: PO_MEMORY_IMAGE

//0x3e0 bytes (sizeof)
struct PO_MEMORY_IMAGE
{
    ULONG Signature;                                                        //0x0
    ULONG ImageType;                                                        //0x4
    ULONG CheckSum;                                                         //0x8
    ULONG LengthSelf;                                                       //0xc
    ULONGLONG PageSelf;                                                     //0x10
    ULONG PageSize;                                                         //0x18
    union _LARGE_INTEGER SystemTime;                                        //0x20
    ULONGLONG InterruptTime;                                                //0x28
    ULONGLONG FeatureFlags;                                                 //0x30
    UCHAR HiberFlags;                                                       //0x38
    UCHAR HiberSimulateFlags;                                               //0x39
    UCHAR spare[2];                                                         //0x3a
    ULONG NoHiberPtes;                                                      //0x3c
    ULONGLONG HiberVa;                                                      //0x40
    ULONG NoFreePages;                                                      //0x48
    ULONG FreeMapCheck;                                                     //0x4c
    ULONG WakeCheck;                                                        //0x50
    ULONGLONG NumPagesForLoader;                                            //0x58
    ULONGLONG FirstSecureRestorePage;                                       //0x60
    ULONGLONG FirstBootRestorePage;                                         //0x68
    ULONGLONG FirstKernelRestorePage;                                       //0x70
    ULONGLONG FirstChecksumRestorePage;                                     //0x78
    ULONGLONG NoChecksumEntries;                                            //0x80
    struct _PO_HIBER_PERF PerfInfo;                                         //0x88
    ULONG FirmwareRuntimeInformationPages;                                  //0x280
    ULONGLONG FirmwareRuntimeInformation[1];                                //0x288
    ULONG SpareUlong;                                                       //0x290
    ULONG NoBootLoaderLogPages;                                             //0x294
    ULONGLONG BootLoaderLogPages[24];                                       //0x298
    ULONG NotUsed;                                                          //0x358
    ULONG ResumeContextCheck;                                               //0x35c
    ULONG ResumeContextPages;                                               //0x360
    UCHAR Hiberboot;                                                        //0x364
    UCHAR SecureLaunched;                                                   //0x365
    UCHAR SecureBoot;                                                       //0x366
    ULONGLONG HvPageTableRoot;                                              //0x368
    ULONGLONG HvEntryPoint;                                                 //0x370
    ULONGLONG HvReservedTransitionAddress;                                  //0x378
    ULONGLONG HvReservedTransitionAddressSize;                              //0x380
    ULONGLONG BootFlags;                                                    //0x388
    ULONGLONG RestoreProcessorStateRoutine;                                 //0x390
    ULONGLONG HighestPhysicalPage;                                          //0x398
    ULONGLONG BitlockerKeyPfns[4];                                          //0x3a0
    ULONG HardwareSignature;                                                //0x3c0
    union _LARGE_INTEGER SMBiosTablePhysicalAddress;                        //0x3c8
    ULONG SMBiosTableLength;                                                //0x3d0
    UCHAR SMBiosMajorVersion;                                               //0x3d4
    UCHAR SMBiosMinorVersion;                                               //0x3d5
    UCHAR HiberResumeXhciHandoffSkip;                                       //0x3d6
    UCHAR InitializeUSBCore;                                                //0x3d7
    UCHAR ValidUSBCoreId;                                                   //0x3d8
    UCHAR USBCoreId;                                                        //0x3d9
    UCHAR SkipMemoryMapValidation;                                          //0x3da
}; 

----------------------------------------
Structure: PROCESSOR_IDLESTATE_INFO

//0x8 bytes (sizeof)
struct PROCESSOR_IDLESTATE_INFO
{
    ULONG TimeCheck;                                                        //0x0
    UCHAR DemotePercent;                                                    //0x4
    UCHAR PromotePercent;                                                   //0x5
    UCHAR Spare[2];                                                         //0x6
}; 

----------------------------------------
Structure: PROCESSOR_IDLESTATE_POLICY

//0x20 bytes (sizeof)
struct PROCESSOR_IDLESTATE_POLICY
{
    USHORT Revision;                                                        //0x0
    union
    {
        USHORT AsUSHORT;                                                    //0x2
        USHORT AllowScaling:1;                                              //0x2
        USHORT Disabled:1;                                                  //0x2
        USHORT Reserved:14;                                                 //0x2
    } Flags;                                                                //0x2
    ULONG PolicyCount;                                                      //0x4
    struct PROCESSOR_IDLESTATE_INFO Policy[3];                              //0x8
}; 

----------------------------------------
Structure: PROCESSOR_PERFSTATE_POLICY

//0x1c bytes (sizeof)
struct PROCESSOR_PERFSTATE_POLICY
{
    ULONG Revision;                                                         //0x0
    UCHAR MaxThrottle;                                                      //0x4
    UCHAR MinThrottle;                                                      //0x5
    UCHAR BusyAdjThreshold;                                                 //0x6
    union
    {
        UCHAR Spare;                                                        //0x7
        union
        {
            UCHAR AsUCHAR;                                                  //0x7
            UCHAR NoDomainAccounting:1;                                     //0x7
            UCHAR IncreasePolicy:2;                                         //0x7
            UCHAR DecreasePolicy:2;                                         //0x7
            UCHAR Reserved:3;                                               //0x7
        } Flags;                                                            //0x7
    };
    ULONG TimeCheck;                                                        //0x8
    ULONG IncreaseTime;                                                     //0xc
    ULONG DecreaseTime;                                                     //0x10
    ULONG IncreasePercent;                                                  //0x14
    ULONG DecreasePercent;                                                  //0x18
}; 

----------------------------------------
Structure: RTL_HP_ENV_HANDLE

//0x10 bytes (sizeof)
struct RTL_HP_ENV_HANDLE
{
    VOID* h[2];                                                             //0x0
}; 

----------------------------------------
Structure: SYSTEM_POWER_CAPABILITIES

//0x4c bytes (sizeof)
struct SYSTEM_POWER_CAPABILITIES
{
    UCHAR PowerButtonPresent;                                               //0x0
    UCHAR SleepButtonPresent;                                               //0x1
    UCHAR LidPresent;                                                       //0x2
    UCHAR SystemS1;                                                         //0x3
    UCHAR SystemS2;                                                         //0x4
    UCHAR SystemS3;                                                         //0x5
    UCHAR SystemS4;                                                         //0x6
    UCHAR SystemS5;                                                         //0x7
    UCHAR HiberFilePresent;                                                 //0x8
    UCHAR FullWake;                                                         //0x9
    UCHAR VideoDimPresent;                                                  //0xa
    UCHAR ApmPresent;                                                       //0xb
    UCHAR UpsPresent;                                                       //0xc
    UCHAR ThermalControl;                                                   //0xd
    UCHAR ProcessorThrottle;                                                //0xe
    UCHAR ProcessorMinThrottle;                                             //0xf
    UCHAR ProcessorMaxThrottle;                                             //0x10
    UCHAR FastSystemS4;                                                     //0x11
    UCHAR Hiberboot;                                                        //0x12
    UCHAR WakeAlarmPresent;                                                 //0x13
    UCHAR AoAc;                                                             //0x14
    UCHAR DiskSpinDown;                                                     //0x15
    UCHAR HiberFileType;                                                    //0x16
    UCHAR AoAcConnectivitySupported;                                        //0x17
    UCHAR spare3[6];                                                        //0x18
    UCHAR SystemBatteriesPresent;                                           //0x1e
    UCHAR BatteriesAreShortTerm;                                            //0x1f
    struct BATTERY_REPORTING_SCALE BatteryScale[3];                         //0x20
    enum _SYSTEM_POWER_STATE AcOnLineWake;                                  //0x38
    enum _SYSTEM_POWER_STATE SoftLidWake;                                   //0x3c
    enum _SYSTEM_POWER_STATE RtcWake;                                       //0x40
    enum _SYSTEM_POWER_STATE MinDeviceWakeState;                            //0x44
    enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;                         //0x48
}; 

----------------------------------------
Structure: SYSTEM_POWER_LEVEL

//0x18 bytes (sizeof)
struct SYSTEM_POWER_LEVEL
{
    UCHAR Enable;                                                           //0x0
    UCHAR Spare[3];                                                         //0x1
    ULONG BatteryLevel;                                                     //0x4
    struct POWER_ACTION_POLICY PowerPolicy;                                 //0x8
    enum _SYSTEM_POWER_STATE MinSystemState;                                //0x14
}; 

----------------------------------------
Structure: VACB_LEVEL_ALLOCATION_LIST

//0x20 bytes (sizeof)
struct VACB_LEVEL_ALLOCATION_LIST
{
    struct _LIST_ENTRY VacbLevelList;                                       //0x0
    VOID* VacbLevelWithBcbListHeads;                                        //0x10
    ULONG VacbLevelsAllocated;                                              //0x18
}; 

----------------------------------------
Structure: _ACCESS_REASONS

//0x80 bytes (sizeof)
struct _ACCESS_REASONS
{
    ULONG Data[32];                                                         //0x0
}; 

----------------------------------------
Structure: _ACCESS_STATE

//0xa0 bytes (sizeof)
struct _ACCESS_STATE
{
    struct _LUID OperationID;                                               //0x0
    UCHAR SecurityEvaluated;                                                //0x8
    UCHAR GenerateAudit;                                                    //0x9
    UCHAR GenerateOnClose;                                                  //0xa
    UCHAR PrivilegesAllocated;                                              //0xb
    ULONG Flags;                                                            //0xc
    ULONG RemainingDesiredAccess;                                           //0x10
    ULONG PreviouslyGrantedAccess;                                          //0x14
    ULONG OriginalDesiredAccess;                                            //0x18
    struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;                //0x20
    VOID* SecurityDescriptor;                                               //0x40
    VOID* AuxData;                                                          //0x48
    union
    {
        struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;                  //0x50
        struct _PRIVILEGE_SET PrivilegeSet;                                 //0x50
    } Privileges;                                                           //0x50
    UCHAR AuditPrivileges;                                                  //0x7c
    struct _UNICODE_STRING ObjectName;                                      //0x80
    struct _UNICODE_STRING ObjectTypeName;                                  //0x90
}; 

----------------------------------------
Structure: _ACL

//0x8 bytes (sizeof)
struct _ACL
{
    UCHAR AclRevision;                                                      //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT AclSize;                                                         //0x2
    USHORT AceCount;                                                        //0x4
    USHORT Sbz2;                                                            //0x6
}; 

----------------------------------------
Structure: _ACPI_CACHED_TABLE

//0x40 bytes (sizeof)
struct _ACPI_CACHED_TABLE
{
    struct _LIST_ENTRY Links;                                               //0x0
    union _LARGE_INTEGER PhysicalAddress;                                   //0x10
    struct _DESCRIPTION_HEADER Header;                                      //0x18
}; 

----------------------------------------
Structure: _ACPI_METHOD_ARGUMENT_V1

//0x8 bytes (sizeof)
struct _ACPI_METHOD_ARGUMENT_V1
{
    USHORT Type;                                                            //0x0
    USHORT DataLength;                                                      //0x2
    union
    {
        ULONG Argument;                                                     //0x4
        UCHAR Data[1];                                                      //0x4
    };
}; 

----------------------------------------
Structure: _ACPI_METHOD_ARGUMENT_V1

//0x8 bytes (sizeof)
struct _ACPI_METHOD_ARGUMENT_V1
{
    USHORT Type;                                                            //0x0
    USHORT DataLength;                                                      //0x2
    union
    {
        ULONG Argument;                                                     //0x4
        UCHAR Data[1];                                                      //0x4
    };
}; 

----------------------------------------
Structure: _ACTIVATION_CONTEXT

//0x0 bytes (sizeof)
struct _ACTIVATION_CONTEXT; 

----------------------------------------
Structure: _ACTIVATION_CONTEXT_DATA

//0x0 bytes (sizeof)
struct _ACTIVATION_CONTEXT_DATA; 

----------------------------------------
Structure: _ACTIVATION_CONTEXT_STACK

//0x28 bytes (sizeof)
struct _ACTIVATION_CONTEXT_STACK
{
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;                //0x0
    struct _LIST_ENTRY FrameListCache;                                      //0x8
    ULONG Flags;                                                            //0x18
    ULONG NextCookieSequenceNumber;                                         //0x1c
    ULONG StackId;                                                          //0x20
}; 

----------------------------------------
Structure: _ACTIVATION_CONTEXT_STACK32

//0x18 bytes (sizeof)
struct _ACTIVATION_CONTEXT_STACK32
{
    ULONG ActiveFrame;                                                      //0x0
    struct LIST_ENTRY32 FrameListCache;                                     //0x4
    ULONG Flags;                                                            //0xc
    ULONG NextCookieSequenceNumber;                                         //0x10
    ULONG StackId;                                                          //0x14
}; 

----------------------------------------
Structure: _ACTIVATION_CONTEXT_STACK64

//0x28 bytes (sizeof)
struct _ACTIVATION_CONTEXT_STACK64
{
    ULONGLONG ActiveFrame;                                                  //0x0
    struct LIST_ENTRY64 FrameListCache;                                     //0x8
    ULONG Flags;                                                            //0x18
    ULONG NextCookieSequenceNumber;                                         //0x1c
    ULONG StackId;                                                          //0x20
}; 

----------------------------------------
Structure: _ADAPTER_OBJECT

//0x280 bytes (sizeof)
struct _ADAPTER_OBJECT
{
    struct _HALP_DMA_ADAPTER_OBJECT AdapterObject;                          //0x0
    struct _HALP_DMA_MASTER_ADAPTER_OBJECT* MasterAdapter;                  //0x98
    struct _LIST_ENTRY WaitQueueEntry;                                      //0xa0
    union
    {
        struct _KDEVICE_QUEUE ChannelWaitQueue;                             //0xb0
        struct
        {
            ULONGLONG ResourceWaitLock;                                     //0xb0
            struct _LIST_ENTRY ResourceWaitQueue;                           //0xb8
            struct _LIST_ENTRY ChannelResourceWaitQueue;                    //0xc8
        };
    };
    UCHAR ResourceQueueBusy;                                                //0xd8
    ULONG MapRegistersPerChannel;                                           //0xe0
    VOID* MapRegisterBase;                                                  //0xe8
    ULONG NumberOfMapRegisters;                                             //0xf0
    ULONG MaxTransferLength;                                                //0xf4
    VOID* CrashDumpRegisterBase[2];                                         //0xf8
    ULONG NumberOfCrashDumpRegisters[2];                                    //0x108
    ULONG CrashDumpRegisterRefCount[2];                                     //0x110
    struct _LIST_ENTRY AdapterCrashDumpList;                                //0x118
    struct _MDL* MapRegisterMdl;                                            //0x128
    ULONGLONG MapRegisterMdlLock;                                           //0x130
    struct _EX_PUSH_LOCK ExpiredLock;                                       //0x138
    VOID* AllocationHandle;                                                 //0x140
    VOID* VirtualAddress;                                                   //0x148
    UCHAR IsAllocationMdlBased;                                             //0x150
    UCHAR NoLocalPool;                                                      //0x151
    UCHAR ExpiredFlag;                                                      //0x152
    struct _WAIT_CONTEXT_BLOCK* CurrentWcb;                                 //0x158
    struct _DMA_TRANSFER_CONTEXT* CurrentTransferContext;                   //0x160
    struct _HALP_DMA_CONTROLLER* DmaController;                             //0x168
    ULONG Controller;                                                       //0x170
    ULONG ChannelNumber;                                                    //0x174
    ULONG RequestLine;                                                      //0x178
    ULONG RequestedChannelCount;                                            //0x17c
    ULONG AllocatedChannelCount;                                            //0x180
    ULONG AllocatedChannels[8];                                             //0x184
    VOID* ChannelAdapter;                                                   //0x1a8
    UCHAR NeedsMapRegisters;                                                //0x1b0
    UCHAR MasterDevice;                                                     //0x1b1
    UCHAR ScatterGather;                                                    //0x1b2
    UCHAR AutoInitialize;                                                   //0x1b3
    UCHAR IgnoreCount;                                                      //0x1b4
    UCHAR CacheCoherent;                                                    //0x1b5
    union
    {
        struct
        {
            UCHAR Dma32BitAddresses;                                        //0x1b8
            UCHAR Dma64BitAddresses;                                        //0x1b9
        };
        ULONG DmaAddressWidth;                                              //0x1b8
    };
    enum _DMA_WIDTH DmaPortWidth;                                           //0x1bc
    union _LARGE_INTEGER DeviceAddress;                                     //0x1c0
    struct _LIST_ENTRY AdapterList;                                         //0x1c8
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x1d8
    struct _HALP_DMA_DOMAIN_OBJECT* DomainPointer;                          //0x1f8
    enum _EXT_IOMMU_TRANSLATION_TYPE TranslationType;                       //0x200
    UCHAR AdapterInUse;                                                     //0x204
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x208
    struct _EXT_IOMMU_DEVICE_ID* DeviceId;                                  //0x210
    VOID* IommuDevice;                                                      //0x218
    struct _MDL* ScatterGatherMdl;                                          //0x220
    ULONGLONG LowMemoryLogicalAddressBase;                                  //0x228
    ULONGLONG LowMemoryLogicalAddressQueueLock;                             //0x230
    struct _LIST_ENTRY LowMemoryLogicalAddressQueue;                        //0x238
    UCHAR LowMemoryLogicalAddressQueueInUse;                                //0x248
    struct _HALP_EMERGENCY_LA_QUEUE_ENTRY LowMemoryLogicalAddressQueueEntry; //0x250
    enum _HALP_DMA_ADAPTER_ALLOCATION_STATE AllocationState;                //0x268
    ULONG ScatterGatherBufferLength;                                        //0x26c
    struct _SCATTER_GATHER_LIST ScatterGatherBuffer;                        //0x270
}; 

----------------------------------------
Structure: _AGGREGATED_PAYLOAD_FILTER

//0x50 bytes (sizeof)
struct _AGGREGATED_PAYLOAD_FILTER
{
    USHORT MagicValue:12;                                                   //0x0
    USHORT DescriptorVersion:4;                                             //0x0
    USHORT Size;                                                            //0x2
    USHORT PredicateCount;                                                  //0x4
    USHORT Reserved;                                                        //0x6
    ULONGLONG HashedEventIdBitmap;                                          //0x8
    struct _GUID ProviderGuid;                                              //0x10
    USHORT EachEventTableOffset;                                            //0x20
    USHORT EachEventTableLength;                                            //0x22
    USHORT PayloadDecoderTableOffset;                                       //0x24
    USHORT PayloadDecoderTableLength;                                       //0x26
    USHORT EventFilterTableOffset;                                          //0x28
    USHORT EventFilterTableLength;                                          //0x2a
    USHORT UNICODEStringTableOffset;                                        //0x2c
    USHORT UNICODEStringTableLength;                                        //0x2e
    USHORT ANSIStringTableOffset;                                           //0x30
    USHORT ANSIStringTableLength;                                           //0x32
    struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];                      //0x38
}; 

----------------------------------------
Structure: _ALPC_COMMUNICATION_INFO

//0x50 bytes (sizeof)
struct _ALPC_COMMUNICATION_INFO
{
    struct _ALPC_PORT* ConnectionPort;                                      //0x0
    struct _ALPC_PORT* ServerCommunicationPort;                             //0x8
    struct _ALPC_PORT* ClientCommunicationPort;                             //0x10
    struct _LIST_ENTRY CommunicationList;                                   //0x18
    struct _ALPC_HANDLE_TABLE HandleTable;                                  //0x28
    struct _KALPC_MESSAGE* CloseMessage;                                    //0x48
}; 

----------------------------------------
Structure: _ALPC_COMPLETION_LIST

//0xa0 bytes (sizeof)
struct _ALPC_COMPLETION_LIST
{
    struct _LIST_ENTRY Entry;                                               //0x0
    struct _EPROCESS* OwnerProcess;                                         //0x10
    struct _EX_PUSH_LOCK CompletionListLock;                                //0x18
    struct _MDL* Mdl;                                                       //0x20
    VOID* UserVa;                                                           //0x28
    VOID* UserLimit;                                                        //0x30
    VOID* DataUserVa;                                                       //0x38
    VOID* SystemVa;                                                         //0x40
    ULONGLONG TotalSize;                                                    //0x48
    struct _ALPC_COMPLETION_LIST_HEADER* Header;                            //0x50
    VOID* List;                                                             //0x58
    ULONGLONG ListSize;                                                     //0x60
    VOID* Bitmap;                                                           //0x68
    ULONGLONG BitmapSize;                                                   //0x70
    VOID* Data;                                                             //0x78
    ULONGLONG DataSize;                                                     //0x80
    ULONG BitmapLimit;                                                      //0x88
    ULONG BitmapNextHint;                                                   //0x8c
    ULONG ConcurrencyCount;                                                 //0x90
    ULONG AttributeFlags;                                                   //0x94
    ULONG AttributeSize;                                                    //0x98
}; 

----------------------------------------
Structure: _ALPC_COMPLETION_LIST_HEADER

//0x180 bytes (sizeof)
struct _ALPC_COMPLETION_LIST_HEADER
{
    ULONGLONG StartMagic;                                                   //0x0
    ULONG TotalSize;                                                        //0x8
    ULONG ListOffset;                                                       //0xc
    ULONG ListSize;                                                         //0x10
    ULONG BitmapOffset;                                                     //0x14
    ULONG BitmapSize;                                                       //0x18
    ULONG DataOffset;                                                       //0x1c
    ULONG DataSize;                                                         //0x20
    ULONG AttributeFlags;                                                   //0x24
    ULONG AttributeSize;                                                    //0x28
    volatile struct _ALPC_COMPLETION_LIST_STATE State;                      //0x40
    volatile ULONG LastMessageId;                                           //0x48
    volatile ULONG LastCallbackId;                                          //0x4c
    volatile ULONG PostCount;                                               //0x80
    volatile ULONG ReturnCount;                                             //0xc0
    volatile ULONG LogSequenceNumber;                                       //0x100
    struct _RTL_SRWLOCK UserLock;                                           //0x140
    ULONGLONG EndMagic;                                                     //0x148
}; 

----------------------------------------
Structure: _ALPC_COMPLETION_LIST_STATE

//0x8 bytes (sizeof)
struct _ALPC_COMPLETION_LIST_STATE
{
    union
    {
        struct
        {
            ULONGLONG Head:24;                                              //0x0
            ULONGLONG Tail:24;                                              //0x0
            ULONGLONG ActiveThreadCount:16;                                 //0x0
        } s1;                                                               //0x0
        LONGLONG Value;                                                     //0x0
    } u1;                                                                   //0x0
}; 

----------------------------------------
Structure: _ALPC_COMPLETION_PACKET_LOOKASIDE

//0x50 bytes (sizeof)
struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
    ULONGLONG Lock;                                                         //0x0
    ULONG Size;                                                             //0x8
    ULONG ActiveCount;                                                      //0xc
    ULONG PendingNullCount;                                                 //0x10
    ULONG PendingCheckCompletionListCount;                                  //0x14
    ULONG PendingDelete;                                                    //0x18
    struct _SINGLE_LIST_ENTRY FreeListHead;                                 //0x20
    VOID* CompletionPort;                                                   //0x28
    VOID* CompletionKey;                                                    //0x30
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];                //0x38
}; 

----------------------------------------
Structure: _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY

//0x18 bytes (sizeof)
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
    struct _SINGLE_LIST_ENTRY ListEntry;                                    //0x0
    struct _IO_MINI_COMPLETION_PACKET_USER* Packet;                         //0x8
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;                    //0x10
}; 

----------------------------------------
Structure: _ALPC_DISPATCH_CONTEXT

//0x40 bytes (sizeof)
struct _ALPC_DISPATCH_CONTEXT
{
    struct _ALPC_PORT* PortObject;                                          //0x0
    struct _KALPC_MESSAGE* Message;                                         //0x8
    struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                     //0x10
    struct _ETHREAD* TargetThread;                                          //0x18
    struct _ALPC_PORT* TargetPort;                                          //0x20
    union _KALPC_DIRECT_EVENT DirectEvent;                                  //0x28
    ULONG Flags;                                                            //0x30
    USHORT TotalLength;                                                     //0x34
    USHORT Type;                                                            //0x36
    USHORT DataInfoOffset;                                                  //0x38
    UCHAR SignalCompletion;                                                 //0x3a
    UCHAR PostedToCompletionList;                                           //0x3b
}; 

----------------------------------------
Structure: _ALPC_HANDLE_ENTRY

//0x8 bytes (sizeof)
struct _ALPC_HANDLE_ENTRY
{
    VOID* Object;                                                           //0x0
}; 

----------------------------------------
Structure: _ALPC_HANDLE_TABLE

//0x20 bytes (sizeof)
struct _ALPC_HANDLE_TABLE
{
    struct _ALPC_HANDLE_ENTRY* Handles;                                     //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x8
    ULONGLONG TotalHandles;                                                 //0x10
    ULONG Flags;                                                            //0x18
}; 

----------------------------------------
Structure: _ALPC_MESSAGE_ATTRIBUTES

//0x8 bytes (sizeof)
struct _ALPC_MESSAGE_ATTRIBUTES
{
    ULONG AllocatedAttributes;                                              //0x0
    ULONG ValidAttributes;                                                  //0x4
}; 

----------------------------------------
Structure: _ALPC_PORT

//0x1d8 bytes (sizeof)
struct _ALPC_PORT
{
    struct _LIST_ENTRY PortListEntry;                                       //0x0
    struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                     //0x10
    struct _EPROCESS* OwnerProcess;                                         //0x18
    VOID* CompletionPort;                                                   //0x20
    VOID* CompletionKey;                                                    //0x28
    struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;    //0x30
    VOID* PortContext;                                                      //0x38
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;                         //0x40
    struct _EX_PUSH_LOCK IncomingQueueLock;                                 //0x88
    struct _LIST_ENTRY MainQueue;                                           //0x90
    struct _LIST_ENTRY LargeMessageQueue;                                   //0xa0
    struct _EX_PUSH_LOCK PendingQueueLock;                                  //0xb0
    struct _LIST_ENTRY PendingQueue;                                        //0xb8
    struct _EX_PUSH_LOCK DirectQueueLock;                                   //0xc8
    struct _LIST_ENTRY DirectQueue;                                         //0xd0
    struct _EX_PUSH_LOCK WaitQueueLock;                                     //0xe0
    struct _LIST_ENTRY WaitQueue;                                           //0xe8
    union
    {
        struct _KSEMAPHORE* Semaphore;                                      //0xf8
        struct _KEVENT* DummyEvent;                                         //0xf8
    };
    struct _ALPC_PORT_ATTRIBUTES PortAttributes;                            //0x100
    struct _EX_PUSH_LOCK ResourceListLock;                                  //0x148
    struct _LIST_ENTRY ResourceListHead;                                    //0x150
    struct _EX_PUSH_LOCK PortObjectLock;                                    //0x160
    struct _ALPC_COMPLETION_LIST* CompletionList;                           //0x168
    struct _CALLBACK_OBJECT* CallbackObject;                                //0x170
    VOID* CallbackContext;                                                  //0x178
    struct _LIST_ENTRY CanceledQueue;                                       //0x180
    LONG SequenceNo;                                                        //0x190
    LONG ReferenceNo;                                                       //0x194
    struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;               //0x198
    union
    {
        struct
        {
            ULONG Initialized:1;                                            //0x1a0
            ULONG Type:2;                                                   //0x1a0
            ULONG ConnectionPending:1;                                      //0x1a0
            ULONG ConnectionRefused:1;                                      //0x1a0
            ULONG Disconnected:1;                                           //0x1a0
            ULONG Closed:1;                                                 //0x1a0
            ULONG NoFlushOnClose:1;                                         //0x1a0
            ULONG ReturnExtendedInfo:1;                                     //0x1a0
            ULONG Waitable:1;                                               //0x1a0
            ULONG DynamicSecurity:1;                                        //0x1a0
            ULONG Wow64CompletionList:1;                                    //0x1a0
            ULONG Lpc:1;                                                    //0x1a0
            ULONG LpcToLpc:1;                                               //0x1a0
            ULONG HasCompletionList:1;                                      //0x1a0
            ULONG HadCompletionList:1;                                      //0x1a0
            ULONG EnableCompletionList:1;                                   //0x1a0
        } s1;                                                               //0x1a0
        ULONG State;                                                        //0x1a0
    } u1;                                                                   //0x1a0
    struct _ALPC_PORT* TargetQueuePort;                                     //0x1a8
    struct _ALPC_PORT* TargetSequencePort;                                  //0x1b0
    struct _KALPC_MESSAGE* CachedMessage;                                   //0x1b8
    ULONG MainQueueLength;                                                  //0x1c0
    ULONG LargeMessageQueueLength;                                          //0x1c4
    ULONG PendingQueueLength;                                               //0x1c8
    ULONG DirectQueueLength;                                                //0x1cc
    ULONG CanceledQueueLength;                                              //0x1d0
    ULONG WaitQueueLength;                                                  //0x1d4
}; 

----------------------------------------
Structure: _ALPC_PORT_ATTRIBUTES

//0x48 bytes (sizeof)
struct _ALPC_PORT_ATTRIBUTES
{
    ULONG Flags;                                                            //0x0
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x4
    ULONGLONG MaxMessageLength;                                             //0x10
    ULONGLONG MemoryBandwidth;                                              //0x18
    ULONGLONG MaxPoolUsage;                                                 //0x20
    ULONGLONG MaxSectionSize;                                               //0x28
    ULONGLONG MaxViewSize;                                                  //0x30
    ULONGLONG MaxTotalSectionSize;                                          //0x38
    ULONG DupObjectTypes;                                                   //0x40
    ULONG Reserved;                                                         //0x44
}; 

----------------------------------------
Structure: _ALPC_PROCESS_CONTEXT

//0x20 bytes (sizeof)
struct _ALPC_PROCESS_CONTEXT
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    struct _LIST_ENTRY ViewListHead;                                        //0x8
    volatile ULONGLONG PagedPoolQuotaCache;                                 //0x18
}; 

----------------------------------------
Structure: _ALPC_WORK_ON_BEHALF_TICKET

//0x8 bytes (sizeof)
struct _ALPC_WORK_ON_BEHALF_TICKET
{
    ULONG ThreadId;                                                         //0x0
    ULONG ThreadCreationTimeLow;                                            //0x4
}; 

----------------------------------------
Structure: _AMD64_DBGKD_CONTROL_SET

//0x1c bytes (sizeof)
struct _AMD64_DBGKD_CONTROL_SET
{
    ULONG TraceFlag;                                                        //0x0
    ULONGLONG Dr7;                                                          //0x4
    ULONGLONG CurrentSymbolStart;                                           //0xc
    ULONGLONG CurrentSymbolEnd;                                             //0x14
}; 

----------------------------------------
Structure: _ARBITER_ADD_RESERVED_PARAMETERS

//0x8 bytes (sizeof)
struct _ARBITER_ADD_RESERVED_PARAMETERS
{
    struct _DEVICE_OBJECT* ReserveDevice;                                   //0x0
}; 

----------------------------------------
Structure: _ARBITER_ALLOCATION_STATE

//0x50 bytes (sizeof)
struct _ARBITER_ALLOCATION_STATE
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    ULONGLONG CurrentMinimum;                                               //0x10
    ULONGLONG CurrentMaximum;                                               //0x18
    struct _ARBITER_LIST_ENTRY* Entry;                                      //0x20
    struct _ARBITER_ALTERNATIVE* CurrentAlternative;                        //0x28
    ULONG AlternativeCount;                                                 //0x30
    struct _ARBITER_ALTERNATIVE* Alternatives;                              //0x38
    USHORT Flags;                                                           //0x40
    UCHAR RangeAttributes;                                                  //0x42
    UCHAR RangeAvailableAttributes;                                         //0x43
    ULONGLONG WorkSpace;                                                    //0x48
}; 

----------------------------------------
Structure: _ARBITER_ALTERNATIVE

//0x40 bytes (sizeof)
struct _ARBITER_ALTERNATIVE
{
    ULONGLONG Minimum;                                                      //0x0
    ULONGLONG Maximum;                                                      //0x8
    ULONGLONG Length;                                                       //0x10
    ULONGLONG Alignment;                                                    //0x18
    LONG Priority;                                                          //0x20
    ULONG Flags;                                                            //0x24
    struct _IO_RESOURCE_DESCRIPTOR* Descriptor;                             //0x28
    ULONG Reserved[3];                                                      //0x30
}; 

----------------------------------------
Structure: _ARBITER_BOOT_ALLOCATION_PARAMETERS

//0x8 bytes (sizeof)
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
    struct _LIST_ENTRY* ArbitrationList;                                    //0x0
}; 

----------------------------------------
Structure: _ARBITER_CONFLICT_INFO

//0x18 bytes (sizeof)
struct _ARBITER_CONFLICT_INFO
{
    struct _DEVICE_OBJECT* OwningObject;                                    //0x0
    ULONGLONG Start;                                                        //0x8
    ULONGLONG End;                                                          //0x10
}; 

----------------------------------------
Structure: _ARBITER_INSTANCE

//0x158 bytes (sizeof)
struct _ARBITER_INSTANCE
{
    ULONG Signature;                                                        //0x0
    struct _KEVENT* MutexEvent;                                             //0x8
    WCHAR* Name;                                                            //0x10
    WCHAR* OrderingName;                                                    //0x18
    LONG ResourceType;                                                      //0x20
    struct _RTL_RANGE_LIST* Allocation;                                     //0x28
    struct _RTL_RANGE_LIST* PossibleAllocation;                             //0x30
    struct _ARBITER_ORDERING_LIST OrderingList;                             //0x38
    struct _ARBITER_ORDERING_LIST ReservedList;                             //0x48
    LONG ReferenceCount;                                                    //0x58
    struct _ARBITER_INTERFACE* Interface;                                   //0x60
    ULONG AllocationStackMaxSize;                                           //0x68
    struct _ARBITER_ALLOCATION_STATE* AllocationStack;                      //0x70
    LONG (*UnpackRequirement)(struct _IO_RESOURCE_DESCRIPTOR* arg1, ULONGLONG* arg2, ULONGLONG* arg3, ULONGLONG* arg4, ULONGLONG* arg5); //0x78
    LONG (*PackResource)(struct _IO_RESOURCE_DESCRIPTOR* arg1, ULONGLONG arg2, struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* arg3); //0x80
    LONG (*UnpackResource)(struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x88
    LONG (*ScoreRequirement)(struct _IO_RESOURCE_DESCRIPTOR* arg1);         //0x90
    LONG (*TestAllocation)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_TEST_ALLOCATION_PARAMETERS* arg2); //0x98
    LONG (*RetestAllocation)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_RETEST_ALLOCATION_PARAMETERS* arg2); //0xa0
    LONG (*CommitAllocation)(struct _ARBITER_INSTANCE* arg1);               //0xa8
    LONG (*RollbackAllocation)(struct _ARBITER_INSTANCE* arg1);             //0xb0
    LONG (*BootAllocation)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_BOOT_ALLOCATION_PARAMETERS* arg2); //0xb8
    LONG (*QueryArbitrate)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_QUERY_ARBITRATE_PARAMETERS* arg2); //0xc0
    LONG (*QueryConflict)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_QUERY_CONFLICT_PARAMETERS* arg2); //0xc8
    LONG (*AddReserved)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ADD_RESERVED_PARAMETERS* arg2); //0xd0
    LONG (*StartArbiter)(struct _ARBITER_INSTANCE* arg1, struct _CM_RESOURCE_LIST* arg2); //0xd8
    LONG (*PreprocessEntry)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0xe0
    LONG (*AllocateEntry)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0xe8
    UCHAR (*GetNextAllocationRange)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0xf0
    UCHAR (*FindSuitableRange)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0xf8
    VOID (*AddAllocation)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0x100
    VOID (*BacktrackAllocation)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0x108
    UCHAR (*OverrideConflict)(struct _ARBITER_INSTANCE* arg1, struct _ARBITER_ALLOCATION_STATE* arg2); //0x110
    LONG (*InitializeRangeList)(struct _ARBITER_INSTANCE* arg1, ULONG arg2, struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* arg3, struct _RTL_RANGE_LIST* arg4); //0x118
    LONG (*DeleteOwnerRanges)(struct _ARBITER_INSTANCE* arg1, VOID* arg2);  //0x120
    UCHAR TransactionInProgress;                                            //0x128
    struct _KEVENT* TransactionEvent;                                       //0x130
    VOID* Extension;                                                        //0x138
    struct _DEVICE_OBJECT* BusDeviceObject;                                 //0x140
    VOID* ConflictCallbackContext;                                          //0x148
    UCHAR (*ConflictCallback)(VOID* arg1, struct _RTL_RANGE* arg2);         //0x150
}; 

----------------------------------------
Structure: _ARBITER_INTERFACE

//0x30 bytes (sizeof)
struct _ARBITER_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    LONG (*ArbiterHandler)(VOID* arg1, enum _ARBITER_ACTION arg2, struct _ARBITER_PARAMETERS* arg3); //0x20
    ULONG Flags;                                                            //0x28
}; 

----------------------------------------
Structure: _ARBITER_LIST_ENTRY

//0x60 bytes (sizeof)
struct _ARBITER_LIST_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG AlternativeCount;                                                 //0x10
    struct _IO_RESOURCE_DESCRIPTOR* Alternatives;                           //0x18
    struct _DEVICE_OBJECT* PhysicalDeviceObject;                            //0x20
    enum _ARBITER_REQUEST_SOURCE RequestSource;                             //0x28
    ULONG Flags;                                                            //0x2c
    LONGLONG WorkSpace;                                                     //0x30
    enum _INTERFACE_TYPE InterfaceType;                                     //0x38
    ULONG SlotNumber;                                                       //0x3c
    ULONG BusNumber;                                                        //0x40
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;                     //0x48
    struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;                    //0x50
    enum _ARBITER_RESULT Result;                                            //0x58
}; 

----------------------------------------
Structure: _ARBITER_ORDERING

//0x10 bytes (sizeof)
struct _ARBITER_ORDERING
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
}; 

----------------------------------------
Structure: _ARBITER_ORDERING_LIST

//0x10 bytes (sizeof)
struct _ARBITER_ORDERING_LIST
{
    USHORT Count;                                                           //0x0
    USHORT Maximum;                                                         //0x2
    struct _ARBITER_ORDERING* Orderings;                                    //0x8
}; 

----------------------------------------
Structure: _ARBITER_PARAMETERS

//0x20 bytes (sizeof)
struct _ARBITER_PARAMETERS
{
    union
    {
        struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;          //0x0
        struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;      //0x0
        struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;          //0x0
        struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources; //0x0
        struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;            //0x0
        struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;          //0x0
        struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;                //0x0
    } Parameters;                                                           //0x0
}; 

----------------------------------------
Structure: _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS

//0x8 bytes (sizeof)
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
    struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;                  //0x0
}; 

----------------------------------------
Structure: _ARBITER_QUERY_ARBITRATE_PARAMETERS

//0x8 bytes (sizeof)
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
    struct _LIST_ENTRY* ArbitrationList;                                    //0x0
}; 

----------------------------------------
Structure: _ARBITER_QUERY_CONFLICT_PARAMETERS

//0x20 bytes (sizeof)
struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
    struct _DEVICE_OBJECT* PhysicalDeviceObject;                            //0x0
    struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;                    //0x8
    ULONG* ConflictCount;                                                   //0x10
    struct _ARBITER_CONFLICT_INFO** Conflicts;                              //0x18
}; 

----------------------------------------
Structure: _ARBITER_RETEST_ALLOCATION_PARAMETERS

//0x18 bytes (sizeof)
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
    struct _LIST_ENTRY* ArbitrationList;                                    //0x0
    ULONG AllocateFromCount;                                                //0x8
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;                   //0x10
}; 

----------------------------------------
Structure: _ARBITER_TEST_ALLOCATION_PARAMETERS

//0x18 bytes (sizeof)
struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
    struct _LIST_ENTRY* ArbitrationList;                                    //0x0
    ULONG AllocateFromCount;                                                //0x8
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;                   //0x10
}; 

----------------------------------------
Structure: _ARC_DISK_INFORMATION

//0x10 bytes (sizeof)
struct _ARC_DISK_INFORMATION
{
    struct _LIST_ENTRY DiskSignatures;                                      //0x0
}; 

----------------------------------------
Structure: _ARM64_DBGKD_CONTROL_SET

//0x18 bytes (sizeof)
struct _ARM64_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG TraceFlag;                                                        //0x4
    ULONGLONG CurrentSymbolStart;                                           //0x8
    ULONGLONG CurrentSymbolEnd;                                             //0x10
}; 

----------------------------------------
Structure: _ARMCE_DBGKD_CONTROL_SET

//0xc bytes (sizeof)
struct _ARMCE_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}; 

----------------------------------------
Structure: _ARM_DBGKD_CONTROL_SET

//0xc bytes (sizeof)
struct _ARM_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}; 

----------------------------------------
Structure: _ARM_LOADER_BLOCK

//0x4 bytes (sizeof)
struct _ARM_LOADER_BLOCK
{
    ULONG PlaceHolder;                                                      //0x0
}; 

----------------------------------------
Structure: _ASSEMBLY_STORAGE_MAP

//0x0 bytes (sizeof)
struct _ASSEMBLY_STORAGE_MAP; 

----------------------------------------
Structure: _ASYNC_READ_THREAD_STATS

//0x194 bytes (sizeof)
struct _ASYNC_READ_THREAD_STATS
{
    ULONG CurrentLoad[101];                                                 //0x0
}; 

----------------------------------------
Structure: _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION

//0x260 bytes (sizeof)
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
    ULONG DeviceGroupsCount;                                                //0x0
    struct _SID_AND_ATTRIBUTES* pDeviceGroups;                              //0x8
    ULONG RestrictedDeviceGroupsCount;                                      //0x10
    struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;                    //0x18
    struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;                       //0x20
    struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;             //0x130
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes; //0x240
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes; //0x248
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes; //0x250
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes; //0x258
}; 

----------------------------------------
Structure: _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION

//0x30 bytes (sizeof)
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
    ULONG SecurityAttributeCount;                                           //0x0
    struct _LIST_ENTRY SecurityAttributesList;                              //0x8
    ULONG WorkingSecurityAttributeCount;                                    //0x18
    struct _LIST_ENTRY WorkingSecurityAttributesList;                       //0x20
}; 

----------------------------------------
Structure: _AUX_ACCESS_DATA

//0xe0 bytes (sizeof)
struct _AUX_ACCESS_DATA
{
    struct _PRIVILEGE_SET* PrivilegesUsed;                                  //0x0
    struct _GENERIC_MAPPING GenericMapping;                                 //0x8
    ULONG AccessesToAudit;                                                  //0x18
    ULONG MaximumAuditMask;                                                 //0x1c
    struct _GUID TransactionId;                                             //0x20
    VOID* NewSecurityDescriptor;                                            //0x30
    VOID* ExistingSecurityDescriptor;                                       //0x38
    VOID* ParentSecurityDescriptor;                                         //0x40
    VOID (*DeRefSecurityDescriptor)(VOID* arg1, VOID* arg2);                //0x48
    VOID* SDLock;                                                           //0x50
    struct _ACCESS_REASONS AccessReasons;                                   //0x58
    UCHAR GenerateStagingEvents;                                            //0xd8
}; 

----------------------------------------
Structure: _AWEINFO

//0x0 bytes (sizeof)
struct _AWEINFO; 

----------------------------------------
Structure: _BITMAP_RANGE

//0x30 bytes (sizeof)
struct _BITMAP_RANGE
{
    struct _LIST_ENTRY Links;                                               //0x0
    LONGLONG BasePage;                                                      //0x10
    ULONG FirstDirtyPage;                                                   //0x18
    ULONG LastDirtyPage;                                                    //0x1c
    ULONG DirtyPages;                                                       //0x20
    ULONG* Bitmap;                                                          //0x28
}; 

----------------------------------------
Structure: _BLOB

//0x30 bytes (sizeof)
struct _BLOB
{
    union
    {
        struct _LIST_ENTRY ResourceList;                                    //0x0
        struct _SLIST_ENTRY FreeListEntry;                                  //0x0
    };
    union
    {
        struct
        {
            UCHAR ReferenceCache:1;                                         //0x10
            UCHAR Lookaside:1;                                              //0x10
            UCHAR Initializing:1;                                           //0x10
            UCHAR Deleted:1;                                                //0x10
        } s1;                                                               //0x10
        UCHAR Flags;                                                        //0x10
    } u1;                                                                   //0x10
    UCHAR ResourceId;                                                       //0x11
    SHORT CachedReferences;                                                 //0x12
    LONGLONG ReferenceCount;                                                //0x18
    struct _EX_PUSH_LOCK Lock;                                              //0x20
}; 

----------------------------------------
Structure: _BLOB_COUNTERS

//0x8 bytes (sizeof)
struct _BLOB_COUNTERS
{
    ULONG CreatedObjects;                                                   //0x0
    ULONG DeletedObjects;                                                   //0x4
}; 

----------------------------------------
Structure: _BLOB_TYPE

//0x38 bytes (sizeof)
struct _BLOB_TYPE
{
    enum _BLOB_ID ResourceId;                                               //0x0
    ULONG PoolTag;                                                          //0x4
    ULONG LookasideIndex;                                                   //0x8
    ULONG Flags;                                                            //0xc
    struct _BLOB_COUNTERS* Counters;                                        //0x10
    VOID (*CleanupProcedure)(VOID* arg1);                                   //0x18
    VOID (*DeleteProcedure)(VOID* arg1);                                    //0x20
    LONG (*DestroyProcedure)(VOID* arg1);                                   //0x28
    ULONGLONG UsualSize;                                                    //0x30
}; 

----------------------------------------
Structure: _BOOT_ENTROPY_LDR_RESULT

//0x868 bytes (sizeof)
struct _BOOT_ENTROPY_LDR_RESULT
{
    ULONG maxEntropySources;                                                //0x0
    struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];         //0x8
    UCHAR SeedBytesForCng[48];                                              //0x418
    UCHAR RngBytesForNtoskrnl[1024];                                        //0x448
    UCHAR KdEntropy[32];                                                    //0x848
}; 

----------------------------------------
Structure: _BOOT_ENTROPY_SOURCE_LDR_RESULT

//0x68 bytes (sizeof)
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT
{
    enum _BOOT_ENTROPY_SOURCE_ID SourceId;                                  //0x0
    ULONGLONG Policy;                                                       //0x8
    enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;                       //0x10
    LONG ResultStatus;                                                      //0x14
    ULONGLONG Time;                                                         //0x18
    ULONG EntropyLength;                                                    //0x20
    UCHAR EntropyData[64];                                                  //0x24
}; 

----------------------------------------
Structure: _BUS_EXTENSION_LIST

//0x10 bytes (sizeof)
struct _BUS_EXTENSION_LIST
{
    VOID* Next;                                                             //0x0
    struct _PI_BUS_EXTENSION* BusExtension;                                 //0x8
}; 

----------------------------------------
Structure: _BUS_HANDLER

//0xb0 bytes (sizeof)
struct _BUS_HANDLER
{
    ULONG Version;                                                          //0x0
    enum _INTERFACE_TYPE InterfaceType;                                     //0x4
    enum _BUS_DATA_TYPE ConfigurationType;                                  //0x8
    ULONG BusNumber;                                                        //0xc
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x10
    struct _BUS_HANDLER* ParentHandler;                                     //0x18
    VOID* BusData;                                                          //0x20
    ULONG DeviceControlExtensionSize;                                       //0x28
    struct _SUPPORTED_RANGES* BusAddresses;                                 //0x30
    ULONG Reserved[4];                                                      //0x38
    ULONG (*GetBusData)(struct _BUS_HANDLER* arg1, struct _BUS_HANDLER* arg2, ULONG arg3, VOID* arg4, ULONG arg5, ULONG arg6); //0x48
    ULONG (*SetBusData)(struct _BUS_HANDLER* arg1, struct _BUS_HANDLER* arg2, ULONG arg3, VOID* arg4, ULONG arg5, ULONG arg6); //0x50
    LONG (*AdjustResourceList)(struct _BUS_HANDLER* arg1, struct _BUS_HANDLER* arg2, struct _IO_RESOURCE_REQUIREMENTS_LIST** arg3); //0x58
    LONG (*AssignSlotResources)(struct _BUS_HANDLER* arg1, struct _BUS_HANDLER* arg2, struct _UNICODE_STRING* arg3, struct _UNICODE_STRING* arg4, struct _DRIVER_OBJECT* arg5, struct _DEVICE_OBJECT* arg6, ULONG arg7, struct _CM_RESOURCE_LIST** arg8); //0x60
    UCHAR (*TranslateBusAddress)(struct _BUS_HANDLER* arg1, struct _BUS_HANDLER* arg2, union _LARGE_INTEGER arg3, ULONG* arg4, union _LARGE_INTEGER* arg5); //0x68
    VOID* Spare1;                                                           //0x70
    VOID* Spare2;                                                           //0x78
    VOID* Spare3;                                                           //0x80
    VOID* Spare4;                                                           //0x88
    VOID* Spare5;                                                           //0x90
    VOID* Spare6;                                                           //0x98
    VOID* Spare7;                                                           //0xa0
    VOID* Spare8;                                                           //0xa8
}; 

----------------------------------------
Structure: _CACHED_KSTACK_LIST

//0x20 bytes (sizeof)
struct _CACHED_KSTACK_LIST
{
    union _SLIST_HEADER SListHead;                                          //0x0
    LONG MinimumFree;                                                       //0x10
    ULONG Misses;                                                           //0x14
    ULONG MissesLast;                                                       //0x18
    ULONG AllStacksInUse;                                                   //0x1c
}; 

----------------------------------------
Structure: _CACHE_DESCRIPTOR

//0xc bytes (sizeof)
struct _CACHE_DESCRIPTOR
{
    UCHAR Level;                                                            //0x0
    UCHAR Associativity;                                                    //0x1
    USHORT LineSize;                                                        //0x2
    ULONG Size;                                                             //0x4
    enum _PROCESSOR_CACHE_TYPE Type;                                        //0x8
}; 

----------------------------------------
Structure: _CACHE_MANAGER_CALLBACKS

//0x20 bytes (sizeof)
struct _CACHE_MANAGER_CALLBACKS
{
    UCHAR (*AcquireForLazyWrite)(VOID* arg1, UCHAR arg2);                   //0x0
    VOID (*ReleaseFromLazyWrite)(VOID* arg1);                               //0x8
    UCHAR (*AcquireForReadAhead)(VOID* arg1, UCHAR arg2);                   //0x10
    VOID (*ReleaseFromReadAhead)(VOID* arg1);                               //0x18
}; 

----------------------------------------
Structure: _CACHE_UNINITIALIZE_EVENT

//0x20 bytes (sizeof)
struct _CACHE_UNINITIALIZE_EVENT
{
    struct _CACHE_UNINITIALIZE_EVENT* Next;                                 //0x0
    struct _KEVENT Event;                                                   //0x8
}; 

----------------------------------------
Structure: _CALLBACK_OBJECT

//0x0 bytes (sizeof)
struct _CALLBACK_OBJECT; 

----------------------------------------
Structure: _CALL_HASH_ENTRY

//0x28 bytes (sizeof)
struct _CALL_HASH_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    VOID* CallersAddress;                                                   //0x10
    VOID* CallersCaller;                                                    //0x18
    ULONG CallCount;                                                        //0x20
}; 

----------------------------------------
Structure: _CALL_PERFORMANCE_DATA

//0x408 bytes (sizeof)
struct _CALL_PERFORMANCE_DATA
{
    ULONGLONG SpinLock;                                                     //0x0
    struct _LIST_ENTRY HashTable[64];                                       //0x8
}; 

----------------------------------------
Structure: _CC_ASYNC_READ_CONTEXT

//0x20 bytes (sizeof)
struct _CC_ASYNC_READ_CONTEXT
{
    UCHAR (*CompletionRoutine)(VOID* arg1);                                 //0x0
    VOID* Context;                                                          //0x8
    struct _MDL* Mdl;                                                       //0x10
    CHAR RequestorMode;                                                     //0x18
    ULONG NestingLevel;                                                     //0x1c
}; 

----------------------------------------
Structure: _CC_EXTERNAL_CACHE_INFO

//0x30 bytes (sizeof)
struct _CC_EXTERNAL_CACHE_INFO
{
    VOID (*Callback)(VOID* arg1, ULONGLONG arg2, ULONG arg3);               //0x0
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x8
    struct _LIST_ENTRY Links;                                               //0x20
}; 

----------------------------------------
Structure: _CC_PARTITION

//0x440 bytes (sizeof)
struct _CC_PARTITION
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    struct _EPARTITION* PartitionObject;                                    //0x8
    struct _LIST_ENTRY CleanSharedCacheMapList;                             //0x10
    struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;                //0x20
    struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;           //0x30
    struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;                   //0x48
    struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;                //0x60
    ULONGLONG PrivateLock;                                                  //0x80
    ULONG ConsecutiveWorklessLazyScanCount;                                 //0x88
    UCHAR ForcedDisableLazywriteScan;                                       //0x8c
    ULONGLONG WorkQueueLock;                                                //0xc0
    ULONG NumberWorkerThreads;                                              //0xc8
    ULONG NumberActiveWorkerThreads;                                        //0xcc
    struct _LIST_ENTRY IdleWorkerThreadList;                                //0xd0
    struct _LIST_ENTRY FastTeardownWorkQueue;                               //0xe0
    struct _LIST_ENTRY ExpressWorkQueue;                                    //0xf0
    struct _LIST_ENTRY RegularWorkQueue;                                    //0x100
    struct _LIST_ENTRY PostTickWorkQueue;                                   //0x110
    struct _LIST_ENTRY CleanCachemapUninitWorkQueue;                        //0x120
    struct _LIST_ENTRY IdleExtraWriteBehindThreadList;                      //0x130
    ULONG ActiveExtraWriteBehindThreads;                                    //0x140
    ULONG MaxExtraWriteBehindThreads;                                       //0x144
    struct _LIST_ENTRY IdleCacheMapUninitThreadList;                        //0x148
    ULONG ActiveCacheMapUninitThreads;                                      //0x158
    ULONG MaxCacheMapUninitThreads;                                         //0x15c
    UCHAR QueueThrottle;                                                    //0x160
    ULONG PostTickWorkItemCount;                                            //0x164
    ULONG ThreadsActiveBeforeThrottle;                                      //0x168
    ULONG ExtraWBThreadsActiveBeforeThrottle;                               //0x16c
    ULONG ExecutingWriteBehindWorkItems;                                    //0x170
    ULONG ExecutingHighPriorityWorkItem;                                    //0x174
    struct _KEVENT LowMemoryEvent;                                          //0x178
    struct _KEVENT PowerEvent;                                              //0x190
    struct _KEVENT PeriodicEvent;                                           //0x1a8
    struct _KEVENT WaitingForTeardownEvent;                                 //0x1c0
    struct _KEVENT CoalescingFlushEvent;                                    //0x1d8
    ULONG PagesYetToWrite;                                                  //0x1f0
    struct _LAZY_WRITER LazyWriter;                                         //0x1f8
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x280
    struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;                      //0x298
    struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;                       //0x2d0
    LONG ThroughputTrend;                                                   //0x2d8
    ULONGLONG AverageAvailablePages;                                        //0x2e0
    ULONGLONG AverageDirtyPages;                                            //0x2e8
    ULONGLONG PagesSkippedDueToHotSpot;                                     //0x2f0
    union _LARGE_INTEGER PrevRegularQueueItemRunTime;                       //0x2f8
    union _LARGE_INTEGER PrevExtraWBThreadCheckTime;                        //0x300
    UCHAR AddExtraWriteBehindThreads;                                       //0x308
    UCHAR RemoveExtraThreadPending;                                         //0x309
    struct _LIST_ENTRY DeferredWrites;                                      //0x310
    ULONGLONG DeferredWriteSpinLock;                                        //0x340
    struct _LIST_ENTRY* IdleAsyncReadWorkerThreadList;                      //0x348
    ULONG* NumberActiveAsyncReadWorkerThreads;                              //0x350
    ULONG* NumberActiveCompleteAsyncReadWorkItems;                          //0x358
    struct _LIST_ENTRY* AsyncReadWorkQueue;                                 //0x360
    struct _LIST_ENTRY* AsyncReadCompletionWorkQueue;                       //0x368
    struct _KEVENT* NewAsyncReadRequestEvent;                               //0x370
    struct _ASYNC_READ_THREAD_STATS* ReaderThreadsStats;                    //0x378
    struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;                            //0x380
    struct _LIST_ENTRY VacbFreeHighPriorityList;                            //0x388
    ULONG NumberOfFreeHighPriorityVacbs;                                    //0x398
    struct _ETHREAD* LowPriWorkerThread;                                    //0x3a0
    struct _SHARED_CACHE_MAP* LowPriSharedCacheMap;                         //0x3a8
    LONG LowPriOldCpuPriority;                                              //0x3b0
    enum _IO_PRIORITY_HINT LowPriOldIoPriority;                             //0x3b4
    struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;                       //0x3b8
    ULONG MaxNumberOfWriteBehindThreads;                                    //0x3c0
    UCHAR CoalescingState;                                                  //0x3c4
    UCHAR ActivePartition;                                                  //0x3c5
    UCHAR RundownPhase;                                                     //0x3c6
    LONGLONG RefCount;                                                      //0x3c8
    struct _KEVENT ExitEvent;                                               //0x3d0
    struct _KEVENT FinalDereferenceEvent;                                   //0x3e8
    VOID* LazyWriteScanThreadHandle;                                        //0x400
}; 

----------------------------------------
Structure: _CELL_DATA

//0x50 bytes (sizeof)
struct _CELL_DATA
{
    union _u u;                                                             //0x0
}; 

----------------------------------------
Structure: _CHILD_LIST

//0x8 bytes (sizeof)
struct _CHILD_LIST
{
    ULONG Count;                                                            //0x0
    ULONG List;                                                             //0x4
}; 

----------------------------------------
Structure: _CI_NGEN_PATHS

//0x0 bytes (sizeof)
struct _CI_NGEN_PATHS; 

----------------------------------------
Structure: _CLIENT_ID

//0x10 bytes (sizeof)
struct _CLIENT_ID
{
    VOID* UniqueProcess;                                                    //0x0
    VOID* UniqueThread;                                                     //0x8
}; 

----------------------------------------
Structure: _CLIENT_ID32

//0x8 bytes (sizeof)
struct _CLIENT_ID32
{
    ULONG UniqueProcess;                                                    //0x0
    ULONG UniqueThread;                                                     //0x4
}; 

----------------------------------------
Structure: _CLIENT_ID64

//0x10 bytes (sizeof)
struct _CLIENT_ID64
{
    ULONGLONG UniqueProcess;                                                //0x0
    ULONGLONG UniqueThread;                                                 //0x8
}; 

----------------------------------------
Structure: _CMHIVE

//0x12e8 bytes (sizeof)
struct _CMHIVE
{
    struct _HHIVE Hive;                                                     //0x0
    VOID* FileHandles[6];                                                   //0x600
    struct _LIST_ENTRY NotifyList;                                          //0x630
    struct _LIST_ENTRY HiveList;                                            //0x640
    struct _LIST_ENTRY PreloadedHiveList;                                   //0x650
    struct _EX_RUNDOWN_REF HiveRundown;                                     //0x660
    struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;                         //0x668
    ULONG KcbCacheTableSize;                                                //0x670
    struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;                       //0x678
    ULONG DeletedKcbTableSize;                                              //0x680
    ULONG Identity;                                                         //0x684
    struct _CMSI_RW_LOCK HiveLock;                                          //0x688
    struct _RTL_BITMAP FlushDirtyVector;                                    //0x690
    ULONG FlushDirtyVectorSize;                                             //0x6a0
    struct CMP_OFFSET_ARRAY* FlushLogEntryOffsetArray;                      //0x6a8
    ULONG FlushLogEntryOffsetArrayCount;                                    //0x6b0
    ULONG FlushLogEntrySize;                                                //0x6b4
    ULONG FlushHiveTruncated;                                               //0x6b8
    UCHAR FlushBaseBlockDirty;                                              //0x6bc
    struct _RTL_BITMAP CapturedUnreconciledVector;                          //0x6c0
    ULONG CapturedUnreconciledVectorSize;                                   //0x6d0
    struct CMP_OFFSET_ARRAY* UnreconciledOffsetArray;                       //0x6d8
    ULONG UnreconciledOffsetArrayCount;                                     //0x6e0
    struct _HBASE_BLOCK* UnreconciledBaseBlock;                             //0x6e8
    struct _EX_PUSH_LOCK SecurityLock;                                      //0x6f0
    ULONG LastShrinkHiveSize;                                               //0x6f8
    union _LARGE_INTEGER ActualFileSize;                                    //0x700
    union _LARGE_INTEGER LogFileSizes[2];                                   //0x708
    struct _UNICODE_STRING FileFullPath;                                    //0x718
    struct _UNICODE_STRING FileUserName;                                    //0x728
    struct _UNICODE_STRING HiveRootPath;                                    //0x738
    ULONG SecurityCount;                                                    //0x748
    ULONG SecurityCacheSize;                                                //0x74c
    LONG SecurityHitHint;                                                   //0x750
    struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;                     //0x758
    struct _LIST_ENTRY SecurityHash[64];                                    //0x760
    ULONG UnloadEventCount;                                                 //0xb60
    struct _KEVENT** UnloadEventArray;                                      //0xb68
    struct _CM_KEY_CONTROL_BLOCK* RootKcb;                                  //0xb70
    UCHAR Frozen;                                                           //0xb78
    struct _CM_WORKITEM* UnloadWorkItem;                                    //0xb80
    struct _CM_WORKITEM UnloadWorkItemHolder;                               //0xb88
    struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;                             //0xbb0
    ULONG Flags;                                                            //0x1038
    struct _LIST_ENTRY TrustClassEntry;                                     //0x1040
    ULONGLONG DirtyTime;                                                    //0x1050
    ULONGLONG UnreconciledTime;                                             //0x1058
    struct _CM_RM* CmRm;                                                    //0x1060
    ULONG CmRmInitFailPoint;                                                //0x1068
    LONG CmRmInitFailStatus;                                                //0x106c
    struct _KTHREAD* CreatorOwner;                                          //0x1070
    struct _KTHREAD* RundownThread;                                         //0x1078
    union _LARGE_INTEGER LastWriteTime;                                     //0x1080
    struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;                               //0x1088
    struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;                           //0x1098
    union
    {
        ULONG FlushFlags;                                                   //0x10a8
        struct
        {
            ULONG PrimaryFilePurged:1;                                      //0x10a8
            ULONG DiskFileBad:1;                                            //0x10a8
        };
    };
    ULONG PrimaryFileSizeBeforeLastFlush;                                   //0x10ac
    volatile LONG ReferenceCount;                                           //0x10b0
    LONG UnloadHistoryIndex;                                                //0x10b4
    ULONG UnloadHistory[128];                                               //0x10b8
    ULONG BootStart;                                                        //0x12b8
    ULONG UnaccessedStart;                                                  //0x12bc
    ULONG UnaccessedEnd;                                                    //0x12c0
    ULONG LoadedKeyCount;                                                   //0x12c4
    volatile ULONG HandleClosePending;                                      //0x12c8
    struct _EX_PUSH_LOCK HandleClosePendingEvent;                           //0x12d0
    UCHAR FinalFlushSucceeded;                                              //0x12d8
    struct _CMP_VOLUME_CONTEXT* VolumeContext;                              //0x12e0
}; 

----------------------------------------
Structure: _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT

//0x20 bytes (sizeof)
struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
{
    struct _CM_KEY_CONTROL_BLOCK* BaseKcb;                                  //0x0
    LONG PrepareStatus;                                                     //0x8
    struct _LIST_ENTRY ClonedKcbListHead;                                   //0x10
}; 

----------------------------------------
Structure: _CMP_VOLUME_CONTEXT

//0x48 bytes (sizeof)
struct _CMP_VOLUME_CONTEXT
{
    struct _LIST_ENTRY VolumeContextListEntry;                              //0x0
    struct _CMP_VOLUME_MANAGER* VolumeManager;                              //0x10
    LONGLONG RefCount;                                                      //0x18
    struct _GUID VolumeGuid;                                                //0x20
    VOID* VolumeFileObject;                                                 //0x30
    struct _CMSI_RW_LOCK VolumeContextLock;                                 //0x38
    UCHAR DeviceUsageNotificationSent;                                      //0x40
}; 

----------------------------------------
Structure: _CMP_VOLUME_MANAGER

//0x18 bytes (sizeof)
struct _CMP_VOLUME_MANAGER
{
    struct _CMSI_RW_LOCK VolumeContextListLock;                             //0x0
    struct _LIST_ENTRY VolumeContextListHead;                               //0x8
}; 

----------------------------------------
Structure: _CMSI_PROCESS_TUPLE

//0x10 bytes (sizeof)
struct _CMSI_PROCESS_TUPLE
{
    VOID* ProcessHandle;                                                    //0x0
    VOID* ProcessReference;                                                 //0x8
}; 

----------------------------------------
Structure: _CMSI_RW_LOCK

//0x8 bytes (sizeof)
struct _CMSI_RW_LOCK
{
    VOID* Reserved;                                                         //0x0
}; 

----------------------------------------
Structure: _CM_BIG_DATA

//0x8 bytes (sizeof)
struct _CM_BIG_DATA
{
    USHORT Signature;                                                       //0x0
    USHORT Count;                                                           //0x2
    ULONG List;                                                             //0x4
}; 

----------------------------------------
Structure: _CM_COMPONENT_HASH

//0x4 bytes (sizeof)
struct _CM_COMPONENT_HASH
{
    ULONG Hash;                                                             //0x0
}; 

----------------------------------------
Structure: _CM_DIRTY_VECTOR_LOG

//0x488 bytes (sizeof)
struct _CM_DIRTY_VECTOR_LOG
{
    volatile ULONG Next;                                                    //0x0
    ULONG Size;                                                             //0x4
    struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];                              //0x8
}; 

----------------------------------------
Structure: _CM_DIRTY_VECTOR_LOG_ENTRY

//0x48 bytes (sizeof)
struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
    struct _ETHREAD* Thread;                                                //0x0
    enum _CM_DIRTY_VECTOR_OPERATION Operation;                              //0x8
    union
    {
        struct
        {
            ULONG Start;                                                    //0xc
            ULONG Length;                                                   //0x10
        } DirtyVectorModifiedContext;                                       //0xc
        struct
        {
            ULONG RangeCount;                                               //0xc
            ULONG SetBitCount;                                              //0x10
        } DirtyDataCaptureContext;                                          //0xc
        struct
        {
            ULONG Context1;                                                 //0xc
            ULONG Context2;                                                 //0x10
        } Raw;                                                              //0xc
    } Data;                                                                 //0xc
    VOID* Stack[6];                                                         //0x18
}; 

----------------------------------------
Structure: _CM_FAST_LEAF_HINT

//0x4 bytes (sizeof)
struct _CM_FAST_LEAF_HINT
{
    union
    {
        UCHAR Characters[4];                                                //0x0
        ULONG FullHint;                                                     //0x0
    };
}; 

----------------------------------------
Structure: _CM_FULL_RESOURCE_DESCRIPTOR

//0x24 bytes (sizeof)
struct _CM_FULL_RESOURCE_DESCRIPTOR
{
    enum _INTERFACE_TYPE InterfaceType;                                     //0x0
    ULONG BusNumber;                                                        //0x4
    struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;                   //0x8
}; 

----------------------------------------
Structure: _CM_INDEX

//0x8 bytes (sizeof)
struct _CM_INDEX
{
    ULONG Cell;                                                             //0x0
    union
    {
        struct _CM_FAST_LEAF_HINT NameHint;                                 //0x4
        struct _CM_COMPONENT_HASH HashKey;                                  //0x4
    };
}; 

----------------------------------------
Structure: _CM_INDEX_HINT_BLOCK

//0x8 bytes (sizeof)
struct _CM_INDEX_HINT_BLOCK
{
    ULONG Count;                                                            //0x0
    ULONG HashKey[1];                                                       //0x4
}; 

----------------------------------------
Structure: _CM_INTENT_LOCK

//0x10 bytes (sizeof)
struct _CM_INTENT_LOCK
{
    ULONG OwnerCount;                                                       //0x0
    struct _CM_KCB_UOW** OwnerTable;                                        //0x8
}; 

----------------------------------------
Structure: _CM_KCB_LAYER_INFO

//0x30 bytes (sizeof)
struct _CM_KCB_LAYER_INFO
{
    struct _LIST_ENTRY LayerListEntry;                                      //0x0
    struct _CM_KEY_CONTROL_BLOCK* Kcb;                                      //0x10
    struct _CM_KCB_LAYER_INFO* LowerLayer;                                  //0x18
    struct _LIST_ENTRY UpperLayerListHead;                                  //0x20
}; 

----------------------------------------
Structure: _CM_KCB_UOW

//0x78 bytes (sizeof)
struct _CM_KCB_UOW
{
    struct _LIST_ENTRY TransactionListEntry;                                //0x0
    struct _CM_INTENT_LOCK* KCBLock;                                        //0x10
    struct _CM_INTENT_LOCK* KeyLock;                                        //0x18
    struct _LIST_ENTRY KCBListEntry;                                        //0x20
    struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                          //0x30
    struct _CM_TRANS* Transaction;                                          //0x38
    ULONG UoWState;                                                         //0x40
    enum UoWActionType ActionType;                                          //0x44
    enum HSTORAGE_TYPE StorageType;                                         //0x48
    struct _CM_KCB_UOW* ParentUoW;                                          //0x50
    union
    {
        struct _CM_KEY_CONTROL_BLOCK* ChildKCB;                             //0x58
        ULONG VolatileKeyCell;                                              //0x58
        struct
        {
            ULONG OldValueCell;                                             //0x58
            ULONG NewValueCell;                                             //0x5c
        };
        ULONG UserFlags;                                                    //0x58
        union _LARGE_INTEGER LastWriteTime;                                 //0x58
        struct
        {
            struct _CM_KEY_SECURITY_CACHE* TxCachedSecurity;                //0x58
            ULONG TxSecurityCell;                                           //0x60
        };
        struct
        {
            struct _CM_KEY_CONTROL_BLOCK* OldChildKCB;                      //0x58
            struct _CM_KEY_CONTROL_BLOCK* NewChildKCB;                      //0x60
        };
        struct
        {
            struct _CM_KEY_CONTROL_BLOCK* OtherChildKCB;                    //0x58
            ULONG ThisVolatileKeyCell;                                      //0x60
        };
    };
    union
    {
        VOID* PrepareDataPointer;                                           //0x68
        struct _CM_UOW_SET_SD_DATA* SecurityData;                           //0x68
        struct _CM_UOW_KEY_STATE_MODIFICATION* ModifyKeysData;              //0x68
        struct _CM_UOW_SET_VALUE_LIST_DATA* SetValueData;                   //0x68
    };
    union
    {
        struct _CM_UOW_SET_VALUE_KEY_DATA* ValueData;                       //0x70
        struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT* DiscardReplaceContext; //0x70
    };
}; 

----------------------------------------
Structure: _CM_KEY_BODY

//0x68 bytes (sizeof)
struct _CM_KEY_BODY
{
    ULONG Type;                                                             //0x0
    struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                          //0x8
    struct _CM_NOTIFY_BLOCK* NotifyBlock;                                   //0x10
    VOID* ProcessID;                                                        //0x18
    struct _LIST_ENTRY KeyBodyList;                                         //0x20
    ULONG Flags:16;                                                         //0x30
    ULONG HandleTags:16;                                                    //0x30
    union _CM_TRANS_PTR Trans;                                              //0x38
    struct _GUID* KtmUow;                                                   //0x40
    struct _LIST_ENTRY ContextListHead;                                     //0x48
    VOID* EnumerationResumeContext;                                         //0x58
    ULONG RestrictedAccessMask;                                             //0x60
}; 

----------------------------------------
Structure: _CM_KEY_CONTROL_BLOCK

//0x138 bytes (sizeof)
struct _CM_KEY_CONTROL_BLOCK
{
    ULONGLONG RefCount;                                                     //0x0
    ULONG ExtFlags:16;                                                      //0x8
    ULONG Freed:1;                                                          //0x8
    ULONG Discarded:1;                                                      //0x8
    ULONG HiveUnloaded:1;                                                   //0x8
    ULONG Decommissioned:1;                                                 //0x8
    ULONG SpareExtFlag:1;                                                   //0x8
    ULONG TotalLevels:10;                                                   //0x8
    union
    {
        struct _CM_KEY_HASH KeyHash;                                        //0x10
        struct
        {
            struct _CM_PATH_HASH ConvKey;                                   //0x10
            struct _CM_KEY_HASH* NextHash;                                  //0x18
            struct _HHIVE* KeyHive;                                         //0x20
            ULONG KeyCell;                                                  //0x28
        };
    };
    struct _EX_PUSH_LOCK KcbPushlock;                                       //0x30
    union
    {
        struct _KTHREAD* Owner;                                             //0x38
        LONG SharedCount;                                                   //0x38
    };
    UCHAR DelayedDeref:1;                                                   //0x40
    UCHAR DelayedClose:1;                                                   //0x40
    UCHAR Parking:1;                                                        //0x40
    UCHAR LayerSemantics;                                                   //0x41
    SHORT LayerHeight;                                                      //0x42
    ULONG Spare1;                                                           //0x44
    struct _CM_KEY_CONTROL_BLOCK* ParentKcb;                                //0x48
    struct _CM_NAME_CONTROL_BLOCK* NameBlock;                               //0x50
    struct _CM_KEY_SECURITY_CACHE* CachedSecurity;                          //0x58
    struct _CHILD_LIST ValueList;                                           //0x60
    struct _CM_KEY_CONTROL_BLOCK* LinkTarget;                               //0x68
    union
    {
        struct _CM_INDEX_HINT_BLOCK* IndexHint;                             //0x70
        ULONG HashKey;                                                      //0x70
        ULONG SubKeyCount;                                                  //0x70
    };
    union
    {
        struct _LIST_ENTRY KeyBodyListHead;                                 //0x78
        struct _LIST_ENTRY ClonedListEntry;                                 //0x78
    };
    struct _CM_KEY_BODY* KeyBodyArray[4];                                   //0x88
    union _LARGE_INTEGER KcbLastWriteTime;                                  //0xa8
    USHORT KcbMaxNameLen;                                                   //0xb0
    USHORT KcbMaxValueNameLen;                                              //0xb2
    ULONG KcbMaxValueDataLen;                                               //0xb4
    ULONG KcbUserFlags:4;                                                   //0xb8
    ULONG KcbVirtControlFlags:4;                                            //0xb8
    ULONG KcbDebug:8;                                                       //0xb8
    ULONG Flags:16;                                                         //0xb8
    ULONG Spare3;                                                           //0xbc
    struct _CM_KCB_LAYER_INFO* LayerInfo;                                   //0xc0
    CHAR* RealKeyName;                                                      //0xc8
    struct _LIST_ENTRY KCBUoWListHead;                                      //0xd0
    union
    {
        struct _LIST_ENTRY DelayQueueEntry;                                 //0xe0
        volatile UCHAR* Stolen;                                             //0xe0
    };
    struct _CM_TRANS* TransKCBOwner;                                        //0xf0
    struct _CM_INTENT_LOCK KCBLock;                                         //0xf8
    struct _CM_INTENT_LOCK KeyLock;                                         //0x108
    struct _CHILD_LIST TransValueCache;                                     //0x118
    struct _CM_TRANS* TransValueListOwner;                                  //0x120
    union
    {
        struct _UNICODE_STRING* FullKCBName;                                //0x128
        struct
        {
            ULONGLONG FullKCBNameStale:1;                                   //0x128
            ULONGLONG Reserved:63;                                          //0x128
        };
    };
    ULONGLONG SequenceNumber;                                               //0x130
}; 

----------------------------------------
Structure: _CM_KEY_HASH

//0x20 bytes (sizeof)
struct _CM_KEY_HASH
{
    struct _CM_PATH_HASH ConvKey;                                           //0x0
    struct _CM_KEY_HASH* NextHash;                                          //0x8
    struct _HHIVE* KeyHive;                                                 //0x10
    ULONG KeyCell;                                                          //0x18
}; 

----------------------------------------
Structure: _CM_KEY_HASH_TABLE_ENTRY

//0x18 bytes (sizeof)
struct _CM_KEY_HASH_TABLE_ENTRY
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    struct _KTHREAD* Owner;                                                 //0x8
    struct _CM_KEY_HASH* Entry;                                             //0x10
}; 

----------------------------------------
Structure: _CM_KEY_INDEX

//0x8 bytes (sizeof)
struct _CM_KEY_INDEX
{
    USHORT Signature;                                                       //0x0
    USHORT Count;                                                           //0x2
    ULONG List[1];                                                          //0x4
}; 

----------------------------------------
Structure: _CM_KEY_NODE

//0x50 bytes (sizeof)
struct _CM_KEY_NODE
{
    USHORT Signature;                                                       //0x0
    USHORT Flags;                                                           //0x2
    union _LARGE_INTEGER LastWriteTime;                                     //0x4
    UCHAR AccessBits;                                                       //0xc
    UCHAR LayerSemantics:2;                                                 //0xd
    UCHAR Spare1:5;                                                         //0xd
    UCHAR InheritClass:1;                                                   //0xd
    USHORT Spare2;                                                          //0xe
    ULONG Parent;                                                           //0x10
    ULONG SubKeyCounts[2];                                                  //0x14
    union
    {
        struct
        {
            ULONG SubKeyLists[2];                                           //0x1c
            struct _CHILD_LIST ValueList;                                   //0x24
        };
        struct _CM_KEY_REFERENCE ChildHiveReference;                        //0x1c
    };
    ULONG Security;                                                         //0x2c
    ULONG Class;                                                            //0x30
    ULONG MaxNameLen:16;                                                    //0x34
    ULONG UserFlags:4;                                                      //0x34
    ULONG VirtControlFlags:4;                                               //0x34
    ULONG Debug:8;                                                          //0x34
    ULONG MaxClassLen;                                                      //0x38
    ULONG MaxValueNameLen;                                                  //0x3c
    ULONG MaxValueDataLen;                                                  //0x40
    ULONG WorkVar;                                                          //0x44
    USHORT NameLength;                                                      //0x48
    USHORT ClassLength;                                                     //0x4a
    WCHAR Name[1];                                                          //0x4c
}; 

----------------------------------------
Structure: _CM_KEY_REFERENCE

//0x10 bytes (sizeof)
struct _CM_KEY_REFERENCE
{
    ULONG KeyCell;                                                          //0x0
    struct _HHIVE* KeyHive;                                                 //0x8
}; 

----------------------------------------
Structure: _CM_KEY_SECURITY

//0x28 bytes (sizeof)
struct _CM_KEY_SECURITY
{
    USHORT Signature;                                                       //0x0
    USHORT Reserved;                                                        //0x2
    ULONG Flink;                                                            //0x4
    ULONG Blink;                                                            //0x8
    ULONG ReferenceCount;                                                   //0xc
    ULONG DescriptorLength;                                                 //0x10
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;                        //0x14
}; 

----------------------------------------
Structure: _CM_KEY_SECURITY_CACHE

//0x38 bytes (sizeof)
struct _CM_KEY_SECURITY_CACHE
{
    ULONG Cell;                                                             //0x0
    ULONG ConvKey;                                                          //0x4
    struct _LIST_ENTRY List;                                                //0x8
    ULONG DescriptorLength;                                                 //0x18
    ULONG RealRefCount;                                                     //0x1c
    struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;                        //0x20
}; 

----------------------------------------
Structure: _CM_KEY_SECURITY_CACHE_ENTRY

//0x10 bytes (sizeof)
struct _CM_KEY_SECURITY_CACHE_ENTRY
{
    ULONG Cell;                                                             //0x0
    struct _CM_KEY_SECURITY_CACHE* CachedSecurity;                          //0x8
}; 

----------------------------------------
Structure: _CM_KEY_VALUE

//0x18 bytes (sizeof)
struct _CM_KEY_VALUE
{
    USHORT Signature;                                                       //0x0
    USHORT NameLength;                                                      //0x2
    ULONG DataLength;                                                       //0x4
    ULONG Data;                                                             //0x8
    ULONG Type;                                                             //0xc
    USHORT Flags;                                                           //0x10
    USHORT Spare;                                                           //0x12
    WCHAR Name[1];                                                          //0x14
}; 

----------------------------------------
Structure: _CM_NAME_CONTROL_BLOCK

//0x20 bytes (sizeof)
struct _CM_NAME_CONTROL_BLOCK
{
    ULONG Compressed:1;                                                     //0x0
    ULONG RefCount:31;                                                      //0x0
    union
    {
        struct _CM_NAME_HASH NameHash;                                      //0x8
        struct
        {
            struct _CM_COMPONENT_HASH ConvKey;                              //0x8
            struct _CM_KEY_HASH* NextHash;                                  //0x10
            USHORT NameLength;                                              //0x18
            WCHAR Name[1];                                                  //0x1a
        };
    };
}; 

----------------------------------------
Structure: _CM_NAME_HASH

//0x18 bytes (sizeof)
struct _CM_NAME_HASH
{
    struct _CM_COMPONENT_HASH ConvKey;                                      //0x0
    struct _CM_NAME_HASH* NextHash;                                         //0x8
    USHORT NameLength;                                                      //0x10
    WCHAR Name[1];                                                          //0x12
}; 

----------------------------------------
Structure: _CM_NOTIFY_BLOCK

//0x58 bytes (sizeof)
struct _CM_NOTIFY_BLOCK
{
    struct _LIST_ENTRY HiveList;                                            //0x0
    struct _LIST_ENTRY PostList;                                            //0x10
    struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                          //0x20
    struct _CM_KEY_BODY* KeyBody;                                           //0x28
    ULONG Filter:30;                                                        //0x30
    ULONG WatchTree:1;                                                      //0x30
    ULONG NotifyPending:1;                                                  //0x30
    struct _SECURITY_SUBJECT_CONTEXT SubjectContext;                        //0x38
}; 

----------------------------------------
Structure: _CM_PARSE_DEBUG_INFO

//0x50 bytes (sizeof)
struct _CM_PARSE_DEBUG_INFO
{
    struct _CM_KEY_CONTROL_BLOCK* SymlinkCachedKcb;                         //0x0
    struct _CM_KEY_CONTROL_BLOCK* StartingKcb;                              //0x8
    struct _CM_KEY_CONTROL_BLOCK* KcbCacheResult;                           //0x10
    struct _CM_KEY_CONTROL_BLOCK* WalkResult;                               //0x18
    struct _CM_KEY_CONTROL_BLOCK* DeepestKcbFound;                          //0x20
    UCHAR KcbCacheLevels;                                                   //0x28
    UCHAR WalkLevels;                                                       //0x29
    UCHAR FailureCount;                                                     //0x2a
    struct
    {
        LONG Status;                                                        //0x2c
        ULONG Point;                                                        //0x30
    } FailurePoints[4];                                                     //0x2c
}; 

----------------------------------------
Structure: _CM_PARTIAL_RESOURCE_DESCRIPTOR

//0x14 bytes (sizeof)
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR ShareDisposition;                                                 //0x1
    USHORT Flags;                                                           //0x2
    union
    {
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Generic;                                                          //0x4
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Port;                                                             //0x4
        struct
        {
            USHORT Level;                                                   //0x4
            USHORT Group;                                                   //0x6
            ULONG Vector;                                                   //0x8
            ULONGLONG Affinity;                                             //0xc
        } Interrupt;                                                        //0x4
        struct
        {
            union
            {
                struct
                {
                    USHORT Group;                                           //0x4
                    USHORT MessageCount;                                    //0x6
                    ULONG Vector;                                           //0x8
                    ULONGLONG Affinity;                                     //0xc
                } Raw;                                                      //0x4
                struct
                {
                    USHORT Level;                                           //0x4
                    USHORT Group;                                           //0x6
                    ULONG Vector;                                           //0x8
                    ULONGLONG Affinity;                                     //0xc
                } Translated;                                               //0x4
            };
        } MessageInterrupt;                                                 //0x4
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length;                                                   //0xc
        } Memory;                                                           //0x4
        struct
        {
            ULONG Channel;                                                  //0x4
            ULONG Port;                                                     //0x8
            ULONG Reserved1;                                                //0xc
        } Dma;                                                              //0x4
        struct
        {
            ULONG Channel;                                                  //0x4
            ULONG RequestLine;                                              //0x8
            UCHAR TransferWidth;                                            //0xc
            UCHAR Reserved1;                                                //0xd
            UCHAR Reserved2;                                                //0xe
            UCHAR Reserved3;                                                //0xf
        } DmaV3;                                                            //0x4
        struct
        {
            ULONG Data[3];                                                  //0x4
        } DevicePrivate;                                                    //0x4
        struct
        {
            ULONG Start;                                                    //0x4
            ULONG Length;                                                   //0x8
            ULONG Reserved;                                                 //0xc
        } BusNumber;                                                        //0x4
        struct
        {
            ULONG DataSize;                                                 //0x4
            ULONG Reserved1;                                                //0x8
            ULONG Reserved2;                                                //0xc
        } DeviceSpecificData;                                               //0x4
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length40;                                                 //0xc
        } Memory40;                                                         //0x4
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length48;                                                 //0xc
        } Memory48;                                                         //0x4
        struct
        {
            union _LARGE_INTEGER Start;                                     //0x4
            ULONG Length64;                                                 //0xc
        } Memory64;                                                         //0x4
        struct
        {
            UCHAR Class;                                                    //0x4
            UCHAR Type;                                                     //0x5
            UCHAR Reserved1;                                                //0x6
            UCHAR Reserved2;                                                //0x7
            ULONG IdLowPart;                                                //0x8
            ULONG IdHighPart;                                               //0xc
        } Connection;                                                       //0x4
    } u;                                                                    //0x4
}; 

----------------------------------------
Structure: _CM_PARTIAL_RESOURCE_LIST

//0x1c bytes (sizeof)
struct _CM_PARTIAL_RESOURCE_LIST
{
    USHORT Version;                                                         //0x0
    USHORT Revision;                                                        //0x2
    ULONG Count;                                                            //0x4
    struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];           //0x8
}; 

----------------------------------------
Structure: _CM_PATH_HASH

//0x4 bytes (sizeof)
struct _CM_PATH_HASH
{
    ULONG Hash;                                                             //0x0
}; 

----------------------------------------
Structure: _CM_RESOURCE_LIST

//0x28 bytes (sizeof)
struct _CM_RESOURCE_LIST
{
    ULONG Count;                                                            //0x0
    struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];                            //0x4
}; 

----------------------------------------
Structure: _CM_RM

//0x88 bytes (sizeof)
struct _CM_RM
{
    struct _LIST_ENTRY RmListEntry;                                         //0x0
    struct _LIST_ENTRY TransactionListHead;                                 //0x10
    VOID* TmHandle;                                                         //0x20
    VOID* Tm;                                                               //0x28
    VOID* RmHandle;                                                         //0x30
    VOID* KtmRm;                                                            //0x38
    ULONG RefCount;                                                         //0x40
    ULONG ContainerNum;                                                     //0x44
    ULONGLONG ContainerSize;                                                //0x48
    struct _CMHIVE* CmHive;                                                 //0x50
    VOID* LogFileObject;                                                    //0x58
    VOID* MarshallingContext;                                               //0x60
    ULONG RmFlags;                                                          //0x68
    LONG LogStartStatus1;                                                   //0x6c
    LONG LogStartStatus2;                                                   //0x70
    ULONGLONG BaseLsn;                                                      //0x78
    struct _ERESOURCE* RmLock;                                              //0x80
}; 

----------------------------------------
Structure: _CM_TRANS

//0xb8 bytes (sizeof)
struct _CM_TRANS
{
    struct _LIST_ENTRY TransactionListEntry;                                //0x0
    struct _LIST_ENTRY KCBUoWListHead;                                      //0x10
    struct _LIST_ENTRY LazyCommitListEntry;                                 //0x20
    union
    {
        struct
        {
            ULONG Prepared:1;                                               //0x30
            ULONG Aborted:1;                                                //0x30
            ULONG Committed:1;                                              //0x30
            ULONG Initializing:1;                                           //0x30
            ULONG Invalid:1;                                                //0x30
            ULONG UseReservation:1;                                         //0x30
            ULONG TmCallbacksActive:1;                                      //0x30
            ULONG LightWeight:1;                                            //0x30
            ULONG Freed1:1;                                                 //0x30
            ULONG Freed2:1;                                                 //0x30
            ULONG Spare1:2;                                                 //0x30
            ULONG Freed:1;                                                  //0x30
            ULONG Spare:19;                                                 //0x30
        };
        ULONG TransState;                                                   //0x30
    };
    union _CM_TRANS_PTR Trans;                                              //0x38
    struct _CM_RM* CmRm;                                                    //0x40
    struct _KENLISTMENT* KtmEnlistmentObject;                               //0x48
    VOID* KtmEnlistmentHandle;                                              //0x50
    struct _GUID KtmUow;                                                    //0x58
    ULONGLONG StartLsn;                                                     //0x68
    ULONG HiveCount;                                                        //0x70
    struct _CMHIVE* HiveArray[8];                                           //0x78
}; 

----------------------------------------
Structure: _CM_UOW_KEY_STATE_MODIFICATION

//0x14 bytes (sizeof)
struct _CM_UOW_KEY_STATE_MODIFICATION
{
    ULONG RefCount;                                                         //0x0
    ULONG SubKeyListCount[2];                                               //0x4
    ULONG NewSubKeyList[2];                                                 //0xc
}; 

----------------------------------------
Structure: _CM_UOW_SET_SD_DATA

//0x10 bytes (sizeof)
struct _CM_UOW_SET_SD_DATA
{
    ULONG SecurityCell;                                                     //0x0
    struct _HHIVE* Hive;                                                    //0x8
}; 

----------------------------------------
Structure: _CM_UOW_SET_VALUE_KEY_DATA

//0x10 bytes (sizeof)
struct _CM_UOW_SET_VALUE_KEY_DATA
{
    ULONG PreparedCell;                                                     //0x0
    ULONG OldValueCell;                                                     //0x4
    USHORT NameLength;                                                      //0x8
    ULONG DataSize;                                                         //0xc
}; 

----------------------------------------
Structure: _CM_UOW_SET_VALUE_LIST_DATA

//0xc bytes (sizeof)
struct _CM_UOW_SET_VALUE_LIST_DATA
{
    ULONG RefCount;                                                         //0x0
    struct _CHILD_LIST ValueList;                                           //0x4
}; 

----------------------------------------
Structure: _CM_WORKITEM

//0x28 bytes (sizeof)
struct _CM_WORKITEM
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG Private;                                                          //0x10
    VOID (*WorkerRoutine)(VOID* arg1);                                      //0x18
    VOID* Parameter;                                                        //0x20
}; 

----------------------------------------
Structure: _COMPRESSED_DATA_INFO

//0xc bytes (sizeof)
struct _COMPRESSED_DATA_INFO
{
    USHORT CompressionFormatAndEngine;                                      //0x0
    UCHAR CompressionUnitShift;                                             //0x2
    UCHAR ChunkShift;                                                       //0x3
    UCHAR ClusterShift;                                                     //0x4
    UCHAR Reserved;                                                         //0x5
    USHORT NumberOfChunks;                                                  //0x6
    ULONG CompressedChunkSizes[1];                                          //0x8
}; 

----------------------------------------
Structure: _CONFIGURATION_COMPONENT

//0x28 bytes (sizeof)
struct _CONFIGURATION_COMPONENT
{
    enum _CONFIGURATION_CLASS Class;                                        //0x0
    enum _CONFIGURATION_TYPE Type;                                          //0x4
    struct _DEVICE_FLAGS Flags;                                             //0x8
    USHORT Version;                                                         //0xc
    USHORT Revision;                                                        //0xe
    ULONG Key;                                                              //0x10
    union
    {
        ULONG AffinityMask;                                                 //0x14
        struct
        {
            USHORT Group;                                                   //0x14
            USHORT GroupIndex;                                              //0x16
        };
    };
    ULONG ConfigurationDataLength;                                          //0x18
    ULONG IdentifierLength;                                                 //0x1c
    CHAR* Identifier;                                                       //0x20
}; 

----------------------------------------
Structure: _CONFIGURATION_COMPONENT_DATA

//0x48 bytes (sizeof)
struct _CONFIGURATION_COMPONENT_DATA
{
    struct _CONFIGURATION_COMPONENT_DATA* Parent;                           //0x0
    struct _CONFIGURATION_COMPONENT_DATA* Child;                            //0x8
    struct _CONFIGURATION_COMPONENT_DATA* Sibling;                          //0x10
    struct _CONFIGURATION_COMPONENT ComponentEntry;                         //0x18
    VOID* ConfigurationData;                                                //0x40
}; 

----------------------------------------
Structure: _CONTEXT

//0x4d0 bytes (sizeof)
struct _CONTEXT
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5Home;                                                       //0x20
    ULONGLONG P6Home;                                                       //0x28
    ULONG ContextFlags;                                                     //0x30
    ULONG MxCsr;                                                            //0x34
    USHORT SegCs;                                                           //0x38
    USHORT SegDs;                                                           //0x3a
    USHORT SegEs;                                                           //0x3c
    USHORT SegFs;                                                           //0x3e
    USHORT SegGs;                                                           //0x40
    USHORT SegSs;                                                           //0x42
    ULONG EFlags;                                                           //0x44
    ULONGLONG Dr0;                                                          //0x48
    ULONGLONG Dr1;                                                          //0x50
    ULONGLONG Dr2;                                                          //0x58
    ULONGLONG Dr3;                                                          //0x60
    ULONGLONG Dr6;                                                          //0x68
    ULONGLONG Dr7;                                                          //0x70
    ULONGLONG Rax;                                                          //0x78
    ULONGLONG Rcx;                                                          //0x80
    ULONGLONG Rdx;                                                          //0x88
    ULONGLONG Rbx;                                                          //0x90
    ULONGLONG Rsp;                                                          //0x98
    ULONGLONG Rbp;                                                          //0xa0
    ULONGLONG Rsi;                                                          //0xa8
    ULONGLONG Rdi;                                                          //0xb0
    ULONGLONG R8;                                                           //0xb8
    ULONGLONG R9;                                                           //0xc0
    ULONGLONG R10;                                                          //0xc8
    ULONGLONG R11;                                                          //0xd0
    ULONGLONG R12;                                                          //0xd8
    ULONGLONG R13;                                                          //0xe0
    ULONGLONG R14;                                                          //0xe8
    ULONGLONG R15;                                                          //0xf0
    ULONGLONG Rip;                                                          //0xf8
    union
    {
        struct _XSAVE_FORMAT FltSave;                                       //0x100
        struct
        {
            struct _M128A Header[2];                                        //0x100
            struct _M128A Legacy[8];                                        //0x120
            struct _M128A Xmm0;                                             //0x1a0
            struct _M128A Xmm1;                                             //0x1b0
            struct _M128A Xmm2;                                             //0x1c0
            struct _M128A Xmm3;                                             //0x1d0
            struct _M128A Xmm4;                                             //0x1e0
            struct _M128A Xmm5;                                             //0x1f0
            struct _M128A Xmm6;                                             //0x200
            struct _M128A Xmm7;                                             //0x210
            struct _M128A Xmm8;                                             //0x220
            struct _M128A Xmm9;                                             //0x230
            struct _M128A Xmm10;                                            //0x240
            struct _M128A Xmm11;                                            //0x250
            struct _M128A Xmm12;                                            //0x260
            struct _M128A Xmm13;                                            //0x270
            struct _M128A Xmm14;                                            //0x280
            struct _M128A Xmm15;                                            //0x290
        };
    };
    struct _M128A VectorRegister[26];                                       //0x300
    ULONGLONG VectorControl;                                                //0x4a0
    ULONGLONG DebugControl;                                                 //0x4a8
    ULONGLONG LastBranchToRip;                                              //0x4b0
    ULONGLONG LastBranchFromRip;                                            //0x4b8
    ULONGLONG LastExceptionToRip;                                           //0x4c0
    ULONGLONG LastExceptionFromRip;                                         //0x4c8
}; 

----------------------------------------
Structure: _CONTROLLER_OBJECT

//0x48 bytes (sizeof)
struct _CONTROLLER_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    VOID* ControllerExtension;                                              //0x8
    struct _KDEVICE_QUEUE DeviceWaitQueue;                                  //0x10
    ULONG Spare1;                                                           //0x38
    union _LARGE_INTEGER Spare2;                                            //0x40
}; 

----------------------------------------
Structure: _CONTROL_AREA

//0x80 bytes (sizeof)
struct _CONTROL_AREA
{
    struct _SEGMENT* Segment;                                               //0x0
    union
    {
        struct _LIST_ENTRY ListHead;                                        //0x8
        VOID* AweContext;                                                   //0x8
    };
    ULONGLONG NumberOfSectionReferences;                                    //0x18
    ULONGLONG NumberOfPfnReferences;                                        //0x20
    ULONGLONG NumberOfMappedViews;                                          //0x28
    ULONGLONG NumberOfUserReferences;                                       //0x30
    union
    {
        ULONG LongFlags;                                                    //0x38
        struct _MMSECTION_FLAGS Flags;                                      //0x38
    } u;                                                                    //0x38
    union
    {
        ULONG LongFlags;                                                    //0x3c
        struct _MMSECTION_FLAGS2 Flags;                                     //0x3c
    } u1;                                                                   //0x3c
    struct _EX_FAST_REF FilePointer;                                        //0x40
    volatile LONG ControlAreaLock;                                          //0x48
    ULONG ModifiedWriteCount;                                               //0x4c
    struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;                           //0x50
    union
    {
        struct
        {
            union
            {
                ULONG NumberOfSystemCacheViews;                             //0x58
                ULONG ImageRelocationStartBit;                              //0x58
            };
            union
            {
                volatile LONG WritableUserReferences;                       //0x5c
                struct
                {
                    ULONG ImageRelocationSizeIn64k:16;                      //0x5c
                    ULONG SystemImage:1;                                    //0x5c
                    ULONG CantMove:1;                                       //0x5c
                    ULONG StrongCode:2;                                     //0x5c
                    ULONG BitMap:2;                                         //0x5c
                    ULONG ImageActive:1;                                    //0x5c
                    ULONG ImageBaseOkToReuse:1;                             //0x5c
                };
            };
            union
            {
                ULONG FlushInProgressCount;                                 //0x60
                ULONG NumberOfSubsections;                                  //0x60
                struct _MI_IMAGE_SECURITY_REFERENCE* SeImageStub;           //0x60
            };
        } e2;                                                               //0x58
    } u2;                                                                   //0x58
    struct _EX_PUSH_LOCK FileObjectLock;                                    //0x68
    volatile ULONGLONG LockedPages;                                         //0x70
    union
    {
        ULONGLONG IoAttributionContext:61;                                  //0x78
        ULONGLONG Spare:3;                                                  //0x78
        ULONGLONG ImageCrossPartitionCharge;                                //0x78
        ULONGLONG CommittedPageCount:36;                                    //0x78
    } u3;                                                                   //0x78
}; 

----------------------------------------
Structure: _COPY_INFORMATIONnew

//0x10 bytes (sizeof)
struct _COPY_INFORMATION
{
    struct _FILE_OBJECT* SourceFileObject;                                  //0x0
    LONGLONG SourceFileOffset;                                              //0x8
}; 

----------------------------------------
Structure: _COUNTER_READING

//0x18 bytes (sizeof)
struct _COUNTER_READING
{
    enum _HARDWARE_COUNTER_TYPE Type;                                       //0x0
    ULONG Index;                                                            //0x4
    ULONGLONG Start;                                                        //0x8
    ULONGLONG Total;                                                        //0x10
}; 

----------------------------------------
Structure: _CRITICAL_PROCESS_EXCEPTION_DATA

//0x30 bytes (sizeof)
struct _CRITICAL_PROCESS_EXCEPTION_DATA
{
    struct _GUID ReportId;                                                  //0x0
    struct _UNICODE_STRING ModuleName;                                      //0x10
    ULONG ModuleTimestamp;                                                  //0x20
    ULONG ModuleSize;                                                       //0x24
    ULONGLONG Offset;                                                       //0x28
}; 

----------------------------------------
Structure: _CURDIR

//0x18 bytes (sizeof)
struct _CURDIR
{
    struct _UNICODE_STRING DosPath;                                         //0x0
    VOID* Handle;                                                           //0x10
}; 

----------------------------------------
Structure: _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG

//0x10 bytes (sizeof)
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
    ULONG Size;                                                             //0x0
    WCHAR* TriggerId;                                                       //0x8
}; 

----------------------------------------
Structure: _DBGKD_ANY_CONTROL_SET

//0x1c bytes (sizeof)
struct _DBGKD_ANY_CONTROL_SET
{
    union
    {
        struct _X86_DBGKD_CONTROL_SET X86ControlSet;                        //0x0
        ULONG AlphaControlSet;                                              //0x0
        struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;                      //0x0
        struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;                    //0x0
        struct _ARM_DBGKD_CONTROL_SET ArmControlSet;                        //0x0
        struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;                    //0x0
        struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;                    //0x0
        struct _PPC_DBGKD_CONTROL_SET PpcControlSet;                        //0x0
    };
}; 

----------------------------------------
Structure: _DBGKD_BREAKPOINTEX

//0x8 bytes (sizeof)
struct _DBGKD_BREAKPOINTEX
{
    ULONG BreakPointCount;                                                  //0x0
    LONG ContinueStatus;                                                    //0x4
}; 

----------------------------------------
Structure: _DBGKD_CONTEXT_EX

//0xc bytes (sizeof)
struct _DBGKD_CONTEXT_EX
{
    ULONG Offset;                                                           //0x0
    ULONG ByteCount;                                                        //0x4
    ULONG BytesCopied;                                                      //0x8
}; 

----------------------------------------
Structure: _DBGKD_CONTINUE

//0x4 bytes (sizeof)
struct _DBGKD_CONTINUE
{
    LONG ContinueStatus;                                                    //0x0
}; 

----------------------------------------
Structure: _DBGKD_CONTINUE2

//0x20 bytes (sizeof)
struct _DBGKD_CONTINUE2
{
    LONG ContinueStatus;                                                    //0x0
    union
    {
        struct _AMD64_DBGKD_CONTROL_SET ControlSet;                         //0x4
        struct _DBGKD_ANY_CONTROL_SET AnyControlSet;                        //0x4
    };
}; 

----------------------------------------
Structure: _DBGKD_FILL_MEMORY

//0x10 bytes (sizeof)
struct _DBGKD_FILL_MEMORY
{
    ULONGLONG Address;                                                      //0x0
    ULONG Length;                                                           //0x8
    USHORT Flags;                                                           //0xc
    USHORT PatternLength;                                                   //0xe
}; 

----------------------------------------
Structure: _DBGKD_GET_CONTEXT

//0x4 bytes (sizeof)
struct _DBGKD_GET_CONTEXT
{
    ULONG Unused;                                                           //0x0
}; 

----------------------------------------
Structure: _DBGKD_GET_INTERNAL_BREAKPOINT32

//0x1c bytes (sizeof)
struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
    ULONG BreakpointAddress;                                                //0x0
    ULONG Flags;                                                            //0x4
    ULONG Calls;                                                            //0x8
    ULONG MaxCallsPerPeriod;                                                //0xc
    ULONG MinInstructions;                                                  //0x10
    ULONG MaxInstructions;                                                  //0x14
    ULONG TotalInstructions;                                                //0x18
}; 

----------------------------------------
Structure: _DBGKD_GET_INTERNAL_BREAKPOINT64

//0x20 bytes (sizeof)
struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
    ULONGLONG BreakpointAddress;                                            //0x0
    ULONG Flags;                                                            //0x8
    ULONG Calls;                                                            //0xc
    ULONG MaxCallsPerPeriod;                                                //0x10
    ULONG MinInstructions;                                                  //0x14
    ULONG MaxInstructions;                                                  //0x18
    ULONG TotalInstructions;                                                //0x1c
}; 

----------------------------------------
Structure: _DBGKD_GET_SET_BUS_DATA

//0x14 bytes (sizeof)
struct _DBGKD_GET_SET_BUS_DATA
{
    ULONG BusDataType;                                                      //0x0
    ULONG BusNumber;                                                        //0x4
    ULONG SlotNumber;                                                       //0x8
    ULONG Offset;                                                           //0xc
    ULONG Length;                                                           //0x10
}; 

----------------------------------------
Structure: _DBGKD_GET_VERSION32

//0x28 bytes (sizeof)
struct _DBGKD_GET_VERSION32
{
    USHORT MajorVersion;                                                    //0x0
    USHORT MinorVersion;                                                    //0x2
    USHORT ProtocolVersion;                                                 //0x4
    USHORT Flags;                                                           //0x6
    ULONG KernBase;                                                         //0x8
    ULONG PsLoadedModuleList;                                               //0xc
    USHORT MachineType;                                                     //0x10
    USHORT ThCallbackStack;                                                 //0x12
    USHORT NextCallback;                                                    //0x14
    USHORT FramePointer;                                                    //0x16
    ULONG KiCallUserMode;                                                   //0x18
    ULONG KeUserCallbackDispatcher;                                         //0x1c
    ULONG BreakpointWithStatus;                                             //0x20
    ULONG DebuggerDataList;                                                 //0x24
}; 

----------------------------------------
Structure: _DBGKD_GET_VERSION64

//0x28 bytes (sizeof)
struct _DBGKD_GET_VERSION64
{
    USHORT MajorVersion;                                                    //0x0
    USHORT MinorVersion;                                                    //0x2
    UCHAR ProtocolVersion;                                                  //0x4
    UCHAR KdSecondaryVersion;                                               //0x5
    USHORT Flags;                                                           //0x6
    USHORT MachineType;                                                     //0x8
    UCHAR MaxPacketType;                                                    //0xa
    UCHAR MaxStateChange;                                                   //0xb
    UCHAR MaxManipulate;                                                    //0xc
    UCHAR Simulation;                                                       //0xd
    USHORT Unused[1];                                                       //0xe
    ULONGLONG KernBase;                                                     //0x10
    ULONGLONG PsLoadedModuleList;                                           //0x18
    ULONGLONG DebuggerDataList;                                             //0x20
}; 

----------------------------------------
Structure: _DBGKD_LOAD_SYMBOLS32

//0x18 bytes (sizeof)
struct _DBGKD_LOAD_SYMBOLS32
{
    ULONG PathNameLength;                                                   //0x0
    ULONG BaseOfDll;                                                        //0x4
    ULONG ProcessId;                                                        //0x8
    ULONG CheckSum;                                                         //0xc
    ULONG SizeOfImage;                                                      //0x10
    UCHAR UnloadSymbols;                                                    //0x14
}; 

----------------------------------------
Structure: _DBGKD_LOAD_SYMBOLS64

//0x28 bytes (sizeof)
struct _DBGKD_LOAD_SYMBOLS64
{
    ULONG PathNameLength;                                                   //0x0
    ULONGLONG BaseOfDll;                                                    //0x8
    ULONGLONG ProcessId;                                                    //0x10
    ULONG CheckSum;                                                         //0x18
    ULONG SizeOfImage;                                                      //0x1c
    UCHAR UnloadSymbols;                                                    //0x20
}; 

----------------------------------------
Structure: _DBGKD_MANIPULATE_STATE32

//0x34 bytes (sizeof)
struct _DBGKD_MANIPULATE_STATE32
{
    ULONG ApiNumber;                                                        //0x0
    USHORT ProcessorLevel;                                                  //0x4
    USHORT Processor;                                                       //0x6
    LONG ReturnStatus;                                                      //0x8
    union
    {
        struct _DBGKD_READ_MEMORY32 ReadMemory;                             //0xc
        struct _DBGKD_WRITE_MEMORY32 WriteMemory;                           //0xc
        struct _DBGKD_READ_MEMORY64 ReadMemory64;                           //0xc
        struct _DBGKD_WRITE_MEMORY64 WriteMemory64;                         //0xc
        struct _DBGKD_GET_CONTEXT GetContext;                               //0xc
        struct _DBGKD_SET_CONTEXT SetContext;                               //0xc
        struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;                   //0xc
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;                 //0xc
        struct _DBGKD_CONTINUE Continue;                                    //0xc
        struct _DBGKD_CONTINUE2 Continue2;                                  //0xc
        struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;                          //0xc
        struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;         //0xc
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;                //0xc
        struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;                    //0xc
        struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;      //0xc
        struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;      //0xc
        struct _DBGKD_GET_VERSION32 GetVersion32;                           //0xc
        struct _DBGKD_BREAKPOINTEX BreakPointEx;                            //0xc
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;                          //0xc
        struct _DBGKD_SEARCH_MEMORY SearchMemory;                           //0xc
        struct _DBGKD_CONTEXT_EX GetContextEx;                              //0xc
        struct _DBGKD_CONTEXT_EX SetContextEx;                              //0xc
    } u;                                                                    //0xc
}; 

----------------------------------------
Structure: _DBGKD_MANIPULATE_STATE64

//0x38 bytes (sizeof)
struct _DBGKD_MANIPULATE_STATE64
{
    ULONG ApiNumber;                                                        //0x0
    USHORT ProcessorLevel;                                                  //0x4
    USHORT Processor;                                                       //0x6
    LONG ReturnStatus;                                                      //0x8
    union
    {
        struct _DBGKD_READ_MEMORY64 ReadMemory;                             //0x10
        struct _DBGKD_WRITE_MEMORY64 WriteMemory;                           //0x10
        struct _DBGKD_GET_CONTEXT GetContext;                               //0x10
        struct _DBGKD_SET_CONTEXT SetContext;                               //0x10
        struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;                   //0x10
        struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;                 //0x10
        struct _DBGKD_CONTINUE Continue;                                    //0x10
        struct _DBGKD_CONTINUE2 Continue2;                                  //0x10
        struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;                          //0x10
        struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;         //0x10
        struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;                //0x10
        struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;                    //0x10
        struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;      //0x10
        struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;      //0x10
        struct _DBGKD_GET_VERSION64 GetVersion64;                           //0x10
        struct _DBGKD_BREAKPOINTEX BreakPointEx;                            //0x10
        struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;                          //0x10
        struct _DBGKD_SEARCH_MEMORY SearchMemory;                           //0x10
        struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;                       //0x10
        struct _DBGKD_FILL_MEMORY FillMemory;                               //0x10
        struct _DBGKD_QUERY_MEMORY QueryMemory;                             //0x10
        struct _DBGKD_SWITCH_PARTITION SwitchPartition;                     //0x10
        struct _DBGKD_CONTEXT_EX GetContextEx;                              //0x10
        struct _DBGKD_CONTEXT_EX SetContextEx;                              //0x10
        struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;        //0x10
    } u;                                                                    //0x10
}; 

----------------------------------------
Structure: _DBGKD_QUERY_MEMORY

//0x18 bytes (sizeof)
struct _DBGKD_QUERY_MEMORY
{
    ULONGLONG Address;                                                      //0x0
    ULONGLONG Reserved;                                                     //0x8
    ULONG AddressSpace;                                                     //0x10
    ULONG Flags;                                                            //0x14
}; 

----------------------------------------
Structure: _DBGKD_QUERY_SPECIAL_CALLS

//0x4 bytes (sizeof)
struct _DBGKD_QUERY_SPECIAL_CALLS
{
    ULONG NumberOfSpecialCalls;                                             //0x0
}; 

----------------------------------------
Structure: _DBGKD_READ_MEMORY32

//0xc bytes (sizeof)
struct _DBGKD_READ_MEMORY32
{
    ULONG TargetBaseAddress;                                                //0x0
    ULONG TransferCount;                                                    //0x4
    ULONG ActualBytesRead;                                                  //0x8
}; 

----------------------------------------
Structure: _DBGKD_READ_MEMORY64

//0x10 bytes (sizeof)
struct _DBGKD_READ_MEMORY64
{
    ULONGLONG TargetBaseAddress;                                            //0x0
    ULONG TransferCount;                                                    //0x8
    ULONG ActualBytesRead;                                                  //0xc
}; 

----------------------------------------
Structure: _DBGKD_READ_WRITE_IO32

//0xc bytes (sizeof)
struct _DBGKD_READ_WRITE_IO32
{
    ULONG DataSize;                                                         //0x0
    ULONG IoAddress;                                                        //0x4
    ULONG DataValue;                                                        //0x8
}; 

----------------------------------------
Structure: _DBGKD_READ_WRITE_IO64

//0x10 bytes (sizeof)
struct _DBGKD_READ_WRITE_IO64
{
    ULONGLONG IoAddress;                                                    //0x0
    ULONG DataSize;                                                         //0x8
    ULONG DataValue;                                                        //0xc
}; 

----------------------------------------
Structure: _DBGKD_READ_WRITE_IO_EXTENDED32

//0x18 bytes (sizeof)
struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
    ULONG DataSize;                                                         //0x0
    ULONG InterfaceType;                                                    //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG AddressSpace;                                                     //0xc
    ULONG IoAddress;                                                        //0x10
    ULONG DataValue;                                                        //0x14
}; 

----------------------------------------
Structure: _DBGKD_READ_WRITE_IO_EXTENDED64

//0x20 bytes (sizeof)
struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
    ULONG DataSize;                                                         //0x0
    ULONG InterfaceType;                                                    //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG AddressSpace;                                                     //0xc
    ULONGLONG IoAddress;                                                    //0x10
    ULONG DataValue;                                                        //0x18
}; 

----------------------------------------
Structure: _DBGKD_READ_WRITE_MSR

//0xc bytes (sizeof)
struct _DBGKD_READ_WRITE_MSR
{
    ULONG Msr;                                                              //0x0
    ULONG DataValueLow;                                                     //0x4
    ULONG DataValueHigh;                                                    //0x8
}; 

----------------------------------------
Structure: _DBGKD_RESTORE_BREAKPOINT

//0x4 bytes (sizeof)
struct _DBGKD_RESTORE_BREAKPOINT
{
    ULONG BreakPointHandle;                                                 //0x0
}; 

----------------------------------------
Structure: _DBGKD_SEARCH_MEMORY

//0x18 bytes (sizeof)
struct _DBGKD_SEARCH_MEMORY
{
    union
    {
        ULONGLONG SearchAddress;                                            //0x0
        ULONGLONG FoundAddress;                                             //0x0
    };
    ULONGLONG SearchLength;                                                 //0x8
    ULONG PatternLength;                                                    //0x10
}; 

----------------------------------------
Structure: _DBGKD_SET_CONTEXT

//0x4 bytes (sizeof)
struct _DBGKD_SET_CONTEXT
{
    ULONG ContextFlags;                                                     //0x0
}; 

----------------------------------------
Structure: _DBGKD_SET_INTERNAL_BREAKPOINT32

//0x8 bytes (sizeof)
struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
    ULONG BreakpointAddress;                                                //0x0
    ULONG Flags;                                                            //0x4
}; 

----------------------------------------
Structure: _DBGKD_SET_INTERNAL_BREAKPOINT64

//0x10 bytes (sizeof)
struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
    ULONGLONG BreakpointAddress;                                            //0x0
    ULONG Flags;                                                            //0x8
}; 

----------------------------------------
Structure: _DBGKD_SET_SPECIAL_CALL32

//0x4 bytes (sizeof)
struct _DBGKD_SET_SPECIAL_CALL32
{
    ULONG SpecialCall;                                                      //0x0
}; 

----------------------------------------
Structure: _DBGKD_SET_SPECIAL_CALL64

//0x8 bytes (sizeof)
struct _DBGKD_SET_SPECIAL_CALL64
{
    ULONGLONG SpecialCall;                                                  //0x0
}; 

----------------------------------------
Structure: _DBGKD_SWITCH_PARTITION

//0x4 bytes (sizeof)
struct _DBGKD_SWITCH_PARTITION
{
    ULONG Partition;                                                        //0x0
}; 

----------------------------------------
Structure: _DBGKD_WRITE_BREAKPOINT32

//0x8 bytes (sizeof)
struct _DBGKD_WRITE_BREAKPOINT32
{
    ULONG BreakPointAddress;                                                //0x0
    ULONG BreakPointHandle;                                                 //0x4
}; 

----------------------------------------
Structure: _DBGKD_WRITE_BREAKPOINT64

//0x10 bytes (sizeof)
struct _DBGKD_WRITE_BREAKPOINT64
{
    ULONGLONG BreakPointAddress;                                            //0x0
    ULONG BreakPointHandle;                                                 //0x8
}; 

----------------------------------------
Structure: _DBGKD_WRITE_CUSTOM_BREAKPOINT

//0x18 bytes (sizeof)
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
    ULONGLONG BreakPointAddress;                                            //0x0
    ULONGLONG BreakPointInstruction;                                        //0x8
    ULONG BreakPointHandle;                                                 //0x10
    UCHAR BreakPointInstructionSize;                                        //0x14
    UCHAR BreakPointInstructionAlignment;                                   //0x15
}; 

----------------------------------------
Structure: _DBGKD_WRITE_MEMORY32

//0xc bytes (sizeof)
struct _DBGKD_WRITE_MEMORY32
{
    ULONG TargetBaseAddress;                                                //0x0
    ULONG TransferCount;                                                    //0x4
    ULONG ActualBytesWritten;                                               //0x8
}; 

----------------------------------------
Structure: _DBGKD_WRITE_MEMORY64

//0x10 bytes (sizeof)
struct _DBGKD_WRITE_MEMORY64
{
    ULONGLONG TargetBaseAddress;                                            //0x0
    ULONG TransferCount;                                                    //0x8
    ULONG ActualBytesWritten;                                               //0xc
}; 

----------------------------------------
Structure: _DBGKM_EXCEPTION32

//0x54 bytes (sizeof)
struct _DBGKM_EXCEPTION32
{
    struct _EXCEPTION_RECORD32 ExceptionRecord;                             //0x0
    ULONG FirstChance;                                                      //0x50
}; 

----------------------------------------
Structure: _DBGKM_EXCEPTION64

//0xa0 bytes (sizeof)
struct _DBGKM_EXCEPTION64
{
    struct _EXCEPTION_RECORD64 ExceptionRecord;                             //0x0
    ULONG FirstChance;                                                      //0x98
}; 

----------------------------------------
Structure: _DBGKP_ERROR_PORT

//0x0 bytes (sizeof)
struct _DBGKP_ERROR_PORT; 

----------------------------------------
Structure: _DBGK_SILOSTATE

//0x20 bytes (sizeof)
struct _DBGK_SILOSTATE
{
    struct _EX_PUSH_LOCK ErrorPortLock;                                     //0x0
    struct _DBGKP_ERROR_PORT* ErrorPort;                                    //0x8
    struct _EPROCESS* ErrorProcess;                                         //0x10
    struct _KEVENT* ErrorPortRegisteredEvent;                               //0x18
}; 

----------------------------------------
Structure: _DEBUG_DEVICE_DESCRIPTOR

//0xf8 bytes (sizeof)
struct _DEBUG_DEVICE_DESCRIPTOR
{
    ULONG Bus;                                                              //0x0
    ULONG Slot;                                                             //0x4
    USHORT Segment;                                                         //0x8
    USHORT VendorID;                                                        //0xa
    USHORT DeviceID;                                                        //0xc
    UCHAR BaseClass;                                                        //0xe
    UCHAR SubClass;                                                         //0xf
    UCHAR ProgIf;                                                           //0x10
    union
    {
        UCHAR Flags;                                                        //0x11
        struct
        {
            UCHAR DbgHalScratchAllocated:1;                                 //0x11
            UCHAR DbgBarsMapped:1;                                          //0x11
            UCHAR DbgScratchAllocated:1;                                    //0x11
        };
    };
    UCHAR Initialized;                                                      //0x12
    UCHAR Configured;                                                       //0x13
    struct DEBUG_DEVICE_ADDRESS BaseAddress[6];                             //0x18
    struct DEBUG_MEMORY_REQUIREMENTS Memory;                                //0xa8
    ULONG Dbg2TableIndex;                                                   //0xc8
    USHORT PortType;                                                        //0xcc
    USHORT PortSubtype;                                                     //0xce
    VOID* OemData;                                                          //0xd0
    ULONG OemDataLength;                                                    //0xd8
    enum KD_NAMESPACE_ENUM NameSpace;                                       //0xdc
    WCHAR* NameSpacePath;                                                   //0xe0
    ULONG NameSpacePathLength;                                              //0xe8
    ULONG TransportType;                                                    //0xec
    struct _DEBUG_TRANSPORT_DATA TransportData;                             //0xf0
}; 

----------------------------------------
Structure: _DEBUG_TRANSPORT_DATA

//0x8 bytes (sizeof)
struct _DEBUG_TRANSPORT_DATA
{
    ULONG HwContextSize;                                                    //0x0
    UCHAR UseSerialFraming;                                                 //0x4
    UCHAR ValidUSBCoreId;                                                   //0x5
    UCHAR USBCoreId;                                                        //0x6
}; 

----------------------------------------
Structure: _DEFERRED_WRITE

//0x60 bytes (sizeof)
struct _DEFERRED_WRITE
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    struct _FILE_OBJECT* FileObject;                                        //0x8
    ULONG BytesToWrite;                                                     //0x10
    struct _LIST_ENTRY DeferredWriteLinks;                                  //0x18
    struct _KEVENT* Event;                                                  //0x28
    VOID (*PostRoutine)(VOID* arg1, VOID* arg2);                            //0x30
    VOID* Context1;                                                         //0x38
    VOID* Context2;                                                         //0x40
    struct _CC_PARTITION* Partition;                                        //0x48
    UCHAR SoftThrottle;                                                     //0x50
    union _LARGE_INTEGER TimeAdded;                                         //0x58
}; 

----------------------------------------
Structure: _DELAY_ACK_FO

//0x18 bytes (sizeof)
struct _DELAY_ACK_FO
{
    struct _LIST_ENTRY Links;                                               //0x0
    struct _FILE_OBJECT* OriginalFileObject;                                //0x10
}; 

----------------------------------------
Structure: _DESCRIPTION_HEADER

//0x24 bytes (sizeof)
struct _DESCRIPTION_HEADER
{
    ULONG Signature;                                                        //0x0
    ULONG Length;                                                           //0x4
    UCHAR Revision;                                                         //0x8
    UCHAR Checksum;                                                         //0x9
    CHAR OEMID[6];                                                          //0xa
    CHAR OEMTableID[8];                                                     //0x10
    ULONG OEMRevision;                                                      //0x18
    CHAR CreatorID[4];                                                      //0x1c
    ULONG CreatorRev;                                                       //0x20
}; 

----------------------------------------
Structure: _DEVICE_CAPABILITIES

//0x40 bytes (sizeof)
struct _DEVICE_CAPABILITIES
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    ULONG DeviceD1:1;                                                       //0x4
    ULONG DeviceD2:1;                                                       //0x4
    ULONG LockSupported:1;                                                  //0x4
    ULONG EjectSupported:1;                                                 //0x4
    ULONG Removable:1;                                                      //0x4
    ULONG DockDevice:1;                                                     //0x4
    ULONG UniqueID:1;                                                       //0x4
    ULONG SilentInstall:1;                                                  //0x4
    ULONG RawDeviceOK:1;                                                    //0x4
    ULONG SurpriseRemovalOK:1;                                              //0x4
    ULONG WakeFromD0:1;                                                     //0x4
    ULONG WakeFromD1:1;                                                     //0x4
    ULONG WakeFromD2:1;                                                     //0x4
    ULONG WakeFromD3:1;                                                     //0x4
    ULONG HardwareDisabled:1;                                               //0x4
    ULONG NonDynamic:1;                                                     //0x4
    ULONG WarmEjectSupported:1;                                             //0x4
    ULONG NoDisplayInUI:1;                                                  //0x4
    ULONG Reserved1:1;                                                      //0x4
    ULONG WakeFromInterrupt:1;                                              //0x4
    ULONG SecureDevice:1;                                                   //0x4
    ULONG ChildOfVgaEnabledBridge:1;                                        //0x4
    ULONG DecodeIoOnBoot:1;                                                 //0x4
    ULONG Reserved:9;                                                       //0x4
    ULONG Address;                                                          //0x8
    ULONG UINumber;                                                         //0xc
    enum _DEVICE_POWER_STATE DeviceState[7];                                //0x10
    enum _SYSTEM_POWER_STATE SystemWake;                                    //0x2c
    enum _DEVICE_POWER_STATE DeviceWake;                                    //0x30
    ULONG D1Latency;                                                        //0x34
    ULONG D2Latency;                                                        //0x38
    ULONG D3Latency;                                                        //0x3c
}; 

----------------------------------------
Structure: _DEVICE_DATA_SET_RANGE

//0x10 bytes (sizeof)
struct _DEVICE_DATA_SET_RANGE
{
    LONGLONG StartingOffset;                                                //0x0
    ULONGLONG LengthInBytes;                                                //0x8
}; 

----------------------------------------
Structure: _DEVICE_DESCRIPTION

//0x40 bytes (sizeof)
struct _DEVICE_DESCRIPTION
{
    ULONG Version;                                                          //0x0
    UCHAR Master;                                                           //0x4
    UCHAR ScatterGather;                                                    //0x5
    UCHAR DemandMode;                                                       //0x6
    UCHAR AutoInitialize;                                                   //0x7
    UCHAR Dma32BitAddresses;                                                //0x8
    UCHAR IgnoreCount;                                                      //0x9
    UCHAR Reserved1;                                                        //0xa
    UCHAR Dma64BitAddresses;                                                //0xb
    ULONG BusNumber;                                                        //0xc
    ULONG DmaChannel;                                                       //0x10
    enum _INTERFACE_TYPE InterfaceType;                                     //0x14
    enum _DMA_WIDTH DmaWidth;                                               //0x18
    enum _DMA_SPEED DmaSpeed;                                               //0x1c
    ULONG MaximumLength;                                                    //0x20
    ULONG DmaPort;                                                          //0x24
    ULONG DmaAddressWidth;                                                  //0x28
    ULONG DmaControllerInstance;                                            //0x2c
    ULONG DmaRequestLine;                                                   //0x30
    union _LARGE_INTEGER DeviceAddress;                                     //0x38
}; 

----------------------------------------
Structure: _DEVICE_DSM_DEFINITION

//0x1c bytes (sizeof)
struct _DEVICE_DSM_DEFINITION
{
    ULONG Action;                                                           //0x0
    UCHAR SingleRange;                                                      //0x4
    ULONG ParameterBlockAlignment;                                          //0x8
    ULONG ParameterBlockLength;                                             //0xc
    UCHAR HasOutput;                                                        //0x10
    ULONG OutputBlockAlignment;                                             //0x14
    ULONG OutputBlockLength;                                                //0x18
}; 

----------------------------------------
Structure: _DEVICE_FAULT_CONFIGURATION

//0x10 bytes (sizeof)
struct _DEVICE_FAULT_CONFIGURATION
{
    VOID (*FaultHandler)(VOID* arg1, struct _FAULT_INFORMATION* arg2);      //0x0
    VOID* FaultContext;                                                     //0x8
}; 

----------------------------------------
Structure: _DEVICE_FLAGS

//0x4 bytes (sizeof)
struct _DEVICE_FLAGS
{
    ULONG Failed:1;                                                         //0x0
    ULONG ReadOnly:1;                                                       //0x0
    ULONG Removable:1;                                                      //0x0
    ULONG ConsoleIn:1;                                                      //0x0
    ULONG ConsoleOut:1;                                                     //0x0
    ULONG Input:1;                                                          //0x0
    ULONG Output:1;                                                         //0x0
}; 

----------------------------------------
Structure: _DEVICE_MANAGE_DATA_SET_ATTRIBUTES

//0x1c bytes (sizeof)
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
    ULONG Size;                                                             //0x0
    ULONG Action;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG ParameterBlockOffset;                                             //0xc
    ULONG ParameterBlockLength;                                             //0x10
    ULONG DataSetRangesOffset;                                              //0x14
    ULONG DataSetRangesLength;                                              //0x18
}; 

----------------------------------------
Structure: _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT

//0x24 bytes (sizeof)
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
    ULONG Size;                                                             //0x0
    ULONG Action;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG OperationStatus;                                                  //0xc
    ULONG ExtendedError;                                                    //0x10
    ULONG TargetDetailedError;                                              //0x14
    ULONG ReservedStatus;                                                   //0x18
    ULONG OutputBlockOffset;                                                //0x1c
    ULONG OutputBlockLength;                                                //0x20
}; 

----------------------------------------
Structure: _DEVICE_MAP

//0x48 bytes (sizeof)
struct _DEVICE_MAP
{
    struct _OBJECT_DIRECTORY* DosDevicesDirectory;                          //0x0
    struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;                    //0x8
    VOID* DosDevicesDirectoryHandle;                                        //0x10
    volatile LONG ReferenceCount;                                           //0x18
    ULONG DriveMap;                                                         //0x1c
    UCHAR DriveType[32];                                                    //0x20
    struct _EJOB* ServerSilo;                                               //0x40
}; 

----------------------------------------
Structure: _DEVICE_NODE

//0x310 bytes (sizeof)
struct _DEVICE_NODE
{
    struct _DEVICE_NODE* Sibling;                                           //0x0
    struct _DEVICE_NODE* Child;                                             //0x8
    struct _DEVICE_NODE* Parent;                                            //0x10
    struct _DEVICE_NODE* LastChild;                                         //0x18
    struct _DEVICE_OBJECT* PhysicalDeviceObject;                            //0x20
    struct _UNICODE_STRING InstancePath;                                    //0x28
    struct _UNICODE_STRING ServiceName;                                     //0x38
    struct _IRP* PendingIrp;                                                //0x48
    struct _POP_FX_DEVICE* FxDevice;                                        //0x50
    volatile LONG FxDeviceLock;                                             //0x58
    struct _KEVENT FxRemoveEvent;                                           //0x60
    volatile LONG FxActivationCount;                                        //0x78
    volatile LONG FxSleepCount;                                             //0x7c
    struct _UNICODE_STRING UniqueId;                                        //0x80
    struct _POP_FX_PLUGIN* Plugin;                                          //0x90
    ULONG Level;                                                            //0x98
    union _POWER_STATE CurrentPowerState;                                   //0x9c
    struct _PO_DEVICE_NOTIFY Notify;                                        //0xa0
    struct _PO_IRP_MANAGER PoIrpManager;                                    //0x108
    volatile LONG PowerFlags;                                               //0x128
    enum _PNP_DEVNODE_STATE State;                                          //0x12c
    enum _PNP_DEVNODE_STATE PreviousState;                                  //0x130
    enum _PNP_DEVNODE_STATE StateHistory[20];                               //0x134
    ULONG StateHistoryEntry;                                                //0x184
    LONG CompletionStatus;                                                  //0x188
    ULONG Flags;                                                            //0x18c
    ULONG UserFlags;                                                        //0x190
    ULONG Problem;                                                          //0x194
    LONG ProblemStatus;                                                     //0x198
    struct _CM_RESOURCE_LIST* ResourceList;                                 //0x1a0
    struct _CM_RESOURCE_LIST* ResourceListTranslated;                       //0x1a8
    struct _DEVICE_OBJECT* DuplicatePDO;                                    //0x1b0
    struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;            //0x1b8
    enum _INTERFACE_TYPE InterfaceType;                                     //0x1c0
    ULONG BusNumber;                                                        //0x1c4
    enum _INTERFACE_TYPE ChildInterfaceType;                                //0x1c8
    ULONG ChildBusNumber;                                                   //0x1cc
    USHORT ChildBusTypeIndex;                                               //0x1d0
    UCHAR RemovalPolicy;                                                    //0x1d2
    UCHAR HardwareRemovalPolicy;                                            //0x1d3
    struct _LIST_ENTRY TargetDeviceNotify;                                  //0x1d8
    struct _LIST_ENTRY DeviceArbiterList;                                   //0x1e8
    struct _LIST_ENTRY DeviceTranslatorList;                                //0x1f8
    USHORT NoTranslatorMask;                                                //0x208
    USHORT QueryTranslatorMask;                                             //0x20a
    USHORT NoArbiterMask;                                                   //0x20c
    USHORT QueryArbiterMask;                                                //0x20e
    union
    {
        struct _DEVICE_NODE* LegacyDeviceNode;                              //0x210
        struct _DEVICE_RELATIONS* PendingDeviceRelations;                   //0x210
        VOID* Information;                                                  //0x210
    } OverUsed1;                                                            //0x210
    union
    {
        struct _DEVICE_NODE* NextResourceDeviceNode;                        //0x218
    } OverUsed2;                                                            //0x218
    struct _CM_RESOURCE_LIST* BootResources;                                //0x220
    struct _CM_RESOURCE_LIST* BootResourcesTranslated;                      //0x228
    ULONG CapabilityFlags;                                                  //0x230
    struct
    {
        enum PROFILE_STATUS DockStatus;                                     //0x238
        struct _LIST_ENTRY ListEntry;                                       //0x240
        WCHAR* SerialNumber;                                                //0x250
    } DockInfo;                                                             //0x238
    ULONG DisableableDepends;                                               //0x258
    struct _LIST_ENTRY PendedSetInterfaceState;                             //0x260
    struct _LIST_ENTRY LegacyBusListEntry;                                  //0x270
    ULONG DriverUnloadRetryCount;                                           //0x280
    struct _DEVICE_NODE* PreviousParent;                                    //0x288
    LONG DeletedChildren;                                                   //0x290
    ULONG NumaNodeIndex;                                                    //0x294
    struct _GUID ContainerID;                                               //0x298
    UCHAR OverrideFlags;                                                    //0x2a8
    ULONG DeviceIdsHash;                                                    //0x2ac
    UCHAR RequiresUnloadedDriver;                                           //0x2b0
    struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;            //0x2b8
    ULONG StateFlags;                                                       //0x2c0
    struct _PNP_REBALANCE_TRACE_CONTEXT* RebalanceContext;                  //0x2c8
    struct _DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;                    //0x2d0
    struct _PO_DIRECTED_DRIPS_STATE DirectedDripsState;                     //0x2d8
}; 

----------------------------------------
Structure: _DEVICE_NODE_IOMMU_EXTENSION

//0x0 bytes (sizeof)
struct _DEVICE_NODE_IOMMU_EXTENSION; 

----------------------------------------
Structure: _DEVICE_OBJECT

//0x150 bytes (sizeof)
struct _DEVICE_OBJECT
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    LONG ReferenceCount;                                                    //0x4
    struct _DRIVER_OBJECT* DriverObject;                                    //0x8
    struct _DEVICE_OBJECT* NextDevice;                                      //0x10
    struct _DEVICE_OBJECT* AttachedDevice;                                  //0x18
    struct _IRP* CurrentIrp;                                                //0x20
    struct _IO_TIMER* Timer;                                                //0x28
    ULONG Flags;                                                            //0x30
    ULONG Characteristics;                                                  //0x34
    struct _VPB* Vpb;                                                       //0x38
    VOID* DeviceExtension;                                                  //0x40
    ULONG DeviceType;                                                       //0x48
    CHAR StackSize;                                                         //0x4c
    union
    {
        struct _LIST_ENTRY ListEntry;                                       //0x50
        struct _WAIT_CONTEXT_BLOCK Wcb;                                     //0x50
    } Queue;                                                                //0x50
    ULONG AlignmentRequirement;                                             //0x98
    struct _KDEVICE_QUEUE DeviceQueue;                                      //0xa0
    struct _KDPC Dpc;                                                       //0xc8
    ULONG ActiveThreadCount;                                                //0x108
    VOID* SecurityDescriptor;                                               //0x110
    struct _KEVENT DeviceLock;                                              //0x118
    USHORT SectorSize;                                                      //0x130
    USHORT Spare1;                                                          //0x132
    struct _DEVOBJ_EXTENSION* DeviceObjectExtension;                        //0x138
    VOID* Reserved;                                                         //0x140
}; 

----------------------------------------
Structure: _DEVICE_OBJECT_LIST

//0x28 bytes (sizeof)
struct _DEVICE_OBJECT_LIST
{
    ULONG Count;                                                            //0x0
    ULONG MaxCount;                                                         //0x4
    ULONG TagCount;                                                         //0x8
    enum _PNP_DEVICE_DELETE_TYPE OperationCode;                             //0xc
    struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];                            //0x10
}; 

----------------------------------------
Structure: _DEVICE_OBJECT_LIST_ENTRY

//0x18 bytes (sizeof)
struct _DEVICE_OBJECT_LIST_ENTRY
{
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x0
    enum _DEVICE_RELATION_LEVEL RelationLevel;                              //0x8
    ULONG Ordinal;                                                          //0xc
    ULONG Flags;                                                            //0x10
}; 

----------------------------------------
Structure: _DEVICE_OBJECT_POWER_EXTENSION

//0x60 bytes (sizeof)
struct _DEVICE_OBJECT_POWER_EXTENSION
{
    volatile ULONG IdleCount;                                               //0x0
    volatile ULONG BusyCount;                                               //0x4
    volatile ULONG BusyReference;                                           //0x8
    ULONG TotalBusyCount;                                                   //0xc
    ULONG ConservationIdleTime;                                             //0x10
    ULONG PerformanceIdleTime;                                              //0x14
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x18
    struct _LIST_ENTRY IdleList;                                            //0x20
    enum _POP_DEVICE_IDLE_TYPE IdleType;                                    //0x30
    enum _DEVICE_POWER_STATE IdleState;                                     //0x34
    enum _DEVICE_POWER_STATE CurrentState;                                  //0x38
    struct _POP_COOLING_EXTENSION* CoolingExtension;                        //0x40
    struct _LIST_ENTRY Volume;                                              //0x48
    union
    {
        struct
        {
            ULONG IdleTime;                                                 //0x58
            ULONG NonIdleTime;                                              //0x5c
        } Disk;                                                             //0x58
    } Specific;                                                             //0x58
}; 

----------------------------------------
Structure: _DEVICE_RELATIONS

//0x10 bytes (sizeof)
struct _DEVICE_RELATIONS
{
    ULONG Count;                                                            //0x0
    struct _DEVICE_OBJECT* Objects[1];                                      //0x8
}; 

----------------------------------------
Structure: _DEVOBJ_EXTENSION

//0x70 bytes (sizeof)
struct _DEVOBJ_EXTENSION
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    ULONG PowerFlags;                                                       //0x10
    struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;                            //0x18
    ULONG ExtensionFlags;                                                   //0x20
    VOID* DeviceNode;                                                       //0x28
    struct _DEVICE_OBJECT* AttachedTo;                                      //0x30
    LONG StartIoCount;                                                      //0x38
    LONG StartIoKey;                                                        //0x3c
    ULONG StartIoFlags;                                                     //0x40
    struct _VPB* Vpb;                                                       //0x48
    VOID* DependencyNode;                                                   //0x50
    VOID* InterruptContext;                                                 //0x58
    LONG InterruptCount;                                                    //0x60
    VOID* VerifierContext;                                                  //0x68
}; 

----------------------------------------
Structure: _DEVPROPKEY

//0x14 bytes (sizeof)
struct _DEVPROPKEY
{
    struct _GUID fmtid;                                                     //0x0
    ULONG pid;                                                              //0x10
}; 

----------------------------------------
Structure: _DIAGNOSTIC_BUFFER

//0x28 bytes (sizeof)
struct _DIAGNOSTIC_BUFFER
{
    ULONGLONG Size;                                                         //0x0
    enum _REQUESTER_TYPE CallerType;                                        //0x8
    union
    {
        struct
        {
            ULONGLONG ProcessImageNameOffset;                               //0x10
            ULONG ProcessId;                                                //0x18
            ULONG ServiceTag;                                               //0x1c
        };
        struct
        {
            ULONGLONG DeviceDescriptionOffset;                              //0x10
            ULONGLONG DevicePathOffset;                                     //0x18
        };
    };
    ULONGLONG ReasonOffset;                                                 //0x20
}; 

----------------------------------------
Structure: _DIAGNOSTIC_CONTEXT

//0x20 bytes (sizeof)
struct _DIAGNOSTIC_CONTEXT
{
    enum _REQUESTER_TYPE CallerType;                                        //0x0
    union
    {
        struct
        {
            struct _EPROCESS* Process;                                      //0x8
            ULONG ServiceTag;                                               //0x10
        };
        struct _DEVICE_OBJECT* DeviceObject;                                //0x8
    };
    ULONGLONG ReasonSize;                                                   //0x18
}; 

----------------------------------------
Structure: _DIRTY_PAGE_STATISTICS

//0x18 bytes (sizeof)
struct _DIRTY_PAGE_STATISTICS
{
    ULONGLONG DirtyPages;                                                   //0x0
    ULONGLONG DirtyPagesLastScan;                                           //0x8
    ULONG DirtyPagesScheduledLastScan;                                      //0x10
}; 

----------------------------------------
Structure: _DIRTY_PAGE_THRESHOLDS

//0x38 bytes (sizeof)
struct _DIRTY_PAGE_THRESHOLDS
{
    ULONGLONG DirtyPageThreshold;                                           //0x0
    ULONGLONG DirtyPageThresholdTop;                                        //0x8
    ULONGLONG DirtyPageThresholdBottom;                                     //0x10
    ULONG DirtyPageTarget;                                                  //0x18
    ULONGLONG AggregateAvailablePages;                                      //0x20
    ULONGLONG AggregateDirtyPages;                                          //0x28
    ULONG AvailableHistory;                                                 //0x30
}; 

----------------------------------------
Structure: _DISALLOWED_GUIDS

//0x10 bytes (sizeof)
struct _DISALLOWED_GUIDS
{
    USHORT Count;                                                           //0x0
    struct _GUID* Guids;                                                    //0x8
}; 

----------------------------------------
Structure: _DISPATCHER_HEADER

//0x18 bytes (sizeof)
struct _DISPATCHER_HEADER
{
    union
    {
        volatile LONG Lock;                                                 //0x0
        LONG LockNV;                                                        //0x0
        struct
        {
            UCHAR Type;                                                     //0x0
            UCHAR Signalling;                                               //0x1
            UCHAR Size;                                                     //0x2
            UCHAR Reserved1;                                                //0x3
        };
        struct
        {
            UCHAR TimerType;                                                //0x0
            union
            {
                UCHAR TimerControlFlags;                                    //0x1
                struct
                {
                    UCHAR Absolute:1;                                       //0x1
                    UCHAR Wake:1;                                           //0x1
                    UCHAR EncodedTolerableDelay:6;                          //0x1
                };
            };
            UCHAR Hand;                                                     //0x2
            union
            {
                UCHAR TimerMiscFlags;                                       //0x3
                struct
                {
                    UCHAR Index:6;                                          //0x3
                    UCHAR Inserted:1;                                       //0x3
                    volatile UCHAR Expired:1;                               //0x3
                };
            };
        };
        struct
        {
            UCHAR Timer2Type;                                               //0x0
            union
            {
                UCHAR Timer2Flags;                                          //0x1
                struct
                {
                    UCHAR Timer2Inserted:1;                                 //0x1
                    UCHAR Timer2Expiring:1;                                 //0x1
                    UCHAR Timer2CancelPending:1;                            //0x1
                    UCHAR Timer2SetPending:1;                               //0x1
                    UCHAR Timer2Running:1;                                  //0x1
                    UCHAR Timer2Disabled:1;                                 //0x1
                    UCHAR Timer2ReservedFlags:2;                            //0x1
                };
            };
            UCHAR Timer2ComponentId;                                        //0x2
            UCHAR Timer2RelativeId;                                         //0x3
        };
        struct
        {
            UCHAR QueueType;                                                //0x0
            union
            {
                UCHAR QueueControlFlags;                                    //0x1
                struct
                {
                    UCHAR Abandoned:1;                                      //0x1
                    UCHAR DisableIncrement:1;                               //0x1
                    UCHAR QueueReservedControlFlags:6;                      //0x1
                };
            };
            UCHAR QueueSize;                                                //0x2
            UCHAR QueueReserved;                                            //0x3
        };
        struct
        {
            UCHAR ThreadType;                                               //0x0
            UCHAR ThreadReserved;                                           //0x1
            union
            {
                UCHAR ThreadControlFlags;                                   //0x2
                struct
                {
                    UCHAR CycleProfiling:1;                                 //0x2
                    UCHAR CounterProfiling:1;                               //0x2
                    UCHAR GroupScheduling:1;                                //0x2
                    UCHAR AffinitySet:1;                                    //0x2
                    UCHAR Tagged:1;                                         //0x2
                    UCHAR EnergyProfiling:1;                                //0x2
                    UCHAR SchedulerAssist:1;                                //0x2
                    UCHAR ThreadReservedControlFlags:1;                     //0x2
                };
            };
            union
            {
                UCHAR DebugActive;                                          //0x3
                struct
                {
                    UCHAR ActiveDR7:1;                                      //0x3
                    UCHAR Instrumented:1;                                   //0x3
                    UCHAR Minimal:1;                                        //0x3
                    UCHAR Reserved4:2;                                      //0x3
                    UCHAR AltSyscall:1;                                     //0x3
                    UCHAR UmsScheduled:1;                                   //0x3
                    UCHAR UmsPrimary:1;                                     //0x3
                };
            };
        };
        struct
        {
            UCHAR MutantType;                                               //0x0
            UCHAR MutantSize;                                               //0x1
            UCHAR DpcActive;                                                //0x2
            UCHAR MutantReserved;                                           //0x3
        };
    };
    LONG SignalState;                                                       //0x4
    struct _LIST_ENTRY WaitListHead;                                        //0x8
}; 

----------------------------------------
Structure: _DMA_ADAPTER

//0x10 bytes (sizeof)
struct _DMA_ADAPTER
{
    USHORT Version;                                                         //0x0
    USHORT Size;                                                            //0x2
    struct _DMA_OPERATIONS* DmaOperations;                                  //0x8
}; 

----------------------------------------
Structure: _DMA_ADAPTER_INFO

//0x18 bytes (sizeof)
struct _DMA_ADAPTER_INFO
{
    ULONG Version;                                                          //0x0
    struct _DMA_ADAPTER_INFO_V1 V1;                                         //0x4
}; 

----------------------------------------
Structure: _DMA_ADAPTER_INFO_V1

//0x14 bytes (sizeof)
struct _DMA_ADAPTER_INFO_V1
{
    ULONG ReadDmaCounterAvailable;                                          //0x0
    ULONG ScatterGatherLimit;                                               //0x4
    ULONG DmaAddressWidth;                                                  //0x8
    ULONG Flags;                                                            //0xc
    ULONG MinimumTransferUnit;                                              //0x10
}; 

----------------------------------------
Structure: _DMA_COMMON_BUFFER_ENTRY

//0x10 bytes (sizeof)
struct _DMA_COMMON_BUFFER_ENTRY
{
    VOID* VirtualAddress;                                                   //0x0
    union _LARGE_INTEGER LogicalAddress;                                    //0x8
}; 

----------------------------------------
Structure: _DMA_COMMON_BUFFER_VECTOR

//0x48 bytes (sizeof)
struct _DMA_COMMON_BUFFER_VECTOR
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONGLONG SizeOfEntries;                                                //0x10
    ULONG NumberOfEntries;                                                  //0x18
    struct _HALP_DMA_DOMAIN_OBJECT* Domain;                                 //0x20
    struct _MDL* Mdl;                                                       //0x28
    VOID* BaseAddress;                                                      //0x30
    ULONGLONG BaseLogicalAddress;                                           //0x38
    struct _DMA_COMMON_BUFFER_ENTRY* Entries;                               //0x40
}; 

----------------------------------------
Structure: _DMA_FUNCTION_TABLE

//0x50 bytes (sizeof)
struct _DMA_FUNCTION_TABLE
{
    VOID (*InitializeController)(VOID* arg1);                               //0x0
    UCHAR (*ValidateRequestLineBinding)(VOID* arg1, struct _DMA_REQUEST_LINE_BINDING_DESCRIPTION* arg2); //0x8
    ULONG (*QueryMaxFragments)(VOID* arg1, ULONG arg2, ULONG arg3);         //0x10
    VOID (*ProgramChannel)(VOID* arg1, ULONG arg2, ULONG arg3, struct _DMA_SCATTER_GATHER_LIST* arg4, union _LARGE_INTEGER arg5, UCHAR arg6, UCHAR arg7); //0x18
    LONG (*ConfigureChannel)(VOID* arg1, ULONG arg2, ULONG arg3, VOID* arg4); //0x20
    VOID (*FlushChannel)(VOID* arg1, ULONG arg2);                           //0x28
    UCHAR (*HandleInterrupt)(VOID* arg1, ULONG* arg2, enum _DMA_INTERRUPT_TYPE* arg3); //0x30
    ULONG (*ReadDmaCounter)(VOID* arg1, ULONG arg2);                        //0x38
    VOID (*ReportCommonBuffer)(VOID* arg1, ULONG arg2, VOID* arg3, union _LARGE_INTEGER arg4); //0x40
    UCHAR (*CancelTransfer)(VOID* arg1, ULONG arg2);                        //0x48
}; 

----------------------------------------
Structure: _DMA_IOMMU_INTERFACE

//0x70 bytes (sizeof)
struct _DMA_IOMMU_INTERFACE
{
    ULONG Version;                                                          //0x0
    LONG (*CreateDomain)(UCHAR arg1, struct _IOMMU_DMA_DOMAIN** arg2);      //0x8
    LONG (*DeleteDomain)(struct _IOMMU_DMA_DOMAIN* arg1);                   //0x10
    LONG (*AttachDevice)(struct _IOMMU_DMA_DOMAIN* arg1, struct _DEVICE_OBJECT* arg2, ULONG arg3, ULONG arg4); //0x18
    LONG (*DetachDevice)(struct _IOMMU_DMA_DOMAIN* arg1, struct _DEVICE_OBJECT* arg2, ULONG arg3); //0x20
    LONG (*FlushDomain)(struct _IOMMU_DMA_DOMAIN* arg1);                    //0x28
    LONG (*FlushDomainByVaList)(struct _IOMMU_DMA_DOMAIN* arg1, UCHAR arg2, ULONG arg3, VOID* arg4); //0x30
    LONG (*QueryInputMappings)(struct _DEVICE_OBJECT* arg1, struct _INPUT_MAPPING_ELEMENT* arg2, ULONG arg3, ULONG* arg4); //0x38
    LONG (*MapLogicalRange)(struct _IOMMU_DMA_DOMAIN* arg1, ULONG arg2, struct _MDL* arg3, ULONGLONG arg4); //0x40
    LONG (*UnmapLogicalRange)(struct _IOMMU_DMA_DOMAIN* arg1, ULONGLONG arg2, ULONGLONG arg3); //0x48
    LONG (*MapIdentityRange)(struct _IOMMU_DMA_DOMAIN* arg1, ULONG arg2, struct _MDL* arg3); //0x50
    LONG (*UnmapIdentityRange)(struct _IOMMU_DMA_DOMAIN* arg1, struct _MDL* arg2); //0x58
    LONG (*SetDeviceFaultReporting)(struct _DEVICE_OBJECT* arg1, ULONG arg2, UCHAR arg3, struct _DEVICE_FAULT_CONFIGURATION* arg4); //0x60
    LONG (*ConfigureDomain)(struct _IOMMU_DMA_DOMAIN* arg1, struct _DOMAIN_CONFIGURATION* arg2); //0x68
}; 

----------------------------------------
Structure: _DMA_OPERATIONS

//0x138 bytes (sizeof)
struct _DMA_OPERATIONS
{
    ULONG Size;                                                             //0x0
    VOID (*PutDmaAdapter)(struct _DMA_ADAPTER* arg1);                       //0x8
    VOID* (*AllocateCommonBuffer)(struct _DMA_ADAPTER* arg1, ULONG arg2, union _LARGE_INTEGER* arg3, UCHAR arg4); //0x10
    VOID (*FreeCommonBuffer)(struct _DMA_ADAPTER* arg1, ULONG arg2, union _LARGE_INTEGER arg3, VOID* arg4, UCHAR arg5); //0x18
    LONG (*AllocateAdapterChannel)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, ULONG arg3, enum _IO_ALLOCATION_ACTION (*arg4)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, VOID* arg3, VOID* arg4), VOID* arg5); //0x20
    UCHAR (*FlushAdapterBuffers)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, VOID* arg3, VOID* arg4, ULONG arg5, UCHAR arg6); //0x28
    VOID (*FreeAdapterChannel)(struct _DMA_ADAPTER* arg1);                  //0x30
    VOID (*FreeMapRegisters)(struct _DMA_ADAPTER* arg1, VOID* arg2, ULONG arg3); //0x38
    union _LARGE_INTEGER (*MapTransfer)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, VOID* arg3, VOID* arg4, ULONG* arg5, UCHAR arg6); //0x40
    ULONG (*GetDmaAlignment)(struct _DMA_ADAPTER* arg1);                    //0x48
    ULONG (*ReadDmaCounter)(struct _DMA_ADAPTER* arg1);                     //0x50
    LONG (*GetScatterGatherList)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, struct _MDL* arg3, VOID* arg4, ULONG arg5, VOID (*arg6)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, struct _SCATTER_GATHER_LIST* arg3, VOID* arg4), VOID* arg7, UCHAR arg8); //0x58
    VOID (*PutScatterGatherList)(struct _DMA_ADAPTER* arg1, struct _SCATTER_GATHER_LIST* arg2, UCHAR arg3); //0x60
    LONG (*CalculateScatterGatherList)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, VOID* arg3, ULONG arg4, ULONG* arg5, ULONG* arg6); //0x68
    LONG (*BuildScatterGatherList)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, struct _MDL* arg3, VOID* arg4, ULONG arg5, VOID (*arg6)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, struct _SCATTER_GATHER_LIST* arg3, VOID* arg4), VOID* arg7, UCHAR arg8, VOID* arg9, ULONG arg10); //0x70
    LONG (*BuildMdlFromScatterGatherList)(struct _DMA_ADAPTER* arg1, struct _SCATTER_GATHER_LIST* arg2, struct _MDL* arg3, struct _MDL** arg4); //0x78
    LONG (*GetDmaAdapterInfo)(struct _DMA_ADAPTER* arg1, struct _DMA_ADAPTER_INFO* arg2); //0x80
    LONG (*GetDmaTransferInfo)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, ULONGLONG arg3, ULONG arg4, UCHAR arg5, struct _DMA_TRANSFER_INFO* arg6); //0x88
    LONG (*InitializeDmaTransferContext)(struct _DMA_ADAPTER* arg1, VOID* arg2); //0x90
    VOID* (*AllocateCommonBufferEx)(struct _DMA_ADAPTER* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, union _LARGE_INTEGER* arg4, UCHAR arg5, ULONG arg6); //0x98
    LONG (*AllocateAdapterChannelEx)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, ULONG arg4, ULONG arg5, enum _IO_ALLOCATION_ACTION (*arg6)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, VOID* arg3, VOID* arg4), VOID* arg7, VOID** arg8); //0xa0
    LONG (*ConfigureAdapterChannel)(struct _DMA_ADAPTER* arg1, ULONG arg2, VOID* arg3); //0xa8
    UCHAR (*CancelAdapterChannel)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3); //0xb0
    LONG (*MapTransferEx)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, VOID* arg3, ULONGLONG arg4, ULONG arg5, ULONG* arg6, UCHAR arg7, struct _SCATTER_GATHER_LIST* arg8, ULONG arg9, VOID (*arg10)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, enum DMA_COMPLETION_STATUS arg4), VOID* arg11); //0xb8
    LONG (*GetScatterGatherListEx)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, struct _MDL* arg4, ULONGLONG arg5, ULONG arg6, ULONG arg7, VOID (*arg8)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, struct _SCATTER_GATHER_LIST* arg3, VOID* arg4), VOID* arg9, UCHAR arg10, VOID (*arg11)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, enum DMA_COMPLETION_STATUS arg4), VOID* arg12, struct _SCATTER_GATHER_LIST** arg13); //0xc0
    LONG (*BuildScatterGatherListEx)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, struct _MDL* arg4, ULONGLONG arg5, ULONG arg6, ULONG arg7, VOID (*arg8)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, struct _SCATTER_GATHER_LIST* arg3, VOID* arg4), VOID* arg9, UCHAR arg10, VOID* arg11, ULONG arg12, VOID (*arg13)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, enum DMA_COMPLETION_STATUS arg4), VOID* arg14, VOID* arg15); //0xc8
    LONG (*FlushAdapterBuffersEx)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, VOID* arg3, ULONGLONG arg4, ULONG arg5, UCHAR arg6); //0xd0
    VOID (*FreeAdapterObject)(struct _DMA_ADAPTER* arg1, enum _IO_ALLOCATION_ACTION arg2); //0xd8
    LONG (*CancelMappedTransfer)(struct _DMA_ADAPTER* arg1, VOID* arg2);    //0xe0
    LONG (*AllocateDomainCommonBuffer)(struct _DMA_ADAPTER* arg1, VOID* arg2, union _LARGE_INTEGER* arg3, ULONG arg4, ULONG arg5, enum _MEMORY_CACHING_TYPE* arg6, ULONG arg7, union _LARGE_INTEGER* arg8, VOID** arg9); //0xe8
    LONG (*FlushDmaBuffer)(struct _DMA_ADAPTER* arg1, struct _MDL* arg2, UCHAR arg3); //0xf0
    LONG (*JoinDmaDomain)(struct _DMA_ADAPTER* arg1, VOID* arg2);           //0xf8
    LONG (*LeaveDmaDomain)(struct _DMA_ADAPTER* arg1);                      //0x100
    VOID* (*GetDmaDomain)(struct _DMA_ADAPTER* arg1);                       //0x108
    VOID* (*AllocateCommonBufferWithBounds)(struct _DMA_ADAPTER* arg1, union _LARGE_INTEGER* arg2, union _LARGE_INTEGER* arg3, ULONG arg4, ULONG arg5, enum _MEMORY_CACHING_TYPE* arg6, ULONG arg7, union _LARGE_INTEGER* arg8); //0x110
    LONG (*AllocateCommonBufferVector)(struct _DMA_ADAPTER* arg1, union _LARGE_INTEGER arg2, union _LARGE_INTEGER arg3, enum _MEMORY_CACHING_TYPE arg4, ULONG arg5, ULONG arg6, ULONG arg7, ULONGLONG arg8, struct _DMA_COMMON_BUFFER_VECTOR** arg9); //0x118
    VOID (*GetCommonBufferFromVectorByIndex)(struct _DMA_ADAPTER* arg1, struct _DMA_COMMON_BUFFER_VECTOR* arg2, ULONG arg3, VOID** arg4, union _LARGE_INTEGER* arg5); //0x120
    VOID (*FreeCommonBufferFromVector)(struct _DMA_ADAPTER* arg1, struct _DMA_COMMON_BUFFER_VECTOR* arg2, ULONG arg3); //0x128
    VOID (*FreeCommonBufferVector)(struct _DMA_ADAPTER* arg1, struct _DMA_COMMON_BUFFER_VECTOR* arg2); //0x130
}; 

----------------------------------------
Structure: _DMA_REQUEST_LINE_BINDING_DESCRIPTION

//0x8 bytes (sizeof)
struct _DMA_REQUEST_LINE_BINDING_DESCRIPTION
{
    ULONG RequestLine;                                                      //0x0
    ULONG ChannelNumber;                                                    //0x4
}; 

----------------------------------------
Structure: _DMA_SCATTER_GATHER_LIST

//0x10 bytes (sizeof)
struct _DMA_SCATTER_GATHER_LIST
{
    ULONG NumberOfElements;                                                 //0x0
    ULONGLONG Reserved;                                                     //0x8
    struct _SCATTER_GATHER_ELEMENT Elements[0];                             //0x10
}; 

----------------------------------------
Structure: _DMA_TRANSFER_CONTEXT

//0x60 bytes (sizeof)
struct _DMA_TRANSFER_CONTEXT
{
    ULONG Version;                                                          //0x0
    struct _DMA_TRANSFER_CONTEXT_V1 V1;                                     //0x8
}; 

----------------------------------------
Structure: _DMA_TRANSFER_CONTEXT_V1

//0x58 bytes (sizeof)
struct _DMA_TRANSFER_CONTEXT_V1
{
    LONG DmaState;                                                          //0x0
    ULONG TransferState;                                                    //0x4
    struct _WAIT_CONTEXT_BLOCK Wcb;                                         //0x8
    VOID* HalWcb;                                                           //0x50
}; 

----------------------------------------
Structure: _DMA_TRANSFER_INFO

//0x14 bytes (sizeof)
struct _DMA_TRANSFER_INFO
{
    ULONG Version;                                                          //0x0
    union
    {
        struct _DMA_TRANSFER_INFO_V1 V1;                                    //0x4
        struct _DMA_TRANSFER_INFO_V2 V2;                                    //0x4
    };
}; 

----------------------------------------
Structure: _DMA_TRANSFER_INFO_V1

//0xc bytes (sizeof)
struct _DMA_TRANSFER_INFO_V1
{
    ULONG MapRegisterCount;                                                 //0x0
    ULONG ScatterGatherElementCount;                                        //0x4
    ULONG ScatterGatherListSize;                                            //0x8
}; 

----------------------------------------
Structure: _DMA_TRANSFER_INFO_V2

//0x10 bytes (sizeof)
struct _DMA_TRANSFER_INFO_V2
{
    ULONG MapRegisterCount;                                                 //0x0
    ULONG ScatterGatherElementCount;                                        //0x4
    ULONG ScatterGatherListSize;                                            //0x8
    ULONG LogicalPageCount;                                                 //0xc
}; 

----------------------------------------
Structure: _DOMAIN_CONFIGURATION

//0x28 bytes (sizeof)
struct _DOMAIN_CONFIGURATION
{
    enum _DOMAIN_CONFIGURATION_ARCH Type;                                   //0x0
    struct _DOMAIN_CONFIGURATION_ARM64 Arm64;                               //0x8
}; 

----------------------------------------
Structure: _DOMAIN_CONFIGURATION_ARM64

//0x20 bytes (sizeof)
struct _DOMAIN_CONFIGURATION_ARM64
{
    union _LARGE_INTEGER Ttbr0;                                             //0x0
    union _LARGE_INTEGER Ttbr1;                                             //0x8
    ULONG Mair0;                                                            //0x10
    ULONG Mair1;                                                            //0x14
    UCHAR InputSize0;                                                       //0x18
    UCHAR InputSize1;                                                       //0x19
    UCHAR CoherentTableWalks;                                               //0x1a
    UCHAR TranslationEnabled;                                               //0x1b
}; 

----------------------------------------
Structure: _DRIVER_EXTENSION

//0x28 bytes (sizeof)
struct _DRIVER_EXTENSION
{
    struct _DRIVER_OBJECT* DriverObject;                                    //0x0
    LONG (*AddDevice)(struct _DRIVER_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0x8
    ULONG Count;                                                            //0x10
    struct _UNICODE_STRING ServiceKeyName;                                  //0x18
}; 

----------------------------------------
Structure: _DRIVER_EXTENSION

//0x28 bytes (sizeof)
struct _DRIVER_EXTENSION
{
    struct _DRIVER_OBJECT* DriverObject;                                    //0x0
    LONG (*AddDevice)(struct _DRIVER_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0x8
    ULONG Count;                                                            //0x10
    struct _UNICODE_STRING ServiceKeyName;                                  //0x18
}; 

----------------------------------------
Structure: _DRIVER_OBJECT

//0x150 bytes (sizeof)
struct _DRIVER_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    ULONG Flags;                                                            //0x10
    VOID* DriverStart;                                                      //0x18
    ULONG DriverSize;                                                       //0x20
    VOID* DriverSection;                                                    //0x28
    struct _DRIVER_EXTENSION* DriverExtension;                              //0x30
    struct _UNICODE_STRING DriverName;                                      //0x38
    struct _UNICODE_STRING* HardwareDatabase;                               //0x48
    struct _FAST_IO_DISPATCH* FastIoDispatch;                               //0x50
    LONG (*DriverInit)(struct _DRIVER_OBJECT* arg1, struct _UNICODE_STRING* arg2); //0x58
    VOID (*DriverStartIo)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);  //0x60
    VOID (*DriverUnload)(struct _DRIVER_OBJECT* arg1);                      //0x68
    LONG (*MajorFunction[28])(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2); //0x70
}; 

----------------------------------------
Structure: _DUAL

//0x278 bytes (sizeof)
struct _DUAL
{
    ULONG Length;                                                           //0x0
    struct _HMAP_DIRECTORY* Map;                                            //0x8
    struct _HMAP_TABLE* SmallDir;                                           //0x10
    ULONG Guard;                                                            //0x18
    struct _FREE_DISPLAY FreeDisplay[24];                                   //0x20
    struct _LIST_ENTRY FreeBins;                                            //0x260
    ULONG FreeSummary;                                                      //0x270
}; 

----------------------------------------
Structure: _DUMMY_FILE_OBJECT

//0x110 bytes (sizeof)
struct _DUMMY_FILE_OBJECT
{
    struct _OBJECT_HEADER ObjectHeader;                                     //0x0
    CHAR FileObjectBody[216];                                               //0x38
}; 

----------------------------------------
Structure: _DUMP_INITIALIZATION_CONTEXT

//0x108 bytes (sizeof)
struct _DUMP_INITIALIZATION_CONTEXT
{
    ULONG Length;                                                           //0x0
    ULONG Reserved;                                                         //0x4
    VOID* MemoryBlock;                                                      //0x8
    VOID* CommonBuffer[2];                                                  //0x10
    union _LARGE_INTEGER PhysicalAddress[2];                                //0x20
    VOID (*StallRoutine)(ULONG arg1);                                       //0x30
    UCHAR (*OpenRoutine)(union _LARGE_INTEGER arg1);                        //0x38
    LONG (*WriteRoutine)(union _LARGE_INTEGER* arg1, struct _MDL* arg2);    //0x40
    VOID (*FinishRoutine)();                                                //0x48
    struct _ADAPTER_OBJECT* AdapterObject;                                  //0x50
    VOID* MappedRegisterBase;                                               //0x58
    VOID* PortConfiguration;                                                //0x60
    UCHAR CrashDump;                                                        //0x68
    UCHAR MarkMemoryOnly;                                                   //0x69
    UCHAR HiberResume;                                                      //0x6a
    UCHAR Reserved1;                                                        //0x6b
    ULONG MaximumTransferSize;                                              //0x6c
    ULONG CommonBufferSize;                                                 //0x70
    VOID* TargetAddress;                                                    //0x78
    LONG (*WritePendingRoutine)(LONG arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3, VOID* arg4); //0x80
    ULONG PartitionStyle;                                                   //0x88
    union
    {
        struct
        {
            ULONG Signature;                                                //0x8c
            ULONG CheckSum;                                                 //0x90
        } Mbr;                                                              //0x8c
        struct
        {
            struct _GUID DiskId;                                            //0x8c
        } Gpt;                                                              //0x8c
    } DiskInfo;                                                             //0x8c
    LONG (*ReadRoutine)(LONG arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3); //0xa0
    LONG (*GetDriveTelemetryRoutine)(ULONG arg1, ULONG arg2, VOID* arg3, ULONG arg4); //0xa8
    ULONG LogSectionTruncateSize;                                           //0xb0
    ULONG Parameters[16];                                                   //0xb4
    VOID (*GetTransferSizesRoutine)(ULONG* arg1, ULONG* arg2);              //0xf8
    VOID (*DumpNotifyRoutine)(enum _DUMP_EVENTS arg1, VOID* arg2, ULONG arg3); //0x100
}; 

----------------------------------------
Structure: _DUMP_STACK_CONTEXT

//0x178 bytes (sizeof)
struct _DUMP_STACK_CONTEXT
{
    struct _DUMP_INITIALIZATION_CONTEXT Init;                               //0x0
    union _LARGE_INTEGER PartitionOffset;                                   //0x108
    union
    {
        VOID* DumpPointers;                                                 //0x110
        VOID* StorageInfo;                                                  //0x110
    };
    UCHAR UseStorageInfo;                                                   //0x118
    ULONG PointersLength;                                                   //0x11c
    WCHAR* ModulePrefix;                                                    //0x120
    struct _LIST_ENTRY DriverList;                                          //0x128
    struct _STRING InitMsg;                                                 //0x138
    struct _STRING ProgMsg;                                                 //0x148
    struct _STRING DoneMsg;                                                 //0x158
    VOID* FileObject;                                                       //0x168
    enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;                         //0x170
}; 

----------------------------------------
Structure: _DYNAMIC_FUNCTION_TABLE

//0x88 bytes (sizeof)
struct _DYNAMIC_FUNCTION_TABLE
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;                    //0x10
    union _LARGE_INTEGER TimeStamp;                                         //0x18
    ULONGLONG MinimumAddress;                                               //0x20
    ULONGLONG MaximumAddress;                                               //0x28
    ULONGLONG BaseAddress;                                                  //0x30
    struct _IMAGE_RUNTIME_FUNCTION_ENTRY* (*Callback)(ULONGLONG arg1, VOID* arg2); //0x38
    VOID* Context;                                                          //0x40
    WCHAR* OutOfProcessCallbackDll;                                         //0x48
    enum _FUNCTION_TABLE_TYPE Type;                                         //0x50
    ULONG EntryCount;                                                       //0x54
    struct _RTL_BALANCED_NODE TreeNodeMin;                                  //0x58
    struct _RTL_BALANCED_NODE TreeNodeMax;                                  //0x70
}; 

----------------------------------------
Structure: _ECP_LIST

//0x18 bytes (sizeof)
struct _ECP_LIST
{
    ULONG Signature;                                                        //0x0
    ULONG Flags;                                                            //0x4
    struct _LIST_ENTRY EcpList;                                             //0x8
}; 

----------------------------------------
Structure: _EFI_FIRMWARE_INFORMATION

//0x38 bytes (sizeof)
struct _EFI_FIRMWARE_INFORMATION
{
    ULONG FirmwareVersion;                                                  //0x0
    struct _VIRTUAL_EFI_RUNTIME_SERVICES* VirtualEfiRuntimeServices;        //0x8
    LONG SetVirtualAddressMapStatus;                                        //0x10
    ULONG MissedMappingsCount;                                              //0x14
    struct _LIST_ENTRY FirmwareResourceList;                                //0x18
    VOID* EfiMemoryMap;                                                     //0x28
    ULONG EfiMemoryMapSize;                                                 //0x30
    ULONG EfiMemoryMapDescriptorSize;                                       //0x34
}; 

----------------------------------------
Structure: _EJOB

//0x640 bytes (sizeof)
struct _EJOB
{
    struct _KEVENT Event;                                                   //0x0
    struct _LIST_ENTRY JobLinks;                                            //0x18
    struct _LIST_ENTRY ProcessListHead;                                     //0x28
    struct _ERESOURCE JobLock;                                              //0x38
    union _LARGE_INTEGER TotalUserTime;                                     //0xa0
    union _LARGE_INTEGER TotalKernelTime;                                   //0xa8
    union _LARGE_INTEGER TotalCycleTime;                                    //0xb0
    union _LARGE_INTEGER ThisPeriodTotalUserTime;                           //0xb8
    union _LARGE_INTEGER ThisPeriodTotalKernelTime;                         //0xc0
    ULONGLONG TotalContextSwitches;                                         //0xc8
    ULONG TotalPageFaultCount;                                              //0xd0
    ULONG TotalProcesses;                                                   //0xd4
    ULONG ActiveProcesses;                                                  //0xd8
    ULONG TotalTerminatedProcesses;                                         //0xdc
    union _LARGE_INTEGER PerProcessUserTimeLimit;                           //0xe0
    union _LARGE_INTEGER PerJobUserTimeLimit;                               //0xe8
    ULONGLONG MinimumWorkingSetSize;                                        //0xf0
    ULONGLONG MaximumWorkingSetSize;                                        //0xf8
    ULONG LimitFlags;                                                       //0x100
    ULONG ActiveProcessLimit;                                               //0x104
    struct _KAFFINITY_EX Affinity;                                          //0x108
    struct _JOB_ACCESS_STATE* AccessState;                                  //0x1b0
    VOID* AccessStateQuotaReference;                                        //0x1b8
    ULONG UIRestrictionsClass;                                              //0x1c0
    ULONG EndOfJobTimeAction;                                               //0x1c4
    VOID* CompletionPort;                                                   //0x1c8
    VOID* CompletionKey;                                                    //0x1d0
    ULONGLONG CompletionCount;                                              //0x1d8
    ULONG SessionId;                                                        //0x1e0
    ULONG SchedulingClass;                                                  //0x1e4
    ULONGLONG ReadOperationCount;                                           //0x1e8
    ULONGLONG WriteOperationCount;                                          //0x1f0
    ULONGLONG OtherOperationCount;                                          //0x1f8
    ULONGLONG ReadTransferCount;                                            //0x200
    ULONGLONG WriteTransferCount;                                           //0x208
    ULONGLONG OtherTransferCount;                                           //0x210
    struct _PROCESS_DISK_COUNTERS DiskIoInfo;                               //0x218
    ULONGLONG ProcessMemoryLimit;                                           //0x240
    ULONGLONG JobMemoryLimit;                                               //0x248
    ULONGLONG JobTotalMemoryLimit;                                          //0x250
    ULONGLONG PeakProcessMemoryUsed;                                        //0x258
    ULONGLONG PeakJobMemoryUsed;                                            //0x260
    struct _KAFFINITY_EX EffectiveAffinity;                                 //0x268
    union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;                  //0x310
    ULONGLONG EffectiveMinimumWorkingSetSize;                               //0x318
    ULONGLONG EffectiveMaximumWorkingSetSize;                               //0x320
    ULONGLONG EffectiveProcessMemoryLimit;                                  //0x328
    struct _EJOB* EffectiveProcessMemoryLimitJob;                           //0x330
    struct _EJOB* EffectivePerProcessUserTimeLimitJob;                      //0x338
    struct _EJOB* EffectiveNetIoRateLimitJob;                               //0x340
    struct _EJOB* EffectiveHeapAttributionJob;                              //0x348
    ULONG EffectiveLimitFlags;                                              //0x350
    ULONG EffectiveSchedulingClass;                                         //0x354
    ULONG EffectiveFreezeCount;                                             //0x358
    ULONG EffectiveBackgroundCount;                                         //0x35c
    ULONG EffectiveSwapCount;                                               //0x360
    ULONG EffectiveNotificationLimitCount;                                  //0x364
    UCHAR EffectivePriorityClass;                                           //0x368
    UCHAR PriorityClass;                                                    //0x369
    UCHAR NestingDepth;                                                     //0x36a
    UCHAR Reserved1[1];                                                     //0x36b
    ULONG CompletionFilter;                                                 //0x36c
    union
    {
        struct _WNF_STATE_NAME WakeChannel;                                 //0x370
        struct _PS_JOB_WAKE_INFORMATION WakeInfo;                           //0x370
    };
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;                               //0x3b8
    ULONG LowEdgeLatchFilter;                                               //0x3c0
    struct _EJOB* NotificationLink;                                         //0x3c8
    ULONGLONG CurrentJobMemoryUsed;                                         //0x3d0
    struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;                 //0x3d8
    VOID* NotificationInfoQuotaReference;                                   //0x3e0
    struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;             //0x3e8
    struct _JOB_CPU_RATE_CONTROL* CpuRateControl;                           //0x3f0
    VOID* EffectiveSchedulingGroup;                                         //0x3f8
    ULONGLONG ReadyTime;                                                    //0x400
    struct _EX_PUSH_LOCK MemoryLimitsLock;                                  //0x408
    struct _LIST_ENTRY SiblingJobLinks;                                     //0x410
    struct _LIST_ENTRY ChildJobListHead;                                    //0x420
    struct _EJOB* ParentJob;                                                //0x430
    struct _EJOB* volatile RootJob;                                         //0x438
    struct _LIST_ENTRY IteratorListHead;                                    //0x440
    ULONGLONG AncestorCount;                                                //0x450
    union
    {
        struct _EJOB** Ancestors;                                           //0x458
        VOID* SessionObject;                                                //0x458
    };
    struct _EPROCESS_VALUES Accounting;                                     //0x460
    ULONG ShadowActiveProcessCount;                                         //0x4c8
    ULONG ActiveAuxiliaryProcessCount;                                      //0x4cc
    ULONG SequenceNumber;                                                   //0x4d0
    ULONG JobId;                                                            //0x4d4
    struct _GUID ContainerId;                                               //0x4d8
    struct _GUID ContainerTelemetryId;                                      //0x4e8
    struct _ESERVERSILO_GLOBALS* ServerSiloGlobals;                         //0x4f8
    struct _PS_PROPERTY_SET PropertySet;                                    //0x500
    struct _PSP_STORAGE* Storage;                                           //0x518
    struct _JOB_NET_RATE_CONTROL* NetRateControl;                           //0x520
    union
    {
        ULONG JobFlags;                                                     //0x528
        struct
        {
            ULONG CloseDone:1;                                              //0x528
            ULONG MultiGroup:1;                                             //0x528
            ULONG OutstandingNotification:1;                                //0x528
            ULONG NotificationInProgress:1;                                 //0x528
            ULONG UILimits:1;                                               //0x528
            ULONG CpuRateControlActive:1;                                   //0x528
            ULONG OwnCpuRateControl:1;                                      //0x528
            ULONG Terminating:1;                                            //0x528
            ULONG WorkingSetLock:1;                                         //0x528
            ULONG JobFrozen:1;                                              //0x528
            ULONG Background:1;                                             //0x528
            ULONG WakeNotificationAllocated:1;                              //0x528
            ULONG WakeNotificationEnabled:1;                                //0x528
            ULONG WakeNotificationPending:1;                                //0x528
            ULONG LimitNotificationRequired:1;                              //0x528
            ULONG ZeroCountNotificationRequired:1;                          //0x528
            ULONG CycleTimeNotificationRequired:1;                          //0x528
            ULONG CycleTimeNotificationPending:1;                           //0x528
            ULONG TimersVirtualized:1;                                      //0x528
            ULONG JobSwapped:1;                                             //0x528
            ULONG ViolationDetected:1;                                      //0x528
            ULONG EmptyJobNotified:1;                                       //0x528
            ULONG NoSystemCharge:1;                                         //0x528
            ULONG DropNoWakeCharges:1;                                      //0x528
            ULONG NoWakeChargePolicyDecided:1;                              //0x528
            ULONG NetRateControlActive:1;                                   //0x528
            ULONG OwnNetRateControl:1;                                      //0x528
            ULONG IoRateControlActive:1;                                    //0x528
            ULONG OwnIoRateControl:1;                                       //0x528
            ULONG DisallowNewProcesses:1;                                   //0x528
            ULONG Silo:1;                                                   //0x528
            ULONG ContainerTelemetryIdSet:1;                                //0x528
        };
    };
    union
    {
        ULONG JobFlags2;                                                    //0x52c
        struct
        {
            ULONG ParentLocked:1;                                           //0x52c
            ULONG EnableUsermodeSiloThreadImpersonation:1;                  //0x52c
            ULONG DisallowUsermodeSiloThreadImpersonation:1;                //0x52c
        };
    };
    struct _PROCESS_EXTENDED_ENERGY_VALUES* EnergyValues;                   //0x530
    volatile ULONGLONG SharedCommitCharge;                                  //0x538
    ULONG DiskIoAttributionUserRefCount;                                    //0x540
    ULONG DiskIoAttributionRefCount;                                        //0x544
    union
    {
        VOID* DiskIoAttributionContext;                                     //0x548
        struct _EJOB* DiskIoAttributionOwnerJob;                            //0x548
    };
    struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;                    //0x550
    struct _PS_IO_CONTROL_ENTRY GlobalIoControl;                            //0x578
    volatile LONG IoControlStateLock;                                       //0x5b0
    struct _RTL_RB_TREE VolumeIoControlTree;                                //0x5b8
    ULONGLONG IoRateOverQuotaHistory;                                       //0x5c8
    ULONG IoRateCurrentGeneration;                                          //0x5d0
    ULONG IoRateLastQueryGeneration;                                        //0x5d4
    ULONG IoRateGenerationLength;                                           //0x5d8
    ULONG IoRateOverQuotaNotifySequenceId;                                  //0x5dc
    ULONGLONG LastThrottledIoTime;                                          //0x5e0
    struct _EX_PUSH_LOCK IoControlLock;                                     //0x5e8
    LONGLONG SiloHardReferenceCount;                                        //0x5f0
    struct _WORK_QUEUE_ITEM RundownWorkItem;                                //0x5f8
    VOID* PartitionObject;                                                  //0x618
    struct _EJOB* PartitionOwnerJob;                                        //0x620
    union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;             //0x628
    ULONGLONG KernelWaitTime;                                               //0x630
    ULONGLONG UserWaitTime;                                                 //0x638
}; 

----------------------------------------
Structure: _ENODE

//0x1c0 bytes (sizeof)
struct _ENODE
{
    struct _KNODE Ncb;                                                      //0x0
    struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem;                        //0x180
}; 

----------------------------------------
Structure: _EPARTITION

//0x80 bytes (sizeof)
struct _EPARTITION
{
    VOID* MmPartition;                                                      //0x0
    VOID* CcPartition;                                                      //0x8
    VOID* ExPartition;                                                      //0x10
    LONGLONG HardReferenceCount;                                            //0x18
    LONGLONG OpenHandleCount;                                               //0x20
    struct _LIST_ENTRY ActivePartitionLinks;                                //0x28
    struct _EPARTITION* ParentPartition;                                    //0x38
    struct _WORK_QUEUE_ITEM TeardownWorkItem;                               //0x40
    struct _EX_PUSH_LOCK TeardownLock;                                      //0x60
    struct _EPROCESS* SystemProcess;                                        //0x68
    VOID* SystemProcessHandle;                                              //0x70
    union
    {
        ULONG PartitionFlags;                                               //0x78
        ULONG PairedWithJob:1;                                              //0x78
    };
}; 

----------------------------------------
Structure: _EPROCESS

//0xa40 bytes (sizeof)
struct _EPROCESS
{
    struct _KPROCESS Pcb;                                                   //0x0
    struct _EX_PUSH_LOCK ProcessLock;                                       //0x438
    VOID* UniqueProcessId;                                                  //0x440
    struct _LIST_ENTRY ActiveProcessLinks;                                  //0x448
    struct _EX_RUNDOWN_REF RundownProtect;                                  //0x458
    union
    {
        ULONG Flags2;                                                       //0x460
        struct
        {
            ULONG JobNotReallyActive:1;                                     //0x460
            ULONG AccountingFolded:1;                                       //0x460
            ULONG NewProcessReported:1;                                     //0x460
            ULONG ExitProcessReported:1;                                    //0x460
            ULONG ReportCommitChanges:1;                                    //0x460
            ULONG LastReportMemory:1;                                       //0x460
            ULONG ForceWakeCharge:1;                                        //0x460
            ULONG CrossSessionCreate:1;                                     //0x460
            ULONG NeedsHandleRundown:1;                                     //0x460
            ULONG RefTraceEnabled:1;                                        //0x460
            ULONG PicoCreated:1;                                            //0x460
            ULONG EmptyJobEvaluated:1;                                      //0x460
            ULONG DefaultPagePriority:3;                                    //0x460
            ULONG PrimaryTokenFrozen:1;                                     //0x460
            ULONG ProcessVerifierTarget:1;                                  //0x460
            ULONG RestrictSetThreadContext:1;                               //0x460
            ULONG AffinityPermanent:1;                                      //0x460
            ULONG AffinityUpdateEnable:1;                                   //0x460
            ULONG PropagateNode:1;                                          //0x460
            ULONG ExplicitAffinity:1;                                       //0x460
            ULONG ProcessExecutionState:2;                                  //0x460
            ULONG EnableReadVmLogging:1;                                    //0x460
            ULONG EnableWriteVmLogging:1;                                   //0x460
            ULONG FatalAccessTerminationRequested:1;                        //0x460
            ULONG DisableSystemAllowedCpuSet:1;                             //0x460
            ULONG ProcessStateChangeRequest:2;                              //0x460
            ULONG ProcessStateChangeInProgress:1;                           //0x460
            ULONG InPrivate:1;                                              //0x460
        };
    };
    union
    {
        ULONG Flags;                                                        //0x464
        struct
        {
            ULONG CreateReported:1;                                         //0x464
            ULONG NoDebugInherit:1;                                         //0x464
            ULONG ProcessExiting:1;                                         //0x464
            ULONG ProcessDelete:1;                                          //0x464
            ULONG ManageExecutableMemoryWrites:1;                           //0x464
            ULONG VmDeleted:1;                                              //0x464
            ULONG OutswapEnabled:1;                                         //0x464
            ULONG Outswapped:1;                                             //0x464
            ULONG FailFastOnCommitFail:1;                                   //0x464
            ULONG Wow64VaSpace4Gb:1;                                        //0x464
            ULONG AddressSpaceInitialized:2;                                //0x464
            ULONG SetTimerResolution:1;                                     //0x464
            ULONG BreakOnTermination:1;                                     //0x464
            ULONG DeprioritizeViews:1;                                      //0x464
            ULONG WriteWatch:1;                                             //0x464
            ULONG ProcessInSession:1;                                       //0x464
            ULONG OverrideAddressSpace:1;                                   //0x464
            ULONG HasAddressSpace:1;                                        //0x464
            ULONG LaunchPrefetched:1;                                       //0x464
            ULONG Background:1;                                             //0x464
            ULONG VmTopDown:1;                                              //0x464
            ULONG ImageNotifyDone:1;                                        //0x464
            ULONG PdeUpdateNeeded:1;                                        //0x464
            ULONG VdmAllowed:1;                                             //0x464
            ULONG ProcessRundown:1;                                         //0x464
            ULONG ProcessInserted:1;                                        //0x464
            ULONG DefaultIoPriority:3;                                      //0x464
            ULONG ProcessSelfDelete:1;                                      //0x464
            ULONG SetTimerResolutionLink:1;                                 //0x464
        };
    };
    union _LARGE_INTEGER CreateTime;                                        //0x468
    ULONGLONG ProcessQuotaUsage[2];                                         //0x470
    ULONGLONG ProcessQuotaPeak[2];                                          //0x480
    ULONGLONG PeakVirtualSize;                                              //0x490
    ULONGLONG VirtualSize;                                                  //0x498
    struct _LIST_ENTRY SessionProcessLinks;                                 //0x4a0
    union
    {
        VOID* ExceptionPortData;                                            //0x4b0
        ULONGLONG ExceptionPortValue;                                       //0x4b0
        ULONGLONG ExceptionPortState:3;                                     //0x4b0
    };
    struct _EX_FAST_REF Token;                                              //0x4b8
    ULONGLONG MmReserved;                                                   //0x4c0
    struct _EX_PUSH_LOCK AddressCreationLock;                               //0x4c8
    struct _EX_PUSH_LOCK PageTableCommitmentLock;                           //0x4d0
    struct _ETHREAD* RotateInProgress;                                      //0x4d8
    struct _ETHREAD* ForkInProgress;                                        //0x4e0
    struct _EJOB* volatile CommitChargeJob;                                 //0x4e8
    struct _RTL_AVL_TREE CloneRoot;                                         //0x4f0
    volatile ULONGLONG NumberOfPrivatePages;                                //0x4f8
    volatile ULONGLONG NumberOfLockedPages;                                 //0x500
    VOID* Win32Process;                                                     //0x508
    struct _EJOB* volatile Job;                                             //0x510
    VOID* SectionObject;                                                    //0x518
    VOID* SectionBaseAddress;                                               //0x520
    ULONG Cookie;                                                           //0x528
    struct _PAGEFAULT_HISTORY* WorkingSetWatch;                             //0x530
    VOID* Win32WindowStation;                                               //0x538
    VOID* InheritedFromUniqueProcessId;                                     //0x540
    volatile ULONGLONG OwnerProcessId;                                      //0x548
    struct _PEB* Peb;                                                       //0x550
    struct _MM_SESSION_SPACE* Session;                                      //0x558
    VOID* Spare1;                                                           //0x560
    struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;                               //0x568
    struct _HANDLE_TABLE* ObjectTable;                                      //0x570
    VOID* DebugPort;                                                        //0x578
    struct _EWOW64PROCESS* WoW64Process;                                    //0x580
    VOID* DeviceMap;                                                        //0x588
    VOID* EtwDataSource;                                                    //0x590
    ULONGLONG PageDirectoryPte;                                             //0x598
    struct _FILE_OBJECT* ImageFilePointer;                                  //0x5a0
    UCHAR ImageFileName[15];                                                //0x5a8
    UCHAR PriorityClass;                                                    //0x5b7
    VOID* SecurityPort;                                                     //0x5b8
    struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;      //0x5c0
    struct _LIST_ENTRY JobLinks;                                            //0x5c8
    VOID* HighestUserAddress;                                               //0x5d8
    struct _LIST_ENTRY ThreadListHead;                                      //0x5e0
    volatile ULONG ActiveThreads;                                           //0x5f0
    ULONG ImagePathHash;                                                    //0x5f4
    ULONG DefaultHardErrorProcessing;                                       //0x5f8
    LONG LastThreadExitStatus;                                              //0x5fc
    struct _EX_FAST_REF PrefetchTrace;                                      //0x600
    VOID* LockedPagesList;                                                  //0x608
    union _LARGE_INTEGER ReadOperationCount;                                //0x610
    union _LARGE_INTEGER WriteOperationCount;                               //0x618
    union _LARGE_INTEGER OtherOperationCount;                               //0x620
    union _LARGE_INTEGER ReadTransferCount;                                 //0x628
    union _LARGE_INTEGER WriteTransferCount;                                //0x630
    union _LARGE_INTEGER OtherTransferCount;                                //0x638
    ULONGLONG CommitChargeLimit;                                            //0x640
    volatile ULONGLONG CommitCharge;                                        //0x648
    volatile ULONGLONG CommitChargePeak;                                    //0x650
    struct _MMSUPPORT_FULL Vm;                                              //0x680
    struct _LIST_ENTRY MmProcessLinks;                                      //0x7c0
    ULONG ModifiedPageCount;                                                //0x7d0
    LONG ExitStatus;                                                        //0x7d4
    struct _RTL_AVL_TREE VadRoot;                                           //0x7d8
    VOID* VadHint;                                                          //0x7e0
    ULONGLONG VadCount;                                                     //0x7e8
    volatile ULONGLONG VadPhysicalPages;                                    //0x7f0
    ULONGLONG VadPhysicalPagesLimit;                                        //0x7f8
    struct _ALPC_PROCESS_CONTEXT AlpcContext;                               //0x800
    struct _LIST_ENTRY TimerResolutionLink;                                 //0x820
    struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;               //0x830
    ULONG RequestedTimerResolution;                                         //0x838
    ULONG SmallestTimerResolution;                                          //0x83c
    union _LARGE_INTEGER ExitTime;                                          //0x840
    struct _INVERTED_FUNCTION_TABLE* InvertedFunctionTable;                 //0x848
    struct _EX_PUSH_LOCK InvertedFunctionTableLock;                         //0x850
    ULONG ActiveThreadsHighWatermark;                                       //0x858
    ULONG LargePrivateVadCount;                                             //0x85c
    struct _EX_PUSH_LOCK ThreadListLock;                                    //0x860
    VOID* WnfContext;                                                       //0x868
    struct _EJOB* ServerSilo;                                               //0x870
    UCHAR SignatureLevel;                                                   //0x878
    UCHAR SectionSignatureLevel;                                            //0x879
    struct _PS_PROTECTION Protection;                                       //0x87a
    UCHAR HangCount:3;                                                      //0x87b
    UCHAR GhostCount:3;                                                     //0x87b
    UCHAR PrefilterException:1;                                             //0x87b
    union
    {
        ULONG Flags3;                                                       //0x87c
        struct
        {
            ULONG Minimal:1;                                                //0x87c
            ULONG ReplacingPageRoot:1;                                      //0x87c
            ULONG Crashed:1;                                                //0x87c
            ULONG JobVadsAreTracked:1;                                      //0x87c
            ULONG VadTrackingDisabled:1;                                    //0x87c
            ULONG AuxiliaryProcess:1;                                       //0x87c
            ULONG SubsystemProcess:1;                                       //0x87c
            ULONG IndirectCpuSets:1;                                        //0x87c
            ULONG RelinquishedCommit:1;                                     //0x87c
            ULONG HighGraphicsPriority:1;                                   //0x87c
            ULONG CommitFailLogged:1;                                       //0x87c
            ULONG ReserveFailLogged:1;                                      //0x87c
            ULONG SystemProcess:1;                                          //0x87c
            ULONG HideImageBaseAddresses:1;                                 //0x87c
            ULONG AddressPolicyFrozen:1;                                    //0x87c
            ULONG ProcessFirstResume:1;                                     //0x87c
            ULONG ForegroundExternal:1;                                     //0x87c
            ULONG ForegroundSystem:1;                                       //0x87c
            ULONG HighMemoryPriority:1;                                     //0x87c
            ULONG EnableProcessSuspendResumeLogging:1;                      //0x87c
            ULONG EnableThreadSuspendResumeLogging:1;                       //0x87c
            ULONG SecurityDomainChanged:1;                                  //0x87c
            ULONG SecurityFreezeComplete:1;                                 //0x87c
            ULONG VmProcessorHost:1;                                        //0x87c
            ULONG VmProcessorHostTransition:1;                              //0x87c
            ULONG AltSyscall:1;                                             //0x87c
            ULONG TimerResolutionIgnore:1;                                  //0x87c
            ULONG DisallowUserTerminate:1;                                  //0x87c
        };
    };
    LONG DeviceAsid;                                                        //0x880
    VOID* SvmData;                                                          //0x888
    struct _EX_PUSH_LOCK SvmProcessLock;                                    //0x890
    ULONGLONG SvmLock;                                                      //0x898
    struct _LIST_ENTRY SvmProcessDeviceListHead;                            //0x8a0
    ULONGLONG LastFreezeInterruptTime;                                      //0x8b0
    struct _PROCESS_DISK_COUNTERS* DiskCounters;                            //0x8b8
    VOID* PicoContext;                                                      //0x8c0
    VOID* EnclaveTable;                                                     //0x8c8
    ULONGLONG EnclaveNumber;                                                //0x8d0
    struct _EX_PUSH_LOCK EnclaveLock;                                       //0x8d8
    ULONG HighPriorityFaultsAllowed;                                        //0x8e0
    struct _PO_PROCESS_ENERGY_CONTEXT* EnergyContext;                       //0x8e8
    VOID* VmContext;                                                        //0x8f0
    ULONGLONG SequenceNumber;                                               //0x8f8
    ULONGLONG CreateInterruptTime;                                          //0x900
    ULONGLONG CreateUnbiasedInterruptTime;                                  //0x908
    ULONGLONG TotalUnbiasedFrozenTime;                                      //0x910
    ULONGLONG LastAppStateUpdateTime;                                       //0x918
    ULONGLONG LastAppStateUptime:61;                                        //0x920
    ULONGLONG LastAppState:3;                                               //0x920
    volatile ULONGLONG SharedCommitCharge;                                  //0x928
    struct _EX_PUSH_LOCK SharedCommitLock;                                  //0x930
    struct _LIST_ENTRY SharedCommitLinks;                                   //0x938
    union
    {
        struct
        {
            ULONGLONG AllowedCpuSets;                                       //0x948
            ULONGLONG DefaultCpuSets;                                       //0x950
        };
        struct
        {
            ULONGLONG* AllowedCpuSetsIndirect;                              //0x948
            ULONGLONG* DefaultCpuSetsIndirect;                              //0x950
        };
    };
    VOID* DiskIoAttribution;                                                //0x958
    VOID* DxgProcess;                                                       //0x960
    ULONG Win32KFilterSet;                                                  //0x968
    unionvolatile _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;     //0x970
    volatile ULONG KTimerSets;                                              //0x978
    volatile ULONG KTimer2Sets;                                             //0x97c
    volatile ULONG ThreadTimerSets;                                         //0x980
    ULONGLONG VirtualTimerListLock;                                         //0x988
    struct _LIST_ENTRY VirtualTimerListHead;                                //0x990
    union
    {
        struct _WNF_STATE_NAME WakeChannel;                                 //0x9a0
        struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;                       //0x9a0
    };
    union
    {
        ULONG MitigationFlags;                                              //0x9d0
        struct
        {
            ULONG ControlFlowGuardEnabled:1;                                //0x9d0
            ULONG ControlFlowGuardExportSuppressionEnabled:1;               //0x9d0
            ULONG ControlFlowGuardStrict:1;                                 //0x9d0
            ULONG DisallowStrippedImages:1;                                 //0x9d0
            ULONG ForceRelocateImages:1;                                    //0x9d0
            ULONG HighEntropyASLREnabled:1;                                 //0x9d0
            ULONG StackRandomizationDisabled:1;                             //0x9d0
            ULONG ExtensionPointDisable:1;                                  //0x9d0
            ULONG DisableDynamicCode:1;                                     //0x9d0
            ULONG DisableDynamicCodeAllowOptOut:1;                          //0x9d0
            ULONG DisableDynamicCodeAllowRemoteDowngrade:1;                 //0x9d0
            ULONG AuditDisableDynamicCode:1;                                //0x9d0
            ULONG DisallowWin32kSystemCalls:1;                              //0x9d0
            ULONG AuditDisallowWin32kSystemCalls:1;                         //0x9d0
            ULONG EnableFilteredWin32kAPIs:1;                               //0x9d0
            ULONG AuditFilteredWin32kAPIs:1;                                //0x9d0
            ULONG DisableNonSystemFonts:1;                                  //0x9d0
            ULONG AuditNonSystemFontLoading:1;                              //0x9d0
            ULONG PreferSystem32Images:1;                                   //0x9d0
            ULONG ProhibitRemoteImageMap:1;                                 //0x9d0
            ULONG AuditProhibitRemoteImageMap:1;                            //0x9d0
            ULONG ProhibitLowILImageMap:1;                                  //0x9d0
            ULONG AuditProhibitLowILImageMap:1;                             //0x9d0
            ULONG SignatureMitigationOptIn:1;                               //0x9d0
            ULONG AuditBlockNonMicrosoftBinaries:1;                         //0x9d0
            ULONG AuditBlockNonMicrosoftBinariesAllowStore:1;               //0x9d0
            ULONG LoaderIntegrityContinuityEnabled:1;                       //0x9d0
            ULONG AuditLoaderIntegrityContinuity:1;                         //0x9d0
            ULONG EnableModuleTamperingProtection:1;                        //0x9d0
            ULONG EnableModuleTamperingProtectionNoInherit:1;               //0x9d0
            ULONG RestrictIndirectBranchPrediction:1;                       //0x9d0
            ULONG IsolateSecurityDomain:1;                                  //0x9d0
        } MitigationFlagsValues;                                            //0x9d0
    };
    union
    {
        ULONG MitigationFlags2;                                             //0x9d4
        struct
        {
            ULONG EnableExportAddressFilter:1;                              //0x9d4
            ULONG AuditExportAddressFilter:1;                               //0x9d4
            ULONG EnableExportAddressFilterPlus:1;                          //0x9d4
            ULONG AuditExportAddressFilterPlus:1;                           //0x9d4
            ULONG EnableRopStackPivot:1;                                    //0x9d4
            ULONG AuditRopStackPivot:1;                                     //0x9d4
            ULONG EnableRopCallerCheck:1;                                   //0x9d4
            ULONG AuditRopCallerCheck:1;                                    //0x9d4
            ULONG EnableRopSimExec:1;                                       //0x9d4
            ULONG AuditRopSimExec:1;                                        //0x9d4
            ULONG EnableImportAddressFilter:1;                              //0x9d4
            ULONG AuditImportAddressFilter:1;                               //0x9d4
            ULONG DisablePageCombine:1;                                     //0x9d4
            ULONG SpeculativeStoreBypassDisable:1;                          //0x9d4
            ULONG CetUserShadowStacks:1;                                    //0x9d4
            ULONG AuditCetUserShadowStacks:1;                               //0x9d4
            ULONG AuditCetUserShadowStacksLogged:1;                         //0x9d4
            ULONG UserCetSetContextIpValidation:1;                          //0x9d4
            ULONG AuditUserCetSetContextIpValidation:1;                     //0x9d4
            ULONG AuditUserCetSetContextIpValidationLogged:1;               //0x9d4
            ULONG CetUserShadowStacksStrictMode:1;                          //0x9d4
            ULONG BlockNonCetBinaries:1;                                    //0x9d4
            ULONG BlockNonCetBinariesNonEhcont:1;                           //0x9d4
            ULONG AuditBlockNonCetBinaries:1;                               //0x9d4
            ULONG AuditBlockNonCetBinariesLogged:1;                         //0x9d4
            ULONG Reserved1:1;                                              //0x9d4
            ULONG Reserved2:1;                                              //0x9d4
            ULONG Reserved3:1;                                              //0x9d4
            ULONG Reserved4:1;                                              //0x9d4
            ULONG Reserved5:1;                                              //0x9d4
            ULONG CetDynamicApisOutOfProcOnly:1;                            //0x9d4
            ULONG UserCetSetContextIpValidationRelaxedMode:1;               //0x9d4
        } MitigationFlags2Values;                                           //0x9d4
    };
    VOID* PartitionObject;                                                  //0x9d8
    ULONGLONG SecurityDomain;                                               //0x9e0
    ULONGLONG ParentSecurityDomain;                                         //0x9e8
    VOID* CoverageSamplerContext;                                           //0x9f0
    VOID* MmHotPatchContext;                                                //0x9f8
    struct _RTL_AVL_TREE DynamicEHContinuationTargetsTree;                  //0xa00
    struct _EX_PUSH_LOCK DynamicEHContinuationTargetsLock;                  //0xa08
    struct _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES DynamicEnforcedCetCompatibleRanges; //0xa10
    ULONG DisabledComponentFlags;                                           //0xa20
    ULONG* volatile PathRedirectionHashes;                                  //0xa28
}; 

----------------------------------------
Structure: _EPROCESS_QUOTA_BLOCK

//0x0 bytes (sizeof)
struct _EPROCESS_QUOTA_BLOCK; 

----------------------------------------
Structure: _EPROCESS_VALUES

//0x68 bytes (sizeof)
struct _EPROCESS_VALUES
{
    ULONGLONG KernelTime;                                                   //0x0
    ULONGLONG UserTime;                                                     //0x8
    ULONGLONG ReadyTime;                                                    //0x10
    ULONGLONG CycleTime;                                                    //0x18
    ULONGLONG ContextSwitches;                                              //0x20
    LONGLONG ReadOperationCount;                                            //0x28
    LONGLONG WriteOperationCount;                                           //0x30
    LONGLONG OtherOperationCount;                                           //0x38
    LONGLONG ReadTransferCount;                                             //0x40
    LONGLONG WriteTransferCount;                                            //0x48
    LONGLONG OtherTransferCount;                                            //0x50
    ULONGLONG KernelWaitTime;                                               //0x58
    ULONGLONG UserWaitTime;                                                 //0x60
}; 

----------------------------------------
Structure: _ERESOURCE

//0x68 bytes (sizeof)
struct _ERESOURCE
{
    struct _LIST_ENTRY SystemResourcesList;                                 //0x0
    struct _OWNER_ENTRY* OwnerTable;                                        //0x10
    SHORT ActiveCount;                                                      //0x18
    union
    {
        USHORT Flag;                                                        //0x1a
        struct
        {
            UCHAR ReservedLowFlags;                                         //0x1a
            UCHAR WaiterPriority;                                           //0x1b
        };
    };
    VOID* SharedWaiters;                                                    //0x20
    VOID* ExclusiveWaiters;                                                 //0x28
    struct _OWNER_ENTRY OwnerEntry;                                         //0x30
    ULONG ActiveEntries;                                                    //0x40
    ULONG ContentionCount;                                                  //0x44
    ULONG NumberOfSharedWaiters;                                            //0x48
    ULONG NumberOfExclusiveWaiters;                                         //0x4c
    VOID* Reserved2;                                                        //0x50
    union
    {
        VOID* Address;                                                      //0x58
        ULONGLONG CreatorBackTraceIndex;                                    //0x58
    };
    ULONGLONG SpinLock;                                                     //0x60
}; 

----------------------------------------
Structure: _ESERVERSILO_GLOBALS

//0x4a0 bytes (sizeof)
struct _ESERVERSILO_GLOBALS
{
    struct _OBP_SILODRIVERSTATE ObSiloState;                                //0x0
    struct _SEP_SILOSTATE SeSiloState;                                      //0x2e0
    struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;                      //0x310
    struct _ETW_SILODRIVERSTATE* EtwSiloState;                              //0x360
    struct _EPROCESS* MiSessionLeaderProcess;                               //0x368
    struct _EPROCESS* ExpDefaultErrorPortProcess;                           //0x370
    VOID* ExpDefaultErrorPort;                                              //0x378
    ULONG HardErrorState;                                                   //0x380
    struct _EXP_LICENSE_STATE* ExpLicenseState;                             //0x388
    struct _WNF_SILODRIVERSTATE WnfSiloState;                               //0x390
    struct _DBGK_SILOSTATE DbgkSiloState;                                   //0x3c8
    struct _UNICODE_STRING PsProtectedCurrentDirectory;                     //0x3e8
    struct _UNICODE_STRING PsProtectedEnvironment;                          //0x3f8
    VOID* ApiSetSection;                                                    //0x408
    VOID* ApiSetSchema;                                                     //0x410
    UCHAR OneCoreForwardersEnabled;                                         //0x418
    UCHAR TzVirtualizationSupported;                                        //0x419
    VOID* ImgFileExecOptions;                                               //0x420
    struct _EX_TIMEZONE_STATE* ExTimeZoneState;                             //0x428
    struct _UNICODE_STRING NtSystemRoot;                                    //0x430
    struct _UNICODE_STRING SiloRootDirectoryName;                           //0x440
    struct _PSP_STORAGE* Storage;                                           //0x450
    enum _SERVERSILO_STATE State;                                           //0x458
    LONG ExitStatus;                                                        //0x45c
    struct _KEVENT* DeleteEvent;                                            //0x460
    struct _SILO_USER_SHARED_DATA* UserSharedData;                          //0x468
    VOID* UserSharedSection;                                                //0x470
    struct _WORK_QUEUE_ITEM TerminateWorkItem;                              //0x478
    UCHAR IsDownlevelContainer;                                             //0x498
}; 

----------------------------------------
Structure: _ETHREAD

//0x898 bytes (sizeof)
struct _ETHREAD
{
    struct _KTHREAD Tcb;                                                    //0x0
    union _LARGE_INTEGER CreateTime;                                        //0x430
    union
    {
        union _LARGE_INTEGER ExitTime;                                      //0x438
        struct _LIST_ENTRY KeyedWaitChain;                                  //0x438
    };
    union
    {
        struct _LIST_ENTRY PostBlockList;                                   //0x448
        struct
        {
            VOID* ForwardLinkShadow;                                        //0x448
            VOID* StartAddress;                                             //0x450
        };
    };
    union
    {
        struct _TERMINATION_PORT* TerminationPort;                          //0x458
        struct _ETHREAD* ReaperLink;                                        //0x458
        VOID* KeyedWaitValue;                                               //0x458
    };
    ULONGLONG ActiveTimerListLock;                                          //0x460
    struct _LIST_ENTRY ActiveTimerListHead;                                 //0x468
    struct _CLIENT_ID Cid;                                                  //0x478
    union
    {
        struct _KSEMAPHORE KeyedWaitSemaphore;                              //0x488
        struct _KSEMAPHORE AlpcWaitSemaphore;                               //0x488
    };
    union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;                       //0x4a8
    struct _LIST_ENTRY IrpList;                                             //0x4b0
    ULONGLONG TopLevelIrp;                                                  //0x4c0
    struct _DEVICE_OBJECT* DeviceToVerify;                                  //0x4c8
    VOID* Win32StartAddress;                                                //0x4d0
    VOID* ChargeOnlySession;                                                //0x4d8
    VOID* LegacyPowerObject;                                                //0x4e0
    struct _LIST_ENTRY ThreadListEntry;                                     //0x4e8
    struct _EX_RUNDOWN_REF RundownProtect;                                  //0x4f8
    struct _EX_PUSH_LOCK ThreadLock;                                        //0x500
    ULONG ReadClusterSize;                                                  //0x508
    volatile LONG MmLockOrdering;                                           //0x50c
    union
    {
        ULONG CrossThreadFlags;                                             //0x510
        struct
        {
            ULONG Terminated:1;                                             //0x510
            ULONG ThreadInserted:1;                                         //0x510
            ULONG HideFromDebugger:1;                                       //0x510
            ULONG ActiveImpersonationInfo:1;                                //0x510
            ULONG HardErrorsAreDisabled:1;                                  //0x510
            ULONG BreakOnTermination:1;                                     //0x510
            ULONG SkipCreationMsg:1;                                        //0x510
            ULONG SkipTerminationMsg:1;                                     //0x510
            ULONG CopyTokenOnOpen:1;                                        //0x510
            ULONG ThreadIoPriority:3;                                       //0x510
            ULONG ThreadPagePriority:3;                                     //0x510
            ULONG RundownFail:1;                                            //0x510
            ULONG UmsForceQueueTermination:1;                               //0x510
            ULONG IndirectCpuSets:1;                                        //0x510
            ULONG DisableDynamicCodeOptOut:1;                               //0x510
            ULONG ExplicitCaseSensitivity:1;                                //0x510
            ULONG PicoNotifyExit:1;                                         //0x510
            ULONG DbgWerUserReportActive:1;                                 //0x510
            ULONG ForcedSelfTrimActive:1;                                   //0x510
            ULONG SamplingCoverage:1;                                       //0x510
            ULONG ReservedCrossThreadFlags:8;                               //0x510
        };
    };
    union
    {
        ULONG SameThreadPassiveFlags;                                       //0x514
        struct
        {
            ULONG ActiveExWorker:1;                                         //0x514
            ULONG MemoryMaker:1;                                            //0x514
            ULONG StoreLockThread:2;                                        //0x514
            ULONG ClonedThread:1;                                           //0x514
            ULONG KeyedEventInUse:1;                                        //0x514
            ULONG SelfTerminate:1;                                          //0x514
            ULONG RespectIoPriority:1;                                      //0x514
            ULONG ActivePageLists:1;                                        //0x514
            ULONG SecureContext:1;                                          //0x514
            ULONG ZeroPageThread:1;                                         //0x514
            ULONG WorkloadClass:1;                                          //0x514
            ULONG ReservedSameThreadPassiveFlags:20;                        //0x514
        };
    };
    union
    {
        ULONG SameThreadApcFlags;                                           //0x518
        struct
        {
            UCHAR OwnsProcessAddressSpaceExclusive:1;                       //0x518
            UCHAR OwnsProcessAddressSpaceShared:1;                          //0x518
            UCHAR HardFaultBehavior:1;                                      //0x518
            volatile UCHAR StartAddressInvalid:1;                           //0x518
            UCHAR EtwCalloutActive:1;                                       //0x518
            UCHAR SuppressSymbolLoad:1;                                     //0x518
            UCHAR Prefetching:1;                                            //0x518
            UCHAR OwnsVadExclusive:1;                                       //0x518
            UCHAR SystemPagePriorityActive:1;                               //0x519
            UCHAR SystemPagePriority:3;                                     //0x519
            UCHAR AllowUserWritesToExecutableMemory:1;                      //0x519
            UCHAR AllowKernelWritesToExecutableMemory:1;                    //0x519
            UCHAR OwnsVadShared:1;                                          //0x519
        };
    };
    UCHAR CacheManagerActive;                                               //0x51c
    UCHAR DisablePageFaultClustering;                                       //0x51d
    UCHAR ActiveFaultCount;                                                 //0x51e
    UCHAR LockOrderState;                                                   //0x51f
    ULONG PerformanceCountLowReserved;                                      //0x520
    LONG PerformanceCountHighReserved;                                      //0x524
    ULONGLONG AlpcMessageId;                                                //0x528
    union
    {
        VOID* AlpcMessage;                                                  //0x530
        ULONG AlpcReceiveAttributeSet;                                      //0x530
    };
    struct _LIST_ENTRY AlpcWaitListEntry;                                   //0x538
    LONG ExitStatus;                                                        //0x548
    ULONG CacheManagerCount;                                                //0x54c
    ULONG IoBoostCount;                                                     //0x550
    ULONG IoQoSBoostCount;                                                  //0x554
    ULONG IoQoSThrottleCount;                                               //0x558
    ULONG KernelStackReference;                                             //0x55c
    struct _LIST_ENTRY BoostList;                                           //0x560
    struct _LIST_ENTRY DeboostList;                                         //0x570
    ULONGLONG BoostListLock;                                                //0x580
    ULONGLONG IrpListLock;                                                  //0x588
    VOID* ReservedForSynchTracking;                                         //0x590
    struct _SINGLE_LIST_ENTRY CmCallbackListHead;                           //0x598
    struct _GUID* ActivityId;                                               //0x5a0
    struct _SINGLE_LIST_ENTRY SeLearningModeListHead;                       //0x5a8
    VOID* VerifierContext;                                                  //0x5b0
    VOID* AdjustedClientToken;                                              //0x5b8
    VOID* WorkOnBehalfThread;                                               //0x5c0
    struct _PS_PROPERTY_SET PropertySet;                                    //0x5c8
    VOID* PicoContext;                                                      //0x5e0
    ULONGLONG UserFsBase;                                                   //0x5e8
    ULONGLONG UserGsBase;                                                   //0x5f0
    struct _THREAD_ENERGY_VALUES* EnergyValues;                             //0x5f8
    union
    {
        ULONGLONG SelectedCpuSets;                                          //0x600
        ULONGLONG* SelectedCpuSetsIndirect;                                 //0x600
    };
    struct _EJOB* Silo;                                                     //0x608
    struct _UNICODE_STRING* ThreadName;                                     //0x610
    struct _CONTEXT* SetContextState;                                       //0x618
    ULONG LastExpectedRunTime;                                              //0x620
    ULONG HeapData;                                                         //0x624
    struct _LIST_ENTRY OwnerEntryListHead;                                  //0x628
    ULONGLONG DisownedOwnerEntryListLock;                                   //0x638
    struct _LIST_ENTRY DisownedOwnerEntryListHead;                          //0x640
    struct _KLOCK_ENTRY LockEntries[6];                                     //0x650
    VOID* CmDbgInfo;                                                        //0x890
}; 

----------------------------------------
Structure: _ETIMER

//0x138 bytes (sizeof)
struct _ETIMER
{
    struct _KTIMER KeTimer;                                                 //0x0
    ULONGLONG Lock;                                                         //0x40
    struct _KAPC TimerApc;                                                  //0x48
    struct _KDPC TimerDpc;                                                  //0xa0
    struct _LIST_ENTRY ActiveTimerListEntry;                                //0xe0
    ULONG Period;                                                           //0xf0
    union
    {
        CHAR TimerFlags;                                                    //0xf4
        struct
        {
            UCHAR ApcAssociated:1;                                          //0xf4
            UCHAR FlushDpcs:1;                                              //0xf4
            UCHAR Paused:1;                                                 //0xf4
            UCHAR Spare1:5;                                                 //0xf4
        };
    };
    UCHAR DueTimeType;                                                      //0xf5
    USHORT Spare2;                                                          //0xf6
    struct _DIAGNOSTIC_CONTEXT* volatile WakeReason;                        //0xf8
    struct _LIST_ENTRY WakeTimerListEntry;                                  //0x100
    VOID* VirtualizedTimerCookie;                                           //0x110
    struct _LIST_ENTRY VirtualizedTimerLinks;                               //0x118
    ULONGLONG DueTime;                                                      //0x128
    ULONG CoalescingWindow;                                                 //0x130
}; 

----------------------------------------
Structure: _ETWP_NOTIFICATION_HEADER

//0x48 bytes (sizeof)
struct _ETWP_NOTIFICATION_HEADER
{
    enum _ETW_NOTIFICATION_TYPE NotificationType;                           //0x0
    ULONG NotificationSize;                                                 //0x4
    LONG RefCount;                                                          //0x8
    UCHAR ReplyRequested;                                                   //0xc
    union
    {
        ULONG ReplyIndex;                                                   //0x10
        ULONG Timeout;                                                      //0x10
    };
    union
    {
        ULONG ReplyCount;                                                   //0x14
        ULONG NotifyeeCount;                                                //0x14
    };
    union
    {
        ULONGLONG ReplyHandle;                                              //0x18
        VOID* ReplyObject;                                                  //0x18
        ULONG RegIndex;                                                     //0x18
    };
    ULONG TargetPID;                                                        //0x20
    ULONG SourcePID;                                                        //0x24
    struct _GUID DestinationGuid;                                           //0x28
    struct _GUID SourceGuid;                                                //0x38
}; 

----------------------------------------
Structure: _ETW_APC_ENTRY

//0x60 bytes (sizeof)
struct _ETW_APC_ENTRY
{
    union
    {
        struct _SLIST_ENTRY SListEntry;                                     //0x0
        struct _KAPC Apc;                                                   //0x0
    };
}; 

----------------------------------------
Structure: _ETW_BUFFER_CONTEXT

//0x4 bytes (sizeof)
struct _ETW_BUFFER_CONTEXT
{
    union
    {
        struct
        {
            UCHAR ProcessorNumber;                                          //0x0
            UCHAR Alignment;                                                //0x1
        };
        USHORT ProcessorIndex;                                              //0x0
    };
    USHORT LoggerId;                                                        //0x2
}; 

----------------------------------------
Structure: _ETW_BUFFER_QUEUE

//0x10 bytes (sizeof)
struct _ETW_BUFFER_QUEUE
{
    struct _SINGLE_LIST_ENTRY* QueueTail;                                   //0x0
    struct _SINGLE_LIST_ENTRY QueueEntry;                                   //0x8
}; 

----------------------------------------
Structure: _ETW_COUNTERS

//0x10 bytes (sizeof)
struct _ETW_COUNTERS
{
    LONG GuidCount;                                                         //0x0
    LONG PoolUsage[2];                                                      //0x4
    LONG SessionCount;                                                      //0xc
}; 

----------------------------------------
Structure: _ETW_DEBUGID_TRACKING_ENTRY

//0x38 bytes (sizeof)
struct _ETW_DEBUGID_TRACKING_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    UCHAR ConsumersNotified;                                                //0x10
    UCHAR Spare[3];                                                         //0x11
    ULONG DebugIdSize;                                                      //0x14
    union _CVDD DebugId;                                                    //0x18
}; 

----------------------------------------
Structure: _ETW_DECODE_CONTROL_ENTRY

//0x30 bytes (sizeof)
struct _ETW_DECODE_CONTROL_ENTRY
{
    struct _ETW_DECODE_CONTROL_ENTRY* Next;                                 //0x0
    struct _GUID Decode;                                                    //0x8
    struct _GUID Control;                                                   //0x18
    UCHAR ConsumersNotified;                                                //0x28
}; 

----------------------------------------
Structure: _ETW_EVENT_CALLBACK_CONTEXT

//0x0 bytes (sizeof)
struct _ETW_EVENT_CALLBACK_CONTEXT; 

----------------------------------------
Structure: _ETW_FILTER_EVENT_NAME_DATA

//0x28 bytes (sizeof)
struct _ETW_FILTER_EVENT_NAME_DATA
{
    UCHAR FilterIn;                                                         //0x0
    UCHAR Level;                                                            //0x1
    ULONGLONG MatchAnyKeyword;                                              //0x8
    ULONGLONG MatchAllKeyword;                                              //0x10
    struct _RTL_HASH_TABLE NameTable;                                       //0x18
}; 

----------------------------------------
Structure: _ETW_FILTER_HEADER

//0x68 bytes (sizeof)
struct _ETW_FILTER_HEADER
{
    LONG FilterFlags;                                                       //0x0
    struct _ETW_FILTER_PID* PidFilter;                                      //0x8
    struct _ETW_FILTER_STRING_TOKEN* ExeFilter;                             //0x10
    struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;                           //0x18
    struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;                        //0x20
    struct _ETW_FILTER_STRING_TOKEN* ContainerFilter;                       //0x28
    struct _ETW_PERFECT_HASH_FUNCTION* StackWalkIdFilter;                   //0x30
    struct _ETW_FILTER_EVENT_NAME_DATA* StackWalkNameFilter;                //0x38
    struct _EVENT_FILTER_LEVEL_KW* StackWalkLevelKwFilter;                  //0x40
    struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;                       //0x48
    struct _ETW_PAYLOAD_FILTER* PayloadFilter;                              //0x50
    struct _EVENT_FILTER_HEADER* ProviderSideFilter;                        //0x58
    struct _ETW_FILTER_EVENT_NAME_DATA* EventNameFilter;                    //0x60
}; 

----------------------------------------
Structure: _ETW_FILTER_PID

//0x24 bytes (sizeof)
struct _ETW_FILTER_PID
{
    ULONG Count;                                                            //0x0
    ULONG Pids[8];                                                          //0x4
}; 

----------------------------------------
Structure: _ETW_FILTER_STRING_TOKEN

//0x18 bytes (sizeof)
struct _ETW_FILTER_STRING_TOKEN
{
    USHORT Count;                                                           //0x0
    struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];                      //0x8
}; 

----------------------------------------
Structure: _ETW_FILTER_STRING_TOKEN_ELEMENT

//0x10 bytes (sizeof)
struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
    USHORT Length;                                                          //0x0
    WCHAR* String;                                                          //0x8
}; 

----------------------------------------
Structure: _ETW_GUID_ENTRY

//0x1a8 bytes (sizeof)
struct _ETW_GUID_ENTRY
{
    struct _LIST_ENTRY GuidList;                                            //0x0
    struct _LIST_ENTRY SiloGuidList;                                        //0x10
    volatile LONGLONG RefCount;                                             //0x20
    struct _GUID Guid;                                                      //0x28
    struct _LIST_ENTRY RegListHead;                                         //0x38
    VOID* SecurityDescriptor;                                               //0x48
    union
    {
        struct _ETW_LAST_ENABLE_INFO LastEnable;                            //0x50
        ULONGLONG MatchId;                                                  //0x50
    };
    struct _TRACE_ENABLE_INFO ProviderEnableInfo;                           //0x60
    struct _TRACE_ENABLE_INFO EnableInfo[8];                                //0x80
    struct _ETW_FILTER_HEADER* FilterData;                                  //0x180
    struct _ETW_SILODRIVERSTATE* SiloState;                                 //0x188
    struct _ETW_GUID_ENTRY* HostEntry;                                      //0x190
    struct _EX_PUSH_LOCK Lock;                                              //0x198
    struct _ETHREAD* LockOwner;                                             //0x1a0
}; 

----------------------------------------
Structure: _ETW_HASH_BUCKET

//0x38 bytes (sizeof)
struct _ETW_HASH_BUCKET
{
    struct _LIST_ENTRY ListHead[3];                                         //0x0
    struct _EX_PUSH_LOCK BucketLock;                                        //0x30
}; 

----------------------------------------
Structure: _ETW_HW_TRACE_EXT_INTERFACE

//0x18 bytes (sizeof)
struct _ETW_HW_TRACE_EXT_INTERFACE
{
    LONG (*StartProcessorTraceOnEachCore)(ULONGLONG arg1, VOID** arg2);     //0x0
    LONG (*StopProcessorTraceOnEachCore)(VOID* arg1);                       //0x8
    LONG (*LogProcessorTraceOnCurrentCore)(VOID* arg1, VOID* arg2);         //0x10
}; 

----------------------------------------
Structure: _ETW_IPT_SUPPORT

//0x28 bytes (sizeof)
struct _ETW_IPT_SUPPORT
{
    VOID* IptHandle;                                                        //0x0
    ULONGLONG IptOption;                                                    //0x8
    struct _ETW_HW_TRACE_EXT_INTERFACE* EtwHwTraceExtInterface;             //0x10
    volatile ULONG HookIdCount;                                             //0x18
    USHORT HookId[4];                                                       //0x1c
}; 

----------------------------------------
Structure: _ETW_LAST_ENABLE_INFO

//0x10 bytes (sizeof)
struct _ETW_LAST_ENABLE_INFO
{
    union _LARGE_INTEGER EnableFlags;                                       //0x0
    USHORT LoggerId;                                                        //0x8
    UCHAR Level;                                                            //0xa
    UCHAR Enabled:1;                                                        //0xb
    UCHAR InternalFlag:7;                                                   //0xb
}; 

----------------------------------------
Structure: _ETW_LBR_SUPPORT

//0x14 bytes (sizeof)
struct _ETW_LBR_SUPPORT
{
    ULONG LbrHandle;                                                        //0x0
    ULONG LbrOptions;                                                       //0x4
    volatile ULONG HookIdCount;                                             //0x8
    USHORT HookId[4];                                                       //0xc
}; 

----------------------------------------
Structure: _ETW_LOGGER_HANDLE

//0x1 bytes (sizeof)
struct _ETW_LOGGER_HANDLE
{
    UCHAR DereferenceAndLeave;                                              //0x0
}; 

----------------------------------------
Structure: _ETW_PARTITION_CONTEXT

//0x8 bytes (sizeof)
struct _ETW_PARTITION_CONTEXT
{
    struct _EPARTITION* Partition;                                          //0x0
}; 

----------------------------------------
Structure: _ETW_PAYLOAD_FILTER

//0x58 bytes (sizeof)
struct _ETW_PAYLOAD_FILTER
{
    LONG RefCount;                                                          //0x0
    struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;                        //0x8
}; 

----------------------------------------
Structure: _ETW_PERFECT_HASH_FUNCTION

//0x0 bytes (sizeof)
struct _ETW_PERFECT_HASH_FUNCTION; 

----------------------------------------
Structure: _ETW_PERF_COUNTERS

//0x18 bytes (sizeof)
struct _ETW_PERF_COUNTERS
{
    LONG TotalActiveSessions;                                               //0x0
    LONG TotalBufferMemoryNonPagedPool;                                     //0x4
    LONG TotalBufferMemoryPagedPool;                                        //0x8
    LONG TotalGuidsEnabled;                                                 //0xc
    LONG TotalGuidsNotEnabled;                                              //0x10
    LONG TotalGuidsPreEnabled;                                              //0x14
}; 

----------------------------------------
Structure: _ETW_PMC_SUPPORT

//0x20 bytes (sizeof)
struct _ETW_PMC_SUPPORT
{
    enum _KPROFILE_SOURCE* Source;                                          //0x0
    volatile ULONG HookIdCount;                                             //0x8
    USHORT HookId[4];                                                       //0xc
    volatile ULONG CountersCount;                                           //0x14
    struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];                             //0x18
}; 

----------------------------------------
Structure: _ETW_PRIV_HANDLE_DEMUX_TABLE

//0x20 bytes (sizeof)
struct _ETW_PRIV_HANDLE_DEMUX_TABLE
{
    struct _RTL_RB_TREE Tree;                                               //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x10
    USHORT SequenceNumber;                                                  //0x18
}; 

----------------------------------------
Structure: _ETW_PROVIDER_TRAITS

//0x20 bytes (sizeof)
struct _ETW_PROVIDER_TRAITS
{
    struct _RTL_BALANCED_NODE Node;                                         //0x0
    ULONG ReferenceCount;                                                   //0x18
    UCHAR Traits[1];                                                        //0x1c
}; 

----------------------------------------
Structure: _ETW_QUEUE_ENTRY

//0x38 bytes (sizeof)
struct _ETW_QUEUE_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _ETWP_NOTIFICATION_HEADER* DataBlock;                            //0x10
    struct _ETW_REG_ENTRY* RegEntry;                                        //0x18
    struct _ETW_REG_ENTRY* ReplyObject;                                     //0x20
    VOID* WakeReference;                                                    //0x28
    USHORT RegIndex;                                                        //0x30
    USHORT ReplyIndex;                                                      //0x32
    ULONG Flags;                                                            //0x34
}; 

----------------------------------------
Structure: _ETW_REALTIME_CONSUMER

//0xa0 bytes (sizeof)
struct _ETW_REALTIME_CONSUMER
{
    struct _LIST_ENTRY Links;                                               //0x0
    VOID* ProcessHandle;                                                    //0x10
    struct _EPROCESS* ProcessObject;                                        //0x18
    VOID* NextNotDelivered;                                                 //0x20
    VOID* RealtimeConnectContext;                                           //0x28
    struct _KEVENT* DisconnectEvent;                                        //0x30
    struct _KEVENT* DataAvailableEvent;                                     //0x38
    ULONG* UserBufferCount;                                                 //0x40
    struct _SINGLE_LIST_ENTRY* UserBufferListHead;                          //0x48
    ULONG BuffersLost;                                                      //0x50
    ULONG EmptyBuffersCount;                                                //0x54
    USHORT LoggerId;                                                        //0x58
    union
    {
        UCHAR Flags;                                                        //0x5a
        struct
        {
            UCHAR ShutDownRequested:1;                                      //0x5a
            UCHAR NewBuffersLost:1;                                         //0x5a
            UCHAR Disconnected:1;                                           //0x5a
            UCHAR Notified:1;                                               //0x5a
            UCHAR Wow:1;                                                    //0x5a
        };
    };
    struct _RTL_BITMAP ReservedBufferSpaceBitMap;                           //0x60
    UCHAR* ReservedBufferSpace;                                             //0x70
    ULONG ReservedBufferSpaceSize;                                          //0x78
    ULONG UserPagesAllocated;                                               //0x7c
    ULONG UserPagesReused;                                                  //0x80
    ULONG* EventsLostCount;                                                 //0x88
    ULONG* BuffersLostCount;                                                //0x90
    struct _ETW_SILODRIVERSTATE* SiloState;                                 //0x98
}; 

----------------------------------------
Structure: _ETW_REF_CLOCK

//0x10 bytes (sizeof)
struct _ETW_REF_CLOCK
{
    union _LARGE_INTEGER StartTime;                                         //0x0
    union _LARGE_INTEGER StartPerfClock;                                    //0x8
}; 

----------------------------------------
Structure: _ETW_REG_ENTRY

//0x70 bytes (sizeof)
struct _ETW_REG_ENTRY
{
    struct _LIST_ENTRY RegList;                                             //0x0
    struct _LIST_ENTRY GroupRegList;                                        //0x10
    struct _ETW_GUID_ENTRY* GuidEntry;                                      //0x20
    struct _ETW_GUID_ENTRY* GroupEntry;                                     //0x28
    union
    {
        struct _ETW_REPLY_QUEUE* ReplyQueue;                                //0x30
        struct _ETW_QUEUE_ENTRY* ReplySlot[4];                              //0x30
        struct
        {
            VOID* Caller;                                                   //0x30
            ULONG SessionId;                                                //0x38
        };
    };
    union
    {
        struct _EPROCESS* Process;                                          //0x50
        VOID* CallbackContext;                                              //0x50
    };
    VOID* Callback;                                                         //0x58
    USHORT Index;                                                           //0x60
    union
    {
        USHORT Flags;                                                       //0x62
        struct
        {
            USHORT DbgKernelRegistration:1;                                 //0x62
            USHORT DbgUserRegistration:1;                                   //0x62
            USHORT DbgReplyRegistration:1;                                  //0x62
            USHORT DbgClassicRegistration:1;                                //0x62
            USHORT DbgSessionSpaceRegistration:1;                           //0x62
            USHORT DbgModernRegistration:1;                                 //0x62
            USHORT DbgClosed:1;                                             //0x62
            USHORT DbgInserted:1;                                           //0x62
            USHORT DbgWow64:1;                                              //0x62
            USHORT DbgUseDescriptorType:1;                                  //0x62
            USHORT DbgDropProviderTraits:1;                                 //0x62
        };
    };
    UCHAR EnableMask;                                                       //0x64
    UCHAR GroupEnableMask;                                                  //0x65
    UCHAR HostEnableMask;                                                   //0x66
    UCHAR HostGroupEnableMask;                                              //0x67
    struct _ETW_PROVIDER_TRAITS* Traits;                                    //0x68
}; 

----------------------------------------
Structure: _ETW_REPLY_QUEUE

//0x48 bytes (sizeof)
struct _ETW_REPLY_QUEUE
{
    struct _KQUEUE Queue;                                                   //0x0
    LONG EventsLost;                                                        //0x40
}; 

----------------------------------------
Structure: _ETW_SESSION_PERF_COUNTERS

//0x18 bytes (sizeof)
struct _ETW_SESSION_PERF_COUNTERS
{
    LONG BufferMemoryPagedPool;                                             //0x0
    LONG BufferMemoryNonPagedPool;                                          //0x4
    ULONGLONG EventsLoggedCount;                                            //0x8
    LONG EventsLost;                                                        //0x10
    LONG NumConsumers;                                                      //0x14
}; 

----------------------------------------
Structure: _ETW_SILODRIVERSTATE

//0x1220 bytes (sizeof)
struct _ETW_SILODRIVERSTATE
{
    struct _EJOB* Silo;                                                     //0x0
    struct _ESERVERSILO_GLOBALS* SiloGlobals;                               //0x8
    ULONG MaxLoggers;                                                       //0x10
    struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;                   //0x18
    struct _EX_RUNDOWN_REF_CACHE_AWARE** EtwpLoggerRundown;                 //0x1c0
    struct _WMI_LOGGER_CONTEXT** EtwpLoggerContext;                         //0x1c8
    struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];                          //0x1d0
    USHORT EtwpSecurityLoggers[8];                                          //0xfd0
    UCHAR EtwpSecurityProviderEnableMask;                                   //0xfe0
    LONG EtwpShutdownInProgress;                                            //0xfe4
    ULONG EtwpSecurityProviderPID;                                          //0xfe8
    struct _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;               //0xff0
    struct _ETW_COUNTERS EtwpCounters;                                      //0x1010
    union _LARGE_INTEGER LogfileBytesWritten;                               //0x1020
    struct _ETW_SILO_TRACING_BLOCK* ProcessorBlocks;                        //0x1028
    struct _EX_WNF_SUBSCRIPTION* ContainerRestoreWnfSubscription;           //0x1030
    struct _GUID PartitionId;                                               //0x1038
    struct _GUID ParentId;                                                  //0x1048
    union _LARGE_INTEGER QpcOffsetFromRoot;                                 //0x1058
    CHAR* PartitionName;                                                    //0x1060
    USHORT PartitionNameSize;                                               //0x1068
    USHORT UnusedPadding;                                                   //0x106a
    ULONG PartitionType;                                                    //0x106c
    struct _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;                //0x1070
    struct _KMUTANT EtwpStartTraceMutex;                                    //0x11e8
}; 

----------------------------------------
Structure: _ETW_SILO_TRACING_BLOCK

//0x40 bytes (sizeof)
struct _ETW_SILO_TRACING_BLOCK
{
    struct _EX_FAST_REF* ProcessorBuffers;                                  //0x0
    ULONGLONG* EventsLoggedCount;                                           //0x8
    LONGLONG* QpcDelta;                                                     //0x10
}; 

----------------------------------------
Structure: _ETW_SOFT_RESTART_CONTEXT

//0x0 bytes (sizeof)
struct _ETW_SOFT_RESTART_CONTEXT; 

----------------------------------------
Structure: _ETW_STACK_CACHE

//0x0 bytes (sizeof)
struct _ETW_STACK_CACHE; 

----------------------------------------
Structure: _ETW_STACK_TRACE_BLOCK

//0x80 bytes (sizeof)
struct _ETW_STACK_TRACE_BLOCK
{
    union _LARGE_INTEGER RelatedTimestamp;                                  //0x0
    struct _ETHREAD* Thread;                                                //0x8
    struct _KDPC StackWalkDpc;                                              //0x10
    union _SLIST_HEADER ApcListHead;                                        //0x50
    struct _ETW_APC_ENTRY* ApcEntry;                                        //0x60
    ULONG ApcEntryCount;                                                    //0x68
    LONG Flags;                                                             //0x6c
    LONG ApcCount;                                                          //0x70
    LONG MaxApcCount;                                                       //0x74
}; 

----------------------------------------
Structure: _ETW_SYSTEMTIME

//0x10 bytes (sizeof)
struct _ETW_SYSTEMTIME
{
    USHORT Year;                                                            //0x0
    USHORT Month;                                                           //0x2
    USHORT DayOfWeek;                                                       //0x4
    USHORT Day;                                                             //0x6
    USHORT Hour;                                                            //0x8
    USHORT Minute;                                                          //0xa
    USHORT Second;                                                          //0xc
    USHORT Milliseconds;                                                    //0xe
}; 

----------------------------------------
Structure: _ETW_SYSTEM_LOGGER

//0x2 bytes (sizeof)
struct _ETW_SYSTEM_LOGGER
{
    UCHAR LoggerId;                                                         //0x0
    UCHAR ClockType;                                                        //0x1
}; 

----------------------------------------
Structure: _ETW_SYSTEM_LOGGER_SETTINGS

//0x174 bytes (sizeof)
struct _ETW_SYSTEM_LOGGER_SETTINGS
{
    struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];                          //0x0
    volatile ULONG EtwpActiveSystemLoggers;                                 //0x10
    struct _PERFINFO_GROUPMASK SiloGlobalGroupMask;                         //0x14
    struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];                          //0x34
}; 

----------------------------------------
Structure: _ETW_WMITRACE_WORK

//0xf0 bytes (sizeof)
struct _ETW_WMITRACE_WORK
{
    ULONG LoggerId;                                                         //0x0
    ULONG SiloSessionId;                                                    //0x4
    union
    {
        struct
        {
            CHAR LoggerName[65];                                            //0x8
            CHAR FileName[129];                                             //0x49
            ULONG MaximumFileSize;                                          //0xcc
            ULONG MinBuffers;                                               //0xd0
            ULONG MaxBuffers;                                               //0xd4
            ULONG BufferSize;                                               //0xd8
            ULONG Mode;                                                     //0xdc
            ULONG FlushTimer;                                               //0xe0
        };
        struct
        {
            ULONGLONG MatchAny;                                             //0x8
            ULONGLONG MatchAll;                                             //0x10
            ULONG EnableProperty;                                           //0x18
            struct _GUID Guid;                                              //0x1c
            UCHAR Level;                                                    //0x2c
        };
    };
    LONG Status;                                                            //0xe8
}; 

----------------------------------------
Structure: _EVENT_DATA_DESCRIPTOR

//0x10 bytes (sizeof)
struct _EVENT_DATA_DESCRIPTOR
{
    ULONGLONG Ptr;                                                          //0x0
    ULONG Size;                                                             //0x8
    union
    {
        ULONG Reserved;                                                     //0xc
        struct
        {
            UCHAR Type;                                                     //0xc
            UCHAR Reserved1;                                                //0xd
            USHORT Reserved2;                                               //0xe
        };
    };
}; 

----------------------------------------
Structure: _EVENT_DESCRIPTOR

//0x10 bytes (sizeof)
struct _EVENT_DESCRIPTOR
{
    USHORT Id;                                                              //0x0
    UCHAR Version;                                                          //0x2
    UCHAR Channel;                                                          //0x3
    UCHAR Level;                                                            //0x4
    UCHAR Opcode;                                                           //0x5
    USHORT Task;                                                            //0x6
    ULONGLONG Keyword;                                                      //0x8
}; 

----------------------------------------
Structure: _EVENT_FILTER_DESCRIPTOR

//0x10 bytes (sizeof)
struct _EVENT_FILTER_DESCRIPTOR
{
    ULONGLONG Ptr;                                                          //0x0
    ULONG Size;                                                             //0x8
    ULONG Type;                                                             //0xc
}; 

----------------------------------------
Structure: _EVENT_FILTER_HEADER

//0x18 bytes (sizeof)
struct _EVENT_FILTER_HEADER
{
    USHORT Id;                                                              //0x0
    UCHAR Version;                                                          //0x2
    UCHAR Reserved[5];                                                      //0x3
    ULONGLONG InstanceId;                                                   //0x8
    ULONG Size;                                                             //0x10
    ULONG NextOffset;                                                       //0x14
}; 

----------------------------------------
Structure: _EVENT_FILTER_LEVEL_KW

//0x18 bytes (sizeof)
struct _EVENT_FILTER_LEVEL_KW
{
    ULONGLONG MatchAnyKeyword;                                              //0x0
    ULONGLONG MatchAllKeyword;                                              //0x8
    UCHAR Level;                                                            //0x10
    UCHAR FilterIn;                                                         //0x11
}; 

----------------------------------------
Structure: _EVENT_HEADER

//0x50 bytes (sizeof)
struct _EVENT_HEADER
{
    USHORT Size;                                                            //0x0
    USHORT HeaderType;                                                      //0x2
    USHORT Flags;                                                           //0x4
    USHORT EventProperty;                                                   //0x6
    ULONG ThreadId;                                                         //0x8
    ULONG ProcessId;                                                        //0xc
    union _LARGE_INTEGER TimeStamp;                                         //0x10
    struct _GUID ProviderId;                                                //0x18
    struct _EVENT_DESCRIPTOR EventDescriptor;                               //0x28
    union
    {
        struct
        {
            ULONG KernelTime;                                               //0x38
            ULONG UserTime;                                                 //0x3c
        };
        ULONGLONG ProcessorTime;                                            //0x38
    };
    struct _GUID ActivityId;                                                //0x40
}; 

----------------------------------------
Structure: _EVENT_HEADER_EXTENDED_DATA_ITEM

//0x10 bytes (sizeof)
struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
    USHORT Reserved1;                                                       //0x0
    USHORT ExtType;                                                         //0x2
    USHORT Linkage:1;                                                       //0x4
    USHORT Reserved2:15;                                                    //0x4
    USHORT DataSize;                                                        //0x6
    ULONGLONG DataPtr;                                                      //0x8
}; 

----------------------------------------
Structure: _EVENT_PAYLOAD_PREDICATE

//0x18 bytes (sizeof)
struct _EVENT_PAYLOAD_PREDICATE
{
    USHORT FieldIndex;                                                      //0x0
    USHORT CompareOp;                                                       //0x2
    ULONGLONG Value[2];                                                     //0x8
}; 

----------------------------------------
Structure: _EVENT_RECORD

//0x70 bytes (sizeof)
struct _EVENT_RECORD
{
    struct _EVENT_HEADER EventHeader;                                       //0x0
    struct _ETW_BUFFER_CONTEXT BufferContext;                               //0x50
    USHORT ExtendedDataCount;                                               //0x54
    USHORT UserDataLength;                                                  //0x56
    struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;                  //0x58
    VOID* UserData;                                                         //0x60
    VOID* UserContext;                                                      //0x68
}; 

----------------------------------------
Structure: _EWOW64PROCESS

//0x10 bytes (sizeof)
struct _EWOW64PROCESS
{
    VOID* Peb;                                                              //0x0
    USHORT Machine;                                                         //0x8
    enum _SYSTEM_DLL_TYPE NtdllType;                                        //0xc
}; 

----------------------------------------
Structure: _EXCEPTION_POINTERS

//0x10 bytes (sizeof)
struct _EXCEPTION_POINTERS
{
    struct _EXCEPTION_RECORD* ExceptionRecord;                              //0x0
    struct _CONTEXT* ContextRecord;                                         //0x8
}; 

----------------------------------------
Structure: _EXCEPTION_RECORD

//0x98 bytes (sizeof)
struct _EXCEPTION_RECORD
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    struct _EXCEPTION_RECORD* ExceptionRecord;                              //0x8
    VOID* ExceptionAddress;                                                 //0x10
    ULONG NumberParameters;                                                 //0x18
    ULONGLONG ExceptionInformation[15];                                     //0x20
}; 

----------------------------------------
Structure: _EXCEPTION_RECORD32

//0x50 bytes (sizeof)
struct _EXCEPTION_RECORD32
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    ULONG ExceptionRecord;                                                  //0x8
    ULONG ExceptionAddress;                                                 //0xc
    ULONG NumberParameters;                                                 //0x10
    ULONG ExceptionInformation[15];                                         //0x14
}; 

----------------------------------------
Structure: _EXCEPTION_RECORD64

//0x98 bytes (sizeof)
struct _EXCEPTION_RECORD64
{
    LONG ExceptionCode;                                                     //0x0
    ULONG ExceptionFlags;                                                   //0x4
    ULONGLONG ExceptionRecord;                                              //0x8
    ULONGLONG ExceptionAddress;                                             //0x10
    ULONG NumberParameters;                                                 //0x18
    ULONG __unusedAlignment;                                                //0x1c
    ULONGLONG ExceptionInformation[15];                                     //0x20
}; 

----------------------------------------
Structure: _EXCEPTION_REGISTRATION_RECORD

//0x10 bytes (sizeof)
struct _EXCEPTION_REGISTRATION_RECORD
{
    struct _EXCEPTION_REGISTRATION_RECORD* Next;                            //0x0
    enum _EXCEPTION_DISPOSITION (*Handler)(struct _EXCEPTION_RECORD* arg1, VOID* arg2, struct _CONTEXT* arg3, VOID* arg4); //0x8
}; 

----------------------------------------
Structure: _EXHANDLE

//0x8 bytes (sizeof)
struct _EXHANDLE
{
    union
    {
        struct
        {
            ULONG TagBits:2;                                                //0x0
            ULONG Index:30;                                                 //0x0
        };
        VOID* GenericHandleOverlay;                                         //0x0
        ULONGLONG Value;                                                    //0x0
    };
}; 

----------------------------------------
Structure: _EXP_LICENSE_STATE

//0x0 bytes (sizeof)
struct _EXP_LICENSE_STATE; 

----------------------------------------
Structure: _EXT_DELETE_PARAMETERS

//0x18 bytes (sizeof)
struct _EXT_DELETE_PARAMETERS
{
    ULONG Version;                                                          //0x0
    ULONG Reserved;                                                         //0x4
    VOID (*DeleteCallback)(VOID* arg1);                                     //0x8
    VOID* DeleteContext;                                                    //0x10
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID

//0x18 bytes (sizeof)
struct _EXT_IOMMU_DEVICE_ID
{
    enum _EXT_IOMMU_DEVICE_TYPE DeviceType;                                 //0x0
    union _EXT_IOMMU_DEVICE_ID_FLAGS Flags;                                 //0x4
    union
    {
        struct _EXT_IOMMU_DEVICE_ID_PCI Pci;                                //0x8
        struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi;                              //0x8
        UCHAR IoApicId;                                                     //0x8
        ULONGLONG LogicalId;                                                //0x8
        struct _EXT_IOMMU_DEVICE_ID_TEST Test;                              //0x8
        struct _EXT_IOMMU_DEVICE_ID_GIC Gic;                                //0x8
    };
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID_ACPI

//0x8 bytes (sizeof)
struct _EXT_IOMMU_DEVICE_ID_ACPI
{
    CHAR* ObjectName;                                                       //0x0
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID_GIC

//0x4 bytes (sizeof)
struct _EXT_IOMMU_DEVICE_ID_GIC
{
    ULONG LineNumber;                                                       //0x0
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID_PCI

//0x10 bytes (sizeof)
struct _EXT_IOMMU_DEVICE_ID_PCI
{
    union
    {
        ULONGLONG AsUINT64;                                                 //0x0
        struct
        {
            USHORT PciSegmentNumber;                                        //0x0
            USHORT PhantomFunctionBits:2;                                   //0x2
            USHORT BusRange:1;                                              //0x2
            USHORT Reserved:5;                                              //0x2
            USHORT StartBusNumber:8;                                        //0x2
            union
            {
                USHORT Bdf;                                                 //0x4
                struct
                {
                    UCHAR SubordinateBus;                                   //0x4
                    UCHAR SecondaryBus;                                     //0x5
                };
            };
            USHORT DevicePathLength;                                        //0x6
        };
    };
    WCHAR* DevicePath;                                                      //0x8
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID_TEST

//0x8 bytes (sizeof)
struct _EXT_IOMMU_DEVICE_ID_TEST
{
    ULONGLONG UniqueId;                                                     //0x0
}; 

----------------------------------------
Structure: _EXT_SET_PARAMETERS_V0

//0x10 bytes (sizeof)
struct _EXT_SET_PARAMETERS_V0
{
    ULONG Version;                                                          //0x0
    ULONG Reserved;                                                         //0x4
    LONGLONG NoWakeTolerance;                                               //0x8
}; 

----------------------------------------
Structure: _EX_FAST_REF

//0x8 bytes (sizeof)
struct _EX_FAST_REF
{
    union
    {
        VOID* Object;                                                       //0x0
        ULONGLONG RefCnt:4;                                                 //0x0
        ULONGLONG Value;                                                    //0x0
    };
}; 

----------------------------------------
Structure: _EX_HEAP_POOL_NODE

//0x20c0 bytes (sizeof)
struct _EX_HEAP_POOL_NODE
{
    struct _SEGMENT_HEAP* Heaps[4];                                         //0x0
    struct _RTL_DYNAMIC_LOOKASIDE Lookasides[2];                            //0x40
}; 

----------------------------------------
Structure: _EX_HEAP_SESSION_STATE

//0x38f0 bytes (sizeof)
struct _EX_HEAP_SESSION_STATE
{
    struct _RTLP_HP_HEAP_MANAGER HeapManager;                               //0x0
    struct RTL_HP_ENV_HANDLE PagedEnv;                                      //0x38d0
    struct _SEGMENT_HEAP* PagedHeap;                                        //0x38e0
    struct _SEGMENT_HEAP* SpecialPoolHeap;                                  //0x38e8
}; 

----------------------------------------
Structure: _EX_PARTITION

//0x20 bytes (sizeof)
struct _EX_PARTITION
{
    struct _EPARTITION* PartitionObject;                                    //0x0
    struct _EX_WORK_QUEUE** volatile* WorkQueues;                           //0x8
    struct _EX_WORK_QUEUE_MANAGER** WorkQueueManagers;                      //0x10
    volatile LONG QueueAllocationMask;                                      //0x18
}; 

----------------------------------------
Structure: _EX_POOL_HEAP_MANAGER_STATE

//0x86940 bytes (sizeof)
struct _EX_POOL_HEAP_MANAGER_STATE
{
    struct _RTLP_HP_HEAP_MANAGER HeapManager;                               //0x0
    ULONG NumberOfPools;                                                    //0x38d0
    struct _EX_HEAP_POOL_NODE PoolNode[64];                                 //0x3900
    struct _SEGMENT_HEAP* SpecialHeaps[4];                                  //0x86900
}; 

----------------------------------------
Structure: _EX_PUSH_LOCK

//0x8 bytes (sizeof)
struct _EX_PUSH_LOCK
{
    union
    {
        struct
        {
            ULONGLONG Locked:1;                                             //0x0
            ULONGLONG Waiting:1;                                            //0x0
            ULONGLONG Waking:1;                                             //0x0
            ULONGLONG MultipleShared:1;                                     //0x0
            ULONGLONG Shared:60;                                            //0x0
        };
        ULONGLONG Value;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}; 

----------------------------------------
Structure: _EX_PUSH_LOCK_AUTO_EXPAND

//0x10 bytes (sizeof)
struct _EX_PUSH_LOCK_AUTO_EXPAND
{
    struct _EX_PUSH_LOCK LocalLock;                                         //0x0
    struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;                           //0x8
    ULONG Stats;                                                            //0xc
}; 

----------------------------------------
Structure: _EX_PUSH_LOCK_AUTO_EXPAND_STATE

//0x4 bytes (sizeof)
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
    union
    {
        struct
        {
            ULONG Expanded:1;                                               //0x0
            ULONG Transitioning:1;                                          //0x0
            ULONG Pageable:1;                                               //0x0
        };
        ULONG Value;                                                        //0x0
    };
}; 

----------------------------------------
Structure: _EX_RUNDOWN_REF

//0x8 bytes (sizeof)
struct _EX_RUNDOWN_REF
{
    union
    {
        ULONGLONG Count;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}; 

----------------------------------------
Structure: _EX_RUNDOWN_REF_CACHE_AWARE

//0x18 bytes (sizeof)
struct _EX_RUNDOWN_REF_CACHE_AWARE
{
    struct _EX_RUNDOWN_REF* RunRefs;                                        //0x0
    VOID* PoolToFree;                                                       //0x8
    ULONG RunRefSize;                                                       //0x10
    ULONG Number;                                                           //0x14
}; 

----------------------------------------
Structure: _EX_TIMER

//0x0 bytes (sizeof)
struct _EX_TIMER; 

----------------------------------------
Structure: _EX_TIMEZONE_STATE

//0x3f0 bytes (sizeof)
struct _EX_TIMEZONE_STATE
{
    struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION TimeZoneInformation;          //0x0
    ULONG CurrentTimeZoneId;                                                //0x1b0
    LONG LastTimeZoneBias;                                                  //0x1b4
    union _LARGE_INTEGER TimeZoneBias;                                      //0x1b8
    struct _TIMEZONE_CHANGE_EVENT TimeZone;                                 //0x1c0
    struct _TIMEZONE_CHANGE_EVENT Century;                                  //0x260
    struct _TIMEZONE_CHANGE_EVENT NextYear;                                 //0x300
    LONG OkToTimeZoneRefresh;                                               //0x3a0
    union _LARGE_INTEGER NextCenturyTimeInUTC;                              //0x3a8
    struct _TIME_FIELDS NextCenturyTimeFieldsInLocalTime;                   //0x3b0
    union _LARGE_INTEGER NextYearTimeInUTC;                                 //0x3c0
    struct _TIME_FIELDS NextYearTimeFieldsInLocalTime;                      //0x3c8
    SHORT LastDynamicTimeZoneYear;                                          //0x3d8
    union _LARGE_INTEGER NextSystemCutoverInUTC;                            //0x3e0
    ULONG RefreshFailures;                                                  //0x3e8
}; 

----------------------------------------
Structure: _EX_WNF_SUBSCRIPTION

//0x0 bytes (sizeof)
struct _EX_WNF_SUBSCRIPTION; 

----------------------------------------
Structure: _EX_WORK_QUEUE

//0x2e0 bytes (sizeof)
struct _EX_WORK_QUEUE
{
    struct _KPRIQUEUE WorkPriQueue;                                         //0x0
    struct _EX_PARTITION* Partition;                                        //0x2b0
    struct _ENODE* Node;                                                    //0x2b8
    volatile ULONG WorkItemsProcessed;                                      //0x2c0
    ULONG WorkItemsProcessedLastPass;                                       //0x2c4
    volatile LONG ThreadCount;                                              //0x2c8
    LONG MinThreads:31;                                                     //0x2cc
    volatile ULONG TryFailed:1;                                             //0x2cc
    LONG MaxThreads;                                                        //0x2d0
    enum _EXQUEUEINDEX QueueIndex;                                          //0x2d4
    struct _KEVENT* AllThreadsExitedEvent;                                  //0x2d8
}; 

----------------------------------------
Structure: _EX_WORK_QUEUE_MANAGER

//0x118 bytes (sizeof)
struct _EX_WORK_QUEUE_MANAGER
{
    struct _EX_PARTITION* Partition;                                        //0x0
    struct _ENODE* Node;                                                    //0x8
    struct _KEVENT Event;                                                   //0x10
    struct _KTIMER DeadlockTimer;                                           //0x28
    struct _KEVENT ReaperEvent;                                             //0x68
    struct _KTIMER2 ReaperTimer;                                            //0x80
    VOID* ThreadHandle;                                                     //0x108
    volatile ULONG ExitThread;                                              //0x110
    USHORT ThreadSeed;                                                      //0x114
}; 

----------------------------------------
Structure: _FACS

//0x40 bytes (sizeof)
struct _FACS
{
    ULONG Signature;                                                        //0x0
    ULONG Length;                                                           //0x4
    ULONG HardwareSignature;                                                //0x8
    ULONG pFirmwareWakingVector;                                            //0xc
    ULONG GlobalLock;                                                       //0x10
    ULONG Flags;                                                            //0x14
    union _LARGE_INTEGER x_FirmwareWakingVector;                            //0x18
    UCHAR version;                                                          //0x20
    UCHAR Reserved[31];                                                     //0x21
}; 

----------------------------------------
Structure: _FADT

//0x114 bytes (sizeof)
struct _FADT
{
    struct _DESCRIPTION_HEADER Header;                                      //0x0
    ULONG facs;                                                             //0x24
    ULONG dsdt;                                                             //0x28
    UCHAR int_model;                                                        //0x2c
    UCHAR pm_profile;                                                       //0x2d
    USHORT sci_int_vector;                                                  //0x2e
    ULONG smi_cmd_io_port;                                                  //0x30
    UCHAR acpi_on_value;                                                    //0x34
    UCHAR acpi_off_value;                                                   //0x35
    UCHAR s4bios_req;                                                       //0x36
    UCHAR pstate_control;                                                   //0x37
    ULONG pm1a_evt_blk_io_port;                                             //0x38
    ULONG pm1b_evt_blk_io_port;                                             //0x3c
    ULONG pm1a_ctrl_blk_io_port;                                            //0x40
    ULONG pm1b_ctrl_blk_io_port;                                            //0x44
    ULONG pm2_ctrl_blk_io_port;                                             //0x48
    ULONG pm_tmr_blk_io_port;                                               //0x4c
    ULONG gp0_blk_io_port;                                                  //0x50
    ULONG gp1_blk_io_port;                                                  //0x54
    UCHAR pm1_evt_len;                                                      //0x58
    UCHAR pm1_ctrl_len;                                                     //0x59
    UCHAR pm2_ctrl_len;                                                     //0x5a
    UCHAR pm_tmr_len;                                                       //0x5b
    UCHAR gp0_blk_len;                                                      //0x5c
    UCHAR gp1_blk_len;                                                      //0x5d
    UCHAR gp1_base;                                                         //0x5e
    UCHAR cstate_control;                                                   //0x5f
    USHORT lvl2_latency;                                                    //0x60
    USHORT lvl3_latency;                                                    //0x62
    USHORT flush_size;                                                      //0x64
    USHORT flush_stride;                                                    //0x66
    UCHAR duty_offset;                                                      //0x68
    UCHAR duty_width;                                                       //0x69
    UCHAR day_alarm_index;                                                  //0x6a
    UCHAR month_alarm_index;                                                //0x6b
    UCHAR century_alarm_index;                                              //0x6c
    USHORT boot_arch;                                                       //0x6d
    UCHAR reserved3[1];                                                     //0x6f
    ULONG flags;                                                            //0x70
    struct _GEN_ADDR reset_reg;                                             //0x74
    UCHAR reset_val;                                                        //0x80
    USHORT arm_boot_arch;                                                   //0x81
    UCHAR minor_version_number;                                             //0x83
    union _LARGE_INTEGER x_firmware_ctrl;                                   //0x84
    union _LARGE_INTEGER x_dsdt;                                            //0x8c
    struct _GEN_ADDR x_pm1a_evt_blk;                                        //0x94
    struct _GEN_ADDR x_pm1b_evt_blk;                                        //0xa0
    struct _GEN_ADDR x_pm1a_ctrl_blk;                                       //0xac
    struct _GEN_ADDR x_pm1b_ctrl_blk;                                       //0xb8
    struct _GEN_ADDR x_pm2_ctrl_blk;                                        //0xc4
    struct _GEN_ADDR x_pm_tmr_blk;                                          //0xd0
    struct _GEN_ADDR x_gp0_blk;                                             //0xdc
    struct _GEN_ADDR x_gp1_blk;                                             //0xe8
    struct _GEN_ADDR sleep_control_reg;                                     //0xf4
    struct _GEN_ADDR sleep_status_reg;                                      //0x100
    ULONGLONG hypervisor_vendor_identity;                                   //0x10c
}; 

----------------------------------------
Structure: _FAKE_HEAP_ENTRY

//0x10 bytes (sizeof)
struct _FAKE_HEAP_ENTRY
{
    ULONGLONG Size;                                                         //0x0
    ULONGLONG PreviousSize;                                                 //0x8
}; 

----------------------------------------
Structure: _FAST_ERESOURCE

//0x68 bytes (sizeof)
struct _FAST_ERESOURCE
{
    VOID* Reserved1[3];                                                     //0x0
    ULONG Reserved2;                                                        //0x18
    VOID* Reserved3[4];                                                     //0x20
    ULONG Reserved4[4];                                                     //0x40
    VOID* Reserved5;                                                        //0x50
    VOID* Reserved6[2];                                                     //0x58
}; 

----------------------------------------
Structure: _FAST_ERESOURCE_INTERNAL

//0x68 bytes (sizeof)
struct _FAST_ERESOURCE_INTERNAL
{
    struct _LIST_ENTRY SystemResourcesList;                                 //0x0
    VOID* ReservedPointer;                                                  //0x10
    SHORT ActiveCount;                                                      //0x18
    USHORT Flag;                                                            //0x1a
    struct _KWAIT_CHAIN SharedWaiters;                                      //0x20
    struct _KWAIT_CHAIN ExclusiveWaiters;                                   //0x28
    struct _LIST_ENTRY OwnerEntryListHead;                                  //0x30
    ULONG ActiveEntries;                                                    //0x40
    ULONG ContentionCount;                                                  //0x44
    ULONG NumberOfSharedWaiters;                                            //0x48
    ULONG NumberOfExclusiveWaiters;                                         //0x4c
    VOID* ReservedWin64OnlyPointer;                                         //0x50
    union
    {
        VOID* Address;                                                      //0x58
        ULONGLONG CreatorBackTraceIndex;                                    //0x58
    };
    ULONGLONG SpinLock;                                                     //0x60
}; 

----------------------------------------
Structure: _FAST_IO_DISPATCH

//0xe0 bytes (sizeof)
struct _FAST_IO_DISPATCH
{
    ULONG SizeOfFastIoDispatch;                                             //0x0
    UCHAR (*FastIoCheckIfPossible)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, UCHAR arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x8
    UCHAR (*FastIoRead)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x10
    UCHAR (*FastIoWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x18
    UCHAR (*FastIoQueryBasicInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_BASIC_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x20
    UCHAR (*FastIoQueryStandardInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_STANDARD_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x28
    UCHAR (*FastIoLock)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, union _LARGE_INTEGER* arg3, struct _KPROCESS* arg4, ULONG arg5, UCHAR arg6, UCHAR arg7, struct _IO_STATUS_BLOCK* arg8, struct _DEVICE_OBJECT* arg9); //0x30
    UCHAR (*FastIoUnlockSingle)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, union _LARGE_INTEGER* arg3, struct _KPROCESS* arg4, ULONG arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x38
    UCHAR (*FastIoUnlockAll)(struct _FILE_OBJECT* arg1, struct _KPROCESS* arg2, struct _IO_STATUS_BLOCK* arg3, struct _DEVICE_OBJECT* arg4); //0x40
    UCHAR (*FastIoUnlockAllByKey)(struct _FILE_OBJECT* arg1, VOID* arg2, ULONG arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x48
    UCHAR (*FastIoDeviceControl)(struct _FILE_OBJECT* arg1, UCHAR arg2, VOID* arg3, ULONG arg4, VOID* arg5, ULONG arg6, ULONG arg7, struct _IO_STATUS_BLOCK* arg8, struct _DEVICE_OBJECT* arg9); //0x50
    VOID (*AcquireFileForNtCreateSection)(struct _FILE_OBJECT* arg1);       //0x58
    VOID (*ReleaseFileForNtCreateSection)(struct _FILE_OBJECT* arg1);       //0x60
    VOID (*FastIoDetachDevice)(struct _DEVICE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0x68
    UCHAR (*FastIoQueryNetworkOpenInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_NETWORK_OPEN_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x70
    LONG (*AcquireForModWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _ERESOURCE** arg3, struct _DEVICE_OBJECT* arg4); //0x78
    UCHAR (*MdlRead)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, struct _MDL** arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x80
    UCHAR (*MdlReadComplete)(struct _FILE_OBJECT* arg1, struct _MDL* arg2, struct _DEVICE_OBJECT* arg3); //0x88
    UCHAR (*PrepareMdlWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, struct _MDL** arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x90
    UCHAR (*MdlWriteComplete)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3, struct _DEVICE_OBJECT* arg4); //0x98
    UCHAR (*FastIoReadCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, VOID* arg5, struct _MDL** arg6, struct _IO_STATUS_BLOCK* arg7, struct _COMPRESSED_DATA_INFO* arg8, ULONG arg9, struct _DEVICE_OBJECT* arg10); //0xa0
    UCHAR (*FastIoWriteCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, VOID* arg5, struct _MDL** arg6, struct _IO_STATUS_BLOCK* arg7, struct _COMPRESSED_DATA_INFO* arg8, ULONG arg9, struct _DEVICE_OBJECT* arg10); //0xa8
    UCHAR (*MdlReadCompleteCompressed)(struct _FILE_OBJECT* arg1, struct _MDL* arg2, struct _DEVICE_OBJECT* arg3); //0xb0
    UCHAR (*MdlWriteCompleteCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3, struct _DEVICE_OBJECT* arg4); //0xb8
    UCHAR (*FastIoQueryOpen)(struct _IRP* arg1, struct _FILE_NETWORK_OPEN_INFORMATION* arg2, struct _DEVICE_OBJECT* arg3); //0xc0
    LONG (*ReleaseForModWrite)(struct _FILE_OBJECT* arg1, struct _ERESOURCE* arg2, struct _DEVICE_OBJECT* arg3); //0xc8
    LONG (*AcquireForCcFlush)(struct _FILE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0xd0
    LONG (*ReleaseForCcFlush)(struct _FILE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0xd8
}; 

----------------------------------------
Structure: _FAST_IO_DISPATCH

//0xe0 bytes (sizeof)
struct _FAST_IO_DISPATCH
{
    ULONG SizeOfFastIoDispatch;                                             //0x0
    UCHAR (*FastIoCheckIfPossible)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, UCHAR arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x8
    UCHAR (*FastIoRead)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x10
    UCHAR (*FastIoWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, UCHAR arg4, ULONG arg5, VOID* arg6, struct _IO_STATUS_BLOCK* arg7, struct _DEVICE_OBJECT* arg8); //0x18
    UCHAR (*FastIoQueryBasicInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_BASIC_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x20
    UCHAR (*FastIoQueryStandardInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_STANDARD_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x28
    UCHAR (*FastIoLock)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, union _LARGE_INTEGER* arg3, struct _KPROCESS* arg4, ULONG arg5, UCHAR arg6, UCHAR arg7, struct _IO_STATUS_BLOCK* arg8, struct _DEVICE_OBJECT* arg9); //0x30
    UCHAR (*FastIoUnlockSingle)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, union _LARGE_INTEGER* arg3, struct _KPROCESS* arg4, ULONG arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x38
    UCHAR (*FastIoUnlockAll)(struct _FILE_OBJECT* arg1, struct _KPROCESS* arg2, struct _IO_STATUS_BLOCK* arg3, struct _DEVICE_OBJECT* arg4); //0x40
    UCHAR (*FastIoUnlockAllByKey)(struct _FILE_OBJECT* arg1, VOID* arg2, ULONG arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x48
    UCHAR (*FastIoDeviceControl)(struct _FILE_OBJECT* arg1, UCHAR arg2, VOID* arg3, ULONG arg4, VOID* arg5, ULONG arg6, ULONG arg7, struct _IO_STATUS_BLOCK* arg8, struct _DEVICE_OBJECT* arg9); //0x50
    VOID (*AcquireFileForNtCreateSection)(struct _FILE_OBJECT* arg1);       //0x58
    VOID (*ReleaseFileForNtCreateSection)(struct _FILE_OBJECT* arg1);       //0x60
    VOID (*FastIoDetachDevice)(struct _DEVICE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0x68
    UCHAR (*FastIoQueryNetworkOpenInfo)(struct _FILE_OBJECT* arg1, UCHAR arg2, struct _FILE_NETWORK_OPEN_INFORMATION* arg3, struct _IO_STATUS_BLOCK* arg4, struct _DEVICE_OBJECT* arg5); //0x70
    LONG (*AcquireForModWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _ERESOURCE** arg3, struct _DEVICE_OBJECT* arg4); //0x78
    UCHAR (*MdlRead)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, struct _MDL** arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x80
    UCHAR (*MdlReadComplete)(struct _FILE_OBJECT* arg1, struct _MDL* arg2, struct _DEVICE_OBJECT* arg3); //0x88
    UCHAR (*PrepareMdlWrite)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, struct _MDL** arg5, struct _IO_STATUS_BLOCK* arg6, struct _DEVICE_OBJECT* arg7); //0x90
    UCHAR (*MdlWriteComplete)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3, struct _DEVICE_OBJECT* arg4); //0x98
    UCHAR (*FastIoReadCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, VOID* arg5, struct _MDL** arg6, struct _IO_STATUS_BLOCK* arg7, struct _COMPRESSED_DATA_INFO* arg8, ULONG arg9, struct _DEVICE_OBJECT* arg10); //0xa0
    UCHAR (*FastIoWriteCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, ULONG arg3, ULONG arg4, VOID* arg5, struct _MDL** arg6, struct _IO_STATUS_BLOCK* arg7, struct _COMPRESSED_DATA_INFO* arg8, ULONG arg9, struct _DEVICE_OBJECT* arg10); //0xa8
    UCHAR (*MdlReadCompleteCompressed)(struct _FILE_OBJECT* arg1, struct _MDL* arg2, struct _DEVICE_OBJECT* arg3); //0xb0
    UCHAR (*MdlWriteCompleteCompressed)(struct _FILE_OBJECT* arg1, union _LARGE_INTEGER* arg2, struct _MDL* arg3, struct _DEVICE_OBJECT* arg4); //0xb8
    UCHAR (*FastIoQueryOpen)(struct _IRP* arg1, struct _FILE_NETWORK_OPEN_INFORMATION* arg2, struct _DEVICE_OBJECT* arg3); //0xc0
    LONG (*ReleaseForModWrite)(struct _FILE_OBJECT* arg1, struct _ERESOURCE* arg2, struct _DEVICE_OBJECT* arg3); //0xc8
    LONG (*AcquireForCcFlush)(struct _FILE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0xd0
    LONG (*ReleaseForCcFlush)(struct _FILE_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0xd8
}; 

----------------------------------------
Structure: _FAST_MUTEX

//0x38 bytes (sizeof)
struct _FAST_MUTEX
{
    LONG Count;                                                             //0x0
    VOID* Owner;                                                            //0x8
    ULONG Contention;                                                       //0x10
    struct _KEVENT Event;                                                   //0x18
    ULONG OldIrql;                                                          //0x30
}; 

----------------------------------------
Structure: _FAST_OWNER_ENTRY

//0x48 bytes (sizeof)
struct _FAST_OWNER_ENTRY
{
    VOID* Reserved[9];                                                      //0x0
}; 

----------------------------------------
Structure: _FAST_OWNER_ENTRY_INTERNAL

//0x48 bytes (sizeof)
struct _FAST_OWNER_ENTRY_INTERNAL
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    UCHAR AbLockHandle;                                                     //0x10
    UCHAR Disowned:1;                                                       //0x11
    UCHAR DynamicallyAllocated:1;                                           //0x11
    UCHAR CallerExclusive:1;                                                //0x11
    UCHAR IsSublistHead;                                                    //0x12
    UCHAR IsWaiting;                                                        //0x13
    VOID* LockAddress;                                                      //0x18
    VOID* ThreadAddress;                                                    //0x20
    struct _LIST_ENTRY SublistHead;                                         //0x28
    struct _LIST_ENTRY LockListEntry;                                       //0x38
}; 

----------------------------------------
Structure: _FAULT_INFORMATION

//0x38 bytes (sizeof)
struct _FAULT_INFORMATION
{
    enum _FAULT_INFORMATION_ARCH Type;                                      //0x0
    UCHAR IsStage1;                                                         //0x4
    union
    {
        struct _FAULT_INFORMATION_ARM64 Arm64;                              //0x8
        struct _FAULT_INFORMATION_X64 X64;                                  //0x8
    };
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_ARM64

//0x30 bytes (sizeof)
struct _FAULT_INFORMATION_ARM64
{
    VOID* DomainHandle;                                                     //0x0
    VOID* FaultAddress;                                                     //0x8
    struct _DEVICE_OBJECT* PhysicalDeviceObject;                            //0x10
    ULONG InputMappingId;                                                   //0x18
    struct _FAULT_INFORMATION_ARM64_FLAGS Flags;                            //0x1c
    enum _FAULT_INFORMATION_ARM64_TYPE Type;                                //0x20
    ULONGLONG IommuBaseAddress;                                             //0x28
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_ARM64_FLAGS

//0x4 bytes (sizeof)
struct _FAULT_INFORMATION_ARM64_FLAGS
{
    ULONG WriteNotRead:1;                                                   //0x0
    ULONG InstructionNotData:1;                                             //0x0
    ULONG Privileged:1;                                                     //0x0
    ULONG FaultAddressValid:1;                                              //0x0
    ULONG Reserved:28;                                                      //0x0
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_X64

//0x28 bytes (sizeof)
struct _FAULT_INFORMATION_X64
{
    VOID* DomainHandle;                                                     //0x0
    VOID* FaultAddress;                                                     //0x8
    struct _FAULT_INFORMATION_X64_FLAGS Flags;                              //0x10
    enum _FAULT_INFORMATION_ARM64_TYPE Type;                                //0x14
    ULONGLONG IommuBaseAddress;                                             //0x18
    ULONG PciSegment;                                                       //0x20
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_X64_FLAGS

//0x4 bytes (sizeof)
struct _FAULT_INFORMATION_X64_FLAGS
{
    ULONG FaultAddressValid:1;                                              //0x0
    ULONG Reserved:31;                                                      //0x0
}; 

----------------------------------------
Structure: _FILESYSTEM_DISK_COUNTERS

//0x10 bytes (sizeof)
struct _FILESYSTEM_DISK_COUNTERS
{
    ULONGLONG FsBytesRead;                                                  //0x0
    ULONGLONG FsBytesWritten;                                               //0x8
}; 

----------------------------------------
Structure: _FILE_BASIC_INFORMATION

//0x28 bytes (sizeof)
struct _FILE_BASIC_INFORMATION
{
    union _LARGE_INTEGER CreationTime;                                      //0x0
    union _LARGE_INTEGER LastAccessTime;                                    //0x8
    union _LARGE_INTEGER LastWriteTime;                                     //0x10
    union _LARGE_INTEGER ChangeTime;                                        //0x18
    ULONG FileAttributes;                                                   //0x20
}; 

----------------------------------------
Structure: _FILE_GET_QUOTA_INFORMATION

//0x14 bytes (sizeof)
struct _FILE_GET_QUOTA_INFORMATION
{
    ULONG NextEntryOffset;                                                  //0x0
    ULONG SidLength;                                                        //0x4
    struct _SID Sid;                                                        //0x8
}; 

----------------------------------------
Structure: _FILE_NETWORK_OPEN_INFORMATION

//0x38 bytes (sizeof)
struct _FILE_NETWORK_OPEN_INFORMATION
{
    union _LARGE_INTEGER CreationTime;                                      //0x0
    union _LARGE_INTEGER LastAccessTime;                                    //0x8
    union _LARGE_INTEGER LastWriteTime;                                     //0x10
    union _LARGE_INTEGER ChangeTime;                                        //0x18
    union _LARGE_INTEGER AllocationSize;                                    //0x20
    union _LARGE_INTEGER EndOfFile;                                         //0x28
    ULONG FileAttributes;                                                   //0x30
}; 

----------------------------------------
Structure: _FILE_OBJECT

//0xd8 bytes (sizeof)
struct _FILE_OBJECT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    struct _VPB* Vpb;                                                       //0x10
    VOID* FsContext;                                                        //0x18
    VOID* FsContext2;                                                       //0x20
    struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;                  //0x28
    VOID* PrivateCacheMap;                                                  //0x30
    LONG FinalStatus;                                                       //0x38
    struct _FILE_OBJECT* RelatedFileObject;                                 //0x40
    UCHAR LockOperation;                                                    //0x48
    UCHAR DeletePending;                                                    //0x49
    UCHAR ReadAccess;                                                       //0x4a
    UCHAR WriteAccess;                                                      //0x4b
    UCHAR DeleteAccess;                                                     //0x4c
    UCHAR SharedRead;                                                       //0x4d
    UCHAR SharedWrite;                                                      //0x4e
    UCHAR SharedDelete;                                                     //0x4f
    ULONG Flags;                                                            //0x50
    struct _UNICODE_STRING FileName;                                        //0x58
    union _LARGE_INTEGER CurrentByteOffset;                                 //0x68
    ULONG Waiters;                                                          //0x70
    ULONG Busy;                                                             //0x74
    VOID* LastLock;                                                         //0x78
    struct _KEVENT Lock;                                                    //0x80
    struct _KEVENT Event;                                                   //0x98
    struct _IO_COMPLETION_CONTEXT* CompletionContext;                       //0xb0
    ULONGLONG IrpListLock;                                                  //0xb8
    struct _LIST_ENTRY IrpList;                                             //0xc0
    VOID* FileObjectExtension;                                              //0xd0
}; 

----------------------------------------
Structure: _FILE_STANDARD_INFORMATION

//0x18 bytes (sizeof)
struct _FILE_STANDARD_INFORMATION
{
    union _LARGE_INTEGER AllocationSize;                                    //0x0
    union _LARGE_INTEGER EndOfFile;                                         //0x8
    ULONG NumberOfLinks;                                                    //0x10
    UCHAR DeletePending;                                                    //0x14
    UCHAR Directory;                                                        //0x15
}; 

----------------------------------------
Structure: _FIRMWARE_INFORMATION_LOADER_BLOCK

//0x40 bytes (sizeof)
struct _FIRMWARE_INFORMATION_LOADER_BLOCK
{
    ULONG FirmwareTypeUefi:1;                                               //0x0
    ULONG EfiRuntimeUseIum:1;                                               //0x0
    ULONG EfiRuntimePageProtectionSupported:1;                              //0x0
    ULONG Reserved:29;                                                      //0x0
    union
    {
        struct _EFI_FIRMWARE_INFORMATION EfiInformation;                    //0x8
        struct _PCAT_FIRMWARE_INFORMATION PcatInformation;                  //0x8
    } u;                                                                    //0x8
}; 

----------------------------------------
Structure: _FREE_DISPLAY

//0x18 bytes (sizeof)
struct _FREE_DISPLAY
{
    ULONG RealVectorSize;                                                   //0x0
    ULONG Hint;                                                             //0x4
    struct _RTL_BITMAP Display;                                             //0x8
}; 

----------------------------------------
Structure: _FSRTL_ADVANCED_FCB_HEADER

//0x68 bytes (sizeof)
struct _FSRTL_ADVANCED_FCB_HEADER
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    UCHAR Flags;                                                            //0x4
    UCHAR IsFastIoPossible;                                                 //0x5
    UCHAR Flags2;                                                           //0x6
    UCHAR Reserved:4;                                                       //0x7
    UCHAR Version:4;                                                        //0x7
    struct _ERESOURCE* Resource;                                            //0x8
    struct _ERESOURCE* PagingIoResource;                                    //0x10
    union _LARGE_INTEGER AllocationSize;                                    //0x18
    union _LARGE_INTEGER FileSize;                                          //0x20
    union _LARGE_INTEGER ValidDataLength;                                   //0x28
    struct _FAST_MUTEX* FastMutex;                                          //0x30
    struct _LIST_ENTRY FilterContexts;                                      //0x38
    struct _EX_PUSH_LOCK PushLock;                                          //0x48
    VOID** FileContextSupportPointer;                                       //0x50
    union
    {
        VOID* Oplock;                                                       //0x58
        VOID* ReservedForRemote;                                            //0x58
    };
    VOID* ReservedContext;                                                  //0x60
}; 

----------------------------------------
Structure: _FS_FILTER_CALLBACKS

//0x78 bytes (sizeof)
struct _FS_FILTER_CALLBACKS
{
    ULONG SizeOfFsFilterCallbacks;                                          //0x0
    ULONG Reserved;                                                         //0x4
    LONG (*PreAcquireForSectionSynchronization)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x8
    VOID (*PostAcquireForSectionSynchronization)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x10
    LONG (*PreReleaseForSectionSynchronization)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x18
    VOID (*PostReleaseForSectionSynchronization)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x20
    LONG (*PreAcquireForCcFlush)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x28
    VOID (*PostAcquireForCcFlush)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x30
    LONG (*PreReleaseForCcFlush)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x38
    VOID (*PostReleaseForCcFlush)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x40
    LONG (*PreAcquireForModifiedPageWriter)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x48
    VOID (*PostAcquireForModifiedPageWriter)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x50
    LONG (*PreReleaseForModifiedPageWriter)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x58
    VOID (*PostReleaseForModifiedPageWriter)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x60
    LONG (*PreQueryOpen)(struct _FS_FILTER_CALLBACK_DATA* arg1, VOID** arg2); //0x68
    VOID (*PostQueryOpen)(struct _FS_FILTER_CALLBACK_DATA* arg1, LONG arg2, VOID* arg3); //0x70
}; 

----------------------------------------
Structure: _FS_FILTER_CALLBACK_DATA

//0x40 bytes (sizeof)
struct _FS_FILTER_CALLBACK_DATA
{
    ULONG SizeOfFsFilterCallbackData;                                       //0x0
    UCHAR Operation;                                                        //0x4
    UCHAR Reserved;                                                         //0x5
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    struct _FILE_OBJECT* FileObject;                                        //0x10
    union _FS_FILTER_PARAMETERS Parameters;                                 //0x18
}; 

----------------------------------------
Structure: _FS_FILTER_SECTION_SYNC_OUTPUT

//0x10 bytes (sizeof)
struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
    ULONG StructureSize;                                                    //0x0
    ULONG SizeReturned;                                                     //0x4
    ULONG Flags;                                                            //0x8
    ULONG DesiredReadAlignment;                                             //0xc
}; 

----------------------------------------
Structure: _GDI_TEB_BATCH

//0x4e8 bytes (sizeof)
struct _GDI_TEB_BATCH
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONGLONG HDC;                                                          //0x8
    ULONG Buffer[310];                                                      //0x10
}; 

----------------------------------------
Structure: _GDI_TEB_BATCH32

//0x4e0 bytes (sizeof)
struct _GDI_TEB_BATCH32
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONG HDC;                                                              //0x4
    ULONG Buffer[310];                                                      //0x8
}; 

----------------------------------------
Structure: _GDI_TEB_BATCH64

//0x4e8 bytes (sizeof)
struct _GDI_TEB_BATCH64
{
    ULONG Offset:31;                                                        //0x0
    ULONG HasRenderingCommand:1;                                            //0x0
    ULONGLONG HDC;                                                          //0x8
    ULONG Buffer[310];                                                      //0x10
}; 

----------------------------------------
Structure: _GENERAL_LOOKASIDE

//0x80 bytes (sizeof)
struct _GENERAL_LOOKASIDE
{
    union
    {
        union _SLIST_HEADER ListHead;                                       //0x0
        struct _SINGLE_LIST_ENTRY SingleListHead;                           //0x0
    };
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    union
    {
        ULONG AllocateMisses;                                               //0x18
        ULONG AllocateHits;                                                 //0x18
    };
    ULONG TotalFrees;                                                       //0x1c
    union
    {
        ULONG FreeMisses;                                                   //0x20
        ULONG FreeHits;                                                     //0x20
    };
    enum _POOL_TYPE Type;                                                   //0x24
    ULONG Tag;                                                              //0x28
    ULONG Size;                                                             //0x2c
    union
    {
        VOID* (*AllocateEx)(enum _POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3, struct _LOOKASIDE_LIST_EX* arg4); //0x30
        VOID* (*Allocate)(enum _POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3); //0x30
    };
    union
    {
        VOID (*FreeEx)(VOID* arg1, struct _LOOKASIDE_LIST_EX* arg2);        //0x38
        VOID (*Free)(VOID* arg1);                                           //0x38
    };
    struct _LIST_ENTRY ListEntry;                                           //0x40
    ULONG LastTotalAllocates;                                               //0x50
    union
    {
        ULONG LastAllocateMisses;                                           //0x54
        ULONG LastAllocateHits;                                             //0x54
    };
    ULONG Future[2];                                                        //0x58
}; 

----------------------------------------
Structure: _GENERAL_LOOKASIDE_POOL

//0x60 bytes (sizeof)
struct _GENERAL_LOOKASIDE_POOL
{
    union
    {
        union _SLIST_HEADER ListHead;                                       //0x0
        struct _SINGLE_LIST_ENTRY SingleListHead;                           //0x0
    };
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    union
    {
        ULONG AllocateMisses;                                               //0x18
        ULONG AllocateHits;                                                 //0x18
    };
    ULONG TotalFrees;                                                       //0x1c
    union
    {
        ULONG FreeMisses;                                                   //0x20
        ULONG FreeHits;                                                     //0x20
    };
    enum _POOL_TYPE Type;                                                   //0x24
    ULONG Tag;                                                              //0x28
    ULONG Size;                                                             //0x2c
    union
    {
        VOID* (*AllocateEx)(enum _POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3, struct _LOOKASIDE_LIST_EX* arg4); //0x30
        VOID* (*Allocate)(enum _POOL_TYPE arg1, ULONGLONG arg2, ULONG arg3); //0x30
    };
    union
    {
        VOID (*FreeEx)(VOID* arg1, struct _LOOKASIDE_LIST_EX* arg2);        //0x38
        VOID (*Free)(VOID* arg1);                                           //0x38
    };
    struct _LIST_ENTRY ListEntry;                                           //0x40
    ULONG LastTotalAllocates;                                               //0x50
    union
    {
        ULONG LastAllocateMisses;                                           //0x54
        ULONG LastAllocateHits;                                             //0x54
    };
    ULONG Future[2];                                                        //0x58
}; 

----------------------------------------
Structure: _GENERIC_MAPPING

//0x10 bytes (sizeof)
struct _GENERIC_MAPPING
{
    ULONG GenericRead;                                                      //0x0
    ULONG GenericWrite;                                                     //0x4
    ULONG GenericExecute;                                                   //0x8
    ULONG GenericAll;                                                       //0xc
}; 

----------------------------------------
Structure: _GEN_ADDR

//0xc bytes (sizeof)
struct _GEN_ADDR
{
    UCHAR AddressSpaceID;                                                   //0x0
    UCHAR BitWidth;                                                         //0x1
    UCHAR BitOffset;                                                        //0x2
    UCHAR AccessSize;                                                       //0x3
    union _LARGE_INTEGER Address;                                           //0x4
}; 

----------------------------------------
Structure: _GROUP_AFFINITY

//0x10 bytes (sizeof)
struct _GROUP_AFFINITY
{
    ULONGLONG Mask;                                                         //0x0
    USHORT Group;                                                           //0x8
    USHORT Reserved[3];                                                     //0xa
}; 

----------------------------------------
Structure: _GUID

//0x10 bytes (sizeof)
struct _GUID
{
    ULONG Data1;                                                            //0x0
    USHORT Data2;                                                           //0x4
    USHORT Data3;                                                           //0x6
    UCHAR Data4[8];                                                         //0x8
}; 

----------------------------------------
Structure: _HALP_ALLOC_CONTEXT

//0x18 bytes (sizeof)
struct _HALP_ALLOC_CONTEXT
{
    struct _LIST_ENTRY BufferList;                                          //0x0
    ULONGLONG Lock;                                                         //0x10
}; 

----------------------------------------
Structure: _HALP_DMA_ADAPTER_OBJECT

//0x98 bytes (sizeof)
struct _HALP_DMA_ADAPTER_OBJECT
{
    struct _DMA_ADAPTER DmaHeader;                                          //0x0
    struct _RTL_BITMAP* ContiguousMapRegisters;                             //0x10
    struct _HALP_DMA_TRANSLATION_ENTRY* ScatterBufferListHead;              //0x18
    ULONG NumberOfFreeScatterBuffers;                                       //0x20
    struct _HALP_DMA_TRANSLATION_BUFFER* ContiguousTranslations;            //0x28
    struct _HALP_DMA_TRANSLATION_BUFFER* ScatterTranslations;               //0x30
    struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousTranslationEnd;  //0x38
    struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterTranslationEnd;     //0x48
    struct
    {
        struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousHint;        //0x58
        struct _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterHint;           //0x68
    } CrashDump;                                                            //0x58
    ULONGLONG SpinLock;                                                     //0x78
    ULONGLONG GrowLock;                                                     //0x80
    union _LARGE_INTEGER MaximumPhysicalAddress;                            //0x88
    UCHAR IsMasterAdapter;                                                  //0x90
    UCHAR DmaCanCross64K;                                                   //0x91
    ULONG LibraryVersion;                                                   //0x94
}; 

----------------------------------------
Structure: _HALP_DMA_CHANNEL

//0xa0 bytes (sizeof)
struct _HALP_DMA_CHANNEL
{
    ULONG ChannelNumber;                                                    //0x0
    UCHAR Initialized;                                                      //0x4
    UCHAR Busy;                                                             //0x5
    UCHAR Complete;                                                         //0x6
    VOID (*CurrentCompletionRoutine)(struct _DMA_ADAPTER* arg1, struct _DEVICE_OBJECT* arg2, VOID* arg3, enum DMA_COMPLETION_STATUS arg4); //0x8
    VOID* CurrentCompletionContext;                                         //0x10
    struct _ADAPTER_OBJECT* CurrentChildAdapter;                            //0x18
    enum _DMA_INTERRUPT_TYPE CurrentInterruptType;                          //0x20
    struct _KDPC Dpc;                                                       //0x28
    UCHAR GeneratesInterrupt;                                               //0x68
    LONG Gsi;                                                               //0x6c
    enum _KINTERRUPT_POLARITY InterruptPolarity;                            //0x70
    enum _KINTERRUPT_MODE InterruptMode;                                    //0x74
    ULONG CommonBufferLength;                                               //0x78
    VOID* CommonBufferVirtualAddress;                                       //0x80
    union _LARGE_INTEGER CommonBufferLogicalAddress;                        //0x88
    struct _LIST_ENTRY AdapterQueue;                                        //0x90
}; 

----------------------------------------
Structure: _HALP_DMA_CONTROLLER

//0xe0 bytes (sizeof)
struct _HALP_DMA_CONTROLLER
{
    struct _LIST_ENTRY Controllers;                                         //0x0
    struct _LIST_ENTRY AdapterList;                                         //0x10
    ULONG ControllerId;                                                     //0x20
    ULONG MinimumRequestLine;                                               //0x24
    ULONG MaximumRequestLine;                                               //0x28
    ULONG ChannelCount;                                                     //0x2c
    ULONG ScatterGatherLimit;                                               //0x30
    struct _HALP_DMA_CHANNEL* Channels;                                     //0x38
    VOID* ExtensionData;                                                    //0x40
    UCHAR CacheCoherent;                                                    //0x48
    ULONG DmaAddressWidth;                                                  //0x4c
    struct _DMA_FUNCTION_TABLE Operations;                                  //0x50
    ULONG SupportedPortWidths;                                              //0xa0
    ULONG MinimumTransferUnit;                                              //0xa4
    ULONGLONG Lock;                                                         //0xa8
    UCHAR Irql;                                                             //0xb0
    UCHAR GeneratesInterrupt;                                               //0xb1
    LONG Gsi;                                                               //0xb4
    enum _KINTERRUPT_POLARITY InterruptPolarity;                            //0xb8
    enum _KINTERRUPT_MODE InterruptMode;                                    //0xbc
    struct _UNICODE_STRING ResourceId;                                      //0xc0
    struct POHANDLE__* PowerHandle;                                         //0xd0
    UCHAR PowerActive;                                                      //0xd8
}; 

----------------------------------------
Structure: _HALP_DMA_DOMAIN_OBJECT

//0x88 bytes (sizeof)
struct _HALP_DMA_DOMAIN_OBJECT
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    union _LARGE_INTEGER MaximumPhysicalAddress;                            //0x10
    union _LARGE_INTEGER BoundaryAddressMultiple;                           //0x18
    UCHAR CacheCoherent;                                                    //0x20
    UCHAR FirmwareReserved;                                                 //0x21
    VOID* IommuDomainPointer;                                               //0x28
    VOID* LaState;                                                          //0x30
    ULONGLONG LaStateLock;                                                  //0x38
    enum _EXT_IOMMU_TRANSLATION_TYPE TranslationType;                       //0x40
    struct _ADAPTER_OBJECT* OwningAdapter;                                  //0x48
    struct _RTL_RB_TREE CommonBufferRoot;                                   //0x50
    ULONGLONG CommonBufferTreeLock;                                         //0x60
    struct _LIST_ENTRY VectorCommonBufferListHead;                          //0x68
    ULONGLONG VectorCommonBufferLock;                                       //0x78
    ULONG DomainRefCount;                                                   //0x80
}; 

----------------------------------------
Structure: _HALP_DMA_MASTER_ADAPTER_OBJECT

//0xd8 bytes (sizeof)
struct _HALP_DMA_MASTER_ADAPTER_OBJECT
{
    struct _HALP_DMA_ADAPTER_OBJECT AdapterObject;                          //0x0
    struct _LIST_ENTRY ContiguousAdapterQueue;                              //0x98
    struct _LIST_ENTRY ScatterAdapterQueue;                                 //0xa8
    ULONG MapBufferSize;                                                    //0xb8
    union _LARGE_INTEGER MapBufferPhysicalAddress;                          //0xc0
    ULONG ContiguousPageCount;                                              //0xc8
    ULONG ContiguousPageLimit;                                              //0xcc
    ULONG ScatterPageCount;                                                 //0xd0
    ULONG ScatterPageLimit;                                                 //0xd4
}; 

----------------------------------------
Structure: _HALP_DMA_TRANSLATION_BUFFER

//0x18 bytes (sizeof)
struct _HALP_DMA_TRANSLATION_BUFFER
{
    struct _HALP_DMA_TRANSLATION_BUFFER* Next;                              //0x0
    ULONG EntryCount;                                                       //0x8
    struct _HALP_DMA_TRANSLATION_ENTRY* Entries;                            //0x10
}; 

----------------------------------------
Structure: _HALP_DMA_TRANSLATION_BUFFER_POSITION

//0x10 bytes (sizeof)
struct _HALP_DMA_TRANSLATION_BUFFER_POSITION
{
    struct _HALP_DMA_TRANSLATION_BUFFER* Buffer;                            //0x0
    ULONG Offset;                                                           //0x8
}; 

----------------------------------------
Structure: _HALP_DMA_TRANSLATION_ENTRY

//0x48 bytes (sizeof)
struct _HALP_DMA_TRANSLATION_ENTRY
{
    ULONGLONG PhysicalAddress;                                              //0x0
    struct _HALP_DMA_TRANSLATION_ENTRY* Next;                               //0x8
    ULONG MappedLength;                                                     //0x10
    ULONGLONG LogicalAddress;                                               //0x18
    ULONGLONG LogicalMappedLength;                                          //0x20
    ULONGLONG NextLogicalAddress;                                           //0x28
    union
    {
        VOID* VirtualAddress;                                               //0x30
        struct
        {
            ULONGLONG BoundToMaster:1;                                      //0x30
            ULONGLONG BoundToScatterPool:1;                                 //0x30
            ULONGLONG OwnedByMaster:1;                                      //0x30
            ULONGLONG OwnedByScatterPool:1;                                 //0x30
            ULONGLONG TemporaryMapping:1;                                   //0x30
            ULONGLONG ZeroBuffer:1;                                         //0x30
            ULONGLONG Address:58;                                           //0x30
        } Flags;                                                            //0x30
    } u;                                                                    //0x30
    struct _HALP_DMA_TRANSLATION_ENTRY* NextMapping;                        //0x38
    UCHAR LogicalBounceBufferPremapped;                                     //0x40
}; 

----------------------------------------
Structure: _HALP_EMERGENCY_LA_QUEUE_ENTRY

//0x18 bytes (sizeof)
struct _HALP_EMERGENCY_LA_QUEUE_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    enum _HALP_EMERGENCY_LA_QUEUE_TYPE EntryType;                           //0x10
}; 

----------------------------------------
Structure: _HAL_CHANNEL_MEMORY_RANGES

//0x10 bytes (sizeof)
struct _HAL_CHANNEL_MEMORY_RANGES
{
    ULONGLONG PageFrameIndex;                                               //0x0
    USHORT MpnId;                                                           //0x8
    USHORT Node;                                                            //0xa
    USHORT Channel;                                                         //0xc
    UCHAR IsPowerManageable;                                                //0xe
    UCHAR DeepPowerState;                                                   //0xf
}; 

----------------------------------------
Structure: _HAL_CLOCK_TIMER_CONFIGURATION

//0x20 bytes (sizeof)
struct _HAL_CLOCK_TIMER_CONFIGURATION
{
    union
    {
        UCHAR Flags;                                                        //0x0
        struct
        {
            UCHAR AlwaysOnTimer:1;                                          //0x0
            UCHAR HighLatency:1;                                            //0x0
            UCHAR PerCpuTimer:1;                                            //0x0
            UCHAR DynamicTickSupported:1;                                   //0x0
        };
    };
    ULONG KnownType;                                                        //0x4
    ULONG Capabilities;                                                     //0x8
    ULONGLONG MaxIncrement;                                                 //0x10
    ULONG MinIncrement;                                                     //0x18
}; 

----------------------------------------
Structure: _HAL_DP_REPLACE_PARAMETERS

//0x18 bytes (sizeof)
struct _HAL_DP_REPLACE_PARAMETERS
{
    ULONG Flags;                                                            //0x0
    struct _PNP_REPLACE_PROCESSOR_LIST* TargetProcessors;                   //0x8
    struct _PNP_REPLACE_PROCESSOR_LIST* SpareProcessors;                    //0x10
}; 

----------------------------------------
Structure: _HAL_HV_DMA_DOMAIN_INFO

//0x8 bytes (sizeof)
struct _HAL_HV_DMA_DOMAIN_INFO
{
    ULONG DomainId;                                                         //0x0
    UCHAR IsStage1;                                                         //0x4
}; 

----------------------------------------
Structure: _HAL_HV_SVM_DEVICE_CAPABILITIES

//0xc bytes (sizeof)
struct _HAL_HV_SVM_DEVICE_CAPABILITIES
{
    ULONG SvmSupported:1;                                                   //0x0
    ULONG PciExecute:1;                                                     //0x0
    ULONG NoExecute:1;                                                      //0x0
    ULONG Reserved:28;                                                      //0x0
    ULONG OverflowPossible:1;                                               //0x0
    ULONG PasidCount;                                                       //0x4
    ULONG IommuIndex;                                                       //0x8
}; 

----------------------------------------
Structure: _HAL_HV_SVM_SYSTEM_CAPABILITIES

//0x18 bytes (sizeof)
struct _HAL_HV_SVM_SYSTEM_CAPABILITIES
{
    ULONG SvmSupported:1;                                                   //0x0
    ULONG GpaAlwaysValid:1;                                                 //0x0
    ULONG MaxPasidSpaceCount;                                               //0x4
    ULONG MaxPasidSpacePasidCount;                                          //0x8
    ULONG MaxPrqSize;                                                       //0xc
    ULONG IommuCount;                                                       //0x10
    ULONG MinIommuPasidCount;                                               //0x14
}; 

----------------------------------------
Structure: _HAL_INTEL_ENLIGHTENMENT_INFORMATION

//0x1f8 bytes (sizeof)
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION
{
    ULONG Enlightenments;                                                   //0x0
    ULONG HypervisorConnected;                                              //0x4
    VOID (*EndOfInterrupt)();                                               //0x8
    VOID (*ApicWriteIcr)(ULONG arg1, ULONG arg2);                           //0x10
    ULONG Reserved0;                                                        //0x18
    ULONG SpinCountMask;                                                    //0x1c
    VOID (*LongSpinWait)(ULONG arg1);                                       //0x20
    ULONGLONG (*GetReferenceTime)(ULONG* arg1);                             //0x28
    LONG (*SetSystemSleepProperty)(ULONG arg1, UCHAR arg2, UCHAR arg3);     //0x30
    LONG (*EnterSleepState)(ULONG arg1);                                    //0x38
    LONG (*NotifyDebugDeviceAvailable)();                                   //0x40
    LONG (*MapDeviceInterrupt)(ULONGLONG arg1, VOID* arg2, struct _GROUP_AFFINITY* arg3, VOID* arg4); //0x48
    LONG (*UnmapDeviceInterrupt)(ULONGLONG arg1, VOID* arg2);               //0x50
    LONG (*RetargetDeviceInterrupt)(ULONGLONG arg1, VOID* arg2, VOID* arg3, struct _GROUP_AFFINITY* arg4, VOID* arg5); //0x58
    LONG (*SetHpetConfig)(union _LARGE_INTEGER arg1, ULONG arg2, ULONGLONG arg3, UCHAR arg4, VOID* arg5); //0x60
    LONG (*NotifyHpetEnabled)();                                            //0x68
    LONG (*QueryAssociatedProcessors)(ULONG arg1, ULONG* arg2, ULONG* arg3); //0x70
    LONG (*ReadMultipleMsr)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONGLONG* arg4); //0x78
    LONG (*WriteMultipleMsr)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONGLONG* arg4); //0x80
    LONG (*ReadCpuid)(ULONG arg1, ULONG arg2, ULONG* arg3, ULONG* arg4, ULONG* arg5, ULONG* arg6); //0x88
    LONG (*LpWritebackInvalidate)(ULONG arg1);                              //0x90
    LONG (*GetMachineCheckContext)(ULONG arg1, ULONG* arg2, ULONGLONG* arg3, ULONG* arg4); //0x98
    LONG (*SuspendPartition)(ULONGLONG arg1);                               //0xa0
    LONG (*ResumePartition)(ULONGLONG arg1);                                //0xa8
    LONG (*SetSystemMachineCheckProperty)(VOID* arg1);                      //0xb0
    LONG (*WheaErrorNotification)(struct _WHEA_RECOVERY_CONTEXT* arg1, UCHAR arg2, UCHAR arg3); //0xb8
    ULONG (*GetProcessorIndexFromVpIndex)(ULONG arg1);                      //0xc0
    LONG (*SyntheticClusterIpi)(struct _KAFFINITY_EX* arg1, ULONG arg2);    //0xc8
    UCHAR (*VpStartEnabled)();                                              //0xd0
    LONG (*StartVirtualProcessor)(ULONG arg1, VOID* arg2);                  //0xd8
    LONG (*GetVpIndexFromApicId)(ULONG arg1, ULONG* arg2);                  //0xe0
    LONG (*IumAccessPciDevice)(UCHAR arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7, VOID* arg8); //0xe8
    ULONGLONG (*IumEfiRuntimeService)(ULONG arg1, VOID* arg2, ULONGLONG arg3, ULONGLONG* arg4); //0xf0
    VOID (*SvmGetSystemCapabilities)(struct _HAL_HV_SVM_SYSTEM_CAPABILITIES* arg1); //0xf8
    LONG (*SvmGetDeviceCapabilities)(ULONG arg1, struct _HAL_HV_SVM_DEVICE_CAPABILITIES* arg2); //0x100
    LONG (*SvmCreatePasidSpace)(ULONG arg1, ULONG arg2);                    //0x108
    LONG (*SvmSetPasidAddressSpace)(ULONG arg1, ULONG arg2, ULONGLONG arg3); //0x110
    VOID (*SvmFlushPasid)(ULONG arg1, ULONG arg2, ULONG arg3, struct _KTB_FLUSH_VA* arg4); //0x118
    LONG (*SvmAttachPasidSpace)(ULONG arg1, ULONG arg2, ULONG arg3, ULONG arg4); //0x120
    LONG (*SvmDetachPasidSpace)(ULONG arg1);                                //0x128
    LONG (*SvmEnablePasid)(ULONG arg1, ULONG arg2);                         //0x130
    LONG (*SvmDisablePasid)(ULONG arg1, ULONG arg2);                        //0x138
    LONG (*SvmAcknowledgePageRequest)(ULONG arg1, VOID* arg2, ULONG* arg3); //0x140
    LONG (*SvmCreatePrQueue)(ULONG arg1, ULONG arg2, union _LARGE_INTEGER arg3, ULONG arg4, ULONG arg5); //0x148
    LONG (*SvmDeletePrQueue)(ULONG arg1);                                   //0x150
    LONG (*SvmClearPrqStalled)(ULONG arg1);                                 //0x158
    LONG (*SvmSetDeviceEnabled)(ULONG arg1, UCHAR arg2);                    //0x160
    LONG (*HvDebuggerPowerHandler)(UCHAR arg1);                             //0x168
    LONG (*SetQpcBias)(ULONGLONG arg1);                                     //0x170
    ULONGLONG (*GetQpcBias)();                                              //0x178
    LONG (*RegisterDeviceId)(struct _EXT_IOMMU_DEVICE_ID* arg1, ULONGLONG arg2); //0x180
    LONG (*UnregisterDeviceId)(ULONGLONG arg1);                             //0x188
    LONG (*AllocateDeviceDomain)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1);     //0x190
    LONG (*AttachDeviceDomain)(struct _EXT_IOMMU_DEVICE_ID* arg1, struct _HAL_HV_DMA_DOMAIN_INFO* arg2); //0x198
    LONG (*DetachDeviceDomain)(ULONGLONG arg1);                             //0x1a0
    LONG (*DeleteDeviceDomain)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1);       //0x1a8
    LONG (*MapDeviceLogicalRange)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1, ULONG arg2, ULONGLONG arg3, ULONGLONG* arg4, ULONGLONG* arg5, UCHAR arg6); //0x1b0
    LONG (*UnmapDeviceLogicalRange)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1, ULONGLONG arg2, ULONGLONG* arg3); //0x1b8
    LONG (*MapDeviceSparsePages)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1, ULONG arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x1c0
    LONG (*UnmapDeviceSparsePages)(struct _HAL_HV_DMA_DOMAIN_INFO* arg1, ULONGLONG* arg2, ULONGLONG* arg3); //0x1c8
    LONG (*GetDmaGuardEnabled)(UCHAR* arg1);                                //0x1d0
    LONG (*UpdateMicrocode)(VOID* arg1, ULONG arg2);                        //0x1d8
    LONG (*GetSintMessage)(UCHAR arg1, VOID** arg2);                        //0x1e0
    LONG (*RestoreTime)(ULONG arg1, ULONGLONG arg2, ULONGLONG arg3);        //0x1e8
    LONG (*SetRootFaultReportingReady)();                                   //0x1f0
}; 

----------------------------------------
Structure: _HAL_IOMMU_DISPATCH

//0x98 bytes (sizeof)
struct _HAL_IOMMU_DISPATCH
{
    UCHAR (*HalIommuSupportEnabled)();                                      //0x0
    LONG (*HalIommuGetConfiguration)(ULONG arg1, ULONG* arg2, ULONG* arg3, VOID** arg4); //0x8
    LONG (*HalIommuGetLibraryContext)(ULONG arg1, ULONG arg2, VOID** arg3); //0x10
    LONG (*HalIommuMapDevice)(VOID* arg1, struct _EXT_IOMMU_DEVICE_ID* arg2, union _IOMMU_SVM_CAPABILITIES* arg3, VOID** arg4); //0x18
    LONG (*HalIommuEnableDevicePasid)(VOID* arg1, VOID* arg2);              //0x20
    LONG (*HalIommuSetAddressSpace)(VOID* arg1, ULONGLONG arg2);            //0x28
    LONG (*HalIommuDisableDevicePasid)(VOID* arg1, VOID* arg2);             //0x30
    LONG (*HalIommuUnmapDevice)(VOID* arg1, VOID* arg2);                    //0x38
    LONG (*HalIommuFreeLibraryContext)(VOID* arg1);                         //0x40
    VOID (*HalIommuFlushTb)(VOID* arg1, ULONG arg2, struct _KTB_FLUSH_VA* arg3); //0x48
    VOID (*HalIommuFlushAllPasid)(VOID* arg1, ULONG arg2, struct _KTB_FLUSH_VA* arg3); //0x50
    UCHAR (*HalIommuProcessPageRequestQueue)(ULONG arg1);                   //0x58
    VOID (*HalIommuFaultRoutine)(ULONG arg1);                               //0x60
    VOID* (*HalIommuReferenceAsid)(ULONG arg1);                             //0x68
    VOID (*HalIommuDereferenceAsid)(ULONG arg1);                            //0x70
    LONG (*HalIommuServicePageFault)(ULONGLONG arg1, VOID* arg2, ULONG arg3); //0x78
    LONG (*HalIommuDevicePowerChange)(VOID* arg1, VOID* arg2, UCHAR arg3);  //0x80
    LONG (*HalIommuBeginDeviceReset)(VOID* arg1, ULONG* arg2);              //0x88
    LONG (*HalIommuFinalizeDeviceReset)(VOID* arg1);                        //0x90
}; 

----------------------------------------
Structure: _HAL_LBR_ENTRY

//0x18 bytes (sizeof)
struct _HAL_LBR_ENTRY
{
    VOID* FromAddress;                                                      //0x0
    VOID* ToAddress;                                                        //0x8
    VOID* Reserved;                                                         //0x10
}; 

----------------------------------------
Structure: _HAL_LOG_REGISTER_CONTEXT

//0x10 bytes (sizeof)
struct _HAL_LOG_REGISTER_CONTEXT
{
    VOID (*LogRoutine)(ULONG arg1, VOID* arg2, ULONG arg3);                 //0x0
    ULONG Flag;                                                             //0x8
}; 

----------------------------------------
Structure: _HAL_NODE_RANGE

//0x10 bytes (sizeof)
struct _HAL_NODE_RANGE
{
    ULONGLONG PageFrameIndex;                                               //0x0
    ULONG Node;                                                             //0x8
}; 

----------------------------------------
Structure: _HAL_PMC_COUNTERS

//0x0 bytes (sizeof)
struct _HAL_PMC_COUNTERS; 

----------------------------------------
Structure: _HAL_UNMASKED_INTERRUPT_INFORMATION

//0x20 bytes (sizeof)
struct _HAL_UNMASKED_INTERRUPT_INFORMATION
{
    USHORT Version;                                                         //0x0
    USHORT Size;                                                            //0x2
    union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;                              //0x4
    enum _KINTERRUPT_MODE Mode;                                             //0x8
    enum _KINTERRUPT_POLARITY Polarity;                                     //0xc
    ULONG Gsiv;                                                             //0x10
    USHORT PinNumber;                                                       //0x14
    VOID* DeviceHandle;                                                     //0x18
}; 

----------------------------------------
Structure: _HANDLE_REVOCATION_INFO

//0x20 bytes (sizeof)
struct _HANDLE_REVOCATION_INFO
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _OB_HANDLE_REVOCATION_BLOCK* RevocationBlock;                    //0x10
    UCHAR AllowHandleRevocation;                                            //0x18
    UCHAR Padding1[3];                                                      //0x19
    UCHAR Padding2[4];                                                      //0x1c
}; 

----------------------------------------
Structure: _HANDLE_TABLE

//0x80 bytes (sizeof)
struct _HANDLE_TABLE
{
    ULONG NextHandleNeedingPool;                                            //0x0
    LONG ExtraInfoPages;                                                    //0x4
    volatile ULONGLONG TableCode;                                           //0x8
    struct _EPROCESS* QuotaProcess;                                         //0x10
    struct _LIST_ENTRY HandleTableList;                                     //0x18
    ULONG UniqueProcessId;                                                  //0x28
    union
    {
        ULONG Flags;                                                        //0x2c
        struct
        {
            UCHAR StrictFIFO:1;                                             //0x2c
            UCHAR EnableHandleExceptions:1;                                 //0x2c
            UCHAR Rundown:1;                                                //0x2c
            UCHAR Duplicated:1;                                             //0x2c
            UCHAR RaiseUMExceptionOnInvalidHandleClose:1;                   //0x2c
        };
    };
    struct _EX_PUSH_LOCK HandleContentionEvent;                             //0x30
    struct _EX_PUSH_LOCK HandleTableLock;                                   //0x38
    union
    {
        struct _HANDLE_TABLE_FREE_LIST FreeLists[1];                        //0x40
        struct
        {
            UCHAR ActualEntry[32];                                          //0x40
            struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;                     //0x60
        };
    };
}; 

----------------------------------------
Structure: _HANDLE_TABLE_ENTRY_INFO

//0x8 bytes (sizeof)
struct _HANDLE_TABLE_ENTRY_INFO
{
    ULONG AuditMask;                                                        //0x0
    ULONG MaxRelativeAccessMask;                                            //0x4
}; 

----------------------------------------
Structure: _HANDLE_TABLE_FREE_LIST

//0x40 bytes (sizeof)
struct _HANDLE_TABLE_FREE_LIST
{
    struct _EX_PUSH_LOCK FreeListLock;                                      //0x0
    union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;                        //0x8
    union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;                         //0x10
    LONG HandleCount;                                                       //0x18
    ULONG HighWaterMark;                                                    //0x1c
}; 

----------------------------------------
Structure: _HANDLE_TRACE_DB_ENTRY

//0xa0 bytes (sizeof)
struct _HANDLE_TRACE_DB_ENTRY
{
    struct _CLIENT_ID ClientId;                                             //0x0
    VOID* Handle;                                                           //0x10
    ULONG Type;                                                             //0x18
    VOID* StackTrace[16];                                                   //0x20
}; 

----------------------------------------
Structure: _HANDLE_TRACE_DEBUG_INFO

//0xf0 bytes (sizeof)
struct _HANDLE_TRACE_DEBUG_INFO
{
    LONG RefCount;                                                          //0x0
    ULONG TableSize;                                                        //0x4
    ULONG BitMaskFlags;                                                     //0x8
    struct _FAST_MUTEX CloseCompactionLock;                                 //0x10
    ULONG CurrentStackIndex;                                                //0x48
    struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];                               //0x50
}; 

----------------------------------------
Structure: _HARDWARE_PTE

//0x8 bytes (sizeof)
struct _HARDWARE_PTE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG Owner:1;                                                      //0x0
    ULONGLONG WriteThrough:1;                                               //0x0
    ULONGLONG CacheDisable:1;                                               //0x0
    ULONGLONG Accessed:1;                                                   //0x0
    ULONGLONG Dirty:1;                                                      //0x0
    ULONGLONG LargePage:1;                                                  //0x0
    ULONGLONG Global:1;                                                     //0x0
    ULONGLONG CopyOnWrite:1;                                                //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG reserved0:1;                                                  //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG reserved1:4;                                                  //0x0
    ULONGLONG SoftwareWsIndex:11;                                           //0x0
    ULONGLONG NoExecute:1;                                                  //0x0
}; 

----------------------------------------
Structure: _HBASE_BLOCK

//0x1000 bytes (sizeof)
struct _HBASE_BLOCK
{
    ULONG Signature;                                                        //0x0
    ULONG Sequence1;                                                        //0x4
    ULONG Sequence2;                                                        //0x8
    union _LARGE_INTEGER TimeStamp;                                         //0xc
    ULONG Major;                                                            //0x14
    ULONG Minor;                                                            //0x18
    ULONG Type;                                                             //0x1c
    ULONG Format;                                                           //0x20
    ULONG RootCell;                                                         //0x24
    ULONG Length;                                                           //0x28
    ULONG Cluster;                                                          //0x2c
    UCHAR FileName[64];                                                     //0x30
    struct _GUID RmId;                                                      //0x70
    struct _GUID LogId;                                                     //0x80
    ULONG Flags;                                                            //0x90
    struct _GUID TmId;                                                      //0x94
    ULONG GuidSignature;                                                    //0xa4
    ULONGLONG LastReorganizeTime;                                           //0xa8
    ULONG Reserved1[83];                                                    //0xb0
    ULONG CheckSum;                                                         //0x1fc
    ULONG Reserved2[882];                                                   //0x200
    struct _GUID ThawTmId;                                                  //0xfc8
    struct _GUID ThawRmId;                                                  //0xfd8
    struct _GUID ThawLogId;                                                 //0xfe8
    ULONG BootType;                                                         //0xff8
    ULONG BootRecover;                                                      //0xffc
}; 

----------------------------------------
Structure: _HBIN

//0x20 bytes (sizeof)
struct _HBIN
{
    ULONG Signature;                                                        //0x0
    ULONG FileOffset;                                                       //0x4
    ULONG Size;                                                             //0x8
    ULONG Reserved1[2];                                                     //0xc
    union _LARGE_INTEGER TimeStamp;                                         //0x14
    ULONG Spare;                                                            //0x1c
}; 

----------------------------------------
Structure: _HCELL

//0x8 bytes (sizeof)
struct _HCELL
{
    LONG Size;                                                              //0x0
    union
    {
        struct
        {
            union
            {
                ULONG UserData;                                             //0x4
                ULONG Next;                                                 //0x4
            } u;                                                            //0x4
        } NewCell;                                                          //0x4
    } u;                                                                    //0x4
}; 

----------------------------------------
Structure: _HEADLESS_LOADER_BLOCK

//0x40 bytes (sizeof)
struct _HEADLESS_LOADER_BLOCK
{
    UCHAR UsedBiosSettings;                                                 //0x0
    UCHAR DataBits;                                                         //0x1
    UCHAR StopBits;                                                         //0x2
    UCHAR Parity;                                                           //0x3
    ULONG BaudRate;                                                         //0x4
    ULONG PortNumber;                                                       //0x8
    UCHAR* PortAddress;                                                     //0x10
    USHORT PciDeviceId;                                                     //0x18
    USHORT PciVendorId;                                                     //0x1a
    UCHAR PciBusNumber;                                                     //0x1c
    USHORT PciBusSegment;                                                   //0x1e
    UCHAR PciSlotNumber;                                                    //0x20
    UCHAR PciFunctionNumber;                                                //0x21
    ULONG PciFlags;                                                         //0x24
    struct _GUID SystemGUID;                                                //0x28
    UCHAR IsMMIODevice;                                                     //0x38
    UCHAR TerminalType;                                                     //0x39
    UCHAR InterfaceType;                                                    //0x3a
    UCHAR RegisterBitWidth;                                                 //0x3b
    UCHAR RegisterAccessSize;                                               //0x3c
}; 

----------------------------------------
Structure: _HEAP

//0x2c0 bytes (sizeof)
struct _HEAP
{
    union
    {
        struct _HEAP_SEGMENT Segment;                                       //0x0
        struct
        {
            struct _HEAP_ENTRY Entry;                                       //0x0
            ULONG SegmentSignature;                                         //0x10
            ULONG SegmentFlags;                                             //0x14
            struct _LIST_ENTRY SegmentListEntry;                            //0x18
            struct _HEAP* Heap;                                             //0x28
            VOID* BaseAddress;                                              //0x30
            ULONG NumberOfPages;                                            //0x38
            struct _HEAP_ENTRY* FirstEntry;                                 //0x40
            struct _HEAP_ENTRY* LastValidEntry;                             //0x48
            ULONG NumberOfUnCommittedPages;                                 //0x50
            ULONG NumberOfUnCommittedRanges;                                //0x54
            USHORT SegmentAllocatorBackTraceIndex;                          //0x58
            USHORT Reserved;                                                //0x5a
            struct _LIST_ENTRY UCRSegmentList;                              //0x60
        };
    };
    ULONG Flags;                                                            //0x70
    ULONG ForceFlags;                                                       //0x74
    ULONG CompatibilityFlags;                                               //0x78
    ULONG EncodeFlagMask;                                                   //0x7c
    struct _HEAP_ENTRY Encoding;                                            //0x80
    ULONG Interceptor;                                                      //0x90
    ULONG VirtualMemoryThreshold;                                           //0x94
    ULONG Signature;                                                        //0x98
    ULONGLONG SegmentReserve;                                               //0xa0
    ULONGLONG SegmentCommit;                                                //0xa8
    ULONGLONG DeCommitFreeBlockThreshold;                                   //0xb0
    ULONGLONG DeCommitTotalFreeThreshold;                                   //0xb8
    ULONGLONG TotalFreeSize;                                                //0xc0
    ULONGLONG MaximumAllocationSize;                                        //0xc8
    USHORT ProcessHeapsListIndex;                                           //0xd0
    USHORT HeaderValidateLength;                                            //0xd2
    VOID* HeaderValidateCopy;                                               //0xd8
    USHORT NextAvailableTagIndex;                                           //0xe0
    USHORT MaximumTagIndex;                                                 //0xe2
    struct _HEAP_TAG_ENTRY* TagEntries;                                     //0xe8
    struct _LIST_ENTRY UCRList;                                             //0xf0
    ULONGLONG AlignRound;                                                   //0x100
    ULONGLONG AlignMask;                                                    //0x108
    struct _LIST_ENTRY VirtualAllocdBlocks;                                 //0x110
    struct _LIST_ENTRY SegmentList;                                         //0x120
    USHORT AllocatorBackTraceIndex;                                         //0x130
    ULONG NonDedicatedListLength;                                           //0x134
    VOID* BlocksIndex;                                                      //0x138
    VOID* UCRIndex;                                                         //0x140
    struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;                        //0x148
    struct _LIST_ENTRY FreeLists;                                           //0x150
    struct _HEAP_LOCK* LockVariable;                                        //0x160
    LONG (*CommitRoutine)(VOID* arg1, VOID** arg2, ULONGLONG* arg3);        //0x168
    union _RTL_RUN_ONCE StackTraceInitVar;                                  //0x170
    struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                     //0x178
    VOID* FrontEndHeap;                                                     //0x198
    USHORT FrontHeapLockCount;                                              //0x1a0
    UCHAR FrontEndHeapType;                                                 //0x1a2
    UCHAR RequestedFrontEndHeapType;                                        //0x1a3
    WCHAR* FrontEndHeapUsageData;                                           //0x1a8
    USHORT FrontEndHeapMaximumIndex;                                        //0x1b0
    volatile UCHAR FrontEndHeapStatusBitmap[129];                           //0x1b2
    struct _HEAP_COUNTERS Counters;                                         //0x238
    struct _HEAP_TUNING_PARAMETERS TuningParameters;                        //0x2b0
}; 

----------------------------------------
Structure: _HEAP_COUNTERS

//0x78 bytes (sizeof)
struct _HEAP_COUNTERS
{
    ULONGLONG TotalMemoryReserved;                                          //0x0
    ULONGLONG TotalMemoryCommitted;                                         //0x8
    ULONGLONG TotalMemoryLargeUCR;                                          //0x10
    ULONGLONG TotalSizeInVirtualBlocks;                                     //0x18
    ULONG TotalSegments;                                                    //0x20
    ULONG TotalUCRs;                                                        //0x24
    ULONG CommittOps;                                                       //0x28
    ULONG DeCommitOps;                                                      //0x2c
    ULONG LockAcquires;                                                     //0x30
    ULONG LockCollisions;                                                   //0x34
    ULONG CommitRate;                                                       //0x38
    ULONG DecommittRate;                                                    //0x3c
    ULONG CommitFailures;                                                   //0x40
    ULONG InBlockCommitFailures;                                            //0x44
    ULONG PollIntervalCounter;                                              //0x48
    ULONG DecommitsSinceLastCheck;                                          //0x4c
    ULONG HeapPollInterval;                                                 //0x50
    ULONG AllocAndFreeOps;                                                  //0x54
    ULONG AllocationIndicesActive;                                          //0x58
    ULONG InBlockDeccommits;                                                //0x5c
    ULONGLONG InBlockDeccomitSize;                                          //0x60
    ULONGLONG HighWatermarkSize;                                            //0x68
    ULONGLONG LastPolledSize;                                               //0x70
}; 

----------------------------------------
Structure: _HEAP_DESCRIPTOR_KEY

//0x4 bytes (sizeof)
struct _HEAP_DESCRIPTOR_KEY
{
    union
    {
        ULONG Key;                                                          //0x0
        struct
        {
            ULONG EncodedCommittedPageCount:16;                             //0x0
            ULONG LargePageCost:8;                                          //0x0
            ULONG UnitCount:8;                                              //0x0
        };
    };
}; 

----------------------------------------
Structure: _HEAP_ENTRY

//0x10 bytes (sizeof)
struct _HEAP_ENTRY
{
    union
    {
        struct _HEAP_UNPACKED_ENTRY UnpackedEntry;                          //0x0
        struct
        {
            VOID* PreviousBlockPrivateData;                                 //0x0
            union
            {
                struct
                {
                    USHORT Size;                                            //0x8
                    UCHAR Flags;                                            //0xa
                    UCHAR SmallTagIndex;                                    //0xb
                };
                struct
                {
                    ULONG SubSegmentCode;                                   //0x8
                    USHORT PreviousSize;                                    //0xc
                    union
                    {
                        UCHAR SegmentOffset;                                //0xe
                        UCHAR LFHFlags;                                     //0xe
                    };
                    UCHAR UnusedBytes;                                      //0xf
                };
                ULONGLONG CompactHeader;                                    //0x8
            };
        };
        struct _HEAP_EXTENDED_ENTRY ExtendedEntry;                          //0x0
        struct
        {
            VOID* Reserved;                                                 //0x0
            union
            {
                struct
                {
                    USHORT FunctionIndex;                                   //0x8
                    USHORT ContextValue;                                    //0xa
                };
                ULONG InterceptorValue;                                     //0x8
            };
            USHORT UnusedBytesLength;                                       //0xc
            UCHAR EntryOffset;                                              //0xe
            UCHAR ExtendedBlockSignature;                                   //0xf
        };
        struct
        {
            VOID* ReservedForAlignment;                                     //0x0
            union
            {
                struct
                {
                    ULONG Code1;                                            //0x8
                    union
                    {
                        struct
                        {
                            USHORT Code2;                                   //0xc
                            UCHAR Code3;                                    //0xe
                            UCHAR Code4;                                    //0xf
                        };
                        ULONG Code234;                                      //0xc
                    };
                };
                ULONGLONG AgregateCode;                                     //0x8
            };
        };
    };
}; 

----------------------------------------
Structure: _HEAP_ENTRY_EXTRA

//0x10 bytes (sizeof)
struct _HEAP_ENTRY_EXTRA
{
    union
    {
        struct
        {
            USHORT AllocatorBackTraceIndex;                                 //0x0
            USHORT TagIndex;                                                //0x2
            ULONGLONG Settable;                                             //0x8
        };
        struct
        {
            ULONGLONG ZeroInit;                                             //0x0
            ULONGLONG ZeroInit1;                                            //0x8
        };
    };
}; 

----------------------------------------
Structure: _HEAP_EXTENDED_ENTRY

//0x10 bytes (sizeof)
struct _HEAP_EXTENDED_ENTRY
{
    VOID* Reserved;                                                         //0x0
    union
    {
        struct
        {
            USHORT FunctionIndex;                                           //0x8
            USHORT ContextValue;                                            //0xa
        };
        ULONG InterceptorValue;                                             //0x8
    };
    USHORT UnusedBytesLength;                                               //0xc
    UCHAR EntryOffset;                                                      //0xe
    UCHAR ExtendedBlockSignature;                                           //0xf
}; 

----------------------------------------
Structure: _HEAP_FAILURE_INFORMATION

//0x6d0 bytes (sizeof)
struct _HEAP_FAILURE_INFORMATION
{
    ULONG Version;                                                          //0x0
    ULONG StructureSize;                                                    //0x4
    enum _HEAP_FAILURE_TYPE FailureType;                                    //0x8
    VOID* HeapAddress;                                                      //0x10
    VOID* Address;                                                          //0x18
    VOID* Param1;                                                           //0x20
    VOID* Param2;                                                           //0x28
    VOID* Param3;                                                           //0x30
    VOID* PreviousBlock;                                                    //0x38
    VOID* NextBlock;                                                        //0x40
    struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;                           //0x48
    VOID* StackTrace[32];                                                   //0x58
    UCHAR HeapMajorVersion;                                                 //0x158
    UCHAR HeapMinorVersion;                                                 //0x159
    struct _EXCEPTION_RECORD ExceptionRecord;                               //0x160
    struct _CONTEXT ContextRecord;                                          //0x200
}; 

----------------------------------------
Structure: _HEAP_FREE_ENTRY

//0x20 bytes (sizeof)
struct _HEAP_FREE_ENTRY
{
    union
    {
        struct _HEAP_ENTRY HeapEntry;                                       //0x0
        struct _HEAP_UNPACKED_ENTRY UnpackedEntry;                          //0x0
        struct
        {
            VOID* PreviousBlockPrivateData;                                 //0x0
            union
            {
                struct
                {
                    USHORT Size;                                            //0x8
                    UCHAR Flags;                                            //0xa
                    UCHAR SmallTagIndex;                                    //0xb
                };
                struct
                {
                    ULONG SubSegmentCode;                                   //0x8
                    USHORT PreviousSize;                                    //0xc
                    union
                    {
                        UCHAR SegmentOffset;                                //0xe
                        UCHAR LFHFlags;                                     //0xe
                    };
                    UCHAR UnusedBytes;                                      //0xf
                };
                ULONGLONG CompactHeader;                                    //0x8
            };
        };
        struct _HEAP_EXTENDED_ENTRY ExtendedEntry;                          //0x0
        struct
        {
            VOID* Reserved;                                                 //0x0
            union
            {
                struct
                {
                    USHORT FunctionIndex;                                   //0x8
                    USHORT ContextValue;                                    //0xa
                };
                ULONG InterceptorValue;                                     //0x8
            };
            USHORT UnusedBytesLength;                                       //0xc
            UCHAR EntryOffset;                                              //0xe
            UCHAR ExtendedBlockSignature;                                   //0xf
        };
        struct
        {
            VOID* ReservedForAlignment;                                     //0x0
            union
            {
                struct
                {
                    ULONG Code1;                                            //0x8
                    union
                    {
                        struct
                        {
                            USHORT Code2;                                   //0xc
                            UCHAR Code3;                                    //0xe
                            UCHAR Code4;                                    //0xf
                        };
                        ULONG Code234;                                      //0xc
                    };
                };
                ULONGLONG AgregateCode;                                     //0x8
            };
        };
    };
    struct _LIST_ENTRY FreeList;                                            //0x10
}; 

----------------------------------------
Structure: _HEAP_FREE_ENTRY_EXTRA

//0x4 bytes (sizeof)
struct _HEAP_FREE_ENTRY_EXTRA
{
    USHORT TagIndex;                                                        //0x0
    USHORT FreeBackTraceIndex;                                              //0x2
}; 

----------------------------------------
Structure: _HEAP_GLOBAL_APPCOMPAT_FLAGS

//0x4 bytes (sizeof)
struct _HEAP_GLOBAL_APPCOMPAT_FLAGS
{
    ULONG SafeInputValidation:1;                                            //0x0
    ULONG Padding:1;                                                        //0x0
    ULONG CommitLFHSubsegments:1;                                           //0x0
    ULONG AllocateHeapFromEnv:1;                                            //0x0
}; 

----------------------------------------
Structure: _HEAP_LARGE_ALLOC_DATA

//0x28 bytes (sizeof)
struct _HEAP_LARGE_ALLOC_DATA
{
    struct _RTL_BALANCED_NODE TreeNode;                                     //0x0
    union
    {
        ULONGLONG VirtualAddress;                                           //0x18
        ULONGLONG UnusedBytes:16;                                           //0x18
    };
    ULONGLONG ExtraPresent:1;                                               //0x20
    ULONGLONG GuardPageCount:1;                                             //0x20
    ULONGLONG GuardPageAlignment:6;                                         //0x20
    ULONGLONG Spare:4;                                                      //0x20
    ULONGLONG AllocatedPages:52;                                            //0x20
}; 

----------------------------------------
Structure: _HEAP_LFH_AFFINITY_SLOT

//0x40 bytes (sizeof)
struct _HEAP_LFH_AFFINITY_SLOT
{
    struct _HEAP_LFH_SUBSEGMENT_OWNER State;                                //0x0
    struct _HEAP_LFH_FAST_REF ActiveSubsegment;                             //0x38
}; 

----------------------------------------
Structure: _HEAP_LFH_BUCKET

//0x68 bytes (sizeof)
struct _HEAP_LFH_BUCKET
{
    struct _HEAP_LFH_SUBSEGMENT_OWNER State;                                //0x0
    ULONGLONG TotalBlockCount;                                              //0x38
    ULONGLONG TotalSubsegmentCount;                                         //0x40
    ULONG ReciprocalBlockSize;                                              //0x48
    UCHAR Shift;                                                            //0x4c
    UCHAR ContentionCount;                                                  //0x4d
    ULONGLONG AffinityMappingLock;                                          //0x50
    UCHAR* ProcAffinityMapping;                                             //0x58
    struct _HEAP_LFH_AFFINITY_SLOT** AffinitySlots;                         //0x60
}; 

----------------------------------------
Structure: _HEAP_LFH_CONTEXT

//0x4c0 bytes (sizeof)
struct _HEAP_LFH_CONTEXT
{
    VOID* BackendCtx;                                                       //0x0
    struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;                          //0x8
    UCHAR* AffinityModArray;                                                //0x30
    UCHAR MaxAffinity;                                                      //0x38
    UCHAR LockType;                                                         //0x39
    SHORT MemStatsOffset;                                                   //0x3a
    struct _RTL_HP_LFH_CONFIG Config;                                       //0x3c
    union _HEAP_LFH_SUBSEGMENT_STATS BucketStats;                           //0x40
    ULONGLONG SubsegmentCreationLock;                                       //0x48
    struct _HEAP_LFH_BUCKET* Buckets[129];                                  //0x80
}; 

----------------------------------------
Structure: _HEAP_LFH_FAST_REF

//0x8 bytes (sizeof)
struct _HEAP_LFH_FAST_REF
{
    union
    {
        VOID* Target;                                                       //0x0
        ULONGLONG Value;                                                    //0x0
        ULONGLONG RefCount:12;                                              //0x0
    };
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT

//0x38 bytes (sizeof)
struct _HEAP_LFH_SUBSEGMENT
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    union
    {
        struct _HEAP_LFH_SUBSEGMENT_OWNER* Owner;                           //0x10
        union _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;                    //0x10
    };
    ULONGLONG CommitLock;                                                   //0x18
    union
    {
        struct
        {
            USHORT FreeCount;                                               //0x20
            USHORT BlockCount;                                              //0x22
        };
        volatile SHORT InterlockedShort;                                    //0x20
        volatile LONG InterlockedLong;                                      //0x20
    };
    USHORT FreeHint;                                                        //0x24
    UCHAR Location;                                                         //0x26
    UCHAR WitheldBlockCount;                                                //0x27
    struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets;               //0x28
    UCHAR CommitUnitShift;                                                  //0x2c
    UCHAR CommitUnitCount;                                                  //0x2d
    USHORT CommitStateOffset;                                               //0x2e
    ULONGLONG BlockBitmap[1];                                               //0x30
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS

//0x4 bytes (sizeof)
struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
{
    union
    {
        struct
        {
            USHORT BlockSize;                                               //0x0
            USHORT FirstBlockOffset;                                        //0x2
        };
        ULONG EncodedData;                                                  //0x0
    };
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT_OWNER

//0x38 bytes (sizeof)
struct _HEAP_LFH_SUBSEGMENT_OWNER
{
    UCHAR IsBucket:1;                                                       //0x0
    UCHAR Spare0:7;                                                         //0x0
    UCHAR BucketIndex;                                                      //0x1
    union
    {
        UCHAR SlotCount;                                                    //0x2
        UCHAR SlotIndex;                                                    //0x2
    };
    UCHAR Spare1;                                                           //0x3
    ULONGLONG AvailableSubsegmentCount;                                     //0x8
    ULONGLONG Lock;                                                         //0x10
    struct _LIST_ENTRY AvailableSubsegmentList;                             //0x18
    struct _LIST_ENTRY FullSubsegmentList;                                  //0x28
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT_STAT

//0x2 bytes (sizeof)
struct _HEAP_LFH_SUBSEGMENT_STAT
{
    UCHAR Index;                                                            //0x0
    UCHAR Count;                                                            //0x1
}; 

----------------------------------------
Structure: _HEAP_LFH_UNUSED_BYTES_INFO

//0x2 bytes (sizeof)
struct _HEAP_LFH_UNUSED_BYTES_INFO
{
    union
    {
        struct
        {
            USHORT UnusedBytes:14;                                          //0x0
            USHORT ExtraPresent:1;                                          //0x0
            USHORT OneByteUnused:1;                                         //0x0
        };
        UCHAR Bytes[2];                                                     //0x0
    };
}; 

----------------------------------------
Structure: _HEAP_LIST_LOOKUP

//0x38 bytes (sizeof)
struct _HEAP_LIST_LOOKUP
{
    struct _HEAP_LIST_LOOKUP* ExtendedLookup;                               //0x0
    ULONG ArraySize;                                                        //0x8
    ULONG ExtraItem;                                                        //0xc
    ULONG ItemCount;                                                        //0x10
    ULONG OutOfRangeItems;                                                  //0x14
    ULONG BaseIndex;                                                        //0x18
    struct _LIST_ENTRY* ListHead;                                           //0x20
    ULONG* ListsInUseUlong;                                                 //0x28
    struct _LIST_ENTRY** ListHints;                                         //0x30
}; 

----------------------------------------
Structure: _HEAP_LOCK

//0x68 bytes (sizeof)
struct _HEAP_LOCK
{
    union
    {
        struct _RTL_CRITICAL_SECTION CriticalSection;                       //0x0
        struct _ERESOURCE Resource;                                         //0x0
    } Lock;                                                                 //0x0
}; 

----------------------------------------
Structure: _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS

//0x10 bytes (sizeof)
struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
{
    volatile ULONGLONG SmallPagesInUseWithinLarge;                          //0x0
    volatile ULONGLONG OpportunisticLargePageCount;                         //0x8
}; 

----------------------------------------
Structure: _HEAP_PAGE_RANGE_DESCRIPTOR

//0x20 bytes (sizeof)
struct _HEAP_PAGE_RANGE_DESCRIPTOR
{
    union
    {
        struct _RTL_BALANCED_NODE TreeNode;                                 //0x0
        struct
        {
            ULONG TreeSignature;                                            //0x0
            ULONG UnusedBytes;                                              //0x4
            USHORT ExtraPresent:1;                                          //0x8
            USHORT Spare0:15;                                               //0x8
        };
    };
    volatile UCHAR RangeFlags;                                              //0x18
    UCHAR CommittedPageCount;                                               //0x19
    USHORT Spare;                                                           //0x1a
    union
    {
        struct _HEAP_DESCRIPTOR_KEY Key;                                    //0x1c
        struct
        {
            UCHAR Align[3];                                                 //0x1c
            union
            {
                UCHAR UnitOffset;                                           //0x1f
                UCHAR UnitSize;                                             //0x1f
            };
        };
    };
}; 

----------------------------------------
Structure: _HEAP_PSEUDO_TAG_ENTRY

//0x10 bytes (sizeof)
struct _HEAP_PSEUDO_TAG_ENTRY
{
    ULONG Allocs;                                                           //0x0
    ULONG Frees;                                                            //0x4
    ULONGLONG Size;                                                         //0x8
}; 

----------------------------------------
Structure: _HEAP_RUNTIME_MEMORY_STATS

//0x58 bytes (sizeof)
struct _HEAP_RUNTIME_MEMORY_STATS
{
    volatile ULONGLONG TotalReservedPages;                                  //0x0
    volatile ULONGLONG TotalCommittedPages;                                 //0x8
    ULONGLONG FreeCommittedPages;                                           //0x10
    ULONGLONG LfhFreeCommittedPages;                                        //0x18
    struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS LargePageStats[2];          //0x20
    struct _RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy;             //0x40
}; 

----------------------------------------
Structure: _HEAP_SEGMENT

//0x70 bytes (sizeof)
struct _HEAP_SEGMENT
{
    struct _HEAP_ENTRY Entry;                                               //0x0
    ULONG SegmentSignature;                                                 //0x10
    ULONG SegmentFlags;                                                     //0x14
    struct _LIST_ENTRY SegmentListEntry;                                    //0x18
    struct _HEAP* Heap;                                                     //0x28
    VOID* BaseAddress;                                                      //0x30
    ULONG NumberOfPages;                                                    //0x38
    struct _HEAP_ENTRY* FirstEntry;                                         //0x40
    struct _HEAP_ENTRY* LastValidEntry;                                     //0x48
    ULONG NumberOfUnCommittedPages;                                         //0x50
    ULONG NumberOfUnCommittedRanges;                                        //0x54
    USHORT SegmentAllocatorBackTraceIndex;                                  //0x58
    USHORT Reserved;                                                        //0x5a
    struct _LIST_ENTRY UCRSegmentList;                                      //0x60
}; 

----------------------------------------
Structure: _HEAP_SEG_CONTEXT

//0xc0 bytes (sizeof)
struct _HEAP_SEG_CONTEXT
{
    ULONGLONG SegmentMask;                                                  //0x0
    UCHAR UnitShift;                                                        //0x8
    UCHAR PagesPerUnitShift;                                                //0x9
    UCHAR FirstDescriptorIndex;                                             //0xa
    UCHAR CachedCommitSoftShift;                                            //0xb
    UCHAR CachedCommitHighShift;                                            //0xc
    union
    {
        UCHAR LargePagePolicy:3;                                            //0xd
        UCHAR FullDecommit:1;                                               //0xd
        UCHAR ReleaseEmptySegments:1;                                       //0xd
        UCHAR AllFlags;                                                     //0xd
    } Flags;                                                                //0xd
    ULONG MaxAllocationSize;                                                //0x10
    SHORT OlpStatsOffset;                                                   //0x14
    SHORT MemStatsOffset;                                                   //0x16
    VOID* LfhContext;                                                       //0x18
    VOID* VsContext;                                                        //0x20
    struct RTL_HP_ENV_HANDLE EnvHandle;                                     //0x28
    VOID* Heap;                                                             //0x38
    ULONGLONG SegmentLock;                                                  //0x40
    struct _LIST_ENTRY SegmentListHead;                                     //0x48
    ULONGLONG SegmentCount;                                                 //0x58
    struct _RTL_RB_TREE FreePageRanges;                                     //0x60
    ULONGLONG FreeSegmentListLock;                                          //0x70
    struct _SINGLE_LIST_ENTRY FreeSegmentList[2];                           //0x78
}; 

----------------------------------------
Structure: _HEAP_STOP_ON_TAG

//0x4 bytes (sizeof)
struct _HEAP_STOP_ON_TAG
{
    union
    {
        ULONG HeapAndTagIndex;                                              //0x0
        struct
        {
            USHORT TagIndex;                                                //0x0
            USHORT HeapIndex;                                               //0x2
        };
    };
}; 

----------------------------------------
Structure: _HEAP_STOP_ON_VALUES

//0x30 bytes (sizeof)
struct _HEAP_STOP_ON_VALUES
{
    ULONGLONG AllocAddress;                                                 //0x0
    struct _HEAP_STOP_ON_TAG AllocTag;                                      //0x8
    ULONGLONG ReAllocAddress;                                               //0x10
    struct _HEAP_STOP_ON_TAG ReAllocTag;                                    //0x18
    ULONGLONG FreeAddress;                                                  //0x20
    struct _HEAP_STOP_ON_TAG FreeTag;                                       //0x28
}; 

----------------------------------------
Structure: _HEAP_SUBALLOCATOR_CALLBACKS

//0x28 bytes (sizeof)
struct _HEAP_SUBALLOCATOR_CALLBACKS
{
    ULONGLONG Allocate;                                                     //0x0
    ULONGLONG Free;                                                         //0x8
    ULONGLONG Commit;                                                       //0x10
    ULONGLONG Decommit;                                                     //0x18
    ULONGLONG ExtendContext;                                                //0x20
}; 

----------------------------------------
Structure: _HEAP_TAG_ENTRY

//0x48 bytes (sizeof)
struct _HEAP_TAG_ENTRY
{
    ULONG Allocs;                                                           //0x0
    ULONG Frees;                                                            //0x4
    ULONGLONG Size;                                                         //0x8
    USHORT TagIndex;                                                        //0x10
    USHORT CreatorBackTraceIndex;                                           //0x12
    WCHAR TagName[24];                                                      //0x14
}; 

----------------------------------------
Structure: _HEAP_TUNING_PARAMETERS

//0x10 bytes (sizeof)
struct _HEAP_TUNING_PARAMETERS
{
    ULONG CommittThresholdShift;                                            //0x0
    ULONGLONG MaxPreCommittThreshold;                                       //0x8
}; 

----------------------------------------
Structure: _HEAP_UCR_DESCRIPTOR

//0x30 bytes (sizeof)
struct _HEAP_UCR_DESCRIPTOR
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _LIST_ENTRY SegmentEntry;                                        //0x10
    VOID* Address;                                                          //0x20
    ULONGLONG Size;                                                         //0x28
}; 

----------------------------------------
Structure: _HEAP_UNPACKED_ENTRY

//0x10 bytes (sizeof)
struct _HEAP_UNPACKED_ENTRY
{
    VOID* PreviousBlockPrivateData;                                         //0x0
    union
    {
        struct
        {
            USHORT Size;                                                    //0x8
            UCHAR Flags;                                                    //0xa
            UCHAR SmallTagIndex;                                            //0xb
        };
        struct
        {
            ULONG SubSegmentCode;                                           //0x8
            USHORT PreviousSize;                                            //0xc
            union
            {
                UCHAR SegmentOffset;                                        //0xe
                UCHAR LFHFlags;                                             //0xe
            };
            UCHAR UnusedBytes;                                              //0xf
        };
        ULONGLONG CompactHeader;                                            //0x8
    };
}; 

----------------------------------------
Structure: _HEAP_VAMGR_ALLOCATOR

//0x30 bytes (sizeof)
struct _HEAP_VAMGR_ALLOCATOR
{
    ULONGLONG TreeLock;                                                     //0x0
    struct _RTL_RB_TREE FreeRanges;                                         //0x8
    struct _HEAP_VAMGR_VASPACE* VaSpace;                                    //0x18
    VOID* PartitionHandle;                                                  //0x20
    USHORT ChunksPerRegion;                                                 //0x28
    USHORT RefCount;                                                        //0x2a
    UCHAR AllocatorIndex;                                                   //0x2c
    UCHAR NumaNode;                                                         //0x2d
    UCHAR LockType:1;                                                       //0x2e
    UCHAR MemoryType:2;                                                     //0x2e
    UCHAR ConstrainedVA:1;                                                  //0x2e
    UCHAR AllowFreeHead:1;                                                  //0x2e
    UCHAR Spare0:3;                                                         //0x2e
    UCHAR Spare1;                                                           //0x2f
}; 

----------------------------------------
Structure: _HEAP_VAMGR_CTX

//0x3840 bytes (sizeof)
struct _HEAP_VAMGR_CTX
{
    struct _HEAP_VAMGR_VASPACE VaSpace;                                     //0x0
    ULONGLONG AllocatorLock;                                                //0x860
    ULONG AllocatorCount;                                                   //0x868
    struct _HEAP_VAMGR_ALLOCATOR Allocators[255];                           //0x870
}; 

----------------------------------------
Structure: _HEAP_VAMGR_RANGE

//0x20 bytes (sizeof)
struct _HEAP_VAMGR_RANGE
{
    union
    {
        struct _RTL_BALANCED_NODE RbNode;                                   //0x0
        struct _SINGLE_LIST_ENTRY Next;                                     //0x0
        struct
        {
            UCHAR Allocated:1;                                              //0x0
            UCHAR Internal:1;                                               //0x0
            UCHAR Standalone:1;                                             //0x0
            UCHAR Spare0:5;                                                 //0x0
            UCHAR AllocatorIndex;                                           //0x1
            ULONGLONG OwnerCtx[2];                                          //0x8
        };
    };
    union
    {
        ULONGLONG SizeInChunks;                                             //0x18
        struct
        {
            USHORT ChunkCount;                                              //0x18
            USHORT PrevChunkCount;                                          //0x1a
        };
        ULONGLONG Signature;                                                //0x18
    };
}; 

----------------------------------------
Structure: _HEAP_VAMGR_VASPACE

//0x860 bytes (sizeof)
struct _HEAP_VAMGR_VASPACE
{
    enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;                      //0x0
    ULONGLONG BaseAddress;                                                  //0x8
    union
    {
        struct _RTL_SPARSE_ARRAY VaRangeArray;                              //0x10
        UCHAR VaRangeArrayBuffer[2128];                                     //0x10
    };
}; 

----------------------------------------
Structure: _HEAP_VIRTUAL_ALLOC_ENTRY

//0x40 bytes (sizeof)
struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
    struct _LIST_ENTRY Entry;                                               //0x0
    struct _HEAP_ENTRY_EXTRA ExtraStuff;                                    //0x10
    ULONGLONG CommitSize;                                                   //0x20
    ULONGLONG ReserveSize;                                                  //0x28
    struct _HEAP_ENTRY BusyBlock;                                           //0x30
}; 

----------------------------------------
Structure: _HEAP_VS_CHUNK_FREE_HEADER

//0x20 bytes (sizeof)
struct _HEAP_VS_CHUNK_FREE_HEADER
{
    union
    {
        struct _HEAP_VS_CHUNK_HEADER Header;                                //0x0
        struct
        {
            ULONGLONG OverlapsHeader;                                       //0x0
            struct _RTL_BALANCED_NODE Node;                                 //0x8
        };
    };
}; 

----------------------------------------
Structure: _HEAP_VS_CHUNK_HEADER

//0x10 bytes (sizeof)
struct _HEAP_VS_CHUNK_HEADER
{
    union _HEAP_VS_CHUNK_HEADER_SIZE Sizes;                                 //0x0
    union
    {
        struct
        {
            ULONG EncodedSegmentPageOffset:8;                               //0x8
            ULONG UnusedBytes:1;                                            //0x8
            ULONG SkipDuringWalk:1;                                         //0x8
            ULONG Spare:22;                                                 //0x8
        };
        ULONG AllocatedChunkBits;                                           //0x8
    };
}; 

----------------------------------------
Structure: _HEAP_VS_CONTEXT

//0xc0 bytes (sizeof)
struct _HEAP_VS_CONTEXT
{
    ULONGLONG Lock;                                                         //0x0
    enum _RTLP_HP_LOCK_TYPE LockType;                                       //0x8
    struct _RTL_RB_TREE FreeChunkTree;                                      //0x10
    struct _LIST_ENTRY SubsegmentList;                                      //0x20
    ULONGLONG TotalCommittedUnits;                                          //0x30
    ULONGLONG FreeCommittedUnits;                                           //0x38
    struct _HEAP_VS_DELAY_FREE_CONTEXT DelayFreeContext;                    //0x40
    VOID* BackendCtx;                                                       //0x80
    struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;                          //0x88
    struct _RTL_HP_VS_CONFIG Config;                                        //0xb0
    ULONG Flags;                                                            //0xb4
}; 

----------------------------------------
Structure: _HEAP_VS_DELAY_FREE_CONTEXT

//0x10 bytes (sizeof)
struct _HEAP_VS_DELAY_FREE_CONTEXT
{
    union _SLIST_HEADER ListHead;                                           //0x0
}; 

----------------------------------------
Structure: _HEAP_VS_SUBSEGMENT

//0x28 bytes (sizeof)
struct _HEAP_VS_SUBSEGMENT
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONGLONG CommitBitmap;                                                 //0x10
    ULONGLONG CommitLock;                                                   //0x18
    USHORT Size;                                                            //0x20
    USHORT Signature:15;                                                    //0x22
    USHORT FullCommit:1;                                                    //0x22
}; 

----------------------------------------
Structure: _HEAP_VS_UNUSED_BYTES_INFO

//0x2 bytes (sizeof)
struct _HEAP_VS_UNUSED_BYTES_INFO
{
    union
    {
        struct
        {
            USHORT UnusedBytes:13;                                          //0x0
            USHORT LfhSubsegment:1;                                         //0x0
            USHORT ExtraPresent:1;                                          //0x0
            USHORT OneByteUnused:1;                                         //0x0
        };
        UCHAR Bytes[2];                                                     //0x0
    };
}; 

----------------------------------------
Structure: _HHIVE

//0x600 bytes (sizeof)
struct _HHIVE
{
    ULONG Signature;                                                        //0x0
    struct _CELL_DATA* (*GetCellRoutine)(struct _HHIVE* arg1, ULONG arg2, struct _HV_GET_CELL_CONTEXT* arg3); //0x8
    VOID (*ReleaseCellRoutine)(struct _HHIVE* arg1, struct _HV_GET_CELL_CONTEXT* arg2); //0x10
    VOID* (*Allocate)(ULONG arg1, UCHAR arg2, ULONG arg3);                  //0x18
    VOID (*Free)(VOID* arg1, ULONG arg2);                                   //0x20
    LONG (*FileWrite)(struct _HHIVE* arg1, ULONG arg2, struct CMP_OFFSET_ARRAY* arg3, ULONG arg4, ULONG arg5); //0x28
    LONG (*FileRead)(struct _HHIVE* arg1, ULONG arg2, ULONG arg3, VOID* arg4, ULONG arg5); //0x30
    VOID* HiveLoadFailure;                                                  //0x38
    struct _HBASE_BLOCK* BaseBlock;                                         //0x40
    struct _CMSI_RW_LOCK FlusherLock;                                       //0x48
    struct _CMSI_RW_LOCK WriterLock;                                        //0x50
    struct _RTL_BITMAP DirtyVector;                                         //0x58
    ULONG DirtyCount;                                                       //0x68
    ULONG DirtyAlloc;                                                       //0x6c
    struct _RTL_BITMAP UnreconciledVector;                                  //0x70
    ULONG UnreconciledCount;                                                //0x80
    ULONG BaseBlockAlloc;                                                   //0x84
    ULONG Cluster;                                                          //0x88
    UCHAR Flat:1;                                                           //0x8c
    UCHAR ReadOnly:1;                                                       //0x8c
    UCHAR Reserved:6;                                                       //0x8c
    UCHAR DirtyFlag;                                                        //0x8d
    ULONG HvBinHeadersUse;                                                  //0x90
    ULONG HvFreeCellsUse;                                                   //0x94
    ULONG HvUsedCellsUse;                                                   //0x98
    ULONG CmUsedCellsUse;                                                   //0x9c
    ULONG HiveFlags;                                                        //0xa0
    ULONG CurrentLog;                                                       //0xa4
    ULONG CurrentLogSequence;                                               //0xa8
    ULONG CurrentLogMinimumSequence;                                        //0xac
    ULONG CurrentLogOffset;                                                 //0xb0
    ULONG MinimumLogSequence;                                               //0xb4
    ULONG LogFileSizeCap;                                                   //0xb8
    UCHAR LogDataPresent[2];                                                //0xbc
    UCHAR PrimaryFileValid;                                                 //0xbe
    UCHAR BaseBlockDirty;                                                   //0xbf
    union _LARGE_INTEGER LastLogSwapTime;                                   //0xc0
    union
    {
        struct
        {
            USHORT FirstLogFile:3;                                          //0xc8
            USHORT SecondLogFile:3;                                         //0xc8
            USHORT HeaderRecovered:1;                                       //0xc8
            USHORT LegacyRecoveryIndicated:1;                               //0xc8
            USHORT RecoveryInformationReserved:8;                           //0xc8
        };
        USHORT RecoveryInformation;                                         //0xc8
    };
    UCHAR LogEntriesRecovered[2];                                           //0xca
    ULONG RefreshCount;                                                     //0xcc
    ULONG StorageTypeCount;                                                 //0xd0
    ULONG Version;                                                          //0xd4
    struct _HVP_VIEW_MAP ViewMap;                                           //0xd8
    struct _DUAL Storage[2];                                                //0x110
}; 

----------------------------------------
Structure: _HIDDEN_PROCESSOR_POWER_INTERFACE

//0x28 bytes (sizeof)
struct _HIDDEN_PROCESSOR_POWER_INTERFACE
{
    ULONG Version;                                                          //0x0
    LONG (*ReadPerfMsr)(ULONG arg1, ULONG arg2, ULONGLONG* arg3);           //0x8
    LONG (*WritePerfMsr)(ULONG arg1, ULONG arg2, ULONGLONG arg3, ULONGLONG arg4); //0x10
    LONG (*ReadPerfIoPort)(ULONG arg1, USHORT arg2, USHORT arg3, ULONG* arg4); //0x18
    LONG (*WritePerfIoPort)(ULONG arg1, USHORT arg2, USHORT arg3, ULONG arg4, ULONG arg5); //0x20
}; 

----------------------------------------
Structure: _HIVE_LIST_ENTRY

//0xc8 bytes (sizeof)
struct _HIVE_LIST_ENTRY
{
    WCHAR* FileName;                                                        //0x0
    WCHAR* BaseName;                                                        //0x8
    WCHAR* RegRootName;                                                     //0x10
    struct _CMHIVE* CmHive;                                                 //0x18
    ULONG HHiveFlags;                                                       //0x20
    ULONG CmHiveFlags;                                                      //0x24
    ULONG CmKcbCacheSize;                                                   //0x28
    struct _CMHIVE* CmHive2;                                                //0x30
    UCHAR HiveMounted;                                                      //0x38
    UCHAR ThreadFinished;                                                   //0x39
    UCHAR ThreadStarted;                                                    //0x3a
    UCHAR Allocate;                                                         //0x3b
    UCHAR WinPERequired;                                                    //0x3c
    struct _KEVENT StartEvent;                                              //0x40
    struct _KEVENT FinishedEvent;                                           //0x58
    struct _KEVENT MountLock;                                               //0x70
    struct _EX_PUSH_LOCK MountCallbackLock;                                 //0x88
    struct _EX_PUSH_LOCK CallbackListLock;                                  //0x90
    struct _LIST_ENTRY CallbackListHead;                                    //0x98
    struct _WORK_QUEUE_ITEM* CallbackWorkItem;                              //0xa8
    volatile LONG CallbackWorkItemBusy;                                     //0xb0
    struct _UNICODE_STRING FilePath;                                        //0xb8
}; 

----------------------------------------
Structure: _HIVE_LOAD_FAILURE

//0x1b0 bytes (sizeof)
struct _HIVE_LOAD_FAILURE
{
    struct _HHIVE* Hive;                                                    //0x0
    USHORT Index;                                                           //0x8
    USHORT RecoverableIndex;                                                //0xa
    struct
    {
        enum _CM_LOAD_FAILURE_TYPE Failure;                                 //0xc
        LONG Status;                                                        //0x10
        ULONG Point;                                                        //0x14
    } Locations[8];                                                         //0xc
    struct
    {
        enum _CM_LOAD_FAILURE_TYPE Failure;                                 //0x6c
        LONG Status;                                                        //0x70
        ULONG Point;                                                        //0x74
    } RecoverableLocations[8];                                              //0x6c
    struct
    {
        ULONG Action;                                                       //0xd0
        VOID* Handle;                                                       //0xd8
        LONG Status;                                                        //0xe0
    } RegistryIO;                                                           //0xd0
    struct
    {
        VOID* CheckStack;                                                   //0xe8
    } CheckRegistry2;                                                       //0xe8
    struct
    {
        ULONG Cell;                                                         //0xf0
        struct _CELL_DATA* CellPoint;                                       //0xf8
        VOID* RootPoint;                                                    //0x100
        ULONG Index;                                                        //0x108
    } CheckKey;                                                             //0xf0
    struct
    {
        struct _CELL_DATA* List;                                            //0x110
        ULONG Index;                                                        //0x118
        ULONG Cell;                                                         //0x11c
        struct _CELL_DATA* CellPoint;                                       //0x120
    } CheckValueList;                                                       //0x110
    struct
    {
        ULONG Space;                                                        //0x128
        ULONG MapPoint;                                                     //0x12c
        struct _HBIN* BinPoint;                                             //0x130
    } CheckHive;                                                            //0x128
    struct
    {
        ULONG Space;                                                        //0x138
        ULONG MapPoint;                                                     //0x13c
        struct _HBIN* BinPoint;                                             //0x140
    } CheckHive1;                                                           //0x138
    struct
    {
        struct _HBIN* Bin;                                                  //0x148
        struct _HCELL* CellPoint;                                           //0x150
    } CheckBin;                                                             //0x148
    struct
    {
        ULONG FileOffset;                                                   //0x158
    } RecoverData;                                                          //0x158
    struct _CM_PARSE_DEBUG_INFO LinkDebug;                                  //0x160
}; 

----------------------------------------
Structure: _HIVE_WAIT_PACKET

//0x28 bytes (sizeof)
struct _HIVE_WAIT_PACKET
{
    struct _KEVENT WakeEvent;                                               //0x0
    LONG Status;                                                            //0x18
    struct _HIVE_WAIT_PACKET* Next;                                         //0x20
}; 

----------------------------------------
Structure: _HIVE_WRITE_WAIT_QUEUE

//0x10 bytes (sizeof)
struct _HIVE_WRITE_WAIT_QUEUE
{
    struct _ETHREAD* ActiveThread;                                          //0x0
    struct _HIVE_WAIT_PACKET* WaitList;                                     //0x8
}; 

----------------------------------------
Structure: _HMAP_DIRECTORY

//0x2000 bytes (sizeof)
struct _HMAP_DIRECTORY
{
    struct _HMAP_TABLE* Directory[1024];                                    //0x0
}; 

----------------------------------------
Structure: _HMAP_ENTRY

//0x18 bytes (sizeof)
struct _HMAP_ENTRY
{
    ULONGLONG BlockOffset;                                                  //0x0
    ULONGLONG PermanentBinAddress;                                          //0x8
    ULONG MemAlloc;                                                         //0x10
}; 

----------------------------------------
Structure: _HMAP_TABLE

//0x3000 bytes (sizeof)
struct _HMAP_TABLE
{
    struct _HMAP_ENTRY Table[512];                                          //0x0
}; 

----------------------------------------
Structure: _HVP_VIEW_MAP

//0x38 bytes (sizeof)
struct _HVP_VIEW_MAP
{
    VOID* SectionReference;                                                 //0x0
    LONGLONG StorageEndFileOffset;                                          //0x8
    LONGLONG SectionEndFileOffset;                                          //0x10
    struct _CMSI_PROCESS_TUPLE* ProcessTuple;                               //0x18
    ULONG Flags;                                                            //0x20
    struct _RTL_RB_TREE ViewTree;                                           //0x28
}; 

----------------------------------------
Structure: _HV_GET_BIN_CONTEXT

//0x2 bytes (sizeof)
struct _HV_GET_BIN_CONTEXT
{
    USHORT OutstandingReference:1;                                          //0x0
}; 

----------------------------------------
Structure: _HV_GET_CELL_CONTEXT

//0x8 bytes (sizeof)
struct _HV_GET_CELL_CONTEXT
{
    ULONG Cell;                                                             //0x0
    struct _HV_GET_BIN_CONTEXT BinContext;                                  //0x4
}; 

----------------------------------------
Structure: _HV_X64_HYPERVISOR_FEATURES

//0x10 bytes (sizeof)
struct _HV_X64_HYPERVISOR_FEATURES
{
    union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;                 //0x0
    ULONG MaxSupportedCState:4;                                             //0x8
    ULONG HpetNeededForC3PowerState_Deprecated:1;                           //0x8
    ULONG Reserved:27;                                                      //0x8
    ULONG MwaitAvailable_Deprecated:1;                                      //0xc
    ULONG GuestDebuggingAvailable:1;                                        //0xc
    ULONG PerformanceMonitorsAvailable:1;                                   //0xc
    ULONG CpuDynamicPartitioningAvailable:1;                                //0xc
    ULONG XmmRegistersForFastHypercallAvailable:1;                          //0xc
    ULONG GuestIdleAvailable:1;                                             //0xc
    ULONG HypervisorSleepStateSupportAvailable:1;                           //0xc
    ULONG NumaDistanceQueryAvailable:1;                                     //0xc
    ULONG FrequencyRegsAvailable:1;                                         //0xc
    ULONG SyntheticMachineCheckAvailable:1;                                 //0xc
    ULONG GuestCrashRegsAvailable:1;                                        //0xc
    ULONG DebugRegsAvailable:1;                                             //0xc
    ULONG Npiep1Available:1;                                                //0xc
    ULONG DisableHypervisorAvailable:1;                                     //0xc
    ULONG ExtendedGvaRangesForFlushVirtualAddressListAvailable:1;           //0xc
    ULONG FastHypercallOutputAvailable:1;                                   //0xc
    ULONG SvmFeaturesAvailable:1;                                           //0xc
    ULONG SintPollingModeAvailable:1;                                       //0xc
    ULONG HypercallMsrLockAvailable:1;                                      //0xc
    ULONG DirectSyntheticTimers:1;                                          //0xc
    ULONG RegisterPatAvailable:1;                                           //0xc
    ULONG RegisterBndcfgsAvailable:1;                                       //0xc
    ULONG WatchdogTimerAvailable:1;                                         //0xc
    ULONG SyntheticTimeUnhaltedTimerAvailable:1;                            //0xc
    ULONG DeviceDomainsAvailable:1;                                         //0xc
    ULONG S1DeviceDomainsAvailable:1;                                       //0xc
    ULONG LbrAvailable:1;                                                   //0xc
    ULONG IptAvailable:1;                                                   //0xc
    ULONG CrossVtlFlushAvailable:1;                                         //0xc
    ULONG IdleSpecCtrlAvailable:1;                                          //0xc
    ULONG Reserved1:2;                                                      //0xc
}; 

----------------------------------------
Structure: _I386_LOADER_BLOCK

//0x10 bytes (sizeof)
struct _I386_LOADER_BLOCK
{
    VOID* CommonDataArea;                                                   //0x0
    ULONG MachineType;                                                      //0x8
    ULONG VirtualBias;                                                      //0xc
}; 

----------------------------------------
Structure: _IA64_DBGKD_CONTROL_SET

//0x14 bytes (sizeof)
struct _IA64_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONGLONG CurrentSymbolStart;                                           //0x4
    ULONGLONG CurrentSymbolEnd;                                             //0xc
}; 

----------------------------------------
Structure: _IMAGE_DATA_DIRECTORY

//0x8 bytes (sizeof)
struct _IMAGE_DATA_DIRECTORY
{
    ULONG VirtualAddress;                                                   //0x0
    ULONG Size;                                                             //0x4
}; 

----------------------------------------
Structure: _IMAGE_DEBUG_DIRECTORY

//0x1c bytes (sizeof)
struct _IMAGE_DEBUG_DIRECTORY
{
    ULONG Characteristics;                                                  //0x0
    ULONG TimeDateStamp;                                                    //0x4
    USHORT MajorVersion;                                                    //0x8
    USHORT MinorVersion;                                                    //0xa
    ULONG Type;                                                             //0xc
    ULONG SizeOfData;                                                       //0x10
    ULONG AddressOfRawData;                                                 //0x14
    ULONG PointerToRawData;                                                 //0x18
}; 

----------------------------------------
Structure: _IMAGE_DOS_HEADER

//0x40 bytes (sizeof)
struct _IMAGE_DOS_HEADER
{
    USHORT e_magic;                                                         //0x0
    USHORT e_cblp;                                                          //0x2
    USHORT e_cp;                                                            //0x4
    USHORT e_crlc;                                                          //0x6
    USHORT e_cparhdr;                                                       //0x8
    USHORT e_minalloc;                                                      //0xa
    USHORT e_maxalloc;                                                      //0xc
    USHORT e_ss;                                                            //0xe
    USHORT e_sp;                                                            //0x10
    USHORT e_csum;                                                          //0x12
    USHORT e_ip;                                                            //0x14
    USHORT e_cs;                                                            //0x16
    USHORT e_lfarlc;                                                        //0x18
    USHORT e_ovno;                                                          //0x1a
    USHORT e_res[4];                                                        //0x1c
    USHORT e_oemid;                                                         //0x24
    USHORT e_oeminfo;                                                       //0x26
    USHORT e_res2[10];                                                      //0x28
    LONG e_lfanew;                                                          //0x3c
}; 

----------------------------------------
Structure: _IMAGE_FILE_HEADER

//0x14 bytes (sizeof)
struct _IMAGE_FILE_HEADER
{
    USHORT Machine;                                                         //0x0
    USHORT NumberOfSections;                                                //0x2
    ULONG TimeDateStamp;                                                    //0x4
    ULONG PointerToSymbolTable;                                             //0x8
    ULONG NumberOfSymbols;                                                  //0xc
    USHORT SizeOfOptionalHeader;                                            //0x10
    USHORT Characteristics;                                                 //0x12
}; 

----------------------------------------
Structure: _IMAGE_NT_HEADERS64

//0x108 bytes (sizeof)
struct _IMAGE_NT_HEADERS64
{
    ULONG Signature;                                                        //0x0
    struct _IMAGE_FILE_HEADER FileHeader;                                   //0x4
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;                         //0x18
}; 

----------------------------------------
Structure: _IMAGE_OPTIONAL_HEADER64

//0xf0 bytes (sizeof)
struct _IMAGE_OPTIONAL_HEADER64
{
    USHORT Magic;                                                           //0x0
    UCHAR MajorLinkerVersion;                                               //0x2
    UCHAR MinorLinkerVersion;                                               //0x3
    ULONG SizeOfCode;                                                       //0x4
    ULONG SizeOfInitializedData;                                            //0x8
    ULONG SizeOfUninitializedData;                                          //0xc
    ULONG AddressOfEntryPoint;                                              //0x10
    ULONG BaseOfCode;                                                       //0x14
    ULONGLONG ImageBase;                                                    //0x18
    ULONG SectionAlignment;                                                 //0x20
    ULONG FileAlignment;                                                    //0x24
    USHORT MajorOperatingSystemVersion;                                     //0x28
    USHORT MinorOperatingSystemVersion;                                     //0x2a
    USHORT MajorImageVersion;                                               //0x2c
    USHORT MinorImageVersion;                                               //0x2e
    USHORT MajorSubsystemVersion;                                           //0x30
    USHORT MinorSubsystemVersion;                                           //0x32
    ULONG Win32VersionValue;                                                //0x34
    ULONG SizeOfImage;                                                      //0x38
    ULONG SizeOfHeaders;                                                    //0x3c
    ULONG CheckSum;                                                         //0x40
    USHORT Subsystem;                                                       //0x44
    USHORT DllCharacteristics;                                              //0x46
    ULONGLONG SizeOfStackReserve;                                           //0x48
    ULONGLONG SizeOfStackCommit;                                            //0x50
    ULONGLONG SizeOfHeapReserve;                                            //0x58
    ULONGLONG SizeOfHeapCommit;                                             //0x60
    ULONG LoaderFlags;                                                      //0x68
    ULONG NumberOfRvaAndSizes;                                              //0x6c
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];                         //0x70
}; 

----------------------------------------
Structure: _IMAGE_ROM_OPTIONAL_HEADER

//0x38 bytes (sizeof)
struct _IMAGE_ROM_OPTIONAL_HEADER
{
    USHORT Magic;                                                           //0x0
    UCHAR MajorLinkerVersion;                                               //0x2
    UCHAR MinorLinkerVersion;                                               //0x3
    ULONG SizeOfCode;                                                       //0x4
    ULONG SizeOfInitializedData;                                            //0x8
    ULONG SizeOfUninitializedData;                                          //0xc
    ULONG AddressOfEntryPoint;                                              //0x10
    ULONG BaseOfCode;                                                       //0x14
    ULONG BaseOfData;                                                       //0x18
    ULONG BaseOfBss;                                                        //0x1c
    ULONG GprMask;                                                          //0x20
    ULONG CprMask[4];                                                       //0x24
    ULONG GpValue;                                                          //0x34
}; 

----------------------------------------
Structure: _IMAGE_RUNTIME_FUNCTION_ENTRY

//0xc bytes (sizeof)
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
    ULONG BeginAddress;                                                     //0x0
    ULONG EndAddress;                                                       //0x4
    union
    {
        ULONG UnwindInfoAddress;                                            //0x8
        ULONG UnwindData;                                                   //0x8
    };
}; 

----------------------------------------
Structure: _IMAGE_SECTION_HEADER

//0x28 bytes (sizeof)
struct _IMAGE_SECTION_HEADER
{
    UCHAR Name[8];                                                          //0x0
    union
    {
        ULONG PhysicalAddress;                                              //0x8
        ULONG VirtualSize;                                                  //0x8
    } Misc;                                                                 //0x8
    ULONG VirtualAddress;                                                   //0xc
    ULONG SizeOfRawData;                                                    //0x10
    ULONG PointerToRawData;                                                 //0x14
    ULONG PointerToRelocations;                                             //0x18
    ULONG PointerToLinenumbers;                                             //0x1c
    USHORT NumberOfRelocations;                                             //0x20
    USHORT NumberOfLinenumbers;                                             //0x22
    ULONG Characteristics;                                                  //0x24
}; 

----------------------------------------
Structure: _IMAGE_SECURITY_CONTEXT

//0x8 bytes (sizeof)
struct _IMAGE_SECURITY_CONTEXT
{
    union
    {
        VOID* PageHashes;                                                   //0x0
        ULONGLONG Value;                                                    //0x0
        struct
        {
            ULONGLONG SecurityBeingCreated:2;                               //0x0
            ULONGLONG SecurityMandatory:1;                                  //0x0
            ULONGLONG PageHashPointer:61;                                   //0x0
        };
    };
}; 

----------------------------------------
Structure: _INITIAL_PRIVILEGE_SET

//0x2c bytes (sizeof)
struct _INITIAL_PRIVILEGE_SET
{
    ULONG PrivilegeCount;                                                   //0x0
    ULONG Control;                                                          //0x4
    struct _LUID_AND_ATTRIBUTES Privilege[3];                               //0x8
}; 

----------------------------------------
Structure: _INPUT_MAPPING_ELEMENT

//0x4 bytes (sizeof)
struct _INPUT_MAPPING_ELEMENT
{
    ULONG InputMappingId;                                                   //0x0
}; 

----------------------------------------
Structure: _INTERFACE

//0x20 bytes (sizeof)
struct _INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
}; 

----------------------------------------
Structure: _INTERRUPT_CONNECTION_DATA

//0x60 bytes (sizeof)
struct _INTERRUPT_CONNECTION_DATA
{
    ULONG Count;                                                            //0x0
    struct _INTERRUPT_VECTOR_DATA Vectors[1];                               //0x8
}; 

----------------------------------------
Structure: _INTERRUPT_FUNCTION_TABLE

//0xb8 bytes (sizeof)
struct _INTERRUPT_FUNCTION_TABLE
{
    LONG (*InitializeLocalUnit)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG* arg6); //0x0
    LONG (*InitializeIoUnit)(VOID* arg1);                                   //0x8
    VOID (*SetPriority)(VOID* arg1, ULONG arg2);                            //0x10
    ULONG (*GetLocalUnitError)(VOID* arg1);                                 //0x18
    VOID (*ClearLocalUnitError)(VOID* arg1);                                //0x20
    LONG (*GetLogicalId)(VOID* arg1, struct _INTERRUPT_TARGET* arg2);       //0x28
    LONG (*SetLogicalId)(VOID* arg1, struct _INTERRUPT_TARGET* arg2);       //0x30
    enum _INTERRUPT_RESULT (*AcceptAndGetSource)(VOID* arg1, LONG* arg2, ULONG* arg3); //0x38
    VOID (*EndOfInterrupt)(VOID* arg1);                                     //0x40
    VOID (*FastEndOfInterrupt)();                                           //0x48
    LONG (*SetLineState)(VOID* arg1, struct _INTERRUPT_LINE* arg2, struct _INTERRUPT_LINE_STATE* arg3); //0x50
    LONG (*RequestInterrupt)(VOID* arg1, struct _INTERRUPT_LINE* arg2, struct _INTERRUPT_TARGET* arg3, ULONG arg4, struct _INTERRUPT_LINE* arg5); //0x58
    LONG (*StartProcessor)(VOID* arg1, ULONG arg2, VOID* arg3, ULONG arg4); //0x60
    LONG (*GenerateMessage)(VOID* arg1, struct _INTERRUPT_LINE_STATE* arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x68
    LONG (*ConvertId)(VOID* arg1, ULONG* arg2, struct _INTERRUPT_TARGET* arg3, UCHAR arg4); //0x70
    LONG (*SaveLocalInterrupts)(VOID* arg1, VOID* arg2);                    //0x78
    LONG (*ReplayLocalInterrupts)(VOID* arg1, VOID* arg2);                  //0x80
    LONG (*DeinitializeLocalUnit)(VOID* arg1);                              //0x88
    LONG (*DeinitializeIoUnit)(VOID* arg1);                                 //0x90
    enum _INTERRUPT_RESULT (*QueryAndGetSource)(VOID* arg1, LONG* arg2, ULONG* arg3, UCHAR* arg4); //0x98
    VOID (*DeactivateInterrupt)(VOID* arg1, ULONG arg2);                    //0xa0
    VOID (*DirectedEndOfInterrupt)(VOID* arg1, ULONG arg2, ULONG arg3);     //0xa8
    LONG (*QueryLocalUnitInfo)(VOID* arg1, ULONG arg2, ULONG* arg3, ULONG* arg4, enum _KINTERRUPT_MODE* arg5, enum _KINTERRUPT_MODE* arg6); //0xb0
}; 

----------------------------------------
Structure: _INTERRUPT_HT_INTR_INFO

//0x8 bytes (sizeof)
struct _INTERRUPT_HT_INTR_INFO
{
    union
    {
        struct
        {
            ULONG Mask:1;                                                   //0x0
            ULONG Polarity:1;                                               //0x0
            ULONG MessageType:3;                                            //0x0
            ULONG RequestEOI:1;                                             //0x0
            ULONG DestinationMode:1;                                        //0x0
            ULONG MessageType3:1;                                           //0x0
            ULONG Destination:8;                                            //0x0
            ULONG Vector:8;                                                 //0x0
            ULONG ExtendedAddress:8;                                        //0x0
        } bits;                                                             //0x0
        ULONG AsULONG;                                                      //0x0
    } LowPart;                                                              //0x0
    union
    {
        struct
        {
            ULONG ExtendedDestination:24;                                   //0x4
            ULONG Reserved:6;                                               //0x4
            ULONG PassPW:1;                                                 //0x4
            ULONG WaitingForEOI:1;                                          //0x4
        } bits;                                                             //0x4
        ULONG AsULONG;                                                      //0x4
    } HighPart;                                                             //0x4
}; 

----------------------------------------
Structure: _INTERRUPT_LINE

//0x8 bytes (sizeof)
struct _INTERRUPT_LINE
{
    ULONG UnitId;                                                           //0x0
    LONG Line;                                                              //0x4
}; 

----------------------------------------
Structure: _INTERRUPT_LINE_STATE

//0x38 bytes (sizeof)
struct _INTERRUPT_LINE_STATE
{
    enum _KINTERRUPT_POLARITY Polarity;                                     //0x0
    UCHAR EmulateActiveBoth;                                                //0x4
    enum _KINTERRUPT_MODE TriggerMode;                                      //0x8
    ULONG Flags;                                                            //0xc
    struct _INTERRUPT_LINE Routing;                                         //0x10
    struct _INTERRUPT_TARGET ProcessorTarget;                               //0x18
    ULONG Vector;                                                           //0x30
    ULONG Priority;                                                         //0x34
}; 

----------------------------------------
Structure: _INTERRUPT_REMAPPING_INFO

//0x10 bytes (sizeof)
struct _INTERRUPT_REMAPPING_INFO
{
    ULONG IrtIndex:30;                                                      //0x0
    ULONG FlagHalInternal:1;                                                //0x0
    ULONG FlagTranslated:1;                                                 //0x0
    union
    {
        struct
        {
            ULONG MessageAddressHigh;                                       //0x4
            ULONG MessageAddressLow;                                        //0x8
            USHORT MessageData;                                             //0xc
            USHORT Reserved;                                                //0xe
        } Msi;                                                              //0x4
    } u;                                                                    //0x4
}; 

----------------------------------------
Structure: _INTERRUPT_TARGET

//0x18 bytes (sizeof)
struct _INTERRUPT_TARGET
{
    enum _INTERRUPT_TARGET_TYPE Target;                                     //0x0
    union
    {
        ULONG PhysicalTarget;                                               //0x8
        ULONG LogicalFlatTarget;                                            //0x8
        ULONG RemapIndex;                                                   //0x8
        struct
        {
            ULONG ClusterId;                                                //0x8
            ULONG ClusterMask;                                              //0xc
        };
        struct
        {
            ULONG Low32;                                                    //0x8
            ULONG High32;                                                   //0xc
            ULONGLONG InterruptData;                                        //0x10
        } HypervisorTarget;                                                 //0x8
    };
}; 

----------------------------------------
Structure: _INTERRUPT_VECTOR_DATA

//0x58 bytes (sizeof)
struct _INTERRUPT_VECTOR_DATA
{
    enum INTERRUPT_CONNECTION_TYPE Type;                                    //0x0
    ULONG Vector;                                                           //0x4
    UCHAR Irql;                                                             //0x8
    enum _KINTERRUPT_POLARITY Polarity;                                     //0xc
    enum _KINTERRUPT_MODE Mode;                                             //0x10
    struct _GROUP_AFFINITY TargetProcessors;                                //0x18
    struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;                          //0x28
    struct
    {
        ULONG Gsiv;                                                         //0x38
        ULONG WakeInterrupt:1;                                              //0x3c
        ULONG ReservedFlags:31;                                             //0x3c
    } ControllerInput;                                                      //0x38
    ULONGLONG HvDeviceId;                                                   //0x40
    union
    {
        struct
        {
            union _LARGE_INTEGER Address;                                   //0x48
            ULONG DataPayload;                                              //0x50
        } XapicMessage;                                                     //0x48
        struct
        {
            struct _INTERRUPT_HT_INTR_INFO IntrInfo;                        //0x48
        } Hypertransport;                                                   //0x48
        struct
        {
            union _LARGE_INTEGER Address;                                   //0x48
            ULONG DataPayload;                                              //0x50
        } GenericMessage;                                                   //0x48
        struct
        {
            enum HAL_APIC_DESTINATION_MODE DestinationMode;                 //0x48
        } MessageRequest;                                                   //0x48
    };
}; 

----------------------------------------
Structure: _INVERTED_FUNCTION_TABLE

//0x1810 bytes (sizeof)
struct _INVERTED_FUNCTION_TABLE
{
    ULONG CurrentSize;                                                      //0x0
    ULONG MaximumSize;                                                      //0x4
    volatile ULONG Epoch;                                                   //0x8
    UCHAR Overflow;                                                         //0xc
    struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];                  //0x10
}; 

----------------------------------------
Structure: _INVERTED_FUNCTION_TABLE_ENTRY

//0x18 bytes (sizeof)
struct _INVERTED_FUNCTION_TABLE_ENTRY
{
    union
    {
        struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;                //0x0
        struct _DYNAMIC_FUNCTION_TABLE* DynamicTable;                       //0x0
    };
    VOID* ImageBase;                                                        //0x8
    ULONG SizeOfImage;                                                      //0x10
    ULONG SizeOfTable;                                                      //0x14
}; 

----------------------------------------
Structure: _IOAPIC

//0xc bytes (sizeof)
struct _IOAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR IOAPICID;                                                         //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG IOAPICAddress;                                                    //0x4
    ULONG SystemVectorBase;                                                 //0x8
}; 

----------------------------------------
Structure: _IOMMU_DMA_DOMAIN

//0x0 bytes (sizeof)
struct _IOMMU_DMA_DOMAIN; 

----------------------------------------
Structure: _IOP_FILE_OBJECT_EXTENSION

//0x58 bytes (sizeof)
struct _IOP_FILE_OBJECT_EXTENSION
{
    ULONG FoExtFlags;                                                       //0x0
    VOID* FoExtPerTypeExtension[9];                                         //0x8
    enum _IOP_PRIORITY_HINT FoIoPriorityHint;                               //0x50
}; 

----------------------------------------
Structure: _IOP_IRP_EXTENSION

//0x50 bytes (sizeof)
struct _IOP_IRP_EXTENSION
{
    union
    {
        USHORT ExtensionFlags;                                              //0x0
        struct
        {
            USHORT Allocated:1;                                             //0x0
            USHORT PropagateId:1;                                           //0x0
            USHORT SpareBits:14;                                            //0x0
        };
    };
    USHORT TypesAllocated;                                                  //0x2
    UCHAR GenericExtension[4];                                              //0x4
    VOID* VerifierContext;                                                  //0x8
    ULONGLONG DiskIoAttributionHandle;                                      //0x10
    struct _GUID ActivityId;                                                //0x18
    union
    {
        union _LARGE_INTEGER Timestamp;                                     //0x28
        ULONG ZeroingOffset;                                                //0x28
        struct
        {
            struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* FsTrackOffsetBlob;      //0x28
            LONGLONG FsTrackedOffset;                                       //0x30
        };
        struct _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;       //0x28
    };
    union
    {
        ULONGLONG Value;                                                    //0x38
        ULONGLONG UserFlags:32;                                             //0x38
        ULONGLONG SystemFlags:16;                                           //0x38
        ULONGLONG UserFlagsId:16;                                           //0x38
    } DriverFlags;                                                          //0x38
    struct _COPY_INFORMATION CopyInformation;                               //0x40
}; 

----------------------------------------
Structure: _IOP_IRP_EXTENSION_STATUS

//0xc bytes (sizeof)
struct _IOP_IRP_EXTENSION_STATUS
{
    ULONG Flags;                                                            //0x0
    ULONG ActivityId;                                                       //0x4
    ULONG IoTracking;                                                       //0x8
}; 

----------------------------------------
Structure: _IOP_IRP_STACK_PROFILER

//0x54 bytes (sizeof)
struct _IOP_IRP_STACK_PROFILER
{
    ULONG Profile[20];                                                      //0x0
    ULONG TotalIrps;                                                        //0x50
}; 

----------------------------------------
Structure: _IOSAPIC

//0x10 bytes (sizeof)
struct _IOSAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR IOSAPICID;                                                        //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG SystemVectorBase;                                                 //0x4
    ULONGLONG IOSAPICAddress;                                               //0x8
}; 

----------------------------------------
Structure: _IOV_FORCED_PENDING_TRACE

//0x200 bytes (sizeof)
struct _IOV_FORCED_PENDING_TRACE
{
    struct _IRP* Irp;                                                       //0x0
    struct _ETHREAD* Thread;                                                //0x8
    VOID* StackTrace[62];                                                   //0x10
}; 

----------------------------------------
Structure: _IOV_IRP_TRACE

//0x80 bytes (sizeof)
struct _IOV_IRP_TRACE
{
    struct _IRP* Irp;                                                       //0x0
    struct _KTHREAD* Thread;                                                //0x8
    union
    {
        struct
        {
            SHORT KernelApcDisable;                                         //0x10
            SHORT SpecialApcDisable;                                        //0x12
        };
        ULONG CombinedApcDisable;                                           //0x10
    };
    UCHAR Irql;                                                             //0x14
    VOID* StackTrace[13];                                                   //0x18
}; 

----------------------------------------
Structure: _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR

//0x48 bytes (sizeof)
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
{
    ULONG Version;                                                          //0x0
    ULONG Size;                                                             //0x4
    ULONG CryptoIndex;                                                      //0x8
    ULONG AlgorithmId;                                                      //0xc
    ULONG DataUnitSize;                                                     //0x10
    ULONG KeySize;                                                          //0x14
    UCHAR KeyHash[32];                                                      //0x18
    VOID* KeyVirtualAddress;                                                //0x38
    union _LARGE_INTEGER KeyPhysicalAddress;                                //0x40
}; 

----------------------------------------
Structure: _IO_ADAPTER_CRYPTO_PARAMETERS

//0x10 bytes (sizeof)
struct _IO_ADAPTER_CRYPTO_PARAMETERS
{
    ULONGLONG Tweak;                                                        //0x0
    struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR* KeyDescriptor;                //0x8
}; 

----------------------------------------
Structure: _IO_APIC_DATA

//0x30 bytes (sizeof)
struct _IO_APIC_DATA
{
    ULONGLONG PhysicalAddress;                                              //0x0
    ULONG Identifier;                                                       //0x8
    struct _IO_APIC_REGISTERS* BaseAddress;                                 //0x10
    UCHAR Version;                                                          //0x18
    UCHAR PinCount;                                                         //0x19
    UCHAR Initialized;                                                      //0x1a
    UCHAR InitializedFirstLocalUnit;                                        //0x1b
    ULONG GsiBase;                                                          //0x1c
    ULONG CmciRegister;                                                     //0x20
    ULONG DeferredErrorRegister;                                            //0x24
    UCHAR IoUnitMissing;                                                    //0x28
}; 

----------------------------------------
Structure: _IO_APIC_REGISTERS

//0x44 bytes (sizeof)
struct _IO_APIC_REGISTERS
{
    volatile ULONG RegisterIndex;                                           //0x0
    volatile ULONG Reserved1[3];                                            //0x4
    volatile ULONG RegisterValue;                                           //0x10
    volatile ULONG Reserved2[11];                                           //0x14
    volatile ULONG EndOfInterrupt;                                          //0x40
}; 

----------------------------------------
Structure: _IO_CLIENT_EXTENSION

//0x10 bytes (sizeof)
struct _IO_CLIENT_EXTENSION
{
    struct _IO_CLIENT_EXTENSION* NextExtension;                             //0x0
    VOID* ClientIdentificationAddress;                                      //0x8
}; 

----------------------------------------
Structure: _IO_COMPLETION_CONTEXT

//0x18 bytes (sizeof)
struct _IO_COMPLETION_CONTEXT
{
    VOID* Port;                                                             //0x0
    VOID* Key;                                                              //0x8
    LONGLONG UsageCount;                                                    //0x10
}; 

----------------------------------------
Structure: _IO_DRIVER_CREATE_CONTEXT

//0x28 bytes (sizeof)
struct _IO_DRIVER_CREATE_CONTEXT
{
    SHORT Size;                                                             //0x0
    struct _ECP_LIST* ExtraCreateParameter;                                 //0x8
    VOID* DeviceObjectHint;                                                 //0x10
    struct _TXN_PARAMETER_BLOCK* TxnParameters;                             //0x18
    struct _EJOB* SiloContext;                                              //0x20
}; 

----------------------------------------
Structure: _IO_IRP_EXT_TRACK_OFFSET_HEADER

//0x10 bytes (sizeof)
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
    USHORT Validation;                                                      //0x0
    USHORT Flags;                                                           //0x2
    VOID (*TrackedOffsetCallback)(struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* arg1, struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* arg2, LONGLONG arg3); //0x8
}; 

----------------------------------------
Structure: _IO_MINI_COMPLETION_PACKET_USER

//0x50 bytes (sizeof)
struct _IO_MINI_COMPLETION_PACKET_USER
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG PacketType;                                                       //0x10
    VOID* KeyContext;                                                       //0x18
    VOID* ApcContext;                                                       //0x20
    LONG IoStatus;                                                          //0x28
    ULONGLONG IoStatusInformation;                                          //0x30
    VOID (*MiniPacketCallback)(struct _IO_MINI_COMPLETION_PACKET_USER* arg1, VOID* arg2); //0x38
    VOID* Context;                                                          //0x40
    UCHAR Allocated;                                                        //0x48
}; 

----------------------------------------
Structure: _IO_NMISOURCE

//0x8 bytes (sizeof)
struct _IO_NMISOURCE
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    USHORT Flags;                                                           //0x2
    ULONG GlobalSystemInterruptVector;                                      //0x4
}; 

----------------------------------------
Structure: _IO_PRIORITY_INFO

//0x10 bytes (sizeof)
struct _IO_PRIORITY_INFO
{
    ULONG Size;                                                             //0x0
    ULONG ThreadPriority;                                                   //0x4
    ULONG PagePriority;                                                     //0x8
    enum _IO_PRIORITY_HINT IoPriority;                                      //0xc
}; 

----------------------------------------
Structure: _IO_REMOVE_LOCK

//0x20 bytes (sizeof)
struct _IO_REMOVE_LOCK
{
    struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;                             //0x0
}; 

----------------------------------------
Structure: _IO_REMOVE_LOCK_COMMON_BLOCK

//0x20 bytes (sizeof)
struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
    UCHAR Removed;                                                          //0x0
    UCHAR Reserved[3];                                                      //0x1
    LONG IoCount;                                                           //0x4
    struct _KEVENT RemoveEvent;                                             //0x8
}; 

----------------------------------------
Structure: _IO_RESOURCE_DESCRIPTOR

//0x20 bytes (sizeof)
struct _IO_RESOURCE_DESCRIPTOR
{
    UCHAR Option;                                                           //0x0
    UCHAR Type;                                                             //0x1
    UCHAR ShareDisposition;                                                 //0x2
    UCHAR Spare1;                                                           //0x3
    USHORT Flags;                                                           //0x4
    USHORT Spare2;                                                          //0x6
    union
    {
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Port;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory;                                                           //0x8
        struct
        {
            ULONG MinimumVector;                                            //0x8
            ULONG MaximumVector;                                            //0xc
            USHORT AffinityPolicy;                                          //0x10
            USHORT Group;                                                   //0x12
            enum _IRQ_PRIORITY PriorityPolicy;                              //0x14
            ULONGLONG TargetedProcessors;                                   //0x18
        } Interrupt;                                                        //0x8
        struct
        {
            ULONG MinimumChannel;                                           //0x8
            ULONG MaximumChannel;                                           //0xc
        } Dma;                                                              //0x8
        struct
        {
            ULONG RequestLine;                                              //0x8
            ULONG Reserved;                                                 //0xc
            ULONG Channel;                                                  //0x10
            ULONG TransferWidth;                                            //0x14
        } DmaV3;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Alignment;                                                //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Generic;                                                          //0x8
        struct
        {
            ULONG Data[3];                                                  //0x8
        } DevicePrivate;                                                    //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG MinBusNumber;                                             //0xc
            ULONG MaxBusNumber;                                             //0x10
            ULONG Reserved;                                                 //0x14
        } BusNumber;                                                        //0x8
        struct
        {
            ULONG Priority;                                                 //0x8
            ULONG Reserved1;                                                //0xc
            ULONG Reserved2;                                                //0x10
        } ConfigData;                                                       //0x8
        struct
        {
            ULONG Length40;                                                 //0x8
            ULONG Alignment40;                                              //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory40;                                                         //0x8
        struct
        {
            ULONG Length48;                                                 //0x8
            ULONG Alignment48;                                              //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory48;                                                         //0x8
        struct
        {
            ULONG Length64;                                                 //0x8
            ULONG Alignment64;                                              //0xc
            union _LARGE_INTEGER MinimumAddress;                            //0x10
            union _LARGE_INTEGER MaximumAddress;                            //0x18
        } Memory64;                                                         //0x8
        struct
        {
            UCHAR Class;                                                    //0x8
            UCHAR Type;                                                     //0x9
            UCHAR Reserved1;                                                //0xa
            UCHAR Reserved2;                                                //0xb
            ULONG IdLowPart;                                                //0xc
            ULONG IdHighPart;                                               //0x10
        } Connection;                                                       //0x8
    } u;                                                                    //0x8
}; 

----------------------------------------
Structure: _IO_RESOURCE_LIST

//0x28 bytes (sizeof)
struct _IO_RESOURCE_LIST
{
    USHORT Version;                                                         //0x0
    USHORT Revision;                                                        //0x2
    ULONG Count;                                                            //0x4
    struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];                          //0x8
}; 

----------------------------------------
Structure: _IO_RESOURCE_REQUIREMENTS_LIST

//0x48 bytes (sizeof)
struct _IO_RESOURCE_REQUIREMENTS_LIST
{
    ULONG ListSize;                                                         //0x0
    enum _INTERFACE_TYPE InterfaceType;                                     //0x4
    ULONG BusNumber;                                                        //0x8
    ULONG SlotNumber;                                                       //0xc
    ULONG Reserved[3];                                                      //0x10
    ULONG AlternativeLists;                                                 //0x1c
    struct _IO_RESOURCE_LIST List[1];                                       //0x20
}; 

----------------------------------------
Structure: _IO_SECURITY_CONTEXT

//0x18 bytes (sizeof)
struct _IO_SECURITY_CONTEXT
{
    struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;                       //0x0
    struct _ACCESS_STATE* AccessState;                                      //0x8
    ULONG DesiredAccess;                                                    //0x10
    ULONG FullCreateOptions;                                                //0x14
}; 

----------------------------------------
Structure: _IO_STACK_LOCATION

//0x48 bytes (sizeof)
struct _IO_STACK_LOCATION
{
    UCHAR MajorFunction;                                                    //0x0
    UCHAR MinorFunction;                                                    //0x1
    UCHAR Flags;                                                            //0x2
    UCHAR Control;                                                          //0x3
    union
    {
        struct
        {
            struct _IO_SECURITY_CONTEXT* SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT FileAttributes;                                          //0x18
            USHORT ShareAccess;                                             //0x1a
            ULONG EaLength;                                                 //0x20
        } Create;                                                           //0x8
        struct
        {
            struct _IO_SECURITY_CONTEXT* SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT Reserved;                                                //0x18
            USHORT ShareAccess;                                             //0x1a
            struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;               //0x20
        } CreatePipe;                                                       //0x8
        struct
        {
            struct _IO_SECURITY_CONTEXT* SecurityContext;                   //0x8
            ULONG Options;                                                  //0x10
            USHORT Reserved;                                                //0x18
            USHORT ShareAccess;                                             //0x1a
            struct _MAILSLOT_CREATE_PARAMETERS* Parameters;                 //0x20
        } CreateMailslot;                                                   //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Key;                                                      //0x10
            ULONG Flags;                                                    //0x14
            union _LARGE_INTEGER ByteOffset;                                //0x18
        } Read;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG Key;                                                      //0x10
            ULONG Flags;                                                    //0x14
            union _LARGE_INTEGER ByteOffset;                                //0x18
        } Write;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            struct _UNICODE_STRING* FileName;                               //0x10
            enum _FILE_INFORMATION_CLASS FileInformationClass;              //0x18
            ULONG FileIndex;                                                //0x20
        } QueryDirectory;                                                   //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG CompletionFilter;                                         //0x10
        } NotifyDirectory;                                                  //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            ULONG CompletionFilter;                                         //0x10
            enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass; //0x18
        } NotifyDirectoryEx;                                                //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            enum _FILE_INFORMATION_CLASS FileInformationClass;              //0x10
        } QueryFile;                                                        //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            enum _FILE_INFORMATION_CLASS FileInformationClass;              //0x10
            struct _FILE_OBJECT* FileObject;                                //0x18
            union
            {
                struct
                {
                    UCHAR ReplaceIfExists;                                  //0x20
                    UCHAR AdvanceOnly;                                      //0x21
                };
                ULONG ClusterCount;                                         //0x20
                VOID* DeleteHandle;                                         //0x20
            };
        } SetFile;                                                          //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            VOID* EaList;                                                   //0x10
            ULONG EaListLength;                                             //0x18
            ULONG EaIndex;                                                  //0x20
        } QueryEa;                                                          //0x8
        struct
        {
            ULONG Length;                                                   //0x8
        } SetEa;                                                            //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            enum _FSINFOCLASS FsInformationClass;                           //0x10
        } QueryVolume;                                                      //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            enum _FSINFOCLASS FsInformationClass;                           //0x10
        } SetVolume;                                                        //0x8
        struct
        {
            ULONG OutputBufferLength;                                       //0x8
            ULONG InputBufferLength;                                        //0x10
            ULONG FsControlCode;                                            //0x18
            VOID* Type3InputBuffer;                                         //0x20
        } FileSystemControl;                                                //0x8
        struct
        {
            union _LARGE_INTEGER* Length;                                   //0x8
            ULONG Key;                                                      //0x10
            union _LARGE_INTEGER ByteOffset;                                //0x18
        } LockControl;                                                      //0x8
        struct
        {
            ULONG OutputBufferLength;                                       //0x8
            ULONG InputBufferLength;                                        //0x10
            ULONG IoControlCode;                                            //0x18
            VOID* Type3InputBuffer;                                         //0x20
        } DeviceIoControl;                                                  //0x8
        struct
        {
            ULONG SecurityInformation;                                      //0x8
            ULONG Length;                                                   //0x10
        } QuerySecurity;                                                    //0x8
        struct
        {
            ULONG SecurityInformation;                                      //0x8
            VOID* SecurityDescriptor;                                       //0x10
        } SetSecurity;                                                      //0x8
        struct
        {
            struct _VPB* Vpb;                                               //0x8
            struct _DEVICE_OBJECT* DeviceObject;                            //0x10
        } MountVolume;                                                      //0x8
        struct
        {
            struct _VPB* Vpb;                                               //0x8
            struct _DEVICE_OBJECT* DeviceObject;                            //0x10
        } VerifyVolume;                                                     //0x8
        struct
        {
            struct _SCSI_REQUEST_BLOCK* Srb;                                //0x8
        } Scsi;                                                             //0x8
        struct
        {
            ULONG Length;                                                   //0x8
            VOID* StartSid;                                                 //0x10
            struct _FILE_GET_QUOTA_INFORMATION* SidList;                    //0x18
            ULONG SidListLength;                                            //0x20
        } QueryQuota;                                                       //0x8
        struct
        {
            ULONG Length;                                                   //0x8
        } SetQuota;                                                         //0x8
        struct
        {
            enum _DEVICE_RELATION_TYPE Type;                                //0x8
        } QueryDeviceRelations;                                             //0x8
        struct
        {
            struct _GUID* InterfaceType;                                    //0x8
            USHORT Size;                                                    //0x10
            USHORT Version;                                                 //0x12
            struct _INTERFACE* Interface;                                   //0x18
            VOID* InterfaceSpecificData;                                    //0x20
        } QueryInterface;                                                   //0x8
        struct
        {
            struct _DEVICE_CAPABILITIES* Capabilities;                      //0x8
        } DeviceCapabilities;                                               //0x8
        struct
        {
            struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList; //0x8
        } FilterResourceRequirements;                                       //0x8
        struct
        {
            ULONG WhichSpace;                                               //0x8
            VOID* Buffer;                                                   //0x10
            ULONG Offset;                                                   //0x18
            ULONG Length;                                                   //0x20
        } ReadWriteConfig;                                                  //0x8
        struct
        {
            UCHAR Lock;                                                     //0x8
        } SetLock;                                                          //0x8
        struct
        {
            enum BUS_QUERY_ID_TYPE IdType;                                  //0x8
        } QueryId;                                                          //0x8
        struct
        {
            enum DEVICE_TEXT_TYPE DeviceTextType;                           //0x8
            ULONG LocaleId;                                                 //0x10
        } QueryDeviceText;                                                  //0x8
        struct
        {
            UCHAR InPath;                                                   //0x8
            UCHAR Reserved[3];                                              //0x9
            enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;                      //0x10
        } UsageNotification;                                                //0x8
        struct
        {
            enum _SYSTEM_POWER_STATE PowerState;                            //0x8
        } WaitWake;                                                         //0x8
        struct
        {
            struct _POWER_SEQUENCE* PowerSequence;                          //0x8
        } PowerSequence;                                                    //0x8
        struct
        {
            union
            {
                ULONG SystemContext;                                        //0x8
                struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext; //0x8
            };
            enum _POWER_STATE_TYPE Type;                                    //0x10
            union _POWER_STATE State;                                       //0x18
            enum POWER_ACTION ShutdownType;                                 //0x20
        } Power;                                                            //0x8
        struct
        {
            struct _CM_RESOURCE_LIST* AllocatedResources;                   //0x8
            struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;         //0x10
        } StartDevice;                                                      //0x8
        struct
        {
            ULONGLONG ProviderId;                                           //0x8
            VOID* DataPath;                                                 //0x10
            ULONG BufferSize;                                               //0x18
            VOID* Buffer;                                                   //0x20
        } WMI;                                                              //0x8
        struct
        {
            VOID* Argument1;                                                //0x8
            VOID* Argument2;                                                //0x10
            VOID* Argument3;                                                //0x18
            VOID* Argument4;                                                //0x20
        } Others;                                                           //0x8
    } Parameters;                                                           //0x8
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x28
    struct _FILE_OBJECT* FileObject;                                        //0x30
    LONG (*CompletionRoutine)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, VOID* arg3); //0x38
    VOID* Context;                                                          //0x40
}; 

----------------------------------------
Structure: _IO_STATUS_BLOCK

//0x10 bytes (sizeof)
struct _IO_STATUS_BLOCK
{
    union
    {
        LONG Status;                                                        //0x0
        VOID* Pointer;                                                      //0x0
    };
    ULONGLONG Information;                                                  //0x8
}; 

----------------------------------------
Structure: _IO_TIMER

//0x30 bytes (sizeof)
struct _IO_TIMER
{
    SHORT Type;                                                             //0x0
    SHORT TimerFlag;                                                        //0x2
    struct _LIST_ENTRY TimerList;                                           //0x8
    VOID (*TimerRoutine)(struct _DEVICE_OBJECT* arg1, VOID* arg2);          //0x18
    VOID* Context;                                                          //0x20
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x28
}; 

----------------------------------------
Structure: _IO_WORKITEM

//0x58 bytes (sizeof)
struct _IO_WORKITEM
{
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x0
    VOID (*Routine)(VOID* arg1, VOID* arg2, struct _IO_WORKITEM* arg3);     //0x20
    VOID* IoObject;                                                         //0x28
    VOID* Context;                                                          //0x30
    struct _ETHREAD* WorkOnBehalfThread;                                    //0x38
    ULONG Type;                                                             //0x40
    struct _GUID ActivityId;                                                //0x44
}; 

----------------------------------------
Structure: _IRP

//0xd0 bytes (sizeof)
struct _IRP
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    struct _MDL* MdlAddress;                                                //0x8
    ULONG Flags;                                                            //0x10
    union
    {
        struct _IRP* MasterIrp;                                             //0x18
        LONG IrpCount;                                                      //0x18
        VOID* SystemBuffer;                                                 //0x18
    } AssociatedIrp;                                                        //0x18
    struct _LIST_ENTRY ThreadListEntry;                                     //0x20
    struct _IO_STATUS_BLOCK IoStatus;                                       //0x30
    CHAR RequestorMode;                                                     //0x40
    UCHAR PendingReturned;                                                  //0x41
    CHAR StackCount;                                                        //0x42
    CHAR CurrentLocation;                                                   //0x43
    UCHAR Cancel;                                                           //0x44
    UCHAR CancelIrql;                                                       //0x45
    CHAR ApcEnvironment;                                                    //0x46
    UCHAR AllocationFlags;                                                  //0x47
    struct _IO_STATUS_BLOCK* UserIosb;                                      //0x48
    struct _KEVENT* UserEvent;                                              //0x50
    union
    {
        struct
        {
            union
            {
                VOID (*UserApcRoutine)(VOID* arg1, struct _IO_STATUS_BLOCK* arg2, ULONG arg3); //0x58
                VOID* IssuingProcess;                                       //0x58
            };
            VOID* UserApcContext;                                           //0x60
        } AsynchronousParameters;                                           //0x58
        union _LARGE_INTEGER AllocationSize;                                //0x58
    } Overlay;                                                              //0x58
    VOID (*CancelRoutine)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);  //0x68
    VOID* UserBuffer;                                                       //0x70
    union
    {
        struct
        {
            union
            {
                struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;               //0x78
                VOID* DriverContext[4];                                     //0x78
            };
            struct _ETHREAD* Thread;                                        //0x98
            CHAR* AuxiliaryBuffer;                                          //0xa0
            struct _LIST_ENTRY ListEntry;                                   //0xa8
            union
            {
                struct _IO_STACK_LOCATION* CurrentStackLocation;            //0xb8
                ULONG PacketType;                                           //0xb8
            };
            struct _FILE_OBJECT* OriginalFileObject;                        //0xc0
        } Overlay;                                                          //0x78
        struct _KAPC Apc;                                                   //0x78
        VOID* CompletionKey;                                                //0x78
    } Tail;                                                                 //0x78
}; 

----------------------------------------
Structure: _IRP

//0xd0 bytes (sizeof)
struct _IRP
{
    SHORT Type;                                                             //0x0
    USHORT Size;                                                            //0x2
    struct _MDL* MdlAddress;                                                //0x8
    ULONG Flags;                                                            //0x10
    union
    {
        struct _IRP* MasterIrp;                                             //0x18
        LONG IrpCount;                                                      //0x18
        VOID* SystemBuffer;                                                 //0x18
    } AssociatedIrp;                                                        //0x18
    struct _LIST_ENTRY ThreadListEntry;                                     //0x20
    struct _IO_STATUS_BLOCK IoStatus;                                       //0x30
    CHAR RequestorMode;                                                     //0x40
    UCHAR PendingReturned;                                                  //0x41
    CHAR StackCount;                                                        //0x42
    CHAR CurrentLocation;                                                   //0x43
    UCHAR Cancel;                                                           //0x44
    UCHAR CancelIrql;                                                       //0x45
    CHAR ApcEnvironment;                                                    //0x46
    UCHAR AllocationFlags;                                                  //0x47
    struct _IO_STATUS_BLOCK* UserIosb;                                      //0x48
    struct _KEVENT* UserEvent;                                              //0x50
    union
    {
        struct
        {
            union
            {
                VOID (*UserApcRoutine)(VOID* arg1, struct _IO_STATUS_BLOCK* arg2, ULONG arg3); //0x58
                VOID* IssuingProcess;                                       //0x58
            };
            VOID* UserApcContext;                                           //0x60
        } AsynchronousParameters;                                           //0x58
        union _LARGE_INTEGER AllocationSize;                                //0x58
    } Overlay;                                                              //0x58
    VOID (*CancelRoutine)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);  //0x68
    VOID* UserBuffer;                                                       //0x70
    union
    {
        struct
        {
            union
            {
                struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;               //0x78
                VOID* DriverContext[4];                                     //0x78
            };
            struct _ETHREAD* Thread;                                        //0x98
            CHAR* AuxiliaryBuffer;                                          //0xa0
            struct _LIST_ENTRY ListEntry;                                   //0xa8
            union
            {
                struct _IO_STACK_LOCATION* CurrentStackLocation;            //0xb8
                ULONG PacketType;                                           //0xb8
            };
            struct _FILE_OBJECT* OriginalFileObject;                        //0xc0
        } Overlay;                                                          //0x78
        struct _KAPC Apc;                                                   //0x78
        VOID* CompletionKey;                                                //0x78
    } Tail;                                                                 //0x78
}; 

----------------------------------------
Structure: _ISA_VECTOR

//0xa bytes (sizeof)
struct _ISA_VECTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR Bus;                                                              //0x2
    UCHAR Source;                                                           //0x3
    ULONG GlobalSystemInterruptVector;                                      //0x4
    USHORT Flags;                                                           //0x8
}; 

----------------------------------------
Structure: _ISRDPCSTATS

//0x60 bytes (sizeof)
struct _ISRDPCSTATS
{
    ULONGLONG IsrTime;                                                      //0x0
    ULONGLONG IsrTimeStart;                                                 //0x8
    ULONGLONG IsrCount;                                                     //0x10
    ULONGLONG DpcTime;                                                      //0x18
    ULONGLONG DpcTimeStart;                                                 //0x20
    ULONGLONG DpcCount;                                                     //0x28
    UCHAR IsrActive;                                                        //0x30
    UCHAR Reserved[7];                                                      //0x31
    struct _ISRDPCSTATS_SEQUENCE DpcWatchdog;                               //0x38
}; 

----------------------------------------
Structure: _ISRDPCSTATS_SEQUENCE

//0x28 bytes (sizeof)
struct _ISRDPCSTATS_SEQUENCE
{
    ULONG SequenceNumber;                                                   //0x0
    ULONGLONG IsrTime;                                                      //0x8
    ULONGLONG IsrCount;                                                     //0x10
    ULONGLONG DpcTime;                                                      //0x18
    ULONGLONG DpcCount;                                                     //0x20
}; 

----------------------------------------
Structure: _ISR_THUNK

//0x8 bytes (sizeof)
struct _ISR_THUNK
{
    UCHAR PushImm;                                                          //0x0
    UCHAR Vector;                                                           //0x1
    UCHAR PushRbp;                                                          //0x2
    UCHAR JmpOp;                                                            //0x3
    LONG JmpOffset;                                                         //0x4
}; 

----------------------------------------
Structure: _JOBOBJECT_WAKE_FILTER

//0x8 bytes (sizeof)
struct _JOBOBJECT_WAKE_FILTER
{
    ULONG HighEdgeFilter;                                                   //0x0
    ULONG LowEdgeFilter;                                                    //0x4
}; 

----------------------------------------
Structure: _JOB_ACCESS_STATE

//0x0 bytes (sizeof)
struct _JOB_ACCESS_STATE; 

----------------------------------------
Structure: _JOB_CPU_RATE_CONTROL

//0x0 bytes (sizeof)
struct _JOB_CPU_RATE_CONTROL; 

----------------------------------------
Structure: _JOB_NET_RATE_CONTROL

//0x0 bytes (sizeof)
struct _JOB_NET_RATE_CONTROL; 

----------------------------------------
Structure: _JOB_NOTIFICATION_INFORMATION

//0x0 bytes (sizeof)
struct _JOB_NOTIFICATION_INFORMATION; 

----------------------------------------
Structure: _JOB_RATE_CONTROL_HEADER

//0x28 bytes (sizeof)
struct _JOB_RATE_CONTROL_HEADER
{
    VOID* RateControlQuotaReference;                                        //0x0
    struct _RTL_BITMAP OverQuotaHistory;                                    //0x8
    UCHAR* BitMapBuffer;                                                    //0x18
    ULONGLONG BitMapBufferSize;                                             //0x20
}; 

----------------------------------------
Structure: _KAFFINITY_EX

//0xa8 bytes (sizeof)
struct _KAFFINITY_EX
{
    USHORT Count;                                                           //0x0
    USHORT Size;                                                            //0x2
    ULONG Reserved;                                                         //0x4
    ULONGLONG Bitmap[20];                                                   //0x8
}; 

----------------------------------------
Structure: _KALPC_HANDLE_DATA

//0x30 bytes (sizeof)
struct _KALPC_HANDLE_DATA
{
    ULONG ObjectType;                                                       //0x0
    ULONG Count;                                                            //0x4
    struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;                     //0x8
}; 

----------------------------------------
Structure: _KALPC_MESSAGE

//0x118 bytes (sizeof)
struct _KALPC_MESSAGE
{
    struct _LIST_ENTRY Entry;                                               //0x0
    struct _ALPC_PORT* PortQueue;                                           //0x10
    struct _ALPC_PORT* OwnerPort;                                           //0x18
    struct _ETHREAD* WaitingThread;                                         //0x20
    union
    {
        struct
        {
            ULONG QueueType:3;                                              //0x28
            ULONG QueuePortType:4;                                          //0x28
            ULONG Canceled:1;                                               //0x28
            ULONG Ready:1;                                                  //0x28
            ULONG ReleaseMessage:1;                                         //0x28
            ULONG SharedQuota:1;                                            //0x28
            ULONG ReplyWaitReply:1;                                         //0x28
            ULONG OwnerPortReference:1;                                     //0x28
            ULONG ReceiverReference:1;                                      //0x28
            ULONG ViewAttributeRetrieved:1;                                 //0x28
            ULONG InDispatch:1;                                             //0x28
            ULONG InCanceledQueue:1;                                        //0x28
        } s1;                                                               //0x28
        ULONG State;                                                        //0x28
    } u1;                                                                   //0x28
    LONG SequenceNo;                                                        //0x2c
    union
    {
        struct _EPROCESS* QuotaProcess;                                     //0x30
        VOID* QuotaBlock;                                                   //0x30
    };
    struct _ALPC_PORT* CancelSequencePort;                                  //0x38
    struct _ALPC_PORT* CancelQueuePort;                                     //0x40
    LONG CancelSequenceNo;                                                  //0x48
    struct _LIST_ENTRY CancelListEntry;                                     //0x50
    struct _KALPC_RESERVE* Reserve;                                         //0x60
    struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;                     //0x68
    VOID* DataUserVa;                                                       //0xb0
    struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                     //0xb8
    struct _ALPC_PORT* ConnectionPort;                                      //0xc0
    struct _ETHREAD* ServerThread;                                          //0xc8
    VOID* WakeReference;                                                    //0xd0
    VOID* WakeReference2;                                                   //0xd8
    VOID* ExtensionBuffer;                                                  //0xe0
    ULONGLONG ExtensionBufferSize;                                          //0xe8
    struct _PORT_MESSAGE PortMessage;                                       //0xf0
}; 

----------------------------------------
Structure: _KALPC_MESSAGE_ATTRIBUTES

//0x48 bytes (sizeof)
struct _KALPC_MESSAGE_ATTRIBUTES
{
    VOID* ClientContext;                                                    //0x0
    VOID* ServerContext;                                                    //0x8
    VOID* PortContext;                                                      //0x10
    VOID* CancelPortContext;                                                //0x18
    struct _KALPC_SECURITY_DATA* SecurityData;                              //0x20
    struct _KALPC_VIEW* View;                                               //0x28
    struct _KALPC_HANDLE_DATA* HandleData;                                  //0x30
    union _KALPC_DIRECT_EVENT DirectEvent;                                  //0x38
    struct _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;                     //0x40
}; 

----------------------------------------
Structure: _KALPC_REGION

//0x58 bytes (sizeof)
struct _KALPC_REGION
{
    struct _LIST_ENTRY RegionListEntry;                                     //0x0
    struct _KALPC_SECTION* Section;                                         //0x10
    ULONGLONG Offset;                                                       //0x18
    ULONGLONG Size;                                                         //0x20
    ULONGLONG ViewSize;                                                     //0x28
    union
    {
        struct
        {
            ULONG Secure:1;                                                 //0x30
        } s1;                                                               //0x30
    } u1;                                                                   //0x30
    ULONG NumberOfViews;                                                    //0x34
    struct _LIST_ENTRY ViewListHead;                                        //0x38
    struct _KALPC_VIEW* ReadOnlyView;                                       //0x48
    struct _KALPC_VIEW* ReadWriteView;                                      //0x50
}; 

----------------------------------------
Structure: _KALPC_RESERVE

//0x30 bytes (sizeof)
struct _KALPC_RESERVE
{
    struct _ALPC_PORT* OwnerPort;                                           //0x0
    struct _ALPC_HANDLE_TABLE* HandleTable;                                 //0x8
    VOID* Handle;                                                           //0x10
    struct _KALPC_MESSAGE* Message;                                         //0x18
    ULONGLONG Size;                                                         //0x20
    LONG Active;                                                            //0x28
}; 

----------------------------------------
Structure: _KALPC_SECTION

//0x48 bytes (sizeof)
struct _KALPC_SECTION
{
    VOID* SectionObject;                                                    //0x0
    ULONGLONG Size;                                                         //0x8
    struct _ALPC_HANDLE_TABLE* HandleTable;                                 //0x10
    VOID* SectionHandle;                                                    //0x18
    struct _EPROCESS* OwnerProcess;                                         //0x20
    struct _ALPC_PORT* OwnerPort;                                           //0x28
    union
    {
        struct
        {
            ULONG Internal:1;                                               //0x30
            ULONG Secure:1;                                                 //0x30
        } s1;                                                               //0x30
    } u1;                                                                   //0x30
    ULONG NumberOfRegions;                                                  //0x34
    struct _LIST_ENTRY RegionListHead;                                      //0x38
}; 

----------------------------------------
Structure: _KALPC_SECURITY_DATA

//0x70 bytes (sizeof)
struct _KALPC_SECURITY_DATA
{
    struct _ALPC_HANDLE_TABLE* HandleTable;                                 //0x0
    VOID* ContextHandle;                                                    //0x8
    struct _EPROCESS* OwningProcess;                                        //0x10
    struct _ALPC_PORT* OwnerPort;                                           //0x18
    struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;                        //0x20
    union
    {
        struct
        {
            ULONG Revoked:1;                                                //0x68
            ULONG Impersonated:1;                                           //0x68
        } s1;                                                               //0x68
    } u1;                                                                   //0x68
}; 

----------------------------------------
Structure: _KALPC_VIEW

//0x60 bytes (sizeof)
struct _KALPC_VIEW
{
    struct _LIST_ENTRY ViewListEntry;                                       //0x0
    struct _KALPC_REGION* Region;                                           //0x10
    struct _ALPC_PORT* OwnerPort;                                           //0x18
    struct _EPROCESS* OwnerProcess;                                         //0x20
    VOID* Address;                                                          //0x28
    ULONGLONG Size;                                                         //0x30
    VOID* SecureViewHandle;                                                 //0x38
    VOID* WriteAccessHandle;                                                //0x40
    union
    {
        struct
        {
            ULONG WriteAccess:1;                                            //0x48
            ULONG AutoRelease:1;                                            //0x48
            ULONG ForceUnlink:1;                                            //0x48
            ULONG SystemSpace:1;                                            //0x48
        } s1;                                                               //0x48
    } u1;                                                                   //0x48
    ULONG NumberOfOwnerMessages;                                            //0x4c
    struct _LIST_ENTRY ProcessViewListEntry;                                //0x50
}; 

----------------------------------------
Structure: _KALPC_WORK_ON_BEHALF_DATA

//0x8 bytes (sizeof)
struct _KALPC_WORK_ON_BEHALF_DATA
{
    struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;                              //0x0
}; 

----------------------------------------
Structure: _KAPC

//0x58 bytes (sizeof)
struct _KAPC
{
    UCHAR Type;                                                             //0x0
    UCHAR SpareByte0;                                                       //0x1
    UCHAR Size;                                                             //0x2
    UCHAR SpareByte1;                                                       //0x3
    ULONG SpareLong0;                                                       //0x4
    struct _KTHREAD* Thread;                                                //0x8
    struct _LIST_ENTRY ApcListEntry;                                        //0x10
    union
    {
        struct
        {
            VOID (*KernelRoutine)(struct _KAPC* arg1, VOID (**arg2)(VOID* arg1, VOID* arg2, VOID* arg3), VOID** arg3, VOID** arg4, VOID** arg5); //0x20
            VOID (*RundownRoutine)(struct _KAPC* arg1);                     //0x28
            VOID (*NormalRoutine)(VOID* arg1, VOID* arg2, VOID* arg3);      //0x30
        };
        VOID* Reserved[3];                                                  //0x20
    };
    VOID* NormalContext;                                                    //0x38
    VOID* SystemArgument1;                                                  //0x40
    VOID* SystemArgument2;                                                  //0x48
    CHAR ApcStateIndex;                                                     //0x50
    CHAR ApcMode;                                                           //0x51
    UCHAR Inserted;                                                         //0x52
}; 

----------------------------------------
Structure: _KAPC

//0x58 bytes (sizeof)
struct _KAPC
{
    UCHAR Type;                                                             //0x0
    UCHAR SpareByte0;                                                       //0x1
    UCHAR Size;                                                             //0x2
    UCHAR SpareByte1;                                                       //0x3
    ULONG SpareLong0;                                                       //0x4
    struct _KTHREAD* Thread;                                                //0x8
    struct _LIST_ENTRY ApcListEntry;                                        //0x10
    union
    {
        struct
        {
            VOID (*KernelRoutine)(struct _KAPC* arg1, VOID (**arg2)(VOID* arg1, VOID* arg2, VOID* arg3), VOID** arg3, VOID** arg4, VOID** arg5); //0x20
            VOID (*RundownRoutine)(struct _KAPC* arg1);                     //0x28
            VOID (*NormalRoutine)(VOID* arg1, VOID* arg2, VOID* arg3);      //0x30
        };
        VOID* Reserved[3];                                                  //0x20
    };
    VOID* NormalContext;                                                    //0x38
    VOID* SystemArgument1;                                                  //0x40
    VOID* SystemArgument2;                                                  //0x48
    CHAR ApcStateIndex;                                                     //0x50
    CHAR ApcMode;                                                           //0x51
    UCHAR Inserted;                                                         //0x52
}; 

----------------------------------------
Structure: _KAPC_STATE

//0x30 bytes (sizeof)
struct _KAPC_STATE
{
    struct _LIST_ENTRY ApcListHead[2];                                      //0x0
    struct _KPROCESS* Process;                                              //0x20
    union
    {
        UCHAR InProgressFlags;                                              //0x28
        struct
        {
            UCHAR KernelApcInProgress:1;                                    //0x28
            UCHAR SpecialApcInProgress:1;                                   //0x28
        };
    };
    UCHAR KernelApcPending;                                                 //0x29
    union
    {
        UCHAR UserApcPendingAll;                                            //0x2a
        struct
        {
            UCHAR SpecialUserApcPending:1;                                  //0x2a
            UCHAR UserApcPending:1;                                         //0x2a
        };
    };
}; 

----------------------------------------
Structure: _KDESCRIPTOR

//0x10 bytes (sizeof)
struct _KDESCRIPTOR
{
    USHORT Pad[3];                                                          //0x0
    USHORT Limit;                                                           //0x6
    VOID* Base;                                                             //0x8
}; 

----------------------------------------
Structure: _KDEVICE_QUEUE

//0x28 bytes (sizeof)
struct _KDEVICE_QUEUE
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    struct _LIST_ENTRY DeviceListHead;                                      //0x8
    ULONGLONG Lock;                                                         //0x18
    union
    {
        UCHAR Busy;                                                         //0x20
        struct
        {
            LONGLONG Reserved:8;                                            //0x20
            LONGLONG Hint:56;                                               //0x20
        };
    };
}; 

----------------------------------------
Structure: _KDEVICE_QUEUE_ENTRY

//0x18 bytes (sizeof)
struct _KDEVICE_QUEUE_ENTRY
{
    struct _LIST_ENTRY DeviceListEntry;                                     //0x0
    ULONG SortKey;                                                          //0x10
    UCHAR Inserted;                                                         //0x14
}; 

----------------------------------------
Structure: _KDPC

//0x40 bytes (sizeof)
struct _KDPC
{
    union
    {
        ULONG TargetInfoAsUlong;                                            //0x0
        struct
        {
            UCHAR Type;                                                     //0x0
            UCHAR Importance;                                               //0x1
            volatile USHORT Number;                                         //0x2
        };
    };
    struct _SINGLE_LIST_ENTRY DpcListEntry;                                 //0x8
    ULONGLONG ProcessorHistory;                                             //0x10
    VOID (*DeferredRoutine)(struct _KDPC* arg1, VOID* arg2, VOID* arg3, VOID* arg4); //0x18
    VOID* DeferredContext;                                                  //0x20
    VOID* SystemArgument1;                                                  //0x28
    VOID* SystemArgument2;                                                  //0x30
    VOID* DpcData;                                                          //0x38
}; 

----------------------------------------
Structure: _KDPC_DATA

//0x28 bytes (sizeof)
struct _KDPC_DATA
{
    struct _KDPC_LIST DpcList;                                              //0x0
    ULONGLONG DpcLock;                                                      //0x10
    volatile LONG DpcQueueDepth;                                            //0x18
    ULONG DpcCount;                                                         //0x1c
    struct _KDPC* volatile ActiveDpc;                                       //0x20
}; 

----------------------------------------
Structure: _KDPC_LIST

//0x10 bytes (sizeof)
struct _KDPC_LIST
{
    struct _SINGLE_LIST_ENTRY ListHead;                                     //0x0
    struct _SINGLE_LIST_ENTRY* LastEntry;                                   //0x8
}; 

----------------------------------------
Structure: _KENLISTMENT

//0x1e0 bytes (sizeof)
struct _KENLISTMENT
{
    ULONG cookie;                                                           //0x0
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x8
    struct _GUID EnlistmentId;                                              //0x30
    struct _KMUTANT Mutex;                                                  //0x40
    struct _LIST_ENTRY NextSameTx;                                          //0x78
    struct _LIST_ENTRY NextSameRm;                                          //0x88
    struct _KRESOURCEMANAGER* ResourceManager;                              //0x98
    struct _KTRANSACTION* Transaction;                                      //0xa0
    enum _KENLISTMENT_STATE State;                                          //0xa8
    ULONG Flags;                                                            //0xac
    ULONG NotificationMask;                                                 //0xb0
    VOID* Key;                                                              //0xb8
    ULONG KeyRefCount;                                                      //0xc0
    VOID* RecoveryInformation;                                              //0xc8
    ULONG RecoveryInformationLength;                                        //0xd0
    VOID* DynamicNameInformation;                                           //0xd8
    ULONG DynamicNameInformationLength;                                     //0xe0
    struct _KTMNOTIFICATION_PACKET* FinalNotification;                      //0xe8
    struct _KENLISTMENT* SupSubEnlistment;                                  //0xf0
    VOID* SupSubEnlHandle;                                                  //0xf8
    VOID* SubordinateTxHandle;                                              //0x100
    struct _GUID CrmEnlistmentEnId;                                         //0x108
    struct _GUID CrmEnlistmentTmId;                                         //0x118
    struct _GUID CrmEnlistmentRmId;                                         //0x128
    ULONG NextHistory;                                                      //0x138
    struct _KENLISTMENT_HISTORY History[20];                                //0x13c
}; 

----------------------------------------
Structure: _KENLISTMENT_HISTORY

//0x8 bytes (sizeof)
struct _KENLISTMENT_HISTORY
{
    ULONG Notification;                                                     //0x0
    enum _KENLISTMENT_STATE NewState;                                       //0x4
}; 

----------------------------------------
Structure: _KENTROPY_TIMING_STATE

//0x150 bytes (sizeof)
struct _KENTROPY_TIMING_STATE
{
    ULONG EntropyCount;                                                     //0x0
    ULONG Buffer[64];                                                       //0x4
    struct _KDPC Dpc;                                                       //0x108
    ULONG LastDeliveredBuffer;                                              //0x148
}; 

----------------------------------------
Structure: _KERNEL_STACK_SEGMENT

//0x20 bytes (sizeof)
struct _KERNEL_STACK_SEGMENT
{
    ULONGLONG StackBase;                                                    //0x0
    ULONGLONG StackLimit;                                                   //0x8
    ULONGLONG KernelStack;                                                  //0x10
    ULONGLONG InitialStack;                                                 //0x18
}; 

----------------------------------------
Structure: _KEVENT

//0x18 bytes (sizeof)
struct _KEVENT
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
}; 

----------------------------------------
Structure: _KEXCEPTION_FRAME

//0x140 bytes (sizeof)
struct _KEXCEPTION_FRAME
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5;                                                           //0x20
    ULONGLONG Spare1;                                                       //0x28
    struct _M128A Xmm6;                                                     //0x30
    struct _M128A Xmm7;                                                     //0x40
    struct _M128A Xmm8;                                                     //0x50
    struct _M128A Xmm9;                                                     //0x60
    struct _M128A Xmm10;                                                    //0x70
    struct _M128A Xmm11;                                                    //0x80
    struct _M128A Xmm12;                                                    //0x90
    struct _M128A Xmm13;                                                    //0xa0
    struct _M128A Xmm14;                                                    //0xb0
    struct _M128A Xmm15;                                                    //0xc0
    ULONGLONG TrapFrame;                                                    //0xd0
    ULONGLONG OutputBuffer;                                                 //0xd8
    ULONGLONG OutputLength;                                                 //0xe0
    ULONGLONG Spare2;                                                       //0xe8
    ULONGLONG MxCsr;                                                        //0xf0
    ULONGLONG Rbp;                                                          //0xf8
    ULONGLONG Rbx;                                                          //0x100
    ULONGLONG Rdi;                                                          //0x108
    ULONGLONG Rsi;                                                          //0x110
    ULONGLONG R12;                                                          //0x118
    ULONGLONG R13;                                                          //0x120
    ULONGLONG R14;                                                          //0x128
    ULONGLONG R15;                                                          //0x130
    ULONGLONG Return;                                                       //0x138
}; 

----------------------------------------
Structure: _KFLOATING_SAVE

//0x4 bytes (sizeof)
struct _KFLOATING_SAVE
{
    ULONG Dummy;                                                            //0x0
}; 

----------------------------------------
Structure: _KGATE

//0x18 bytes (sizeof)
struct _KGATE
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
}; 

----------------------------------------
Structure: _KHETERO_PROCESSOR_SET

//0x18 bytes (sizeof)
struct _KHETERO_PROCESSOR_SET
{
    ULONGLONG IdealMask;                                                    //0x0
    ULONGLONG PreferredMask;                                                //0x8
    ULONGLONG AvailableMask;                                                //0x10
}; 

----------------------------------------
Structure: _KINTERRUPT

//0x120 bytes (sizeof)
struct _KINTERRUPT
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    struct _LIST_ENTRY InterruptListEntry;                                  //0x8
    UCHAR (*ServiceRoutine)(struct _KINTERRUPT* arg1, VOID* arg2);          //0x18
    UCHAR (*MessageServiceRoutine)(struct _KINTERRUPT* arg1, VOID* arg2, ULONG arg3); //0x20
    ULONG MessageIndex;                                                     //0x28
    VOID* ServiceContext;                                                   //0x30
    ULONGLONG SpinLock;                                                     //0x38
    ULONG TickCount;                                                        //0x40
    ULONGLONG* ActualLock;                                                  //0x48
    VOID (*DispatchAddress)();                                              //0x50
    ULONG Vector;                                                           //0x58
    UCHAR Irql;                                                             //0x5c
    UCHAR SynchronizeIrql;                                                  //0x5d
    UCHAR FloatingSave;                                                     //0x5e
    UCHAR Connected;                                                        //0x5f
    ULONG Number;                                                           //0x60
    UCHAR ShareVector;                                                      //0x64
    UCHAR EmulateActiveBoth;                                                //0x65
    USHORT ActiveCount;                                                     //0x66
    LONG InternalState;                                                     //0x68
    enum _KINTERRUPT_MODE Mode;                                             //0x6c
    enum _KINTERRUPT_POLARITY Polarity;                                     //0x70
    ULONG ServiceCount;                                                     //0x74
    ULONG DispatchCount;                                                    //0x78
    struct _KEVENT* PassiveEvent;                                           //0x80
    struct _KTRAP_FRAME* TrapFrame;                                         //0x88
    VOID* DisconnectData;                                                   //0x90
    struct _KTHREAD* volatile ServiceThread;                                //0x98
    struct _INTERRUPT_CONNECTION_DATA* ConnectionData;                      //0xa0
    VOID* IntTrackEntry;                                                    //0xa8
    struct _ISRDPCSTATS IsrDpcStats;                                        //0xb0
    VOID* RedirectObject;                                                   //0x110
    VOID* PhysicalDeviceObject;                                             //0x118
}; 

----------------------------------------
Structure: _KIST_BASE_FRAME

//0x30 bytes (sizeof)
struct _KIST_BASE_FRAME
{
    struct _KPCR* KernelGsBase;                                             //0x0
    struct _KIST_LINK_FRAME* IstStack;                                      //0x8
    ULONGLONG PreviousGsBase;                                               //0x10
    ULONGLONG PreviousCr3;                                                  //0x18
    ULONGLONG IstPad;                                                       //0x20
    ULONGLONG Reserved;                                                     //0x28
}; 

----------------------------------------
Structure: _KIST_LINK_FRAME

//0x20 bytes (sizeof)
struct _KIST_LINK_FRAME
{
    struct _KIST_BASE_FRAME* IstBaseFrame;                                  //0x0
    ULONG Signature;                                                        //0x8
    ULONG Reserved0;                                                        //0xc
    ULONGLONG Reserved[2];                                                  //0x10
}; 

----------------------------------------
Structure: _KLDR_DATA_TABLE_ENTRY

//0xa0 bytes (sizeof)
struct _KLDR_DATA_TABLE_ENTRY
{
    struct _LIST_ENTRY InLoadOrderLinks;                                    //0x0
    VOID* ExceptionTable;                                                   //0x10
    ULONG ExceptionTableSize;                                               //0x18
    VOID* GpValue;                                                          //0x20
    struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;                        //0x28
    VOID* DllBase;                                                          //0x30
    VOID* EntryPoint;                                                       //0x38
    ULONG SizeOfImage;                                                      //0x40
    struct _UNICODE_STRING FullDllName;                                     //0x48
    struct _UNICODE_STRING BaseDllName;                                     //0x58
    ULONG Flags;                                                            //0x68
    USHORT LoadCount;                                                       //0x6c
    union
    {
        USHORT SignatureLevel:4;                                            //0x6e
        USHORT SignatureType:3;                                             //0x6e
        USHORT Unused:9;                                                    //0x6e
        USHORT EntireField;                                                 //0x6e
    } u1;                                                                   //0x6e
    VOID* SectionPointer;                                                   //0x70
    ULONG CheckSum;                                                         //0x78
    ULONG CoverageSectionSize;                                              //0x7c
    VOID* CoverageSection;                                                  //0x80
    VOID* LoadedImports;                                                    //0x88
    VOID* Spare;                                                            //0x90
    ULONG SizeOfImageNotRounded;                                            //0x98
    ULONG TimeDateStamp;                                                    //0x9c
}; 

----------------------------------------
Structure: _KLOCK_ENTRY

//0x60 bytes (sizeof)
struct _KLOCK_ENTRY
{
    union
    {
        struct _RTL_BALANCED_NODE TreeNode;                                 //0x0
        struct _SINGLE_LIST_ENTRY FreeListEntry;                            //0x0
    };
    union
    {
        ULONG EntryFlags;                                                   //0x18
        struct
        {
            UCHAR EntryOffset;                                              //0x18
            union
            {
                UCHAR ThreadLocalFlags;                                     //0x19
                struct
                {
                    UCHAR WaitingBit:1;                                     //0x19
                    UCHAR Spare0:7;                                         //0x19
                };
            };
            union
            {
                UCHAR AcquiredByte;                                         //0x1a
                UCHAR AcquiredBit:1;                                        //0x1a
            };
            union
            {
                UCHAR CrossThreadFlags;                                     //0x1b
                struct
                {
                    UCHAR HeadNodeBit:1;                                    //0x1b
                    UCHAR IoPriorityBit:1;                                  //0x1b
                    UCHAR IoQoSWaiter:1;                                    //0x1b
                    UCHAR Spare1:5;                                         //0x1b
                };
            };
        };
        struct
        {
            ULONG StaticState:8;                                            //0x18
            ULONG AllFlags:24;                                              //0x18
        };
    };
    ULONG SpareFlags;                                                       //0x1c
    union
    {
        struct _KLOCK_ENTRY_LOCK_STATE LockState;                           //0x20
        VOID* volatile LockUnsafe;                                          //0x20
        struct
        {
            volatile UCHAR CrossThreadReleasableAndBusyByte;                //0x20
            UCHAR Reserved[6];                                              //0x21
            volatile UCHAR InTreeByte;                                      //0x27
            union
            {
                VOID* SessionState;                                         //0x28
                struct
                {
                    ULONG SessionId;                                        //0x28
                    ULONG SessionPad;                                       //0x2c
                };
            };
        };
    };
    union
    {
        struct
        {
            struct _RTL_RB_TREE OwnerTree;                                  //0x30
            struct _RTL_RB_TREE WaiterTree;                                 //0x40
        };
        CHAR CpuPriorityKey;                                                //0x30
    };
    ULONGLONG EntryLock;                                                    //0x50
    union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;                            //0x58
    ULONG SparePad;                                                         //0x5c
}; 

----------------------------------------
Structure: _KLOCK_ENTRY_LOCK_STATE

//0x10 bytes (sizeof)
struct _KLOCK_ENTRY_LOCK_STATE
{
    union
    {
        struct
        {
            ULONGLONG CrossThreadReleasable:1;                              //0x0
            ULONGLONG Busy:1;                                               //0x0
            ULONGLONG Reserved:61;                                          //0x0
            ULONGLONG InTree:1;                                             //0x0
        };
        VOID* LockState;                                                    //0x0
    };
    union
    {
        VOID* SessionState;                                                 //0x8
        struct
        {
            ULONG SessionId;                                                //0x8
            ULONG SessionPad;                                               //0xc
        };
    };
}; 

----------------------------------------
Structure: _KLOCK_QUEUE_HANDLE

//0x18 bytes (sizeof)
struct _KLOCK_QUEUE_HANDLE
{
    struct _KSPIN_LOCK_QUEUE LockQueue;                                     //0x0
    UCHAR OldIrql;                                                          //0x10
}; 

----------------------------------------
Structure: _KMUTANT

//0x38 bytes (sizeof)
struct _KMUTANT
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    struct _LIST_ENTRY MutantListEntry;                                     //0x18
    struct _KTHREAD* OwnerThread;                                           //0x28
    union
    {
        UCHAR MutantFlags;                                                  //0x30
        struct
        {
            UCHAR Abandoned:1;                                              //0x30
            UCHAR Spare1:7;                                                 //0x30
            UCHAR Abandoned2:1;                                             //0x30
            UCHAR AbEnabled:1;                                              //0x30
            UCHAR Spare2:6;                                                 //0x30
        };
    };
    UCHAR ApcDisable;                                                       //0x31
}; 

----------------------------------------
Structure: _KNODE

//0x180 bytes (sizeof)
struct _KNODE
{
    ULONGLONG IdleNonParkedCpuSet;                                          //0x0
    ULONGLONG IdleSmtSet;                                                   //0x8
    ULONGLONG NonPairedSmtSet;                                              //0x10
    ULONGLONG IdleCpuSet;                                                   //0x18
    ULONGLONG DeepIdleSet;                                                  //0x40
    ULONGLONG IdleConstrainedSet;                                           //0x48
    ULONGLONG NonParkedSet;                                                 //0x50
    ULONGLONG SoftParkedSet;                                                //0x58
    ULONGLONG NonIsrTargetedSet;                                            //0x60
    LONG ParkLock;                                                          //0x68
    USHORT ThreadSeed;                                                      //0x6c
    USHORT ProcessSeed;                                                     //0x6e
    ULONG SiblingMask;                                                      //0x80
    union
    {
        struct _GROUP_AFFINITY Affinity;                                    //0x88
        struct
        {
            UCHAR AffinityFill[10];                                         //0x88
            USHORT NodeNumber;                                              //0x92
            USHORT PrimaryNodeNumber;                                       //0x94
            USHORT Spare0;                                                  //0x96
        };
    };
    ULONGLONG SharedReadyQueueMask;                                         //0x98
    ULONGLONG StrideMask;                                                   //0xa0
    ULONG ProximityId;                                                      //0xa8
    ULONG Lowest;                                                           //0xac
    ULONG Highest;                                                          //0xb0
    UCHAR MaximumProcessors;                                                //0xb4
    struct _flags Flags;                                                    //0xb5
    UCHAR Spare10;                                                          //0xb6
    struct _KHETERO_PROCESSOR_SET HeteroSets[5];                            //0xb8
    ULONGLONG PpmConfiguredQosSets[5];                                      //0x130
    ULONGLONG Spare11;                                                      //0x158
    union _KQOS_GROUPING_SETS QosGroupingSets;                              //0x160
    ULONGLONG QosPreemptibleSet;                                            //0x170
    ULONGLONG LLCLeaders;                                                   //0x178
}; 

----------------------------------------
Structure: _KPCR

//0xb080 bytes (sizeof)
struct _KPCR
{
    union
    {
        struct _NT_TIB NtTib;                                               //0x0
        struct
        {
            union _KGDTENTRY64* GdtBase;                                    //0x0
            struct _KTSS64* TssBase;                                        //0x8
            ULONGLONG UserRsp;                                              //0x10
            struct _KPCR* Self;                                             //0x18
            struct _KPRCB* CurrentPrcb;                                     //0x20
            struct _KSPIN_LOCK_QUEUE* LockArray;                            //0x28
            VOID* Used_Self;                                                //0x30
        };
    };
    union _KIDTENTRY64* IdtBase;                                            //0x38
    ULONGLONG Unused[2];                                                    //0x40
    UCHAR Irql;                                                             //0x50
    UCHAR SecondLevelCacheAssociativity;                                    //0x51
    UCHAR ObsoleteNumber;                                                   //0x52
    UCHAR Fill0;                                                            //0x53
    ULONG Unused0[3];                                                       //0x54
    USHORT MajorVersion;                                                    //0x60
    USHORT MinorVersion;                                                    //0x62
    ULONG StallScaleFactor;                                                 //0x64
    VOID* Unused1[3];                                                       //0x68
    ULONG KernelReserved[15];                                               //0x80
    ULONG SecondLevelCacheSize;                                             //0xbc
    ULONG HalReserved[16];                                                  //0xc0
    ULONG Unused2;                                                          //0x100
    VOID* KdVersionBlock;                                                   //0x108
    VOID* Unused3;                                                          //0x110
    ULONG PcrAlign1[24];                                                    //0x118
    struct _KPRCB Prcb;                                                     //0x180
}; 

----------------------------------------
Structure: _KPCR

//0xb080 bytes (sizeof)
struct _KPCR
{
    union
    {
        struct _NT_TIB NtTib;                                               //0x0
        struct
        {
            union _KGDTENTRY64* GdtBase;                                    //0x0
            struct _KTSS64* TssBase;                                        //0x8
            ULONGLONG UserRsp;                                              //0x10
            struct _KPCR* Self;                                             //0x18
            struct _KPRCB* CurrentPrcb;                                     //0x20
            struct _KSPIN_LOCK_QUEUE* LockArray;                            //0x28
            VOID* Used_Self;                                                //0x30
        };
    };
    union _KIDTENTRY64* IdtBase;                                            //0x38
    ULONGLONG Unused[2];                                                    //0x40
    UCHAR Irql;                                                             //0x50
    UCHAR SecondLevelCacheAssociativity;                                    //0x51
    UCHAR ObsoleteNumber;                                                   //0x52
    UCHAR Fill0;                                                            //0x53
    ULONG Unused0[3];                                                       //0x54
    USHORT MajorVersion;                                                    //0x60
    USHORT MinorVersion;                                                    //0x62
    ULONG StallScaleFactor;                                                 //0x64
    VOID* Unused1[3];                                                       //0x68
    ULONG KernelReserved[15];                                               //0x80
    ULONG SecondLevelCacheSize;                                             //0xbc
    ULONG HalReserved[16];                                                  //0xc0
    ULONG Unused2;                                                          //0x100
    VOID* KdVersionBlock;                                                   //0x108
    VOID* Unused3;                                                          //0x110
    ULONG PcrAlign1[24];                                                    //0x118
    struct _KPRCB Prcb;                                                     //0x180
}; 

----------------------------------------
Structure: _KPRCB

//0xaf00 bytes (sizeof)
struct _KPRCB
{
    ULONG MxCsr;                                                            //0x0
    UCHAR LegacyNumber;                                                     //0x4
    UCHAR ReservedMustBeZero;                                               //0x5
    UCHAR InterruptRequest;                                                 //0x6
    UCHAR IdleHalt;                                                         //0x7
    struct _KTHREAD* CurrentThread;                                         //0x8
    struct _KTHREAD* NextThread;                                            //0x10
    struct _KTHREAD* IdleThread;                                            //0x18
    UCHAR NestingLevel;                                                     //0x20
    UCHAR ClockOwner;                                                       //0x21
    union
    {
        UCHAR PendingTickFlags;                                             //0x22
        struct
        {
            UCHAR PendingTick:1;                                            //0x22
            UCHAR PendingBackupTick:1;                                      //0x22
        };
    };
    UCHAR IdleState;                                                        //0x23
    ULONG Number;                                                           //0x24
    ULONGLONG RspBase;                                                      //0x28
    ULONGLONG PrcbLock;                                                     //0x30
    CHAR* PriorityState;                                                    //0x38
    CHAR CpuType;                                                           //0x40
    CHAR CpuID;                                                             //0x41
    union
    {
        USHORT CpuStep;                                                     //0x42
        struct
        {
            UCHAR CpuStepping;                                              //0x42
            UCHAR CpuModel;                                                 //0x43
        };
    };
    ULONG MHz;                                                              //0x44
    ULONGLONG HalReserved[8];                                               //0x48
    USHORT MinorVersion;                                                    //0x88
    USHORT MajorVersion;                                                    //0x8a
    UCHAR BuildType;                                                        //0x8c
    UCHAR CpuVendor;                                                        //0x8d
    UCHAR LegacyCoresPerPhysicalProcessor;                                  //0x8e
    UCHAR LegacyLogicalProcessorsPerCore;                                   //0x8f
    ULONGLONG TscFrequency;                                                 //0x90
    ULONG CoresPerPhysicalProcessor;                                        //0x98
    ULONG LogicalProcessorsPerCore;                                         //0x9c
    ULONGLONG PrcbPad04[4];                                                 //0xa0
    struct _KNODE* ParentNode;                                              //0xc0
    ULONGLONG GroupSetMember;                                               //0xc8
    UCHAR Group;                                                            //0xd0
    UCHAR GroupIndex;                                                       //0xd1
    UCHAR PrcbPad05[2];                                                     //0xd2
    ULONG InitialApicId;                                                    //0xd4
    ULONG ScbOffset;                                                        //0xd8
    ULONG ApicMask;                                                         //0xdc
    VOID* AcpiReserved;                                                     //0xe0
    ULONG CFlushSize;                                                       //0xe8
    union _KPRCBFLAG PrcbFlags;                                             //0xec
    union
    {
        struct
        {
            ULONGLONG TrappedSecurityDomain;                                //0xf0
            union
            {
                UCHAR BpbState;                                             //0xf8
                struct
                {
                    UCHAR BpbCpuIdle:1;                                     //0xf8
                    UCHAR BpbFlushRsbOnTrap:1;                              //0xf8
                    UCHAR BpbIbpbOnReturn:1;                                //0xf8
                    UCHAR BpbIbpbOnTrap:1;                                  //0xf8
                    UCHAR BpbIbpbOnRetpolineExit:1;                         //0xf8
                    UCHAR BpbFlushRsbOnReturn:1;                            //0xf8
                    UCHAR BpbFlushRsbOnRetpolineExit:1;                     //0xf8
                    UCHAR BpbStateReserved:1;                               //0xf8
                };
            };
            union
            {
                UCHAR BpbFeatures;                                          //0xf9
                struct
                {
                    UCHAR BpbClearOnIdle:1;                                 //0xf9
                    UCHAR BpbEnabled:1;                                     //0xf9
                    UCHAR BpbSmep:1;                                        //0xf9
                    UCHAR BpbFeaturesReserved:5;                            //0xf9
                };
            };
            UCHAR BpbCurrentSpecCtrl;                                       //0xfa
            UCHAR BpbKernelSpecCtrl;                                        //0xfb
            UCHAR BpbNmiSpecCtrl;                                           //0xfc
            UCHAR BpbUserSpecCtrl;                                          //0xfd
            volatile SHORT PairRegister;                                    //0xfe
        };
        ULONGLONG PrcbPad11[2];                                             //0xf0
    };
    struct _KPROCESSOR_STATE ProcessorState;                                //0x100
    struct _XSAVE_AREA_HEADER* ExtendedSupervisorState;                     //0x6c0
    ULONG ProcessorSignature;                                               //0x6c8
    ULONG ProcessorFlags;                                                   //0x6cc
    union
    {
        struct
        {
            UCHAR BpbRetpolineExitSpecCtrl;                                 //0x6d0
            UCHAR BpbTrappedRetpolineExitSpecCtrl;                          //0x6d1
            union
            {
                UCHAR BpbTrappedBpbState;                                   //0x6d2
                struct
                {
                    UCHAR BpbTrappedCpuIdle:1;                              //0x6d2
                    UCHAR BpbTrappedFlushRsbOnTrap:1;                       //0x6d2
                    UCHAR BpbTrappedIbpbOnReturn:1;                         //0x6d2
                    UCHAR BpbTrappedIbpbOnTrap:1;                           //0x6d2
                    UCHAR BpbTrappedIbpbOnRetpolineExit:1;                  //0x6d2
                    UCHAR BpbTrappedFlushRsbOnReturn:1;                     //0x6d2
                    UCHAR BpbTrappedFlushRsbOnRetpolineExit:1;              //0x6d2
                    UCHAR BpbTrappedBpbStateReserved:1;                     //0x6d2
                };
            };
            union
            {
                UCHAR BpbRetpolineState;                                    //0x6d3
                struct
                {
                    UCHAR BpbRunningNonRetpolineCode:1;                     //0x6d3
                    UCHAR BpbIndirectCallsSafe:1;                           //0x6d3
                    UCHAR BpbRetpolineEnabled:1;                            //0x6d3
                    UCHAR BpbRetpolineStateReserved:5;                      //0x6d3
                };
            };
            ULONG PrcbPad12b;                                               //0x6d4
        };
        ULONGLONG PrcbPad12a;                                               //0x6d0
    };
    ULONGLONG PrcbPad12[3];                                                 //0x6d8
    struct _KSPIN_LOCK_QUEUE LockQueue[17];                                 //0x6f0
    struct _PP_LOOKASIDE_LIST PPLookasideList[16];                          //0x800
    struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];              //0x900
    struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];               //0x1500
    struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                //0x2100
    ULONGLONG MsrIa32TsxCtrl;                                               //0x2d00
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;                        //0x2d08
    volatile LONG MmPageFaultCount;                                         //0x2d10
    volatile LONG MmCopyOnWriteCount;                                       //0x2d14
    volatile LONG MmTransitionCount;                                        //0x2d18
    volatile LONG MmDemandZeroCount;                                        //0x2d1c
    volatile LONG MmPageReadCount;                                          //0x2d20
    volatile LONG MmPageReadIoCount;                                        //0x2d24
    volatile LONG MmDirtyPagesWriteCount;                                   //0x2d28
    volatile LONG MmDirtyWriteIoCount;                                      //0x2d2c
    volatile LONG MmMappedPagesWriteCount;                                  //0x2d30
    volatile LONG MmMappedWriteIoCount;                                     //0x2d34
    ULONG KeSystemCalls;                                                    //0x2d38
    ULONG KeContextSwitches;                                                //0x2d3c
    ULONG PrcbPad40;                                                        //0x2d40
    ULONG CcFastReadNoWait;                                                 //0x2d44
    ULONG CcFastReadWait;                                                   //0x2d48
    ULONG CcFastReadNotPossible;                                            //0x2d4c
    ULONG CcCopyReadNoWait;                                                 //0x2d50
    ULONG CcCopyReadWait;                                                   //0x2d54
    ULONG CcCopyReadNoWaitMiss;                                             //0x2d58
    volatile LONG IoReadOperationCount;                                     //0x2d5c
    volatile LONG IoWriteOperationCount;                                    //0x2d60
    volatile LONG IoOtherOperationCount;                                    //0x2d64
    union _LARGE_INTEGER IoReadTransferCount;                               //0x2d68
    union _LARGE_INTEGER IoWriteTransferCount;                              //0x2d70
    union _LARGE_INTEGER IoOtherTransferCount;                              //0x2d78
    volatile LONG PacketBarrier;                                            //0x2d80
    volatile LONG TargetCount;                                              //0x2d84
    volatile ULONG IpiFrozen;                                               //0x2d88
    ULONG PrcbPad30;                                                        //0x2d8c
    VOID* IsrDpcStats;                                                      //0x2d90
    ULONG DeviceInterrupts;                                                 //0x2d98
    LONG LookasideIrpFloat;                                                 //0x2d9c
    ULONG InterruptLastCount;                                               //0x2da0
    ULONG InterruptRate;                                                    //0x2da4
    ULONGLONG PrcbPad31;                                                    //0x2da8
    struct _KPRCB* PairPrcb;                                                //0x2db0
    struct _KSTATIC_AFFINITY_BLOCK StaticAffinity;                          //0x2db8
    ULONGLONG PrcbPad35[5];                                                 //0x3058
    union _SLIST_HEADER InterruptObjectPool;                                //0x3080
    struct _RTL_HASH_TABLE* DpcRuntimeHistoryHashTable;                     //0x3090
    struct _KDPC* DpcRuntimeHistoryHashTableCleanupDpc;                     //0x3098
    VOID (*CurrentDpcRoutine)(struct _KDPC* arg1, VOID* arg2, VOID* arg3, VOID* arg4); //0x30a0
    ULONGLONG CurrentDpcRuntimeHistoryCached;                               //0x30a8
    ULONGLONG CurrentDpcStartTime;                                          //0x30b0
    ULONGLONG PrcbPad41[1];                                                 //0x30b8
    struct _KDPC_DATA DpcData[2];                                           //0x30c0
    VOID* DpcStack;                                                         //0x3110
    LONG MaximumDpcQueueDepth;                                              //0x3118
    ULONG DpcRequestRate;                                                   //0x311c
    ULONG MinimumDpcRate;                                                   //0x3120
    ULONG DpcLastCount;                                                     //0x3124
    UCHAR ThreadDpcEnable;                                                  //0x3128
    volatile UCHAR QuantumEnd;                                              //0x3129
    volatile UCHAR DpcRoutineActive;                                        //0x312a
    volatile UCHAR IdleSchedule;                                            //0x312b
    union
    {
        volatile LONG DpcRequestSummary;                                    //0x312c
        SHORT DpcRequestSlot[2];                                            //0x312c
        struct
        {
            SHORT NormalDpcState;                                           //0x312c
            SHORT ThreadDpcState;                                           //0x312e
        };
        struct
        {
            ULONG DpcNormalProcessingActive:1;                              //0x312c
            ULONG DpcNormalProcessingRequested:1;                           //0x312c
            ULONG DpcNormalThreadSignal:1;                                  //0x312c
            ULONG DpcNormalTimerExpiration:1;                               //0x312c
            ULONG DpcNormalDpcPresent:1;                                    //0x312c
            ULONG DpcNormalLocalInterrupt:1;                                //0x312c
            ULONG DpcNormalSpare:10;                                        //0x312c
            ULONG DpcThreadActive:1;                                        //0x312c
            ULONG DpcThreadRequested:1;                                     //0x312c
            ULONG DpcThreadSpare:14;                                        //0x312c
        };
    };
    ULONG PrcbPad93;                                                        //0x3130
    ULONG LastTick;                                                         //0x3134
    ULONG ClockInterrupts;                                                  //0x3138
    ULONG ReadyScanTick;                                                    //0x313c
    VOID* InterruptObject[256];                                             //0x3140
    struct _KTIMER_TABLE TimerTable;                                        //0x3940
    ULONG PrcbPad92[10];                                                    //0x7b58
    struct _KGATE DpcGate;                                                  //0x7b80
    VOID* PrcbPad52;                                                        //0x7b98
    struct _KDPC CallDpc;                                                   //0x7ba0
    LONG ClockKeepAlive;                                                    //0x7be0
    UCHAR PrcbPad60[2];                                                     //0x7be4
    union
    {
        struct
        {
            UCHAR NmiActive;                                                //0x7be6
            UCHAR MceActive;                                                //0x7be7
        };
        USHORT CombinedNmiMceActive;                                        //0x7be6
    };
    LONG DpcWatchdogPeriod;                                                 //0x7be8
    LONG DpcWatchdogCount;                                                  //0x7bec
    volatile LONG KeSpinLockOrdering;                                       //0x7bf0
    ULONG DpcWatchdogProfileCumulativeDpcThreshold;                         //0x7bf4
    VOID* CachedPtes;                                                       //0x7bf8
    struct _LIST_ENTRY WaitListHead;                                        //0x7c00
    ULONGLONG WaitLock;                                                     //0x7c10
    ULONG ReadySummary;                                                     //0x7c18
    LONG AffinitizedSelectionMask;                                          //0x7c1c
    ULONG QueueIndex;                                                       //0x7c20
    ULONG PrcbPad75[2];                                                     //0x7c24
    ULONG DpcWatchdogSequenceNumber;                                        //0x7c2c
    struct _KDPC TimerExpirationDpc;                                        //0x7c30
    struct _RTL_RB_TREE ScbQueue;                                           //0x7c70
    struct _LIST_ENTRY DispatcherReadyListHead[32];                         //0x7c80
    ULONG InterruptCount;                                                   //0x7e80
    ULONG KernelTime;                                                       //0x7e84
    ULONG UserTime;                                                         //0x7e88
    ULONG DpcTime;                                                          //0x7e8c
    ULONG InterruptTime;                                                    //0x7e90
    ULONG AdjustDpcThreshold;                                               //0x7e94
    UCHAR DebuggerSavedIRQL;                                                //0x7e98
    UCHAR GroupSchedulingOverQuota;                                         //0x7e99
    volatile UCHAR DeepSleep;                                               //0x7e9a
    UCHAR PrcbPad80;                                                        //0x7e9b
    ULONG DpcTimeCount;                                                     //0x7e9c
    ULONG DpcTimeLimit;                                                     //0x7ea0
    ULONG PeriodicCount;                                                    //0x7ea4
    ULONG PeriodicBias;                                                     //0x7ea8
    ULONG AvailableTime;                                                    //0x7eac
    ULONG KeExceptionDispatchCount;                                         //0x7eb0
    ULONG ReadyThreadCount;                                                 //0x7eb4
    ULONGLONG ReadyQueueExpectedRunTime;                                    //0x7eb8
    ULONGLONG StartCycles;                                                  //0x7ec0
    ULONGLONG TaggedCyclesStart;                                            //0x7ec8
    ULONGLONG TaggedCycles[3];                                              //0x7ed0
    ULONGLONG AffinitizedCycles;                                            //0x7ee8
    ULONGLONG ImportantCycles;                                              //0x7ef0
    ULONGLONG UnimportantCycles;                                            //0x7ef8
    ULONG DpcWatchdogProfileSingleDpcThreshold;                             //0x7f00
    volatile LONG MmSpinLockOrdering;                                       //0x7f04
    VOID* volatile CachedStack;                                             //0x7f08
    ULONG PageColor;                                                        //0x7f10
    ULONG NodeColor;                                                        //0x7f14
    ULONG NodeShiftedColor;                                                 //0x7f18
    ULONG SecondaryColorMask;                                               //0x7f1c
    UCHAR PrcbPad81[6];                                                     //0x7f20
    UCHAR ExceptionStackActive;                                             //0x7f26
    UCHAR TbFlushListActive;                                                //0x7f27
    VOID* ExceptionStack;                                                   //0x7f28
    ULONGLONG PrcbPad82[1];                                                 //0x7f30
    ULONGLONG CycleTime;                                                    //0x7f38
    ULONGLONG Cycles[4][2];                                                 //0x7f40
    ULONG CcFastMdlReadNoWait;                                              //0x7f80
    ULONG CcFastMdlReadWait;                                                //0x7f84
    ULONG CcFastMdlReadNotPossible;                                         //0x7f88
    ULONG CcMapDataNoWait;                                                  //0x7f8c
    ULONG CcMapDataWait;                                                    //0x7f90
    ULONG CcPinMappedDataCount;                                             //0x7f94
    ULONG CcPinReadNoWait;                                                  //0x7f98
    ULONG CcPinReadWait;                                                    //0x7f9c
    ULONG CcMdlReadNoWait;                                                  //0x7fa0
    ULONG CcMdlReadWait;                                                    //0x7fa4
    ULONG CcLazyWriteHotSpots;                                              //0x7fa8
    ULONG CcLazyWriteIos;                                                   //0x7fac
    ULONG CcLazyWritePages;                                                 //0x7fb0
    ULONG CcDataFlushes;                                                    //0x7fb4
    ULONG CcDataPages;                                                      //0x7fb8
    ULONG CcLostDelayedWrites;                                              //0x7fbc
    ULONG CcFastReadResourceMiss;                                           //0x7fc0
    ULONG CcCopyReadWaitMiss;                                               //0x7fc4
    ULONG CcFastMdlReadResourceMiss;                                        //0x7fc8
    ULONG CcMapDataNoWaitMiss;                                              //0x7fcc
    ULONG CcMapDataWaitMiss;                                                //0x7fd0
    ULONG CcPinReadNoWaitMiss;                                              //0x7fd4
    ULONG CcPinReadWaitMiss;                                                //0x7fd8
    ULONG CcMdlReadNoWaitMiss;                                              //0x7fdc
    ULONG CcMdlReadWaitMiss;                                                //0x7fe0
    ULONG CcReadAheadIos;                                                   //0x7fe4
    volatile LONG MmCacheTransitionCount;                                   //0x7fe8
    volatile LONG MmCacheReadCount;                                         //0x7fec
    volatile LONG MmCacheIoCount;                                           //0x7ff0
    ULONG PrcbPad91;                                                        //0x7ff4
    VOID* MmInternal;                                                       //0x7ff8
    struct _PROCESSOR_POWER_STATE PowerState;                               //0x8000
    VOID* HyperPte;                                                         //0x8200
    struct _LIST_ENTRY ScbList;                                             //0x8208
    struct _KDPC ForceIdleDpc;                                              //0x8218
    struct _KDPC DpcWatchdogDpc;                                            //0x8258
    struct _KTIMER DpcWatchdogTimer;                                        //0x8298
    struct _CACHE_DESCRIPTOR Cache[5];                                      //0x82d8
    ULONG CacheCount;                                                       //0x8314
    volatile ULONG CachedCommit;                                            //0x8318
    volatile ULONG CachedResidentAvailable;                                 //0x831c
    VOID* WheaInfo;                                                         //0x8320
    VOID* EtwSupport;                                                       //0x8328
    VOID* ExSaPageArray;                                                    //0x8330
    ULONG KeAlignmentFixupCount;                                            //0x8338
    ULONG PrcbPad95;                                                        //0x833c
    union _SLIST_HEADER HypercallPageList;                                  //0x8340
    ULONGLONG* StatisticsPage;                                              //0x8350
    ULONGLONG GenerationTarget;                                             //0x8358
    ULONGLONG PrcbPad85[4];                                                 //0x8360
    VOID* HypercallCachedPages;                                             //0x8380
    VOID* VirtualApicAssist;                                                //0x8388
    struct _KAFFINITY_EX PackageProcessorSet;                               //0x8390
    ULONG PackageId;                                                        //0x8438
    ULONG PrcbPad86;                                                        //0x843c
    ULONGLONG SharedReadyQueueMask;                                         //0x8440
    struct _KSHARED_READY_QUEUE* SharedReadyQueue;                          //0x8448
    ULONG SharedQueueScanOwner;                                             //0x8450
    ULONG ScanSiblingIndex;                                                 //0x8454
    ULONGLONG CoreProcessorSet;                                             //0x8458
    ULONGLONG ScanSiblingMask;                                              //0x8460
    ULONGLONG LLCMask;                                                      //0x8468
    ULONGLONG CacheProcessorMask[5];                                        //0x8470
    struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;    //0x8498
    VOID* ProfileEventIndexAddress;                                         //0x84a0
    VOID** DpcWatchdogProfile;                                              //0x84a8
    VOID** DpcWatchdogProfileCurrentEmptyCapture;                           //0x84b0
    VOID* SchedulerAssist;                                                  //0x84b8
    struct _SYNCH_COUNTERS SynchCounters;                                   //0x84c0
    ULONGLONG PrcbPad94;                                                    //0x8578
    struct _FILESYSTEM_DISK_COUNTERS FsCounters;                            //0x8580
    UCHAR VendorString[13];                                                 //0x8590
    UCHAR PrcbPad100[3];                                                    //0x859d
    ULONGLONG FeatureBits;                                                  //0x85a0
    union _LARGE_INTEGER UpdateSignature;                                   //0x85a8
    ULONGLONG PteBitCache;                                                  //0x85b0
    ULONG PteBitOffset;                                                     //0x85b8
    ULONG PrcbPad105;                                                       //0x85bc
    struct _CONTEXT* Context;                                               //0x85c0
    ULONG ContextFlagsInit;                                                 //0x85c8
    ULONG PrcbPad115;                                                       //0x85cc
    struct _XSAVE_AREA* ExtendedState;                                      //0x85d0
    VOID* IsrStack;                                                         //0x85d8
    struct _KENTROPY_TIMING_STATE EntropyTimingState;                       //0x85e0
    ULONGLONG PrcbPad110;                                                   //0x8730
    struct
    {
        ULONG UpdateCycle;                                                  //0x8738
        union
        {
            SHORT PairLocal;                                                //0x873c
            struct
            {
                UCHAR PairLocalLow;                                         //0x873c
                UCHAR PairLocalForceStibp:1;                                //0x873d
                UCHAR Reserved:4;                                           //0x873d
                UCHAR Frozen:1;                                             //0x873d
                UCHAR ForceUntrusted:1;                                     //0x873d
                UCHAR SynchIpi:1;                                           //0x873d
            };
        };
        union
        {
            SHORT PairRemote;                                               //0x873e
            struct
            {
                UCHAR PairRemoteLow;                                        //0x873e
                UCHAR Reserved2;                                            //0x873f
            };
        };
        UCHAR Trace[24];                                                    //0x8740
        ULONGLONG LocalDomain;                                              //0x8758
        ULONGLONG RemoteDomain;                                             //0x8760
        struct _KTHREAD* Thread;                                            //0x8768
    } StibpPairingTrace;                                                    //0x8738
    struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;                           //0x8770
    struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;                        //0x8778
    struct _KDPC AbDpc;                                                     //0x8780
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;               //0x87c0
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;              //0x8814
    struct _KSECURE_FAULT_INFORMATION SecureFault;                          //0x8868
    ULONGLONG PrcbPad120;                                                   //0x8878
    struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;                      //0x8880
    ULONGLONG PrcbPad125[2];                                                //0x8af0
    ULONG TimerExpirationTraceCount;                                        //0x8b00
    ULONG PrcbPad127;                                                       //0x8b04
    struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];               //0x8b08
    ULONGLONG PrcbPad128[7];                                                //0x8c08
    struct _REQUEST_MAILBOX* Mailbox;                                       //0x8c40
    ULONGLONG PrcbPad130[7];                                                //0x8c48
    struct _MACHINE_CHECK_CONTEXT McheckContext[2];                         //0x8c80
    ULONGLONG PrcbPad134[4];                                                //0x8d20
    struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];                        //0x8d40
    ULONGLONG PrcbPad134a[4];                                               //0x8da0
    UCHAR PrcbPad138[128];                                                  //0x8dc0
    UCHAR PrcbPad138a[64];                                                  //0x8e40
    ULONGLONG KernelDirectoryTableBase;                                     //0x8e80
    ULONGLONG RspBaseShadow;                                                //0x8e88
    ULONGLONG UserRspShadow;                                                //0x8e90
    ULONG ShadowFlags;                                                      //0x8e98
    ULONG PrcbPad138b;                                                      //0x8e9c
    ULONGLONG PrcbPad138c;                                                  //0x8ea0
    USHORT PrcbPad138d;                                                     //0x8ea8
    USHORT VerwSelector;                                                    //0x8eaa
    ULONG DbgMceNestingLevel;                                               //0x8eac
    ULONG DbgMceFlags;                                                      //0x8eb0
    ULONG PrcbPad139b;                                                      //0x8eb4
    ULONGLONG PrcbPad140[505];                                              //0x8eb8
    ULONGLONG PrcbPad140a[8];                                               //0x9e80
    ULONGLONG PrcbPad141[504];                                              //0x9ec0
    UCHAR PrcbPad141a[64];                                                  //0xae80
    struct _REQUEST_MAILBOX RequestMailbox[1];                              //0xaec0
}; 

----------------------------------------
Structure: _KPRCB

//0xaf00 bytes (sizeof)
struct _KPRCB
{
    ULONG MxCsr;                                                            //0x0
    UCHAR LegacyNumber;                                                     //0x4
    UCHAR ReservedMustBeZero;                                               //0x5
    UCHAR InterruptRequest;                                                 //0x6
    UCHAR IdleHalt;                                                         //0x7
    struct _KTHREAD* CurrentThread;                                         //0x8
    struct _KTHREAD* NextThread;                                            //0x10
    struct _KTHREAD* IdleThread;                                            //0x18
    UCHAR NestingLevel;                                                     //0x20
    UCHAR ClockOwner;                                                       //0x21
    union
    {
        UCHAR PendingTickFlags;                                             //0x22
        struct
        {
            UCHAR PendingTick:1;                                            //0x22
            UCHAR PendingBackupTick:1;                                      //0x22
        };
    };
    UCHAR IdleState;                                                        //0x23
    ULONG Number;                                                           //0x24
    ULONGLONG RspBase;                                                      //0x28
    ULONGLONG PrcbLock;                                                     //0x30
    CHAR* PriorityState;                                                    //0x38
    CHAR CpuType;                                                           //0x40
    CHAR CpuID;                                                             //0x41
    union
    {
        USHORT CpuStep;                                                     //0x42
        struct
        {
            UCHAR CpuStepping;                                              //0x42
            UCHAR CpuModel;                                                 //0x43
        };
    };
    ULONG MHz;                                                              //0x44
    ULONGLONG HalReserved[8];                                               //0x48
    USHORT MinorVersion;                                                    //0x88
    USHORT MajorVersion;                                                    //0x8a
    UCHAR BuildType;                                                        //0x8c
    UCHAR CpuVendor;                                                        //0x8d
    UCHAR LegacyCoresPerPhysicalProcessor;                                  //0x8e
    UCHAR LegacyLogicalProcessorsPerCore;                                   //0x8f
    ULONGLONG TscFrequency;                                                 //0x90
    ULONG CoresPerPhysicalProcessor;                                        //0x98
    ULONG LogicalProcessorsPerCore;                                         //0x9c
    ULONGLONG PrcbPad04[4];                                                 //0xa0
    struct _KNODE* ParentNode;                                              //0xc0
    ULONGLONG GroupSetMember;                                               //0xc8
    UCHAR Group;                                                            //0xd0
    UCHAR GroupIndex;                                                       //0xd1
    UCHAR PrcbPad05[2];                                                     //0xd2
    ULONG InitialApicId;                                                    //0xd4
    ULONG ScbOffset;                                                        //0xd8
    ULONG ApicMask;                                                         //0xdc
    VOID* AcpiReserved;                                                     //0xe0
    ULONG CFlushSize;                                                       //0xe8
    union _KPRCBFLAG PrcbFlags;                                             //0xec
    union
    {
        struct
        {
            ULONGLONG TrappedSecurityDomain;                                //0xf0
            union
            {
                UCHAR BpbState;                                             //0xf8
                struct
                {
                    UCHAR BpbCpuIdle:1;                                     //0xf8
                    UCHAR BpbFlushRsbOnTrap:1;                              //0xf8
                    UCHAR BpbIbpbOnReturn:1;                                //0xf8
                    UCHAR BpbIbpbOnTrap:1;                                  //0xf8
                    UCHAR BpbIbpbOnRetpolineExit:1;                         //0xf8
                    UCHAR BpbFlushRsbOnReturn:1;                            //0xf8
                    UCHAR BpbFlushRsbOnRetpolineExit:1;                     //0xf8
                    UCHAR BpbStateReserved:1;                               //0xf8
                };
            };
            union
            {
                UCHAR BpbFeatures;                                          //0xf9
                struct
                {
                    UCHAR BpbClearOnIdle:1;                                 //0xf9
                    UCHAR BpbEnabled:1;                                     //0xf9
                    UCHAR BpbSmep:1;                                        //0xf9
                    UCHAR BpbFeaturesReserved:5;                            //0xf9
                };
            };
            UCHAR BpbCurrentSpecCtrl;                                       //0xfa
            UCHAR BpbKernelSpecCtrl;                                        //0xfb
            UCHAR BpbNmiSpecCtrl;                                           //0xfc
            UCHAR BpbUserSpecCtrl;                                          //0xfd
            volatile SHORT PairRegister;                                    //0xfe
        };
        ULONGLONG PrcbPad11[2];                                             //0xf0
    };
    struct _KPROCESSOR_STATE ProcessorState;                                //0x100
    struct _XSAVE_AREA_HEADER* ExtendedSupervisorState;                     //0x6c0
    ULONG ProcessorSignature;                                               //0x6c8
    ULONG ProcessorFlags;                                                   //0x6cc
    union
    {
        struct
        {
            UCHAR BpbRetpolineExitSpecCtrl;                                 //0x6d0
            UCHAR BpbTrappedRetpolineExitSpecCtrl;                          //0x6d1
            union
            {
                UCHAR BpbTrappedBpbState;                                   //0x6d2
                struct
                {
                    UCHAR BpbTrappedCpuIdle:1;                              //0x6d2
                    UCHAR BpbTrappedFlushRsbOnTrap:1;                       //0x6d2
                    UCHAR BpbTrappedIbpbOnReturn:1;                         //0x6d2
                    UCHAR BpbTrappedIbpbOnTrap:1;                           //0x6d2
                    UCHAR BpbTrappedIbpbOnRetpolineExit:1;                  //0x6d2
                    UCHAR BpbTrappedFlushRsbOnReturn:1;                     //0x6d2
                    UCHAR BpbTrappedFlushRsbOnRetpolineExit:1;              //0x6d2
                    UCHAR BpbTrappedBpbStateReserved:1;                     //0x6d2
                };
            };
            union
            {
                UCHAR BpbRetpolineState;                                    //0x6d3
                struct
                {
                    UCHAR BpbRunningNonRetpolineCode:1;                     //0x6d3
                    UCHAR BpbIndirectCallsSafe:1;                           //0x6d3
                    UCHAR BpbRetpolineEnabled:1;                            //0x6d3
                    UCHAR BpbRetpolineStateReserved:5;                      //0x6d3
                };
            };
            ULONG PrcbPad12b;                                               //0x6d4
        };
        ULONGLONG PrcbPad12a;                                               //0x6d0
    };
    ULONGLONG PrcbPad12[3];                                                 //0x6d8
    struct _KSPIN_LOCK_QUEUE LockQueue[17];                                 //0x6f0
    struct _PP_LOOKASIDE_LIST PPLookasideList[16];                          //0x800
    struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];              //0x900
    struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];               //0x1500
    struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                //0x2100
    ULONGLONG MsrIa32TsxCtrl;                                               //0x2d00
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;                        //0x2d08
    volatile LONG MmPageFaultCount;                                         //0x2d10
    volatile LONG MmCopyOnWriteCount;                                       //0x2d14
    volatile LONG MmTransitionCount;                                        //0x2d18
    volatile LONG MmDemandZeroCount;                                        //0x2d1c
    volatile LONG MmPageReadCount;                                          //0x2d20
    volatile LONG MmPageReadIoCount;                                        //0x2d24
    volatile LONG MmDirtyPagesWriteCount;                                   //0x2d28
    volatile LONG MmDirtyWriteIoCount;                                      //0x2d2c
    volatile LONG MmMappedPagesWriteCount;                                  //0x2d30
    volatile LONG MmMappedWriteIoCount;                                     //0x2d34
    ULONG KeSystemCalls;                                                    //0x2d38
    ULONG KeContextSwitches;                                                //0x2d3c
    ULONG PrcbPad40;                                                        //0x2d40
    ULONG CcFastReadNoWait;                                                 //0x2d44
    ULONG CcFastReadWait;                                                   //0x2d48
    ULONG CcFastReadNotPossible;                                            //0x2d4c
    ULONG CcCopyReadNoWait;                                                 //0x2d50
    ULONG CcCopyReadWait;                                                   //0x2d54
    ULONG CcCopyReadNoWaitMiss;                                             //0x2d58
    volatile LONG IoReadOperationCount;                                     //0x2d5c
    volatile LONG IoWriteOperationCount;                                    //0x2d60
    volatile LONG IoOtherOperationCount;                                    //0x2d64
    union _LARGE_INTEGER IoReadTransferCount;                               //0x2d68
    union _LARGE_INTEGER IoWriteTransferCount;                              //0x2d70
    union _LARGE_INTEGER IoOtherTransferCount;                              //0x2d78
    volatile LONG PacketBarrier;                                            //0x2d80
    volatile LONG TargetCount;                                              //0x2d84
    volatile ULONG IpiFrozen;                                               //0x2d88
    ULONG PrcbPad30;                                                        //0x2d8c
    VOID* IsrDpcStats;                                                      //0x2d90
    ULONG DeviceInterrupts;                                                 //0x2d98
    LONG LookasideIrpFloat;                                                 //0x2d9c
    ULONG InterruptLastCount;                                               //0x2da0
    ULONG InterruptRate;                                                    //0x2da4
    ULONGLONG PrcbPad31;                                                    //0x2da8
    struct _KPRCB* PairPrcb;                                                //0x2db0
    struct _KSTATIC_AFFINITY_BLOCK StaticAffinity;                          //0x2db8
    ULONGLONG PrcbPad35[5];                                                 //0x3058
    union _SLIST_HEADER InterruptObjectPool;                                //0x3080
    struct _RTL_HASH_TABLE* DpcRuntimeHistoryHashTable;                     //0x3090
    struct _KDPC* DpcRuntimeHistoryHashTableCleanupDpc;                     //0x3098
    VOID (*CurrentDpcRoutine)(struct _KDPC* arg1, VOID* arg2, VOID* arg3, VOID* arg4); //0x30a0
    ULONGLONG CurrentDpcRuntimeHistoryCached;                               //0x30a8
    ULONGLONG CurrentDpcStartTime;                                          //0x30b0
    ULONGLONG PrcbPad41[1];                                                 //0x30b8
    struct _KDPC_DATA DpcData[2];                                           //0x30c0
    VOID* DpcStack;                                                         //0x3110
    LONG MaximumDpcQueueDepth;                                              //0x3118
    ULONG DpcRequestRate;                                                   //0x311c
    ULONG MinimumDpcRate;                                                   //0x3120
    ULONG DpcLastCount;                                                     //0x3124
    UCHAR ThreadDpcEnable;                                                  //0x3128
    volatile UCHAR QuantumEnd;                                              //0x3129
    volatile UCHAR DpcRoutineActive;                                        //0x312a
    volatile UCHAR IdleSchedule;                                            //0x312b
    union
    {
        volatile LONG DpcRequestSummary;                                    //0x312c
        SHORT DpcRequestSlot[2];                                            //0x312c
        struct
        {
            SHORT NormalDpcState;                                           //0x312c
            SHORT ThreadDpcState;                                           //0x312e
        };
        struct
        {
            ULONG DpcNormalProcessingActive:1;                              //0x312c
            ULONG DpcNormalProcessingRequested:1;                           //0x312c
            ULONG DpcNormalThreadSignal:1;                                  //0x312c
            ULONG DpcNormalTimerExpiration:1;                               //0x312c
            ULONG DpcNormalDpcPresent:1;                                    //0x312c
            ULONG DpcNormalLocalInterrupt:1;                                //0x312c
            ULONG DpcNormalSpare:10;                                        //0x312c
            ULONG DpcThreadActive:1;                                        //0x312c
            ULONG DpcThreadRequested:1;                                     //0x312c
            ULONG DpcThreadSpare:14;                                        //0x312c
        };
    };
    ULONG PrcbPad93;                                                        //0x3130
    ULONG LastTick;                                                         //0x3134
    ULONG ClockInterrupts;                                                  //0x3138
    ULONG ReadyScanTick;                                                    //0x313c
    VOID* InterruptObject[256];                                             //0x3140
    struct _KTIMER_TABLE TimerTable;                                        //0x3940
    ULONG PrcbPad92[10];                                                    //0x7b58
    struct _KGATE DpcGate;                                                  //0x7b80
    VOID* PrcbPad52;                                                        //0x7b98
    struct _KDPC CallDpc;                                                   //0x7ba0
    LONG ClockKeepAlive;                                                    //0x7be0
    UCHAR PrcbPad60[2];                                                     //0x7be4
    union
    {
        struct
        {
            UCHAR NmiActive;                                                //0x7be6
            UCHAR MceActive;                                                //0x7be7
        };
        USHORT CombinedNmiMceActive;                                        //0x7be6
    };
    LONG DpcWatchdogPeriod;                                                 //0x7be8
    LONG DpcWatchdogCount;                                                  //0x7bec
    volatile LONG KeSpinLockOrdering;                                       //0x7bf0
    ULONG DpcWatchdogProfileCumulativeDpcThreshold;                         //0x7bf4
    VOID* CachedPtes;                                                       //0x7bf8
    struct _LIST_ENTRY WaitListHead;                                        //0x7c00
    ULONGLONG WaitLock;                                                     //0x7c10
    ULONG ReadySummary;                                                     //0x7c18
    LONG AffinitizedSelectionMask;                                          //0x7c1c
    ULONG QueueIndex;                                                       //0x7c20
    ULONG PrcbPad75[2];                                                     //0x7c24
    ULONG DpcWatchdogSequenceNumber;                                        //0x7c2c
    struct _KDPC TimerExpirationDpc;                                        //0x7c30
    struct _RTL_RB_TREE ScbQueue;                                           //0x7c70
    struct _LIST_ENTRY DispatcherReadyListHead[32];                         //0x7c80
    ULONG InterruptCount;                                                   //0x7e80
    ULONG KernelTime;                                                       //0x7e84
    ULONG UserTime;                                                         //0x7e88
    ULONG DpcTime;                                                          //0x7e8c
    ULONG InterruptTime;                                                    //0x7e90
    ULONG AdjustDpcThreshold;                                               //0x7e94
    UCHAR DebuggerSavedIRQL;                                                //0x7e98
    UCHAR GroupSchedulingOverQuota;                                         //0x7e99
    volatile UCHAR DeepSleep;                                               //0x7e9a
    UCHAR PrcbPad80;                                                        //0x7e9b
    ULONG DpcTimeCount;                                                     //0x7e9c
    ULONG DpcTimeLimit;                                                     //0x7ea0
    ULONG PeriodicCount;                                                    //0x7ea4
    ULONG PeriodicBias;                                                     //0x7ea8
    ULONG AvailableTime;                                                    //0x7eac
    ULONG KeExceptionDispatchCount;                                         //0x7eb0
    ULONG ReadyThreadCount;                                                 //0x7eb4
    ULONGLONG ReadyQueueExpectedRunTime;                                    //0x7eb8
    ULONGLONG StartCycles;                                                  //0x7ec0
    ULONGLONG TaggedCyclesStart;                                            //0x7ec8
    ULONGLONG TaggedCycles[3];                                              //0x7ed0
    ULONGLONG AffinitizedCycles;                                            //0x7ee8
    ULONGLONG ImportantCycles;                                              //0x7ef0
    ULONGLONG UnimportantCycles;                                            //0x7ef8
    ULONG DpcWatchdogProfileSingleDpcThreshold;                             //0x7f00
    volatile LONG MmSpinLockOrdering;                                       //0x7f04
    VOID* volatile CachedStack;                                             //0x7f08
    ULONG PageColor;                                                        //0x7f10
    ULONG NodeColor;                                                        //0x7f14
    ULONG NodeShiftedColor;                                                 //0x7f18
    ULONG SecondaryColorMask;                                               //0x7f1c
    UCHAR PrcbPad81[6];                                                     //0x7f20
    UCHAR ExceptionStackActive;                                             //0x7f26
    UCHAR TbFlushListActive;                                                //0x7f27
    VOID* ExceptionStack;                                                   //0x7f28
    ULONGLONG PrcbPad82[1];                                                 //0x7f30
    ULONGLONG CycleTime;                                                    //0x7f38
    ULONGLONG Cycles[4][2];                                                 //0x7f40
    ULONG CcFastMdlReadNoWait;                                              //0x7f80
    ULONG CcFastMdlReadWait;                                                //0x7f84
    ULONG CcFastMdlReadNotPossible;                                         //0x7f88
    ULONG CcMapDataNoWait;                                                  //0x7f8c
    ULONG CcMapDataWait;                                                    //0x7f90
    ULONG CcPinMappedDataCount;                                             //0x7f94
    ULONG CcPinReadNoWait;                                                  //0x7f98
    ULONG CcPinReadWait;                                                    //0x7f9c
    ULONG CcMdlReadNoWait;                                                  //0x7fa0
    ULONG CcMdlReadWait;                                                    //0x7fa4
    ULONG CcLazyWriteHotSpots;                                              //0x7fa8
    ULONG CcLazyWriteIos;                                                   //0x7fac
    ULONG CcLazyWritePages;                                                 //0x7fb0
    ULONG CcDataFlushes;                                                    //0x7fb4
    ULONG CcDataPages;                                                      //0x7fb8
    ULONG CcLostDelayedWrites;                                              //0x7fbc
    ULONG CcFastReadResourceMiss;                                           //0x7fc0
    ULONG CcCopyReadWaitMiss;                                               //0x7fc4
    ULONG CcFastMdlReadResourceMiss;                                        //0x7fc8
    ULONG CcMapDataNoWaitMiss;                                              //0x7fcc
    ULONG CcMapDataWaitMiss;                                                //0x7fd0
    ULONG CcPinReadNoWaitMiss;                                              //0x7fd4
    ULONG CcPinReadWaitMiss;                                                //0x7fd8
    ULONG CcMdlReadNoWaitMiss;                                              //0x7fdc
    ULONG CcMdlReadWaitMiss;                                                //0x7fe0
    ULONG CcReadAheadIos;                                                   //0x7fe4
    volatile LONG MmCacheTransitionCount;                                   //0x7fe8
    volatile LONG MmCacheReadCount;                                         //0x7fec
    volatile LONG MmCacheIoCount;                                           //0x7ff0
    ULONG PrcbPad91;                                                        //0x7ff4
    VOID* MmInternal;                                                       //0x7ff8
    struct _PROCESSOR_POWER_STATE PowerState;                               //0x8000
    VOID* HyperPte;                                                         //0x8200
    struct _LIST_ENTRY ScbList;                                             //0x8208
    struct _KDPC ForceIdleDpc;                                              //0x8218
    struct _KDPC DpcWatchdogDpc;                                            //0x8258
    struct _KTIMER DpcWatchdogTimer;                                        //0x8298
    struct _CACHE_DESCRIPTOR Cache[5];                                      //0x82d8
    ULONG CacheCount;                                                       //0x8314
    volatile ULONG CachedCommit;                                            //0x8318
    volatile ULONG CachedResidentAvailable;                                 //0x831c
    VOID* WheaInfo;                                                         //0x8320
    VOID* EtwSupport;                                                       //0x8328
    VOID* ExSaPageArray;                                                    //0x8330
    ULONG KeAlignmentFixupCount;                                            //0x8338
    ULONG PrcbPad95;                                                        //0x833c
    union _SLIST_HEADER HypercallPageList;                                  //0x8340
    ULONGLONG* StatisticsPage;                                              //0x8350
    ULONGLONG GenerationTarget;                                             //0x8358
    ULONGLONG PrcbPad85[4];                                                 //0x8360
    VOID* HypercallCachedPages;                                             //0x8380
    VOID* VirtualApicAssist;                                                //0x8388
    struct _KAFFINITY_EX PackageProcessorSet;                               //0x8390
    ULONG PackageId;                                                        //0x8438
    ULONG PrcbPad86;                                                        //0x843c
    ULONGLONG SharedReadyQueueMask;                                         //0x8440
    struct _KSHARED_READY_QUEUE* SharedReadyQueue;                          //0x8448
    ULONG SharedQueueScanOwner;                                             //0x8450
    ULONG ScanSiblingIndex;                                                 //0x8454
    ULONGLONG CoreProcessorSet;                                             //0x8458
    ULONGLONG ScanSiblingMask;                                              //0x8460
    ULONGLONG LLCMask;                                                      //0x8468
    ULONGLONG CacheProcessorMask[5];                                        //0x8470
    struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;    //0x8498
    VOID* ProfileEventIndexAddress;                                         //0x84a0
    VOID** DpcWatchdogProfile;                                              //0x84a8
    VOID** DpcWatchdogProfileCurrentEmptyCapture;                           //0x84b0
    VOID* SchedulerAssist;                                                  //0x84b8
    struct _SYNCH_COUNTERS SynchCounters;                                   //0x84c0
    ULONGLONG PrcbPad94;                                                    //0x8578
    struct _FILESYSTEM_DISK_COUNTERS FsCounters;                            //0x8580
    UCHAR VendorString[13];                                                 //0x8590
    UCHAR PrcbPad100[3];                                                    //0x859d
    ULONGLONG FeatureBits;                                                  //0x85a0
    union _LARGE_INTEGER UpdateSignature;                                   //0x85a8
    ULONGLONG PteBitCache;                                                  //0x85b0
    ULONG PteBitOffset;                                                     //0x85b8
    ULONG PrcbPad105;                                                       //0x85bc
    struct _CONTEXT* Context;                                               //0x85c0
    ULONG ContextFlagsInit;                                                 //0x85c8
    ULONG PrcbPad115;                                                       //0x85cc
    struct _XSAVE_AREA* ExtendedState;                                      //0x85d0
    VOID* IsrStack;                                                         //0x85d8
    struct _KENTROPY_TIMING_STATE EntropyTimingState;                       //0x85e0
    ULONGLONG PrcbPad110;                                                   //0x8730
    struct
    {
        ULONG UpdateCycle;                                                  //0x8738
        union
        {
            SHORT PairLocal;                                                //0x873c
            struct
            {
                UCHAR PairLocalLow;                                         //0x873c
                UCHAR PairLocalForceStibp:1;                                //0x873d
                UCHAR Reserved:4;                                           //0x873d
                UCHAR Frozen:1;                                             //0x873d
                UCHAR ForceUntrusted:1;                                     //0x873d
                UCHAR SynchIpi:1;                                           //0x873d
            };
        };
        union
        {
            SHORT PairRemote;                                               //0x873e
            struct
            {
                UCHAR PairRemoteLow;                                        //0x873e
                UCHAR Reserved2;                                            //0x873f
            };
        };
        UCHAR Trace[24];                                                    //0x8740
        ULONGLONG LocalDomain;                                              //0x8758
        ULONGLONG RemoteDomain;                                             //0x8760
        struct _KTHREAD* Thread;                                            //0x8768
    } StibpPairingTrace;                                                    //0x8738
    struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;                           //0x8770
    struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;                        //0x8778
    struct _KDPC AbDpc;                                                     //0x8780
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;               //0x87c0
    struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;              //0x8814
    struct _KSECURE_FAULT_INFORMATION SecureFault;                          //0x8868
    ULONGLONG PrcbPad120;                                                   //0x8878
    struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;                      //0x8880
    ULONGLONG PrcbPad125[2];                                                //0x8af0
    ULONG TimerExpirationTraceCount;                                        //0x8b00
    ULONG PrcbPad127;                                                       //0x8b04
    struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];               //0x8b08
    ULONGLONG PrcbPad128[7];                                                //0x8c08
    struct _REQUEST_MAILBOX* Mailbox;                                       //0x8c40
    ULONGLONG PrcbPad130[7];                                                //0x8c48
    struct _MACHINE_CHECK_CONTEXT McheckContext[2];                         //0x8c80
    ULONGLONG PrcbPad134[4];                                                //0x8d20
    struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];                        //0x8d40
    ULONGLONG PrcbPad134a[4];                                               //0x8da0
    UCHAR PrcbPad138[128];                                                  //0x8dc0
    UCHAR PrcbPad138a[64];                                                  //0x8e40
    ULONGLONG KernelDirectoryTableBase;                                     //0x8e80
    ULONGLONG RspBaseShadow;                                                //0x8e88
    ULONGLONG UserRspShadow;                                                //0x8e90
    ULONG ShadowFlags;                                                      //0x8e98
    ULONG PrcbPad138b;                                                      //0x8e9c
    ULONGLONG PrcbPad138c;                                                  //0x8ea0
    USHORT PrcbPad138d;                                                     //0x8ea8
    USHORT VerwSelector;                                                    //0x8eaa
    ULONG DbgMceNestingLevel;                                               //0x8eac
    ULONG DbgMceFlags;                                                      //0x8eb0
    ULONG PrcbPad139b;                                                      //0x8eb4
    ULONGLONG PrcbPad140[505];                                              //0x8eb8
    ULONGLONG PrcbPad140a[8];                                               //0x9e80
    ULONGLONG PrcbPad141[504];                                              //0x9ec0
    UCHAR PrcbPad141a[64];                                                  //0xae80
    struct _REQUEST_MAILBOX RequestMailbox[1];                              //0xaec0
}; 

----------------------------------------
Structure: _KPRIQUEUE

//0x2b0 bytes (sizeof)
struct _KPRIQUEUE
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    struct _LIST_ENTRY EntryListHead[32];                                   //0x18
    volatile LONG CurrentCount[32];                                         //0x218
    ULONG MaximumCount;                                                     //0x298
    struct _LIST_ENTRY ThreadListHead;                                      //0x2a0
}; 

----------------------------------------
Structure: _KPROCESS

//0x438 bytes (sizeof)
struct _KPROCESS
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    struct _LIST_ENTRY ProfileListHead;                                     //0x18
    ULONGLONG DirectoryTableBase;                                           //0x28
    struct _LIST_ENTRY ThreadListHead;                                      //0x30
    ULONG ProcessLock;                                                      //0x40
    ULONG ProcessTimerDelay;                                                //0x44
    ULONGLONG DeepFreezeStartTime;                                          //0x48
    struct _KAFFINITY_EX Affinity;                                          //0x50
    ULONGLONG AffinityPadding[12];                                          //0xf8
    struct _LIST_ENTRY ReadyListHead;                                       //0x158
    struct _SINGLE_LIST_ENTRY SwapListEntry;                                //0x168
    volatile struct _KAFFINITY_EX ActiveProcessors;                         //0x170
    ULONGLONG ActiveProcessorsPadding[12];                                  //0x218
    union
    {
        struct
        {
            ULONG AutoAlignment:1;                                          //0x278
            ULONG DisableBoost:1;                                           //0x278
            ULONG DisableQuantum:1;                                         //0x278
            ULONG DeepFreeze:1;                                             //0x278
            ULONG TimerVirtualization:1;                                    //0x278
            ULONG CheckStackExtents:1;                                      //0x278
            ULONG CacheIsolationEnabled:1;                                  //0x278
            ULONG PpmPolicy:3;                                              //0x278
            ULONG VaSpaceDeleted:1;                                         //0x278
            ULONG ReservedFlags:21;                                         //0x278
        };
        volatile LONG ProcessFlags;                                         //0x278
    };
    ULONG ActiveGroupsMask;                                                 //0x27c
    CHAR BasePriority;                                                      //0x280
    CHAR QuantumReset;                                                      //0x281
    CHAR Visited;                                                           //0x282
    union _KEXECUTE_OPTIONS Flags;                                          //0x283
    USHORT ThreadSeed[20];                                                  //0x284
    USHORT ThreadSeedPadding[12];                                           //0x2ac
    USHORT IdealProcessor[20];                                              //0x2c4
    USHORT IdealProcessorPadding[12];                                       //0x2ec
    USHORT IdealNode[20];                                                   //0x304
    USHORT IdealNodePadding[12];                                            //0x32c
    USHORT IdealGlobalNode;                                                 //0x344
    USHORT Spare1;                                                          //0x346
    unionvolatile _KSTACK_COUNT StackCount;                                 //0x348
    struct _LIST_ENTRY ProcessListEntry;                                    //0x350
    ULONGLONG CycleTime;                                                    //0x360
    ULONGLONG ContextSwitches;                                              //0x368
    struct _KSCHEDULING_GROUP* SchedulingGroup;                             //0x370
    ULONG FreezeCount;                                                      //0x378
    ULONG KernelTime;                                                       //0x37c
    ULONG UserTime;                                                         //0x380
    ULONG ReadyTime;                                                        //0x384
    ULONGLONG UserDirectoryTableBase;                                       //0x388
    UCHAR AddressPolicy;                                                    //0x390
    UCHAR Spare2[71];                                                       //0x391
    VOID* InstrumentationCallback;                                          //0x3d8
    union
    {
        ULONGLONG SecureHandle;                                             //0x3e0
        struct
        {
            ULONGLONG SecureProcess:1;                                      //0x3e0
            ULONGLONG Unused:1;                                             //0x3e0
        } Flags;                                                            //0x3e0
    } SecureState;                                                          //0x3e0
    ULONGLONG KernelWaitTime;                                               //0x3e8
    ULONGLONG UserWaitTime;                                                 //0x3f0
    ULONGLONG EndPadding[8];                                                //0x3f8
}; 

----------------------------------------
Structure: _KPROCESSOR_STATE

//0x5c0 bytes (sizeof)
struct _KPROCESSOR_STATE
{
    struct _KSPECIAL_REGISTERS SpecialRegisters;                            //0x0
    struct _CONTEXT ContextFrame;                                           //0xf0
}; 

----------------------------------------
Structure: _KQUEUE

//0x40 bytes (sizeof)
struct _KQUEUE
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    struct _LIST_ENTRY EntryListHead;                                       //0x18
    volatile ULONG CurrentCount;                                            //0x28
    ULONG MaximumCount;                                                     //0x2c
    struct _LIST_ENTRY ThreadListHead;                                      //0x30
}; 

----------------------------------------
Structure: _KREQUEST_PACKET

//0x20 bytes (sizeof)
struct _KREQUEST_PACKET
{
    VOID* CurrentPacket[3];                                                 //0x0
    VOID (*WorkerRoutine)(VOID* arg1, VOID* arg2, VOID* arg3, VOID* arg4);  //0x18
}; 

----------------------------------------
Structure: _KRESOURCEMANAGER

//0x250 bytes (sizeof)
struct _KRESOURCEMANAGER
{
    struct _KEVENT NotificationAvailable;                                   //0x0
    ULONG cookie;                                                           //0x18
    enum _KRESOURCEMANAGER_STATE State;                                     //0x1c
    ULONG Flags;                                                            //0x20
    struct _KMUTANT Mutex;                                                  //0x28
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x60
    struct _GUID RmId;                                                      //0x88
    struct _KQUEUE NotificationQueue;                                       //0x98
    struct _KMUTANT NotificationMutex;                                      //0xd8
    struct _LIST_ENTRY EnlistmentHead;                                      //0x110
    ULONG EnlistmentCount;                                                  //0x120
    LONG (*NotificationRoutine)(struct _KENLISTMENT* arg1, VOID* arg2, VOID* arg3, ULONG arg4, union _LARGE_INTEGER* arg5, ULONG arg6, VOID* arg7); //0x128
    VOID* Key;                                                              //0x130
    struct _LIST_ENTRY ProtocolListHead;                                    //0x138
    struct _LIST_ENTRY PendingPropReqListHead;                              //0x148
    struct _LIST_ENTRY CRMListEntry;                                        //0x158
    struct _KTM* Tm;                                                        //0x168
    struct _UNICODE_STRING Description;                                     //0x170
    struct _KTMOBJECT_NAMESPACE Enlistments;                                //0x180
    struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;          //0x228
}; 

----------------------------------------
Structure: _KRESOURCEMANAGER_COMPLETION_BINDING

//0x28 bytes (sizeof)
struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
    struct _LIST_ENTRY NotificationListHead;                                //0x0
    VOID* Port;                                                             //0x10
    ULONGLONG Key;                                                          //0x18
    struct _EPROCESS* BindingProcess;                                       //0x20
}; 

----------------------------------------
Structure: _KSCB

//0x1a8 bytes (sizeof)
struct _KSCB
{
    ULONGLONG GenerationCycles;                                             //0x0
    ULONGLONG MinQuotaCycleTarget;                                          //0x8
    ULONGLONG MaxQuotaCycleTarget;                                          //0x10
    ULONGLONG RankCycleTarget;                                              //0x18
    ULONGLONG LongTermCycles;                                               //0x20
    ULONGLONG LastReportedCycles;                                           //0x28
    volatile ULONGLONG OverQuotaHistory;                                    //0x30
    ULONGLONG ReadyTime;                                                    //0x38
    ULONGLONG InsertTime;                                                   //0x40
    struct _LIST_ENTRY PerProcessorList;                                    //0x48
    struct _RTL_BALANCED_NODE QueueNode;                                    //0x58
    UCHAR Inserted:1;                                                       //0x70
    UCHAR MaxOverQuota:1;                                                   //0x70
    UCHAR MinOverQuota:1;                                                   //0x70
    UCHAR RankBias:1;                                                       //0x70
    UCHAR SoftCap:1;                                                        //0x70
    UCHAR ShareRankOwner:1;                                                 //0x70
    UCHAR Spare1:2;                                                         //0x70
    UCHAR Depth;                                                            //0x71
    USHORT ReadySummary;                                                    //0x72
    ULONG Rank;                                                             //0x74
    volatile ULONG* ShareRank;                                              //0x78
    volatile ULONG OwnerShareRank;                                          //0x80
    struct _LIST_ENTRY ReadyListHead[16];                                   //0x88
    struct _RTL_RB_TREE ChildScbQueue;                                      //0x188
    struct _KSCB* Parent;                                                   //0x198
    struct _KSCB* Root;                                                     //0x1a0
}; 

----------------------------------------
Structure: _KSCHEDULING_GROUP

//0x240 bytes (sizeof)
struct _KSCHEDULING_GROUP
{
    struct _KSCHEDULING_GROUP_POLICY Policy;                                //0x0
    ULONG RelativeWeight;                                                   //0x8
    ULONG ChildMinRate;                                                     //0xc
    ULONG ChildMinWeight;                                                   //0x10
    ULONG ChildTotalWeight;                                                 //0x14
    ULONGLONG QueryHistoryTimeStamp;                                        //0x18
    LONGLONG NotificationCycles;                                            //0x20
    LONGLONG MaxQuotaLimitCycles;                                           //0x28
    volatile LONGLONG MaxQuotaCyclesRemaining;                              //0x30
    union
    {
        struct _LIST_ENTRY SchedulingGroupList;                             //0x38
        struct _LIST_ENTRY Sibling;                                         //0x38
    };
    struct _KDPC* NotificationDpc;                                          //0x48
    struct _LIST_ENTRY ChildList;                                           //0x50
    struct _KSCHEDULING_GROUP* Parent;                                      //0x60
    struct _KSCB PerProcessor[1];                                           //0x80
}; 

----------------------------------------
Structure: _KSCHEDULING_GROUP_POLICY

//0x8 bytes (sizeof)
struct _KSCHEDULING_GROUP_POLICY
{
    union
    {
        ULONG Value;                                                        //0x0
        USHORT Weight;                                                      //0x0
        struct
        {
            USHORT MinRate;                                                 //0x0
            USHORT MaxRate;                                                 //0x2
        };
    };
    union
    {
        ULONG AllFlags;                                                     //0x4
        struct
        {
            ULONG Type:1;                                                   //0x4
            ULONG Disabled:1;                                               //0x4
            ULONG RankBias:1;                                               //0x4
            ULONG Spare1:29;                                                //0x4
        };
    };
}; 

----------------------------------------
Structure: _KSECONDARY_IDT_ENTRY

//0x30 bytes (sizeof)
struct _KSECONDARY_IDT_ENTRY
{
    ULONGLONG SpinLock;                                                     //0x0
    struct _KEVENT ConnectLock;                                             //0x8
    UCHAR LineMasked;                                                       //0x20
    struct _KINTERRUPT* InterruptList;                                      //0x28
}; 

----------------------------------------
Structure: _KSECURE_FAULT_INFORMATION

//0x10 bytes (sizeof)
struct _KSECURE_FAULT_INFORMATION
{
    ULONGLONG FaultCode;                                                    //0x0
    ULONGLONG FaultVa;                                                      //0x8
}; 

----------------------------------------
Structure: _KSEMAPHORE

//0x20 bytes (sizeof)
struct _KSEMAPHORE
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    LONG Limit;                                                             //0x18
}; 

----------------------------------------
Structure: _KSHARED_READY_QUEUE

//0x270 bytes (sizeof)
struct _KSHARED_READY_QUEUE
{
    ULONGLONG Lock;                                                         //0x0
    ULONG ReadySummary;                                                     //0x8
    struct _LIST_ENTRY ReadyListHead[32];                                   //0x10
    CHAR RunningSummary[64];                                                //0x210
    UCHAR Span;                                                             //0x250
    UCHAR LowProcIndex;                                                     //0x251
    UCHAR QueueIndex;                                                       //0x252
    UCHAR ProcCount;                                                        //0x253
    UCHAR ScanOwner;                                                        //0x254
    UCHAR Spare[3];                                                         //0x255
    ULONGLONG Affinity;                                                     //0x258
    ULONG ReadyThreadCount;                                                 //0x260
    ULONGLONG ReadyQueueExpectedRunTime;                                    //0x268
}; 

----------------------------------------
Structure: _KSPECIAL_REGISTERS

//0xf0 bytes (sizeof)
struct _KSPECIAL_REGISTERS
{
    ULONGLONG Cr0;                                                          //0x0
    ULONGLONG Cr2;                                                          //0x8
    ULONGLONG Cr3;                                                          //0x10
    ULONGLONG Cr4;                                                          //0x18
    ULONGLONG KernelDr0;                                                    //0x20
    ULONGLONG KernelDr1;                                                    //0x28
    ULONGLONG KernelDr2;                                                    //0x30
    ULONGLONG KernelDr3;                                                    //0x38
    ULONGLONG KernelDr6;                                                    //0x40
    ULONGLONG KernelDr7;                                                    //0x48
    struct _KDESCRIPTOR Gdtr;                                               //0x50
    struct _KDESCRIPTOR Idtr;                                               //0x60
    USHORT Tr;                                                              //0x70
    USHORT Ldtr;                                                            //0x72
    ULONG MxCsr;                                                            //0x74
    ULONGLONG DebugControl;                                                 //0x78
    ULONGLONG LastBranchToRip;                                              //0x80
    ULONGLONG LastBranchFromRip;                                            //0x88
    ULONGLONG LastExceptionToRip;                                           //0x90
    ULONGLONG LastExceptionFromRip;                                         //0x98
    ULONGLONG Cr8;                                                          //0xa0
    ULONGLONG MsrGsBase;                                                    //0xa8
    ULONGLONG MsrGsSwap;                                                    //0xb0
    ULONGLONG MsrStar;                                                      //0xb8
    ULONGLONG MsrLStar;                                                     //0xc0
    ULONGLONG MsrCStar;                                                     //0xc8
    ULONGLONG MsrSyscallMask;                                               //0xd0
    ULONGLONG Xcr0;                                                         //0xd8
    ULONGLONG MsrFsBase;                                                    //0xe0
    ULONGLONG SpecialPadding0;                                              //0xe8
}; 

----------------------------------------
Structure: _KSPIN_LOCK_QUEUE

//0x10 bytes (sizeof)
struct _KSPIN_LOCK_QUEUE
{
    struct _KSPIN_LOCK_QUEUE* volatile Next;                                //0x0
    ULONGLONG* volatile Lock;                                               //0x8
}; 

----------------------------------------
Structure: _KSTACK_CONTROL

//0x30 bytes (sizeof)
struct _KSTACK_CONTROL
{
    ULONGLONG StackBase;                                                    //0x0
    union
    {
        ULONGLONG ActualLimit;                                              //0x8
        ULONGLONG StackExpansion:1;                                         //0x8
    };
    struct _KERNEL_STACK_SEGMENT Previous;                                  //0x10
}; 

----------------------------------------
Structure: _KSTATIC_AFFINITY_BLOCK

//0x2a0 bytes (sizeof)
struct _KSTATIC_AFFINITY_BLOCK
{
    union
    {
        struct _KAFFINITY_EX KeFlushTbAffinity;                             //0x0
        struct _KAFFINITY_EX KeFlushWbAffinity;                             //0x0
        struct _KAFFINITY_EX KeSyncContextAffinity;                         //0x0
    };
    struct _KAFFINITY_EX KeFlushTbDeepIdleAffinity;                         //0xa8
    struct _KAFFINITY_EX KeIpiSendAffinity;                                 //0x150
    struct _KAFFINITY_EX KeIpiSendIpiSet;                                   //0x1f8
}; 

----------------------------------------
Structure: _KSYSTEM_TIME

//0xc bytes (sizeof)
struct _KSYSTEM_TIME
{
    ULONG LowPart;                                                          //0x0
    LONG High1Time;                                                         //0x4
    LONG High2Time;                                                         //0x8
}; 

----------------------------------------
Structure: _KTB_FLUSH_VA

//0x8 bytes (sizeof)
struct _KTB_FLUSH_VA
{
    union
    {
        ULONGLONG NumberOfEntries:10;                                       //0x0
        ULONGLONG PageSize:2;                                               //0x0
        VOID* Va;                                                           //0x0
        ULONGLONG VaLong;                                                   //0x0
    } u1;                                                                   //0x0
}; 

----------------------------------------
Structure: _KTHREAD

//0x430 bytes (sizeof)
struct _KTHREAD
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    VOID* SListFaultAddress;                                                //0x18
    ULONGLONG QuantumTarget;                                                //0x20
    VOID* InitialStack;                                                     //0x28
    VOID* volatile StackLimit;                                              //0x30
    VOID* StackBase;                                                        //0x38
    ULONGLONG ThreadLock;                                                   //0x40
    volatile ULONGLONG CycleTime;                                           //0x48
    ULONG CurrentRunTime;                                                   //0x50
    ULONG ExpectedRunTime;                                                  //0x54
    VOID* KernelStack;                                                      //0x58
    struct _XSAVE_FORMAT* StateSaveArea;                                    //0x60
    struct _KSCHEDULING_GROUP* volatile SchedulingGroup;                    //0x68
    union _KWAIT_STATUS_REGISTER WaitRegister;                              //0x70
    volatile UCHAR Running;                                                 //0x71
    UCHAR Alerted[2];                                                       //0x72
    union
    {
        struct
        {
            ULONG AutoBoostActive:1;                                        //0x74
            ULONG ReadyTransition:1;                                        //0x74
            ULONG WaitNext:1;                                               //0x74
            ULONG SystemAffinityActive:1;                                   //0x74
            ULONG Alertable:1;                                              //0x74
            ULONG UserStackWalkActive:1;                                    //0x74
            ULONG ApcInterruptRequest:1;                                    //0x74
            ULONG QuantumEndMigrate:1;                                      //0x74
            ULONG UmsDirectedSwitchEnable:1;                                //0x74
            ULONG TimerActive:1;                                            //0x74
            ULONG SystemThread:1;                                           //0x74
            ULONG ProcessDetachActive:1;                                    //0x74
            ULONG CalloutActive:1;                                          //0x74
            ULONG ScbReadyQueue:1;                                          //0x74
            ULONG ApcQueueable:1;                                           //0x74
            ULONG ReservedStackInUse:1;                                     //0x74
            ULONG UmsPerformingSyscall:1;                                   //0x74
            ULONG TimerSuspended:1;                                         //0x74
            ULONG SuspendedWaitMode:1;                                      //0x74
            ULONG SuspendSchedulerApcWait:1;                                //0x74
            ULONG CetUserShadowStack:1;                                     //0x74
            ULONG BypassProcessFreeze:1;                                    //0x74
            ULONG Reserved:10;                                              //0x74
        };
        LONG MiscFlags;                                                     //0x74
    };
    union
    {
        struct
        {
            ULONG ThreadFlagsSpare:2;                                       //0x78
            ULONG AutoAlignment:1;                                          //0x78
            ULONG DisableBoost:1;                                           //0x78
            ULONG AlertedByThreadId:1;                                      //0x78
            ULONG QuantumDonation:1;                                        //0x78
            ULONG EnableStackSwap:1;                                        //0x78
            ULONG GuiThread:1;                                              //0x78
            ULONG DisableQuantum:1;                                         //0x78
            ULONG ChargeOnlySchedulingGroup:1;                              //0x78
            ULONG DeferPreemption:1;                                        //0x78
            ULONG QueueDeferPreemption:1;                                   //0x78
            ULONG ForceDeferSchedule:1;                                     //0x78
            ULONG SharedReadyQueueAffinity:1;                               //0x78
            ULONG FreezeCount:1;                                            //0x78
            ULONG TerminationApcRequest:1;                                  //0x78
            ULONG AutoBoostEntriesExhausted:1;                              //0x78
            ULONG KernelStackResident:1;                                    //0x78
            ULONG TerminateRequestReason:2;                                 //0x78
            ULONG ProcessStackCountDecremented:1;                           //0x78
            ULONG RestrictedGuiThread:1;                                    //0x78
            ULONG VpBackingThread:1;                                        //0x78
            ULONG ThreadFlagsSpare2:1;                                      //0x78
            ULONG EtwStackTraceApcInserted:8;                               //0x78
        };
        volatile LONG ThreadFlags;                                          //0x78
    };
    volatile UCHAR Tag;                                                     //0x7c
    UCHAR SystemHeteroCpuPolicy;                                            //0x7d
    UCHAR UserHeteroCpuPolicy:7;                                            //0x7e
    UCHAR ExplicitSystemHeteroCpuPolicy:1;                                  //0x7e
    union
    {
        struct
        {
            UCHAR RunningNonRetpolineCode:1;                                //0x7f
            UCHAR SpecCtrlSpare:7;                                          //0x7f
        };
        UCHAR SpecCtrl;                                                     //0x7f
    };
    ULONG SystemCallNumber;                                                 //0x80
    ULONG ReadyTime;                                                        //0x84
    VOID* FirstArgument;                                                    //0x88
    struct _KTRAP_FRAME* TrapFrame;                                         //0x90
    union
    {
        struct _KAPC_STATE ApcState;                                        //0x98
        struct
        {
            UCHAR ApcStateFill[43];                                         //0x98
            CHAR Priority;                                                  //0xc3
            ULONG UserIdealProcessor;                                       //0xc4
        };
    };
    volatile LONGLONG WaitStatus;                                           //0xc8
    struct _KWAIT_BLOCK* WaitBlockList;                                     //0xd0
    union
    {
        struct _LIST_ENTRY WaitListEntry;                                   //0xd8
        struct _SINGLE_LIST_ENTRY SwapListEntry;                            //0xd8
    };
    struct _DISPATCHER_HEADER* volatile Queue;                              //0xe8
    VOID* Teb;                                                              //0xf0
    ULONGLONG RelativeTimerBias;                                            //0xf8
    struct _KTIMER Timer;                                                   //0x100
    union
    {
        struct _KWAIT_BLOCK WaitBlock[4];                                   //0x140
        struct
        {
            UCHAR WaitBlockFill4[20];                                       //0x140
            ULONG ContextSwitches;                                          //0x154
        };
        struct
        {
            UCHAR WaitBlockFill5[68];                                       //0x140
            volatile UCHAR State;                                           //0x184
            CHAR Spare13;                                                   //0x185
            UCHAR WaitIrql;                                                 //0x186
            CHAR WaitMode;                                                  //0x187
        };
        struct
        {
            UCHAR WaitBlockFill6[116];                                      //0x140
            ULONG WaitTime;                                                 //0x1b4
        };
        struct
        {
            UCHAR WaitBlockFill7[164];                                      //0x140
            union
            {
                struct
                {
                    SHORT KernelApcDisable;                                 //0x1e4
                    SHORT SpecialApcDisable;                                //0x1e6
                };
                ULONG CombinedApcDisable;                                   //0x1e4
            };
        };
        struct
        {
            UCHAR WaitBlockFill8[40];                                       //0x140
            struct _KTHREAD_COUNTERS* ThreadCounters;                       //0x168
        };
        struct
        {
            UCHAR WaitBlockFill9[88];                                       //0x140
            struct _XSTATE_SAVE* XStateSave;                                //0x198
        };
        struct
        {
            UCHAR WaitBlockFill10[136];                                     //0x140
            VOID* volatile Win32Thread;                                     //0x1c8
        };
        struct
        {
            UCHAR WaitBlockFill11[176];                                     //0x140
            struct _UMS_CONTROL_BLOCK* Ucb;                                 //0x1f0
            struct _KUMS_CONTEXT_HEADER* volatile Uch;                      //0x1f8
        };
    };
    union
    {
        volatile LONG ThreadFlags2;                                         //0x200
        struct
        {
            ULONG BamQosLevel:8;                                            //0x200
            ULONG ThreadFlags2Reserved:24;                                  //0x200
        };
    };
    ULONG Spare21;                                                          //0x204
    struct _LIST_ENTRY QueueListEntry;                                      //0x208
    union
    {
        volatile ULONG NextProcessor;                                       //0x218
        struct
        {
            ULONG NextProcessorNumber:31;                                   //0x218
            ULONG SharedReadyQueue:1;                                       //0x218
        };
    };
    LONG QueuePriority;                                                     //0x21c
    struct _KPROCESS* Process;                                              //0x220
    union
    {
        struct _GROUP_AFFINITY UserAffinity;                                //0x228
        struct
        {
            UCHAR UserAffinityFill[10];                                     //0x228
            CHAR PreviousMode;                                              //0x232
            CHAR BasePriority;                                              //0x233
            union
            {
                CHAR PriorityDecrement;                                     //0x234
                struct
                {
                    UCHAR ForegroundBoost:4;                                //0x234
                    UCHAR UnusualBoost:4;                                   //0x234
                };
            };
            UCHAR Preempted;                                                //0x235
            UCHAR AdjustReason;                                             //0x236
            CHAR AdjustIncrement;                                           //0x237
        };
    };
    ULONGLONG AffinityVersion;                                              //0x238
    union
    {
        struct _GROUP_AFFINITY Affinity;                                    //0x240
        struct
        {
            UCHAR AffinityFill[10];                                         //0x240
            UCHAR ApcStateIndex;                                            //0x24a
            UCHAR WaitBlockCount;                                           //0x24b
            ULONG IdealProcessor;                                           //0x24c
        };
    };
    ULONGLONG NpxState;                                                     //0x250
    union
    {
        struct _KAPC_STATE SavedApcState;                                   //0x258
        struct
        {
            UCHAR SavedApcStateFill[43];                                    //0x258
            UCHAR WaitReason;                                               //0x283
            CHAR SuspendCount;                                              //0x284
            CHAR Saturation;                                                //0x285
            USHORT SListFaultCount;                                         //0x286
        };
    };
    union
    {
        struct _KAPC SchedulerApc;                                          //0x288
        struct
        {
            UCHAR SchedulerApcFill0[1];                                     //0x288
            UCHAR ResourceIndex;                                            //0x289
        };
        struct
        {
            UCHAR SchedulerApcFill1[3];                                     //0x288
            UCHAR QuantumReset;                                             //0x28b
        };
        struct
        {
            UCHAR SchedulerApcFill2[4];                                     //0x288
            ULONG KernelTime;                                               //0x28c
        };
        struct
        {
            UCHAR SchedulerApcFill3[64];                                    //0x288
            struct _KPRCB* volatile WaitPrcb;                               //0x2c8
        };
        struct
        {
            UCHAR SchedulerApcFill4[72];                                    //0x288
            VOID* LegoData;                                                 //0x2d0
        };
        struct
        {
            UCHAR SchedulerApcFill5[83];                                    //0x288
            UCHAR CallbackNestingLevel;                                     //0x2db
            ULONG UserTime;                                                 //0x2dc
        };
    };
    struct _KEVENT SuspendEvent;                                            //0x2e0
    struct _LIST_ENTRY ThreadListEntry;                                     //0x2f8
    struct _LIST_ENTRY MutantListHead;                                      //0x308
    UCHAR AbEntrySummary;                                                   //0x318
    UCHAR AbWaitEntryCount;                                                 //0x319
    UCHAR AbAllocationRegionCount;                                          //0x31a
    CHAR SystemPriority;                                                    //0x31b
    ULONG SecureThreadCookie;                                               //0x31c
    struct _KLOCK_ENTRY* LockEntries;                                       //0x320
    struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;                         //0x328
    struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;                            //0x330
    UCHAR PriorityFloorCounts[16];                                          //0x338
    UCHAR PriorityFloorCountsReserved[16];                                  //0x348
    ULONG PriorityFloorSummary;                                             //0x358
    volatile LONG AbCompletedIoBoostCount;                                  //0x35c
    volatile LONG AbCompletedIoQoSBoostCount;                               //0x360
    volatile SHORT KeReferenceCount;                                        //0x364
    UCHAR AbOrphanedEntrySummary;                                           //0x366
    UCHAR AbOwnedEntryCount;                                                //0x367
    ULONG ForegroundLossTime;                                               //0x368
    union
    {
        struct _LIST_ENTRY GlobalForegroundListEntry;                       //0x370
        struct
        {
            struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;          //0x370
            ULONGLONG InGlobalForegroundList;                               //0x378
        };
    };
    LONGLONG ReadOperationCount;                                            //0x380
    LONGLONG WriteOperationCount;                                           //0x388
    LONGLONG OtherOperationCount;                                           //0x390
    LONGLONG ReadTransferCount;                                             //0x398
    LONGLONG WriteTransferCount;                                            //0x3a0
    LONGLONG OtherTransferCount;                                            //0x3a8
    struct _KSCB* QueuedScb;                                                //0x3b0
    volatile ULONG ThreadTimerDelay;                                        //0x3b8
    union
    {
        volatile LONG ThreadFlags3;                                         //0x3bc
        struct
        {
            ULONG ThreadFlags3Reserved:8;                                   //0x3bc
            ULONG PpmPolicy:2;                                              //0x3bc
            ULONG ThreadFlags3Reserved2:22;                                 //0x3bc
        };
    };
    ULONGLONG TracingPrivate[1];                                            //0x3c0
    VOID* SchedulerAssist;                                                  //0x3c8
    VOID* volatile AbWaitObject;                                            //0x3d0
    ULONG ReservedPreviousReadyTimeValue;                                   //0x3d8
    ULONGLONG KernelWaitTime;                                               //0x3e0
    ULONGLONG UserWaitTime;                                                 //0x3e8
    union
    {
        struct _LIST_ENTRY GlobalUpdateVpThreadPriorityListEntry;           //0x3f0
        struct
        {
            struct _SINGLE_LIST_ENTRY UpdateVpThreadPriorityDpcStackListEntry; //0x3f0
            ULONGLONG InGlobalUpdateVpThreadPriorityList;                   //0x3f8
        };
    };
    LONG SchedulerAssistPriorityFloor;                                      //0x400
    ULONG Spare28;                                                          //0x404
    ULONGLONG EndPadding[5];                                                //0x408
}; 

----------------------------------------
Structure: _KTHREAD_COUNTERS

//0x1a8 bytes (sizeof)
struct _KTHREAD_COUNTERS
{
    ULONGLONG WaitReasonBitMap;                                             //0x0
    struct _THREAD_PERFORMANCE_DATA* UserData;                              //0x8
    ULONG Flags;                                                            //0x10
    ULONG ContextSwitches;                                                  //0x14
    ULONGLONG CycleTimeBias;                                                //0x18
    ULONGLONG HardwareCounters;                                             //0x20
    struct _COUNTER_READING HwCounter[16];                                  //0x28
}; 

----------------------------------------
Structure: _KTIMER

//0x40 bytes (sizeof)
struct _KTIMER
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    union _ULARGE_INTEGER DueTime;                                          //0x18
    struct _LIST_ENTRY TimerListEntry;                                      //0x20
    struct _KDPC* Dpc;                                                      //0x30
    USHORT Processor;                                                       //0x38
    USHORT TimerType;                                                       //0x3a
    ULONG Period;                                                           //0x3c
}; 

----------------------------------------
Structure: _KTIMER2

//0x88 bytes (sizeof)
struct _KTIMER2
{
    struct _DISPATCHER_HEADER Header;                                       //0x0
    union
    {
        struct _RTL_BALANCED_NODE RbNodes[2];                               //0x18
        struct _LIST_ENTRY ListEntry;                                       //0x18
    };
    ULONGLONG DueTime[2];                                                   //0x48
    LONGLONG Period;                                                        //0x58
    VOID (*Callback)(struct _KTIMER2* arg1, VOID* arg2);                    //0x60
    VOID* CallbackContext;                                                  //0x68
    VOID (*DisableCallback)(VOID* arg1);                                    //0x70
    VOID* DisableContext;                                                   //0x78
    UCHAR AbsoluteSystemTime;                                               //0x80
    union
    {
        UCHAR TypeFlags;                                                    //0x81
        struct
        {
            UCHAR Unused:1;                                                 //0x81
            UCHAR IdleResilient:1;                                          //0x81
            UCHAR HighResolution:1;                                         //0x81
            UCHAR NoWake:1;                                                 //0x81
            UCHAR PseudoHighRes:1;                                          //0x81
            UCHAR Unused1:3;                                                //0x81
        };
    };
    UCHAR CollectionIndex[2];                                               //0x82
}; 

----------------------------------------
Structure: _KTIMER2_COLLECTION

//0x18 bytes (sizeof)
struct _KTIMER2_COLLECTION
{
    struct _RTL_RB_TREE Tree;                                               //0x0
    ULONGLONG NextDueTime;                                                  //0x10
}; 

----------------------------------------
Structure: _KTIMER_EXPIRATION_TRACE

//0x10 bytes (sizeof)
struct _KTIMER_EXPIRATION_TRACE
{
    ULONGLONG InterruptTime;                                                //0x0
    union _LARGE_INTEGER PerformanceCounter;                                //0x8
}; 

----------------------------------------
Structure: _KTIMER_TABLE

//0x4218 bytes (sizeof)
struct _KTIMER_TABLE
{
    struct _KTIMER* TimerExpiry[64];                                        //0x0
    struct _KTIMER_TABLE_ENTRY TimerEntries[2][256];                        //0x200
    struct _KTIMER_TABLE_STATE TableState;                                  //0x4200
}; 

----------------------------------------
Structure: _KTIMER_TABLE_ENTRY

//0x20 bytes (sizeof)
struct _KTIMER_TABLE_ENTRY
{
    ULONGLONG Lock;                                                         //0x0
    struct _LIST_ENTRY Entry;                                               //0x8
    union _ULARGE_INTEGER Time;                                             //0x18
}; 

----------------------------------------
Structure: _KTIMER_TABLE_STATE

//0x18 bytes (sizeof)
struct _KTIMER_TABLE_STATE
{
    ULONGLONG LastTimerExpiration[2];                                       //0x0
    ULONG LastTimerHand[2];                                                 //0x10
}; 

----------------------------------------
Structure: _KTM

//0x3c0 bytes (sizeof)
struct _KTM
{
    ULONG cookie;                                                           //0x0
    struct _KMUTANT Mutex;                                                  //0x8
    enum KTM_STATE State;                                                   //0x40
    struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;                         //0x48
    struct _GUID TmIdentity;                                                //0x70
    ULONG Flags;                                                            //0x80
    ULONG VolatileFlags;                                                    //0x84
    struct _UNICODE_STRING LogFileName;                                     //0x88
    struct _FILE_OBJECT* LogFileObject;                                     //0x98
    VOID* MarshallingContext;                                               //0xa0
    VOID* LogManagementContext;                                             //0xa8
    struct _KTMOBJECT_NAMESPACE Transactions;                               //0xb0
    struct _KTMOBJECT_NAMESPACE ResourceManagers;                           //0x158
    struct _KMUTANT LsnOrderedMutex;                                        //0x200
    struct _LIST_ENTRY LsnOrderedList;                                      //0x238
    union _LARGE_INTEGER CommitVirtualClock;                                //0x248
    struct _FAST_MUTEX CommitVirtualClockMutex;                             //0x250
    union _CLS_LSN BaseLsn;                                                 //0x288
    union _CLS_LSN CurrentReadLsn;                                          //0x290
    union _CLS_LSN LastRecoveredLsn;                                        //0x298
    VOID* TmRmHandle;                                                       //0x2a0
    struct _KRESOURCEMANAGER* TmRm;                                         //0x2a8
    struct _KEVENT LogFullNotifyEvent;                                      //0x2b0
    struct _WORK_QUEUE_ITEM CheckpointWorkItem;                             //0x2c8
    union _CLS_LSN CheckpointTargetLsn;                                     //0x2e8
    struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;                       //0x2f0
    struct _ERESOURCE LogWriteResource;                                     //0x310
    ULONG LogFlags;                                                         //0x378
    LONG LogFullStatus;                                                     //0x37c
    LONG RecoveryStatus;                                                    //0x380
    union _CLS_LSN LastCheckBaseLsn;                                        //0x388
    struct _LIST_ENTRY RestartOrderedList;                                  //0x390
    struct _WORK_QUEUE_ITEM OfflineWorkItem;                                //0x3a0
}; 

----------------------------------------
Structure: _KTMNOTIFICATION_PACKET

//0x0 bytes (sizeof)
struct _KTMNOTIFICATION_PACKET; 

----------------------------------------
Structure: _KTMOBJECT_NAMESPACE

//0xa8 bytes (sizeof)
struct _KTMOBJECT_NAMESPACE
{
    struct _RTL_AVL_TABLE Table;                                            //0x0
    struct _KMUTANT Mutex;                                                  //0x68
    USHORT LinksOffset;                                                     //0xa0
    USHORT GuidOffset;                                                      //0xa2
    UCHAR Expired;                                                          //0xa4
}; 

----------------------------------------
Structure: _KTMOBJECT_NAMESPACE_LINK

//0x28 bytes (sizeof)
struct _KTMOBJECT_NAMESPACE_LINK
{
    struct _RTL_BALANCED_LINKS Links;                                       //0x0
    UCHAR Expired;                                                          //0x20
}; 

----------------------------------------
Structure: _KTRANSACTION

//0x2d8 bytes (sizeof)
struct _KTRANSACTION
{
    struct _KEVENT OutcomeEvent;                                            //0x0
    ULONG cookie;                                                           //0x18
    struct _KMUTANT Mutex;                                                  //0x20
    struct _KTRANSACTION* TreeTx;                                           //0x58
    struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;                   //0x60
    struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;                       //0x88
    struct _GUID UOW;                                                       //0xb0
    enum _KTRANSACTION_STATE State;                                         //0xc0
    ULONG Flags;                                                            //0xc4
    struct _LIST_ENTRY EnlistmentHead;                                      //0xc8
    ULONG EnlistmentCount;                                                  //0xd8
    ULONG RecoverableEnlistmentCount;                                       //0xdc
    ULONG PrePrepareRequiredEnlistmentCount;                                //0xe0
    ULONG PrepareRequiredEnlistmentCount;                                   //0xe4
    ULONG OutcomeRequiredEnlistmentCount;                                   //0xe8
    ULONG PendingResponses;                                                 //0xec
    struct _KENLISTMENT* SuperiorEnlistment;                                //0xf0
    union _CLS_LSN LastLsn;                                                 //0xf8
    struct _LIST_ENTRY PromotedEntry;                                       //0x100
    struct _KTRANSACTION* PromoterTransaction;                              //0x110
    VOID* PromotePropagation;                                               //0x118
    ULONG IsolationLevel;                                                   //0x120
    ULONG IsolationFlags;                                                   //0x124
    union _LARGE_INTEGER Timeout;                                           //0x128
    struct _UNICODE_STRING Description;                                     //0x130
    struct _KTHREAD* RollbackThread;                                        //0x140
    struct _WORK_QUEUE_ITEM RollbackWorkItem;                               //0x148
    struct _KDPC RollbackDpc;                                               //0x168
    struct _KTIMER RollbackTimer;                                           //0x1a8
    struct _LIST_ENTRY LsnOrderedEntry;                                     //0x1e8
    enum _KTRANSACTION_OUTCOME Outcome;                                     //0x1f8
    struct _KTM* Tm;                                                        //0x200
    LONGLONG CommitReservation;                                             //0x208
    struct _KTRANSACTION_HISTORY TransactionHistory[10];                    //0x210
    ULONG TransactionHistoryCount;                                          //0x260
    VOID* DTCPrivateInformation;                                            //0x268
    ULONG DTCPrivateInformationLength;                                      //0x270
    struct _KMUTANT DTCPrivateInformationMutex;                             //0x278
    VOID* PromotedTxSelfHandle;                                             //0x2b0
    ULONG PendingPromotionCount;                                            //0x2b8
    struct _KEVENT PromotionCompletedEvent;                                 //0x2c0
}; 

----------------------------------------
Structure: _KTRANSACTION_HISTORY

//0x8 bytes (sizeof)
struct _KTRANSACTION_HISTORY
{
    enum  RecordType;                                                     //0x0
    ULONG Payload;                                                          //0x4
}; 

----------------------------------------
Structure: _KTRAP_FRAME

//0x190 bytes (sizeof)
struct _KTRAP_FRAME
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    ULONGLONG P5;                                                           //0x20
    union
    {
        CHAR PreviousMode;                                                  //0x28
        UCHAR InterruptRetpolineState;                                      //0x28
    };
    UCHAR PreviousIrql;                                                     //0x29
    union
    {
        UCHAR FaultIndicator;                                               //0x2a
        UCHAR NmiMsrIbrs;                                                   //0x2a
    };
    UCHAR ExceptionActive;                                                  //0x2b
    ULONG MxCsr;                                                            //0x2c
    ULONGLONG Rax;                                                          //0x30
    ULONGLONG Rcx;                                                          //0x38
    ULONGLONG Rdx;                                                          //0x40
    ULONGLONG R8;                                                           //0x48
    ULONGLONG R9;                                                           //0x50
    ULONGLONG R10;                                                          //0x58
    ULONGLONG R11;                                                          //0x60
    union
    {
        ULONGLONG GsBase;                                                   //0x68
        ULONGLONG GsSwap;                                                   //0x68
    };
    struct _M128A Xmm0;                                                     //0x70
    struct _M128A Xmm1;                                                     //0x80
    struct _M128A Xmm2;                                                     //0x90
    struct _M128A Xmm3;                                                     //0xa0
    struct _M128A Xmm4;                                                     //0xb0
    struct _M128A Xmm5;                                                     //0xc0
    union
    {
        ULONGLONG FaultAddress;                                             //0xd0
        ULONGLONG ContextRecord;                                            //0xd0
    };
    ULONGLONG Dr0;                                                          //0xd8
    ULONGLONG Dr1;                                                          //0xe0
    ULONGLONG Dr2;                                                          //0xe8
    ULONGLONG Dr3;                                                          //0xf0
    ULONGLONG Dr6;                                                          //0xf8
    ULONGLONG Dr7;                                                          //0x100
    ULONGLONG DebugControl;                                                 //0x108
    ULONGLONG LastBranchToRip;                                              //0x110
    ULONGLONG LastBranchFromRip;                                            //0x118
    ULONGLONG LastExceptionToRip;                                           //0x120
    ULONGLONG LastExceptionFromRip;                                         //0x128
    USHORT SegDs;                                                           //0x130
    USHORT SegEs;                                                           //0x132
    USHORT SegFs;                                                           //0x134
    USHORT SegGs;                                                           //0x136
    ULONGLONG TrapFrame;                                                    //0x138
    ULONGLONG Rbx;                                                          //0x140
    ULONGLONG Rdi;                                                          //0x148
    ULONGLONG Rsi;                                                          //0x150
    ULONGLONG Rbp;                                                          //0x158
    union
    {
        ULONGLONG ErrorCode;                                                //0x160
        ULONGLONG ExceptionFrame;                                           //0x160
    };
    ULONGLONG Rip;                                                          //0x168
    USHORT SegCs;                                                           //0x170
    UCHAR Fill0;                                                            //0x172
    UCHAR Logging;                                                          //0x173
    USHORT Fill1[2];                                                        //0x174
    ULONG EFlags;                                                           //0x178
    ULONG Fill2;                                                            //0x17c
    ULONGLONG Rsp;                                                          //0x180
    USHORT SegSs;                                                           //0x188
    USHORT Fill3;                                                           //0x18a
    ULONG Fill4;                                                            //0x18c
}; 

----------------------------------------
Structure: _KTSS64

//0x68 bytes (sizeof)
struct _KTSS64
{
    ULONG Reserved0;                                                        //0x0
    ULONGLONG Rsp0;                                                         //0x4
    ULONGLONG Rsp1;                                                         //0xc
    ULONGLONG Rsp2;                                                         //0x14
    ULONGLONG Ist[8];                                                       //0x1c
    ULONGLONG Reserved1;                                                    //0x5c
    USHORT Reserved2;                                                       //0x64
    USHORT IoMapBase;                                                       //0x66
}; 

----------------------------------------
Structure: _KUMS_CONTEXT_HEADER

//0x70 bytes (sizeof)
struct _KUMS_CONTEXT_HEADER
{
    ULONGLONG P1Home;                                                       //0x0
    ULONGLONG P2Home;                                                       //0x8
    ULONGLONG P3Home;                                                       //0x10
    ULONGLONG P4Home;                                                       //0x18
    VOID* StackTop;                                                         //0x20
    ULONGLONG StackSize;                                                    //0x28
    ULONGLONG RspOffset;                                                    //0x30
    ULONGLONG Rip;                                                          //0x38
    struct _XSAVE_FORMAT* FltSave;                                          //0x40
    union
    {
        struct
        {
            ULONGLONG Volatile:1;                                           //0x48
            ULONGLONG Reserved:63;                                          //0x48
        };
        ULONGLONG Flags;                                                    //0x48
    };
    struct _KTRAP_FRAME* TrapFrame;                                         //0x50
    struct _KEXCEPTION_FRAME* ExceptionFrame;                               //0x58
    struct _KTHREAD* SourceThread;                                          //0x60
    ULONGLONG Return;                                                       //0x68
}; 

----------------------------------------
Structure: _KUSER_SHARED_DATA

//0x720 bytes (sizeof)
struct _KUSER_SHARED_DATA
{
    ULONG TickCountLowDeprecated;                                           //0x0
    ULONG TickCountMultiplier;                                              //0x4
    volatile struct _KSYSTEM_TIME InterruptTime;                            //0x8
    volatile struct _KSYSTEM_TIME SystemTime;                               //0x14
    volatile struct _KSYSTEM_TIME TimeZoneBias;                             //0x20
    USHORT ImageNumberLow;                                                  //0x2c
    USHORT ImageNumberHigh;                                                 //0x2e
    WCHAR NtSystemRoot[260];                                                //0x30
    ULONG MaxStackTraceDepth;                                               //0x238
    ULONG CryptoExponent;                                                   //0x23c
    ULONG TimeZoneId;                                                       //0x240
    ULONG LargePageMinimum;                                                 //0x244
    ULONG AitSamplingValue;                                                 //0x248
    ULONG AppCompatFlag;                                                    //0x24c
    ULONGLONG RNGSeedVersion;                                               //0x250
    ULONG GlobalValidationRunlevel;                                         //0x258
    volatile LONG TimeZoneBiasStamp;                                        //0x25c
    ULONG NtBuildNumber;                                                    //0x260
    enum _NT_PRODUCT_TYPE NtProductType;                                    //0x264
    UCHAR ProductTypeIsValid;                                               //0x268
    UCHAR Reserved0[1];                                                     //0x269
    USHORT NativeProcessorArchitecture;                                     //0x26a
    ULONG NtMajorVersion;                                                   //0x26c
    ULONG NtMinorVersion;                                                   //0x270
    UCHAR ProcessorFeatures[64];                                            //0x274
    ULONG Reserved1;                                                        //0x2b4
    ULONG Reserved3;                                                        //0x2b8
    volatile ULONG TimeSlip;                                                //0x2bc
    enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;            //0x2c0
    ULONG BootId;                                                           //0x2c4
    union _LARGE_INTEGER SystemExpirationDate;                              //0x2c8
    ULONG SuiteMask;                                                        //0x2d0
    UCHAR KdDebuggerEnabled;                                                //0x2d4
    union
    {
        UCHAR MitigationPolicies;                                           //0x2d5
        struct
        {
            UCHAR NXSupportPolicy:2;                                        //0x2d5
            UCHAR SEHValidationPolicy:2;                                    //0x2d5
            UCHAR CurDirDevicesSkippedForDlls:2;                            //0x2d5
            UCHAR Reserved:2;                                               //0x2d5
        };
    };
    USHORT CyclesPerYield;                                                  //0x2d6
    volatile ULONG ActiveConsoleId;                                         //0x2d8
    volatile ULONG DismountCount;                                           //0x2dc
    ULONG ComPlusPackage;                                                   //0x2e0
    ULONG LastSystemRITEventTickCount;                                      //0x2e4
    ULONG NumberOfPhysicalPages;                                            //0x2e8
    UCHAR SafeBootMode;                                                     //0x2ec
    UCHAR VirtualizationFlags;                                              //0x2ed
    UCHAR Reserved12[2];                                                    //0x2ee
    union
    {
        ULONG SharedDataFlags;                                              //0x2f0
        struct
        {
            ULONG DbgErrorPortPresent:1;                                    //0x2f0
            ULONG DbgElevationEnabled:1;                                    //0x2f0
            ULONG DbgVirtEnabled:1;                                         //0x2f0
            ULONG DbgInstallerDetectEnabled:1;                              //0x2f0
            ULONG DbgLkgEnabled:1;                                          //0x2f0
            ULONG DbgDynProcessorEnabled:1;                                 //0x2f0
            ULONG DbgConsoleBrokerEnabled:1;                                //0x2f0
            ULONG DbgSecureBootEnabled:1;                                   //0x2f0
            ULONG DbgMultiSessionSku:1;                                     //0x2f0
            ULONG DbgMultiUsersInSessionSku:1;                              //0x2f0
            ULONG DbgStateSeparationEnabled:1;                              //0x2f0
            ULONG SpareBits:21;                                             //0x2f0
        };
    };
    ULONG DataFlagsPad[1];                                                  //0x2f4
    ULONGLONG TestRetInstruction;                                           //0x2f8
    LONGLONG QpcFrequency;                                                  //0x300
    ULONG SystemCall;                                                       //0x308
    ULONG Reserved2;                                                        //0x30c
    ULONGLONG SystemCallPad[2];                                             //0x310
    union
    {
        volatile struct _KSYSTEM_TIME TickCount;                            //0x320
        volatile ULONGLONG TickCountQuad;                                   //0x320
        ULONG ReservedTickCountOverlay[3];                                  //0x320
    };
    ULONG TickCountPad[1];                                                  //0x32c
    ULONG Cookie;                                                           //0x330
    ULONG CookiePad[1];                                                     //0x334
    LONGLONG ConsoleSessionForegroundProcessId;                             //0x338
    ULONGLONG TimeUpdateLock;                                               //0x340
    ULONGLONG BaselineSystemTimeQpc;                                        //0x348
    ULONGLONG BaselineInterruptTimeQpc;                                     //0x350
    ULONGLONG QpcSystemTimeIncrement;                                       //0x358
    ULONGLONG QpcInterruptTimeIncrement;                                    //0x360
    UCHAR QpcSystemTimeIncrementShift;                                      //0x368
    UCHAR QpcInterruptTimeIncrementShift;                                   //0x369
    USHORT UnparkedProcessorCount;                                          //0x36a
    ULONG EnclaveFeatureMask[4];                                            //0x36c
    ULONG TelemetryCoverageRound;                                           //0x37c
    USHORT UserModeGlobalLogger[16];                                        //0x380
    ULONG ImageFileExecutionOptions;                                        //0x3a0
    ULONG LangGenerationCount;                                              //0x3a4
    ULONGLONG Reserved4;                                                    //0x3a8
    volatile ULONGLONG InterruptTimeBias;                                   //0x3b0
    volatile ULONGLONG QpcBias;                                             //0x3b8
    ULONG ActiveProcessorCount;                                             //0x3c0
    volatile UCHAR ActiveGroupCount;                                        //0x3c4
    UCHAR Reserved9;                                                        //0x3c5
    union
    {
        USHORT QpcData;                                                     //0x3c6
        struct
        {
            volatile UCHAR QpcBypassEnabled;                                //0x3c6
            UCHAR QpcShift;                                                 //0x3c7
        };
    };
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;                        //0x3c8
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;                          //0x3d0
    struct _XSTATE_CONFIGURATION XState;                                    //0x3d8
    struct _KSYSTEM_TIME FeatureConfigurationChangeStamp;                   //0x710
    ULONG Spare;                                                            //0x71c
}; 

----------------------------------------
Structure: _KWAIT_BLOCK

//0x30 bytes (sizeof)
struct _KWAIT_BLOCK
{
    struct _LIST_ENTRY WaitListEntry;                                       //0x0
    UCHAR WaitType;                                                         //0x10
    volatile UCHAR BlockState;                                              //0x11
    USHORT WaitKey;                                                         //0x12
    LONG SpareLong;                                                         //0x14
    union
    {
        struct _KTHREAD* Thread;                                            //0x18
        struct _KQUEUE* NotificationQueue;                                  //0x18
    };
    VOID* Object;                                                           //0x20
    VOID* SparePtr;                                                         //0x28
}; 

----------------------------------------
Structure: _KWAIT_CHAIN

//0x8 bytes (sizeof)
struct _KWAIT_CHAIN
{
    VOID* Head;                                                             //0x0
}; 

----------------------------------------
Structure: _KWAIT_CHAIN_ENTRY

//0x30 bytes (sizeof)
struct _KWAIT_CHAIN_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _KTHREAD* Thread;                                                //0x10
    struct _KEVENT Event;                                                   //0x18
}; 

----------------------------------------
Structure: _LAZY_WRITER

//0x88 bytes (sizeof)
struct _LAZY_WRITER
{
    struct _KDPC ScanDpc;                                                   //0x0
    struct _KTIMER ScanTimer;                                               //0x40
    UCHAR ScanActive;                                                       //0x80
    UCHAR OtherWork;                                                        //0x81
    UCHAR PendingTeardownScan;                                              //0x82
    UCHAR PendingPeriodicScan;                                              //0x83
    UCHAR PendingLowMemoryScan;                                             //0x84
    UCHAR PendingPowerScan;                                                 //0x85
    UCHAR PendingCoalescingFlushScan;                                       //0x86
}; 

----------------------------------------
Structure: _LDRP_CSLIST

//0x8 bytes (sizeof)
struct _LDRP_CSLIST
{
    struct _SINGLE_LIST_ENTRY* Tail;                                        //0x0
}; 

----------------------------------------
Structure: _LDRP_LOAD_CONTEXT

//0x0 bytes (sizeof)
struct _LDRP_LOAD_CONTEXT; 

----------------------------------------
Structure: _LDR_DATA_TABLE_ENTRY

//0x120 bytes (sizeof)
struct _LDR_DATA_TABLE_ENTRY
{
    struct _LIST_ENTRY InLoadOrderLinks;                                    //0x0
    struct _LIST_ENTRY InMemoryOrderLinks;                                  //0x10
    struct _LIST_ENTRY InInitializationOrderLinks;                          //0x20
    VOID* DllBase;                                                          //0x30
    VOID* EntryPoint;                                                       //0x38
    ULONG SizeOfImage;                                                      //0x40
    struct _UNICODE_STRING FullDllName;                                     //0x48
    struct _UNICODE_STRING BaseDllName;                                     //0x58
    union
    {
        UCHAR FlagGroup[4];                                                 //0x68
        ULONG Flags;                                                        //0x68
        struct
        {
            ULONG PackagedBinary:1;                                         //0x68
            ULONG MarkedForRemoval:1;                                       //0x68
            ULONG ImageDll:1;                                               //0x68
            ULONG LoadNotificationsSent:1;                                  //0x68
            ULONG TelemetryEntryProcessed:1;                                //0x68
            ULONG ProcessStaticImport:1;                                    //0x68
            ULONG InLegacyLists:1;                                          //0x68
            ULONG InIndexes:1;                                              //0x68
            ULONG ShimDll:1;                                                //0x68
            ULONG InExceptionTable:1;                                       //0x68
            ULONG ReservedFlags1:2;                                         //0x68
            ULONG LoadInProgress:1;                                         //0x68
            ULONG LoadConfigProcessed:1;                                    //0x68
            ULONG EntryProcessed:1;                                         //0x68
            ULONG ProtectDelayLoad:1;                                       //0x68
            ULONG ReservedFlags3:2;                                         //0x68
            ULONG DontCallForThreads:1;                                     //0x68
            ULONG ProcessAttachCalled:1;                                    //0x68
            ULONG ProcessAttachFailed:1;                                    //0x68
            ULONG CorDeferredValidate:1;                                    //0x68
            ULONG CorImage:1;                                               //0x68
            ULONG DontRelocate:1;                                           //0x68
            ULONG CorILOnly:1;                                              //0x68
            ULONG ChpeImage:1;                                              //0x68
            ULONG ReservedFlags5:2;                                         //0x68
            ULONG Redirected:1;                                             //0x68
            ULONG ReservedFlags6:2;                                         //0x68
            ULONG CompatDatabaseProcessed:1;                                //0x68
        };
    };
    USHORT ObsoleteLoadCount;                                               //0x6c
    USHORT TlsIndex;                                                        //0x6e
    struct _LIST_ENTRY HashLinks;                                           //0x70
    ULONG TimeDateStamp;                                                    //0x80
    struct _ACTIVATION_CONTEXT* EntryPointActivationContext;                //0x88
    VOID* Lock;                                                             //0x90
    struct _LDR_DDAG_NODE* DdagNode;                                        //0x98
    struct _LIST_ENTRY NodeModuleLink;                                      //0xa0
    struct _LDRP_LOAD_CONTEXT* LoadContext;                                 //0xb0
    VOID* ParentDllBase;                                                    //0xb8
    VOID* SwitchBackContext;                                                //0xc0
    struct _RTL_BALANCED_NODE BaseAddressIndexNode;                         //0xc8
    struct _RTL_BALANCED_NODE MappingInfoIndexNode;                         //0xe0
    ULONGLONG OriginalBase;                                                 //0xf8
    union _LARGE_INTEGER LoadTime;                                          //0x100
    ULONG BaseNameHashValue;                                                //0x108
    enum _LDR_DLL_LOAD_REASON LoadReason;                                   //0x10c
    ULONG ImplicitPathOptions;                                              //0x110
    ULONG ReferenceCount;                                                   //0x114
    ULONG DependentLoadFlags;                                               //0x118
    UCHAR SigningLevel;                                                     //0x11c
}; 

----------------------------------------
Structure: _LDR_DDAG_NODE

//0x50 bytes (sizeof)
struct _LDR_DDAG_NODE
{
    struct _LIST_ENTRY Modules;                                             //0x0
    struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;                         //0x10
    ULONG LoadCount;                                                        //0x18
    ULONG LoadWhileUnloadingCount;                                          //0x1c
    ULONG LowestLink;                                                       //0x20
    struct _LDRP_CSLIST Dependencies;                                       //0x28
    struct _LDRP_CSLIST IncomingDependencies;                               //0x30
    enum _LDR_DDAG_STATE State;                                             //0x38
    struct _SINGLE_LIST_ENTRY CondenseLink;                                 //0x40
    ULONG PreorderNumber;                                                   //0x48
}; 

----------------------------------------
Structure: _LDR_SERVICE_TAG_RECORD

//0x10 bytes (sizeof)
struct _LDR_SERVICE_TAG_RECORD
{
    struct _LDR_SERVICE_TAG_RECORD* Next;                                   //0x0
    ULONG ServiceTag;                                                       //0x8
}; 

----------------------------------------
Structure: _LEAP_SECOND_DATA

//0x10 bytes (sizeof)
struct _LEAP_SECOND_DATA
{
    UCHAR Enabled;                                                          //0x0
    ULONG Count;                                                            //0x4
    union _LARGE_INTEGER Data[1];                                           //0x8
}; 

----------------------------------------
Structure: _LEARNING_MODE_DATA

//0x8 bytes (sizeof)
struct _LEARNING_MODE_DATA
{
    ULONG Settings;                                                         //0x0
    UCHAR Enabled;                                                          //0x4
    UCHAR PermissiveModeEnabled;                                            //0x5
}; 

----------------------------------------
Structure: _LIST_ENTRY

//0x10 bytes (sizeof)
struct _LIST_ENTRY
{
    struct _LIST_ENTRY* Flink;                                              //0x0
    struct _LIST_ENTRY* Blink;                                              //0x8
}; 

----------------------------------------
Structure: _LOADER_BUGCHECK_PARAMETERS

//0x28 bytes (sizeof)
struct _LOADER_BUGCHECK_PARAMETERS
{
    ULONG BugcheckCode;                                                     //0x0
    ULONGLONG BugcheckParameter1;                                           //0x8
    ULONGLONG BugcheckParameter2;                                           //0x10
    ULONGLONG BugcheckParameter3;                                           //0x18
    ULONGLONG BugcheckParameter4;                                           //0x20
}; 

----------------------------------------
Structure: _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION

//0x18 bytes (sizeof)
struct _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION
{
    UCHAR OriginalBootStatus;                                               //0x0
    UCHAR NewBootStatus;                                                    //0x1
    UCHAR ConfigurationLoaded;                                              //0x2
    UCHAR Spare;                                                            //0x3
    union
    {
        ULONG AllFlags;                                                     //0x4
        ULONG LkgSupported:1;                                               //0x4
        ULONG FinalBootBeforeRecovery:1;                                    //0x4
        ULONG ConfigurationComparisonAttempted:1;                           //0x4
        ULONG CurrentConfigurationLoadAttempted:1;                          //0x4
        ULONG LkgConfigurationLoadAttempted:1;                              //0x4
        ULONG UsageSubscriptionLoadAttempted:1;                             //0x4
        ULONG Spare:26;                                                     //0x4
    } Flags;                                                                //0x4
    LONG ConfigurationComparisonStatus;                                     //0x8
    LONG CurrentConfigurationLoadStatus;                                    //0xc
    LONG LkgConfigurationLoadStatus;                                        //0x10
    LONG UsageSubscriptionLoadStatus;                                       //0x14
}; 

----------------------------------------
Structure: _LOADER_FEATURE_CONFIGURATION_INFORMATION

//0x48 bytes (sizeof)
struct _LOADER_FEATURE_CONFIGURATION_INFORMATION
{
    VOID* FeatureConfigurationBuffer;                                       //0x0
    ULONGLONG FeatureConfigurationBufferSize;                               //0x8
    VOID* UsageSubscriptionBuffer;                                          //0x10
    ULONGLONG UsageSubscriptionBufferSize;                                  //0x18
    VOID* DelayedUsageReportBuffer;                                         //0x20
    ULONGLONG DelayedUsageReportBufferSize;                                 //0x28
    struct _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION DiagnosticInformation; //0x30
}; 

----------------------------------------
Structure: _LOADER_HIVE_RECOVERY_INFO

//0x14 bytes (sizeof)
struct _LOADER_HIVE_RECOVERY_INFO
{
    ULONG Recovered:1;                                                      //0x0
    ULONG LegacyRecovery:1;                                                 //0x0
    ULONG SoftRebootConflict:1;                                             //0x0
    ULONG MostRecentLog:3;                                                  //0x0
    ULONG Spare:27;                                                         //0x4
    ULONG LogNextSequence;                                                  //0x8
    ULONG LogMinimumSequence;                                               //0xc
    ULONG LogCurrentOffset;                                                 //0x10
}; 

----------------------------------------
Structure: _LOADER_PARAMETER_BLOCK

//0x160 bytes (sizeof)
struct _LOADER_PARAMETER_BLOCK
{
    ULONG OsMajorVersion;                                                   //0x0
    ULONG OsMinorVersion;                                                   //0x4
    ULONG Size;                                                             //0x8
    ULONG OsLoaderSecurityVersion;                                          //0xc
    struct _LIST_ENTRY LoadOrderListHead;                                   //0x10
    struct _LIST_ENTRY MemoryDescriptorListHead;                            //0x20
    struct _LIST_ENTRY BootDriverListHead;                                  //0x30
    struct _LIST_ENTRY EarlyLaunchListHead;                                 //0x40
    struct _LIST_ENTRY CoreDriverListHead;                                  //0x50
    struct _LIST_ENTRY CoreExtensionsDriverListHead;                        //0x60
    struct _LIST_ENTRY TpmCoreDriverListHead;                               //0x70
    ULONGLONG KernelStack;                                                  //0x80
    ULONGLONG Prcb;                                                         //0x88
    ULONGLONG Process;                                                      //0x90
    ULONGLONG Thread;                                                       //0x98
    ULONG KernelStackSize;                                                  //0xa0
    ULONG RegistryLength;                                                   //0xa4
    VOID* RegistryBase;                                                     //0xa8
    struct _CONFIGURATION_COMPONENT_DATA* ConfigurationRoot;                //0xb0
    CHAR* ArcBootDeviceName;                                                //0xb8
    CHAR* ArcHalDeviceName;                                                 //0xc0
    CHAR* NtBootPathName;                                                   //0xc8
    CHAR* NtHalPathName;                                                    //0xd0
    CHAR* LoadOptions;                                                      //0xd8
    struct _NLS_DATA_BLOCK* NlsData;                                        //0xe0
    struct _ARC_DISK_INFORMATION* ArcDiskInformation;                       //0xe8
    struct _LOADER_PARAMETER_EXTENSION* Extension;                          //0xf0
    union
    {
        struct _I386_LOADER_BLOCK I386;                                     //0xf8
        struct _ARM_LOADER_BLOCK Arm;                                       //0xf8
    } u;                                                                    //0xf8
    struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;          //0x108
    CHAR* OsBootstatPathName;                                               //0x148
    CHAR* ArcOSDataDeviceName;                                              //0x150
    CHAR* ArcWindowsSysPartName;                                            //0x158
}; 

----------------------------------------
Structure: _LOADER_PARAMETER_CI_EXTENSION

//0x50 bytes (sizeof)
struct _LOADER_PARAMETER_CI_EXTENSION
{
    ULONG CodeIntegrityOptions;                                             //0x0
    ULONG UpgradeInProgress:1;                                              //0x4
    ULONG IsWinPE:1;                                                        //0x4
    ULONG CustomKernelSignersAllowed:1;                                     //0x4
    ULONG StateSeparationEnabled:1;                                         //0x4
    ULONG Reserved:28;                                                      //0x4
    union _LARGE_INTEGER WhqlEnforcementDate;                               //0x8
    ULONG RevocationListOffset;                                             //0x10
    ULONG RevocationListSize;                                               //0x14
    ULONG CodeIntegrityPolicyOffset;                                        //0x18
    ULONG CodeIntegrityPolicySize;                                          //0x1c
    ULONG CodeIntegrityPolicyHashOffset;                                    //0x20
    ULONG CodeIntegrityPolicyHashSize;                                      //0x24
    ULONG CodeIntegrityPolicyOriginalHashOffset;                            //0x28
    ULONG CodeIntegrityPolicyOriginalHashSize;                              //0x2c
    LONG WeakCryptoPolicyLoadStatus;                                        //0x30
    ULONG WeakCryptoPolicyOffset;                                           //0x34
    ULONG WeakCryptoPolicySize;                                             //0x38
    ULONG SecureBootPolicyOffset;                                           //0x3c
    ULONG SecureBootPolicySize;                                             //0x40
    ULONG Reserved2;                                                        //0x44
    UCHAR SerializedData[1];                                                //0x48
}; 

----------------------------------------
Structure: _LOADER_PARAMETER_EXTENSION

//0xe38 bytes (sizeof)
struct _LOADER_PARAMETER_EXTENSION
{
    ULONG Size;                                                             //0x0
    struct _PROFILE_PARAMETER_BLOCK Profile;                                //0x4
    VOID* EmInfFileImage;                                                   //0x18
    ULONG EmInfFileSize;                                                    //0x20
    VOID* TriageDumpBlock;                                                  //0x28
    struct _HEADLESS_LOADER_BLOCK* HeadlessLoaderBlock;                     //0x30
    struct _SMBIOS3_TABLE_HEADER* SMBiosEPSHeader;                          //0x38
    VOID* DrvDBImage;                                                       //0x40
    ULONG DrvDBSize;                                                        //0x48
    VOID* DrvDBPatchImage;                                                  //0x50
    ULONG DrvDBPatchSize;                                                   //0x58
    struct _NETWORK_LOADER_BLOCK* NetworkLoaderBlock;                       //0x60
    struct _LIST_ENTRY FirmwareDescriptorListHead;                          //0x68
    VOID* AcpiTable;                                                        //0x78
    ULONG AcpiTableSize;                                                    //0x80
    ULONG LastBootSucceeded:1;                                              //0x84
    ULONG LastBootShutdown:1;                                               //0x84
    ULONG IoPortAccessSupported:1;                                          //0x84
    ULONG BootDebuggerActive:1;                                             //0x84
    ULONG StrongCodeGuarantees:1;                                           //0x84
    ULONG HardStrongCodeGuarantees:1;                                       //0x84
    ULONG SidSharingDisabled:1;                                             //0x84
    ULONG TpmInitialized:1;                                                 //0x84
    ULONG VsmConfigured:1;                                                  //0x84
    ULONG IumEnabled:1;                                                     //0x84
    ULONG IsSmbboot:1;                                                      //0x84
    ULONG BootLogEnabled:1;                                                 //0x84
    ULONG DriverVerifierEnabled:1;                                          //0x84
    ULONG SuppressMonitorX:1;                                               //0x84
    ULONG KernelCetEnabled:1;                                               //0x84
    ULONG SuppressSmap:1;                                                   //0x84
    ULONG Unused:5;                                                         //0x84
    ULONG FeatureSimulations:6;                                             //0x84
    ULONG MicrocodeSelfHosting:1;                                           //0x84
    ULONG XhciLegacyHandoffSkip:1;                                          //0x84
    ULONG DisableInsiderOptInHVCI:1;                                        //0x84
    ULONG MicrocodeMinVerSupported:1;                                       //0x84
    ULONG GpuIommuEnabled:1;                                                //0x84
    struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;                  //0x88
    struct _LIST_ENTRY BootApplicationPersistentData;                       //0xe8
    VOID* WmdTestResult;                                                    //0xf8
    struct _GUID BootIdentifier;                                            //0x100
    ULONG ResumePages;                                                      //0x110
    VOID* DumpHeader;                                                       //0x118
    VOID* BgContext;                                                        //0x120
    VOID* NumaLocalityInfo;                                                 //0x128
    VOID* NumaGroupAssignment;                                              //0x130
    struct _LIST_ENTRY AttachedHives;                                       //0x138
    ULONG MemoryCachingRequirementsCount;                                   //0x148
    VOID* MemoryCachingRequirements;                                        //0x150
    struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;                      //0x158
    ULONGLONG ProcessorCounterFrequency;                                    //0x9c0
    struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;      //0x9c8
    struct _GUID HardwareConfigurationId;                                   //0xa08
    struct _LIST_ENTRY HalExtensionModuleList;                              //0xa18
    union _LARGE_INTEGER SystemTime;                                        //0xa28
    ULONGLONG TimeStampAtSystemTimeRead;                                    //0xa30
    union
    {
        ULONGLONG BootFlags;                                                //0xa38
        struct
        {
            ULONGLONG DbgMenuOsSelection:1;                                 //0xa38
            ULONGLONG DbgHiberBoot:1;                                       //0xa38
            ULONGLONG DbgSoftRestart:1;                                     //0xa38
            ULONGLONG DbgMeasuredLaunch:1;                                  //0xa38
        };
    };
    union
    {
        ULONGLONG InternalBootFlags;                                        //0xa40
        struct
        {
            ULONGLONG DbgUtcBootTime:1;                                     //0xa40
            ULONGLONG DbgRtcBootTime:1;                                     //0xa40
            ULONGLONG DbgNoLegacyServices:1;                                //0xa40
        };
    };
    VOID* WfsFPData;                                                        //0xa48
    ULONG WfsFPDataSize;                                                    //0xa50
    struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;                  //0xa58
    VOID* ApiSetSchema;                                                     //0xa80
    ULONG ApiSetSchemaSize;                                                 //0xa88
    struct _LIST_ENTRY ApiSetSchemaExtensions;                              //0xa90
    struct _UNICODE_STRING AcpiBiosVersion;                                 //0xaa0
    struct _UNICODE_STRING SmbiosVersion;                                   //0xab0
    struct _UNICODE_STRING EfiVersion;                                      //0xac0
    struct _DEBUG_DEVICE_DESCRIPTOR* KdDebugDevice;                         //0xad0
    struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable; //0xad8
    struct _UNICODE_STRING ManufacturingProfile;                            //0xaf8
    VOID* BbtBuffer;                                                        //0xb08
    ULONGLONG XsaveAllowedFeatures;                                         //0xb10
    ULONG XsaveFlags;                                                       //0xb18
    VOID* BootOptions;                                                      //0xb20
    ULONG IumEnablement;                                                    //0xb28
    ULONG IumPolicy;                                                        //0xb2c
    LONG IumStatus;                                                         //0xb30
    ULONG BootId;                                                           //0xb34
    struct _LOADER_PARAMETER_CI_EXTENSION* CodeIntegrityData;               //0xb38
    ULONG CodeIntegrityDataSize;                                            //0xb40
    struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;               //0xb44
    ULONG SoftRestartCount;                                                 //0xb58
    LONGLONG SoftRestartTime;                                               //0xb60
    VOID* HypercallCodeVa;                                                  //0xb68
    VOID* HalVirtualAddress;                                                //0xb70
    ULONGLONG HalNumberOfBytes;                                             //0xb78
    struct _LEAP_SECOND_DATA* LeapSecondData;                               //0xb80
    ULONG MajorRelease;                                                     //0xb88
    ULONG Reserved1;                                                        //0xb8c
    CHAR NtBuildLab[224];                                                   //0xb90
    CHAR NtBuildLabEx[224];                                                 //0xc70
    struct _LOADER_RESET_REASON ResetReason;                                //0xd50
    ULONG MaxPciBusNumber;                                                  //0xd80
    ULONG FeatureSettings;                                                  //0xd84
    ULONG HotPatchReserveSize;                                              //0xd88
    ULONG RetpolineReserveSize;                                             //0xd8c
    struct
    {
        VOID* CodeBase;                                                     //0xd90
        ULONGLONG CodeSize;                                                 //0xd98
    } MiniExecutive;                                                        //0xd90
    struct _VSM_PERFORMANCE_DATA VsmPerformanceData;                        //0xda0
    struct _NUMA_MEMORY_RANGE* NumaMemoryRanges;                            //0xde0
    ULONG NumaMemoryRangeCount;                                             //0xde8
    ULONG IommuFaultPolicy;                                                 //0xdec
    struct _LOADER_FEATURE_CONFIGURATION_INFORMATION FeatureConfigurationInformation; //0xdf0
}; 

----------------------------------------
Structure: _LOADER_PARAMETER_HYPERVISOR_EXTENSION

//0x40 bytes (sizeof)
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION
{
    ULONG InitialHypervisorCrashdumpAreaPageCount;                          //0x0
    ULONG HypervisorCrashdumpAreaPageCount;                                 //0x4
    ULONGLONG InitialHypervisorCrashdumpAreaSpa;                            //0x8
    ULONGLONG HypervisorCrashdumpAreaSpa;                                   //0x10
    ULONGLONG HypervisorLaunchStatus;                                       //0x18
    ULONGLONG HypervisorLaunchStatusArg1;                                   //0x20
    ULONGLONG HypervisorLaunchStatusArg2;                                   //0x28
    ULONGLONG HypervisorLaunchStatusArg3;                                   //0x30
    ULONGLONG HypervisorLaunchStatusArg4;                                   //0x38
}; 

----------------------------------------
Structure: _LOADER_PERFORMANCE_DATA

//0x60 bytes (sizeof)
struct _LOADER_PERFORMANCE_DATA
{
    ULONGLONG StartTime;                                                    //0x0
    ULONGLONG EndTime;                                                      //0x8
    ULONGLONG PreloadEndTime;                                               //0x10
    ULONGLONG TcbLoaderStartTime;                                           //0x18
    ULONGLONG LoadHypervisorTime;                                           //0x20
    ULONGLONG LaunchHypervisorTime;                                         //0x28
    ULONGLONG LoadVsmTime;                                                  //0x30
    ULONGLONG LaunchVsmTime;                                                //0x38
    ULONGLONG ExecuteTransitionStartTime;                                   //0x40
    ULONGLONG ExecuteTransitionEndTime;                                     //0x48
    ULONGLONG LoadDriversTime;                                              //0x50
    ULONGLONG CleanupVsmTime;                                               //0x58
}; 

----------------------------------------
Structure: _LOADER_RESET_REASON

//0x30 bytes (sizeof)
struct _LOADER_RESET_REASON
{
    UCHAR Supplied;                                                         //0x0
    union
    {
        struct
        {
            UCHAR Pch;                                                      //0x8
            UCHAR EmbeddedController;                                       //0x9
            UCHAR Reserved[6];                                              //0xa
        } Component;                                                        //0x8
        ULONGLONG AsULONG64;                                                //0x8
        UCHAR AsBytes[8];                                                   //0x8
    } Basic;                                                                //0x8
    ULONG AdditionalInfo[8];                                                //0x10
}; 

----------------------------------------
Structure: _LOCAL_NMISOURCE

//0x6 bytes (sizeof)
struct _LOCAL_NMISOURCE
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ProcessorID;                                                      //0x2
    USHORT Flags;                                                           //0x3
    UCHAR LINTIN;                                                           //0x5
}; 

----------------------------------------
Structure: _LOCK_HEADER

//0x28 bytes (sizeof)
struct _LOCK_HEADER
{
    struct _RTL_AVL_TREE LockTree;                                          //0x0
    struct _RTL_AVL_TREE LockMdlSwitchedTree;                               //0x8
    ULONGLONG Count;                                                        //0x10
    ULONGLONG Lock;                                                         //0x18
    ULONG Valid;                                                            //0x20
}; 

----------------------------------------
Structure: _LOCK_TRACKER

//0x90 bytes (sizeof)
struct _LOCK_TRACKER
{
    struct _RTL_BALANCED_NODE LockTrackerNode;                              //0x0
    struct _MDL* Mdl;                                                       //0x18
    VOID* StartVa;                                                          //0x20
    ULONGLONG Count;                                                        //0x28
    ULONG Offset;                                                           //0x30
    ULONG Length;                                                           //0x34
    ULONG Who;                                                              //0x38
    ULONG Hash;                                                             //0x3c
    ULONGLONG Page;                                                         //0x40
    VOID* StackTrace[8];                                                    //0x48
    struct _EPROCESS* Process;                                              //0x88
}; 

----------------------------------------
Structure: _LOGGED_STREAM_CALLBACK_V1

//0x10 bytes (sizeof)
struct _LOGGED_STREAM_CALLBACK_V1
{
    VOID* LogHandle;                                                        //0x0
    VOID (*FlushToLsnRoutine)(VOID* arg1, union _LARGE_INTEGER arg2);       //0x8
}; 

----------------------------------------
Structure: _LOGGED_STREAM_CALLBACK_V2

//0x8 bytes (sizeof)
struct _LOGGED_STREAM_CALLBACK_V2
{
    struct _LOG_HANDLE_CONTEXT* LogHandleContext;                           //0x0
}; 

----------------------------------------
Structure: _LOG_HANDLE_CONTEXT

//0x98 bytes (sizeof)
struct _LOG_HANDLE_CONTEXT
{
    VOID* LogHandle;                                                        //0x0
    VOID (*FlushToLsnRoutine)(VOID* arg1, union _LARGE_INTEGER arg2);       //0x8
    VOID (*QueryLogHandleInfoRoutine)(VOID* arg1, WCHAR* arg2);             //0x10
    struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;                      //0x18
    struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;                      //0x30
    ULONG AdditionalPagesToWrite;                                           //0x68
    ULONG CcLWScanDPThreshold;                                              //0x6c
    union _LARGE_INTEGER LargestLsnForCurrentLWScan;                        //0x70
    struct _FILE_OBJECT* RelatedFileObject;                                 //0x78
    ULONGLONG LargestLsnFileObjectKey;                                      //0x80
    union _LARGE_INTEGER LastLWTimeStamp;                                   //0x88
    ULONG Flags;                                                            //0x90
}; 

----------------------------------------
Structure: _LOOKASIDE_LIST_EX

//0x60 bytes (sizeof)
struct _LOOKASIDE_LIST_EX
{
    struct _GENERAL_LOOKASIDE_POOL L;                                       //0x0
}; 

----------------------------------------
Structure: _LPCP_MESSAGE

//0x50 bytes (sizeof)
struct _LPCP_MESSAGE
{
    union
    {
        struct _LIST_ENTRY Entry;                                           //0x0
        struct
        {
            struct _SINGLE_LIST_ENTRY FreeEntry;                            //0x0
            ULONG Reserved0;                                                //0x8
        };
    };
    VOID* SenderPort;                                                       //0x10
    struct _ETHREAD* RepliedToThread;                                       //0x18
    VOID* PortContext;                                                      //0x20
    struct _PORT_MESSAGE Request;                                           //0x28
}; 

----------------------------------------
Structure: _LPCP_NONPAGED_PORT_QUEUE

//0x28 bytes (sizeof)
struct _LPCP_NONPAGED_PORT_QUEUE
{
    struct _KSEMAPHORE Semaphore;                                           //0x0
    struct _LPCP_PORT_OBJECT* BackPointer;                                  //0x20
}; 

----------------------------------------
Structure: _LPCP_PORT_OBJECT

//0x100 bytes (sizeof)
struct _LPCP_PORT_OBJECT
{
    struct _LPCP_PORT_OBJECT* ConnectionPort;                               //0x0
    struct _LPCP_PORT_OBJECT* ConnectedPort;                                //0x8
    struct _LPCP_PORT_QUEUE MsgQueue;                                       //0x10
    struct _CLIENT_ID Creator;                                              //0x30
    VOID* ClientSectionBase;                                                //0x40
    VOID* ServerSectionBase;                                                //0x48
    VOID* PortContext;                                                      //0x50
    struct _ETHREAD* ClientThread;                                          //0x58
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x60
    struct _SECURITY_CLIENT_CONTEXT StaticSecurity;                         //0x70
    struct _LIST_ENTRY LpcReplyChainHead;                                   //0xb8
    struct _LIST_ENTRY LpcDataInfoChainHead;                                //0xc8
    union
    {
        struct _EPROCESS* ServerProcess;                                    //0xd8
        struct _EPROCESS* MappingProcess;                                   //0xd8
    };
    USHORT MaxMessageLength;                                                //0xe0
    USHORT MaxConnectionInfoLength;                                         //0xe2
    ULONG Flags;                                                            //0xe4
    struct _KEVENT WaitEvent;                                               //0xe8
}; 

----------------------------------------
Structure: _LPCP_PORT_QUEUE

//0x20 bytes (sizeof)
struct _LPCP_PORT_QUEUE
{
    struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;                    //0x0
    struct _KSEMAPHORE* Semaphore;                                          //0x8
    struct _LIST_ENTRY ReceiveHead;                                         //0x10
}; 

----------------------------------------
Structure: _LUID

//0x8 bytes (sizeof)
struct _LUID
{
    ULONG LowPart;                                                          //0x0
    LONG HighPart;                                                          //0x4
}; 

----------------------------------------
Structure: _LUID_AND_ATTRIBUTES

//0xc bytes (sizeof)
struct _LUID_AND_ATTRIBUTES
{
    struct _LUID Luid;                                                      //0x0
    ULONG Attributes;                                                       //0x8
}; 

----------------------------------------
Structure: _M128A

//0x10 bytes (sizeof)
struct _M128A
{
    ULONGLONG Low;                                                          //0x0
    LONGLONG High;                                                          //0x8
}; 

----------------------------------------
Structure: _MACHINE_CHECK_CONTEXT

//0x50 bytes (sizeof)
struct _MACHINE_CHECK_CONTEXT
{
    struct _MACHINE_FRAME MachineFrame;                                     //0x0
    ULONGLONG Rax;                                                          //0x28
    ULONGLONG Rcx;                                                          //0x30
    ULONGLONG Rdx;                                                          //0x38
    ULONGLONG GsBase;                                                       //0x40
    ULONGLONG Cr3;                                                          //0x48
}; 

----------------------------------------
Structure: _MACHINE_FRAME

//0x28 bytes (sizeof)
struct _MACHINE_FRAME
{
    ULONGLONG Rip;                                                          //0x0
    USHORT SegCs;                                                           //0x8
    USHORT Fill1[3];                                                        //0xa
    ULONG EFlags;                                                           //0x10
    ULONG Fill2;                                                            //0x14
    ULONGLONG Rsp;                                                          //0x18
    USHORT SegSs;                                                           //0x20
    USHORT Fill3[3];                                                        //0x22
}; 

----------------------------------------
Structure: _MAILSLOT_CREATE_PARAMETERS

//0x18 bytes (sizeof)
struct _MAILSLOT_CREATE_PARAMETERS
{
    ULONG MailslotQuota;                                                    //0x0
    ULONG MaximumMessageSize;                                               //0x4
    union _LARGE_INTEGER ReadTimeout;                                       //0x8
    UCHAR TimeoutSpecified;                                                 //0x10
}; 

----------------------------------------
Structure: _MAPIC

//0x30 bytes (sizeof)
struct _MAPIC
{
    struct _DESCRIPTION_HEADER Header;                                      //0x0
    ULONG LocalAPICAddress;                                                 //0x24
    ULONG Flags;                                                            //0x28
    ULONG APICTables[1];                                                    //0x2c
}; 

----------------------------------------
Structure: _MAPPED_FILE_SEGMENT

//0x30 bytes (sizeof)
struct _MAPPED_FILE_SEGMENT
{
    struct _CONTROL_AREA* ControlArea;                                      //0x0
    ULONG TotalNumberOfPtes;                                                //0x8
    struct _SEGMENT_FLAGS SegmentFlags;                                     //0xc
    ULONGLONG NumberOfCommittedPages;                                       //0x10
    ULONGLONG SizeOfSegment;                                                //0x18
    union
    {
        struct _MMEXTEND_INFO* ExtendInfo;                                  //0x20
        VOID* BasedAddress;                                                 //0x20
    };
    struct _EX_PUSH_LOCK SegmentLock;                                       //0x28
}; 

----------------------------------------
Structure: _MAP_REGISTER_ENTRY

//0x10 bytes (sizeof)
struct _MAP_REGISTER_ENTRY
{
    VOID* MapRegister;                                                      //0x0
    UCHAR WriteToDevice;                                                    //0x8
}; 

----------------------------------------
Structure: _MBCB

//0xc0 bytes (sizeof)
struct _MBCB
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeIsInZone;                                                     //0x2
    ULONG PagesToWrite;                                                     //0x4
    ULONG DirtyPages;                                                       //0x8
    ULONG Reserved;                                                         //0xc
    struct _LIST_ENTRY BitmapRanges;                                        //0x10
    LONGLONG ResumeWritePage;                                               //0x20
    LONGLONG MostRecentlyDirtiedPage;                                       //0x28
    struct _BITMAP_RANGE BitmapRange1;                                      //0x30
    struct _BITMAP_RANGE BitmapRange2;                                      //0x60
    struct _BITMAP_RANGE BitmapRange3;                                      //0x90
}; 

----------------------------------------
Structure: _MCGEN_TRACE_CONTEXT

//0x48 bytes (sizeof)
struct _MCGEN_TRACE_CONTEXT
{
    ULONGLONG RegistrationHandle;                                           //0x0
    ULONGLONG Logger;                                                       //0x8
    ULONGLONG MatchAnyKeyword;                                              //0x10
    ULONGLONG MatchAllKeyword;                                              //0x18
    ULONG Flags;                                                            //0x20
    ULONG IsEnabled;                                                        //0x24
    UCHAR Level;                                                            //0x28
    UCHAR Reserve;                                                          //0x29
    USHORT EnableBitsCount;                                                 //0x2a
    ULONG* EnableBitMask;                                                   //0x30
    ULONGLONG* EnableKeyWords;                                              //0x38
    UCHAR* EnableLevel;                                                     //0x40
}; 

----------------------------------------
Structure: _MCI_STATUS_AMD_BITS

//0x8 bytes (sizeof)
struct _MCI_STATUS_AMD_BITS
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG ImplementationSpecific2:11;                                   //0x0
    ULONGLONG Poison:1;                                                     //0x0
    ULONGLONG Deferred:1;                                                   //0x0
    ULONGLONG ImplementationSpecific1:12;                                   //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}; 

----------------------------------------
Structure: _MCI_STATUS_BITS_COMMON

//0x8 bytes (sizeof)
struct _MCI_STATUS_BITS_COMMON
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG Reserved:25;                                                  //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}; 

----------------------------------------
Structure: _MCI_STATUS_INTEL_BITS

//0x8 bytes (sizeof)
struct _MCI_STATUS_INTEL_BITS
{
    ULONGLONG McaErrorCode:16;                                              //0x0
    ULONGLONG ModelErrorCode:16;                                            //0x0
    ULONGLONG OtherInfo:5;                                                  //0x0
    ULONGLONG FirmwareUpdateError:1;                                        //0x0
    ULONGLONG CorrectedErrorCount:15;                                       //0x0
    ULONGLONG ThresholdErrorStatus:2;                                       //0x0
    ULONGLONG ActionRequired:1;                                             //0x0
    ULONGLONG Signalling:1;                                                 //0x0
    ULONGLONG ContextCorrupt:1;                                             //0x0
    ULONGLONG AddressValid:1;                                               //0x0
    ULONGLONG MiscValid:1;                                                  //0x0
    ULONGLONG ErrorEnabled:1;                                               //0x0
    ULONGLONG UncorrectedError:1;                                           //0x0
    ULONGLONG StatusOverFlow:1;                                             //0x0
    ULONGLONG Valid:1;                                                      //0x0
}; 

----------------------------------------
Structure: _MCUPDATE_INFO

//0x30 bytes (sizeof)
struct _MCUPDATE_INFO
{
    struct _LIST_ENTRY List;                                                //0x0
    ULONG Status;                                                           //0x10
    ULONGLONG Id;                                                           //0x18
    ULONGLONG VendorScratch[2];                                             //0x20
}; 

----------------------------------------
Structure: _MDL

//0x30 bytes (sizeof)
struct _MDL
{
    struct _MDL* Next;                                                      //0x0
    SHORT Size;                                                             //0x8
    SHORT MdlFlags;                                                         //0xa
    struct _EPROCESS* Process;                                              //0x10
    VOID* MappedSystemVa;                                                   //0x18
    VOID* StartVa;                                                          //0x20
    ULONG ByteCount;                                                        //0x28
    ULONG ByteOffset;                                                       //0x2c
}; 

----------------------------------------
Structure: _MDL

//0x30 bytes (sizeof)
struct _MDL
{
    struct _MDL* Next;                                                      //0x0
    SHORT Size;                                                             //0x8
    SHORT MdlFlags;                                                         //0xa
    struct _EPROCESS* Process;                                              //0x10
    VOID* MappedSystemVa;                                                   //0x18
    VOID* StartVa;                                                          //0x20
    ULONG ByteCount;                                                        //0x28
    ULONG ByteOffset;                                                       //0x2c
}; 

----------------------------------------
Structure: _MEMORY_ALLOCATION_DESCRIPTOR

//0x28 bytes (sizeof)
struct _MEMORY_ALLOCATION_DESCRIPTOR
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    enum _TYPE_OF_MEMORY MemoryType;                                        //0x10
    ULONGLONG BasePage;                                                     //0x18
    ULONGLONG PageCount;                                                    //0x20
}; 

----------------------------------------
Structure: _MIPFNBLINK

//0x8 bytes (sizeof)
struct _MIPFNBLINK
{
    union
    {
        struct
        {
            ULONGLONG Blink:36;                                             //0x0
            ULONGLONG NodeBlinkHigh:20;                                     //0x0
            ULONGLONG TbFlushStamp:4;                                       //0x0
            ULONGLONG Unused:2;                                             //0x0
            ULONGLONG PageBlinkDeleteBit:1;                                 //0x0
            ULONGLONG PageBlinkLockBit:1;                                   //0x0
            ULONGLONG ShareCount:62;                                        //0x0
            ULONGLONG PageShareCountDeleteBit:1;                            //0x0
            ULONGLONG PageShareCountLockBit:1;                              //0x0
        };
        ULONGLONG EntireField;                                              //0x0
        volatile LONGLONG Lock;                                             //0x0
        struct
        {
            ULONGLONG LockNotUsed:62;                                       //0x0
            ULONGLONG DeleteBit:1;                                          //0x0
            ULONGLONG LockBit:1;                                            //0x0
        };
    };
}; 

----------------------------------------
Structure: _MI_ACCESS_LOG_STATE

//0x80 bytes (sizeof)
struct _MI_ACCESS_LOG_STATE
{
    struct _MM_PAGE_ACCESS_INFO_HEADER* volatile CcAccessLog;               //0x0
    struct _WORK_QUEUE_ITEM DisableAccessLogging;                           //0x8
    ULONG Enabled;                                                          //0x28
    ULONG MinLoggingPriority;                                               //0x2c
    ULONGLONG AccessLoggingLock;                                            //0x40
}; 

----------------------------------------
Structure: _MI_ACCESS_VIOLATION_RANGE

//0x28 bytes (sizeof)
struct _MI_ACCESS_VIOLATION_RANGE
{
    struct _RTL_BALANCED_NODE Node;                                         //0x0
    VOID* Va;                                                               //0x18
    VOID* EndVaInclusive;                                                   //0x20
}; 

----------------------------------------
Structure: _MI_ACTIVE_PFN

//0x8 bytes (sizeof)
struct _MI_ACTIVE_PFN
{
    union
    {
        struct
        {
            ULONGLONG Tradable:1;                                           //0x0
            ULONGLONG NonPagedBuddy:43;                                     //0x0
        } Leaf;                                                             //0x0
        struct
        {
            ULONGLONG Tradable:1;                                           //0x0
            ULONGLONG WsleAge:3;                                            //0x0
            ULONGLONG OldestWsleLeafEntries:10;                             //0x0
            ULONGLONG OldestWsleLeafAge:3;                                  //0x0
            ULONGLONG NonPagedBuddy:43;                                     //0x0
        } PageTable;                                                        //0x0
        ULONGLONG EntireActiveField;                                        //0x0
    };
}; 

----------------------------------------
Structure: _MI_ALIGNED_SLIST

//0x40 bytes (sizeof)
struct _MI_ALIGNED_SLIST
{
    union _SLIST_HEADER SList;                                              //0x0
}; 

----------------------------------------
Structure: _MI_AVAILABLE_PAGE_WAIT_STATES

//0x20 bytes (sizeof)
struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
    struct _KEVENT Event;                                                   //0x0
    ULONG EventSets;                                                        //0x18
}; 

----------------------------------------
Structure: _MI_BAD_MEMORY_EVENT_ENTRY

//0x38 bytes (sizeof)
struct _MI_BAD_MEMORY_EVENT_ENTRY
{
    ULONG BugCheckCode;                                                     //0x0
    LONG Active;                                                            //0x4
    ULONG Data;                                                             //0x8
    union _LARGE_INTEGER PhysicalAddress;                                   //0x10
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x18
}; 

----------------------------------------
Structure: _MI_CACHED_PTE

//0x8 bytes (sizeof)
struct _MI_CACHED_PTE
{
    union
    {
        struct
        {
            ULONG GlobalTimeStamp;                                          //0x0
            ULONG PteIndex;                                                 //0x4
        };
        LONGLONG Long;                                                      //0x0
    };
}; 

----------------------------------------
Structure: _MI_CACHED_PTES

//0x48 bytes (sizeof)
struct _MI_CACHED_PTES
{
    struct _MI_CACHED_PTE Bins[8];                                          //0x0
    LONG CachedPteCount;                                                    //0x40
}; 

----------------------------------------
Structure: _MI_CLONE_BLOCK_FLAGS

//0x8 bytes (sizeof)
struct _MI_CLONE_BLOCK_FLAGS
{
    ULONGLONG ActualCloneCommit:59;                                         //0x0
    ULONGLONG CloneProtection:5;                                            //0x0
}; 

----------------------------------------
Structure: _MI_COMBINE_PAGE_LISTHEAD

//0x10 bytes (sizeof)
struct _MI_COMBINE_PAGE_LISTHEAD
{
    struct _RTL_AVL_TREE Table;                                             //0x0
    volatile LONG Lock;                                                     //0x8
}; 

----------------------------------------
Structure: _MI_COMBINE_STATE

//0x20 bytes (sizeof)
struct _MI_COMBINE_STATE
{
    volatile LONG ActiveSpinLock;                                           //0x0
    ULONG CombiningThreadCount;                                             //0x4
    struct _RTL_AVL_TREE ActiveThreadTree;                                  //0x8
    ULONGLONG CommonPageCombineDomain;                                      //0x10
    ULONG CommonCombineDomainAssigned;                                      //0x18
}; 

----------------------------------------
Structure: _MI_COMBINE_WORKITEM

//0x28 bytes (sizeof)
struct _MI_COMBINE_WORKITEM
{
    VOID* NextEntry;                                                        //0x0
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x8
}; 

----------------------------------------
Structure: _MI_COMMON_PAGE_STATE

//0xa8 bytes (sizeof)
struct _MI_COMMON_PAGE_STATE
{
    struct _MMPFN* PageOfOnesPfn;                                           //0x0
    ULONGLONG PageOfOnes;                                                   //0x8
    struct _MMPFN* DummyPagePfn;                                            //0x10
    ULONGLONG DummyPage;                                                    //0x18
    ULONGLONG PageOfZeroes;                                                 //0x20
    VOID* ZeroMapping;                                                      //0x28
    VOID* OnesMapping;                                                      //0x30
    ULONGLONG ZeroCrc;                                                      //0x38
    ULONGLONG OnesCrc;                                                      //0x40
    ULONGLONG BitmapGapFrames[4];                                           //0x48
    ULONGLONG PfnGapFrames[4];                                              //0x68
    ULONGLONG PageTableOfZeroes;                                            //0x88
    struct _MMPTE PdeOfZeroes;                                              //0x90
    ULONGLONG PageTableOfOnes;                                              //0x98
    struct _MMPTE PdeOfOnes;                                                //0xa0
}; 

----------------------------------------
Structure: _MI_CONTROL_AREA_WAIT_BLOCK

//0x28 bytes (sizeof)
struct _MI_CONTROL_AREA_WAIT_BLOCK
{
    struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;                               //0x0
    ULONG WaitReason;                                                       //0x8
    ULONG WaitResponse;                                                     //0xc
    struct _KGATE Gate;                                                     //0x10
}; 

----------------------------------------
Structure: _MI_CROSS_PARTITION_CHARGES

//0x20 bytes (sizeof)
struct _MI_CROSS_PARTITION_CHARGES
{
    ULONGLONG CurrentCharges;                                               //0x0
    ULONGLONG ChargeFailures;                                               //0x8
    ULONGLONG ChargePeak;                                                   //0x10
    ULONGLONG ChargeMinimum;                                                //0x18
}; 

----------------------------------------
Structure: _MI_DEBUGGER_STATE

//0x118 bytes (sizeof)
struct _MI_DEBUGGER_STATE
{
    UCHAR TransientWrite;                                                   //0x0
    UCHAR CodePageEdited;                                                   //0x1
    struct _MMPTE* DebugPte;                                                //0x8
    ULONG PoisonedTb;                                                       //0x10
    volatile LONG InDebugger;                                               //0x14
    VOID* volatile Pfns[32];                                                //0x18
}; 

----------------------------------------
Structure: _MI_DECAY_TIMER_LINK

//0x8 bytes (sizeof)
struct _MI_DECAY_TIMER_LINK
{
    union
    {
        ULONGLONG Long;                                                     //0x0
        struct _MI_DECAY_TIMER_LINKAGE e1;                                  //0x0
    } u1;                                                                   //0x0
}; 

----------------------------------------
Structure: _MI_DECAY_TIMER_LINKAGE

//0x8 bytes (sizeof)
struct _MI_DECAY_TIMER_LINKAGE
{
    ULONGLONG Spare0:1;                                                     //0x0
    ULONGLONG PreviousDecayPfn:31;                                          //0x0
    ULONGLONG Spare1:1;                                                     //0x0
    ULONGLONG NextDecayPfn:31;                                              //0x0
}; 

----------------------------------------
Structure: _MI_DLL_OVERFLOW_AREA

//0x20 bytes (sizeof)
struct _MI_DLL_OVERFLOW_AREA
{
    VOID* RangeStart;                                                       //0x0
    VOID* NextVa;                                                           //0x8
    VOID* RangeStartAbove2gb;                                               //0x10
    VOID* NextVaAbove2gb;                                                   //0x18
}; 

----------------------------------------
Structure: _MI_DRIVER_VA

//0x28 bytes (sizeof)
struct _MI_DRIVER_VA
{
    struct _MI_DRIVER_VA* Next;                                             //0x0
    struct _MMPTE* PointerPte;                                              //0x8
    struct _RTL_BITMAP BitMap;                                              //0x10
    ULONG Hint;                                                             //0x20
    ULONG Flags;                                                            //0x24
}; 

----------------------------------------
Structure: _MI_DYNAMIC_BITMAP

//0x48 bytes (sizeof)
struct _MI_DYNAMIC_BITMAP
{
    struct _RTL_BITMAP_EX Bitmap;                                           //0x0
    ULONGLONG MaximumSize;                                                  //0x10
    ULONGLONG Hint;                                                         //0x18
    VOID* BaseVa;                                                           //0x20
    ULONGLONG SizeTopDown;                                                  //0x28
    ULONGLONG HintTopDown;                                                  //0x30
    VOID* BaseVaTopDown;                                                    //0x38
    ULONGLONG SpinLock;                                                     //0x40
}; 

----------------------------------------
Structure: _MI_ENCLAVE_STATE

//0x48 bytes (sizeof)
struct _MI_ENCLAVE_STATE
{
    struct _RTL_AVL_TREE EnclaveRegions;                                    //0x0
    VOID* EnclaveMetadataPage;                                              //0x8
    struct _RTL_BITMAP* EnclaveMetadataBitMap;                              //0x10
    struct _EX_PUSH_LOCK EnclaveMetadataEntryLock;                          //0x18
    volatile LONG EnclaveMetadataPageLock;                                  //0x20
    struct _LIST_ENTRY EnclaveList;                                         //0x28
    struct _EX_PUSH_LOCK EnclaveListLock;                                   //0x38
    struct _EX_RUNDOWN_REF ShutdownRundown;                                 //0x40
}; 

----------------------------------------
Structure: _MI_ERROR_STATE

//0xc8 bytes (sizeof)
struct _MI_ERROR_STATE
{
    struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;                  //0x0
    ULONGLONG PageOfInterest;                                               //0x38
    struct _MI_PROBE_RAISE_TRACKER ProbeRaises;                             //0x40
    struct _MI_FORCED_COMMITS ForcedCommits;                                //0x84
    ULONG WsleFailures[1];                                                  //0x8c
    ULONG PageHashErrors;                                                   //0x90
    ULONG CheckZeroCount;                                                   //0x94
    volatile LONG ZeroedPageSingleBitErrorsDetected;                        //0x98
    volatile LONG BadPagesDetected;                                         //0x9c
    LONG ScrubPasses;                                                       //0xa0
    LONG ScrubBadPagesFound;                                                //0xa4
    ULONG UserViewFailures;                                                 //0xa8
    ULONG UserViewCollisionFailures;                                        //0xac
    ULONG UserAllocateFailures;                                             //0xb0
    ULONG UserAllocateCollisionFailures;                                    //0xb4
    struct _MI_RESAVAIL_FAILURES ResavailFailures;                          //0xb8
    UCHAR PendingBadPages;                                                  //0xc0
    UCHAR FatalGraphicsFailures;                                            //0xc1
    UCHAR InitFailure;                                                      //0xc2
    UCHAR StopBadMaps;                                                      //0xc3
}; 

----------------------------------------
Structure: _MI_EXTENT_DELETION_WAIT_BLOCK

//0x20 bytes (sizeof)
struct _MI_EXTENT_DELETION_WAIT_BLOCK
{
    struct _MI_EXTENT_DELETION_WAIT_BLOCK* Next;                            //0x0
    struct _KGATE Gate;                                                     //0x8
}; 

----------------------------------------
Structure: _MI_EXTRA_IMAGE_INFORMATION

//0x10 bytes (sizeof)
struct _MI_EXTRA_IMAGE_INFORMATION
{
    ULONG SizeOfHeaders;                                                    //0x0
    ULONG SizeOfImage;                                                      //0x4
    ULONG TimeDateStamp;                                                    //0x8
    ULONG ImageCetShadowStacksReady:1;                                      //0xc
    ULONG ImageCetShadowStacksStrictMode:1;                                 //0xc
    ULONG ImageCetSetContextIpValidationRelaxedMode:1;                      //0xc
    ULONG ImageCetDynamicApisAllowInProc:1;                                 //0xc
    ULONG ImageCetDowngradeReserved1:1;                                     //0xc
    ULONG ImageCetDowngradeReserved2:1;                                     //0xc
    ULONG Spare:26;                                                         //0xc
}; 

----------------------------------------
Structure: _MI_FORCED_COMMITS

//0x8 bytes (sizeof)
struct _MI_FORCED_COMMITS
{
    ULONG Regular;                                                          //0x0
    ULONG Wrap;                                                             //0x4
}; 

----------------------------------------
Structure: _MI_FREE_LARGE_PAGES

//0x430 bytes (sizeof)
struct _MI_FREE_LARGE_PAGES
{
    ULONGLONG LargePageFreeCount[2];                                        //0x0
    ULONGLONG LargePageFreeCountHiLow[2][2];                                //0x10
    ULONGLONG LargePagesCount[2][2][4][4];                                  //0x30
    struct _MI_FREE_LARGE_PAGE_LIST* LargePageEntries[2][2][4][4];          //0x230
}; 

----------------------------------------
Structure: _MI_FREE_LARGE_PAGE_LIST

//0x18 bytes (sizeof)
struct _MI_FREE_LARGE_PAGE_LIST
{
    struct _LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG EntryCount;                                                   //0x10
}; 

----------------------------------------
Structure: _MI_HARDWARE_STATE

//0x1c0 bytes (sizeof)
struct _MI_HARDWARE_STATE
{
    ULONG NodeMask;                                                         //0x0
    ULONG NumaHintIndex;                                                    //0x4
    ULONG NumaLastRangeIndexInclusive;                                      //0x8
    UCHAR NodeShift;                                                        //0xc
    UCHAR ChannelShift;                                                     //0xd
    ULONG ChannelHintIndex;                                                 //0x10
    ULONG ChannelLastRangeIndexInclusive;                                   //0x14
    struct _MI_NODE_NUMBER_ZERO_BASED* NodeGraph;                           //0x18
    struct _MI_SYSTEM_NODE_INFORMATION* SystemNodeInformation;              //0x20
    struct _HAL_NODE_RANGE TemporaryNumaRanges[2];                          //0x28
    struct _HAL_NODE_RANGE* NumaMemoryRanges;                               //0x48
    struct _HAL_CHANNEL_MEMORY_RANGES* ChannelMemoryRanges;                 //0x50
    ULONG SecondLevelCacheSize;                                             //0x58
    ULONG FirstLevelCacheSize;                                              //0x5c
    ULONG PhysicalAddressBits;                                              //0x60
    ULONG LogicalProcessorsPerCore;                                         //0x64
    UCHAR ProcessorCachesFlushedOnPowerLoss;                                //0x68
    ULONGLONG TotalPagesAllowed;                                            //0x70
    ULONG SecondaryColorMask;                                               //0x78
    ULONG SecondaryColors;                                                  //0x7c
    ULONG FlushTbForAttributeChange;                                        //0x80
    ULONG FlushCacheForAttributeChange;                                     //0x84
    ULONG FlushCacheForPageAttributeChange;                                 //0x88
    ULONG CacheFlushPromoteThreshold;                                       //0x8c
    union _LARGE_INTEGER PerformanceCounterFrequency;                       //0x90
    ULONGLONG InvalidPteMask;                                               //0xc0
    ULONG LargePageColors[3];                                               //0x100
    ULONGLONG FlushTbThreshold;                                             //0x110
    enum _MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];             //0x118
    UCHAR AttributeChangeRequiresReZero;                                    //0x158
    struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2];                          //0x160
    ULONGLONG VsmKernelPageCount;                                           //0x180
}; 

----------------------------------------
Structure: _MI_HARD_FAULT_STATE

//0x10 bytes (sizeof)
struct _MI_HARD_FAULT_STATE
{
    struct _MMPFN* SwapPfn;                                                 //0x0
    struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;                      //0x8
}; 

----------------------------------------
Structure: _MI_HUGE_PFN

//0x8 bytes (sizeof)
struct _MI_HUGE_PFN
{
    union
    {
        struct
        {
            ULONGLONG EntireField;                                          //0x0
        } e1;                                                               //0x0
        struct
        {
            ULONGLONG Flink:18;                                             //0x0
            ULONGLONG PageState:3;                                          //0x0
            ULONGLONG Blink:18;                                             //0x0
            ULONGLONG WriteInProgress:1;                                    //0x0
            ULONGLONG HasError:1;                                           //0x0
            ULONGLONG Partition:11;                                         //0x0
            ULONGLONG Reserved:12;                                          //0x0
        } e2;                                                               //0x0
    } u1;                                                                   //0x0
}; 

----------------------------------------
Structure: _MI_HUGE_SYSTEM_VIEW_HEAD

//0x10 bytes (sizeof)
struct _MI_HUGE_SYSTEM_VIEW_HEAD
{
    struct _RTL_AVL_TREE ViewRoot;                                          //0x0
    ULONG ViewCount;                                                        //0x8
    volatile LONG Lock;                                                     //0xc
}; 

----------------------------------------
Structure: _MI_IMAGE_SECURITY_REFERENCE

//0x40 bytes (sizeof)
struct _MI_IMAGE_SECURITY_REFERENCE
{
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x0
    VOID* DynamicRelocations;                                               //0x20
    struct _IMAGE_SECURITY_CONTEXT SecurityContext;                         //0x28
    union
    {
        VOID* ImageFileExtents;                                             //0x30
        ULONGLONG ImageFileExtentsUlongPtr;                                 //0x30
        ULONGLONG FilesystemWantsRva:1;                                     //0x30
        ULONGLONG Spare:3;                                                  //0x30
    } u1;                                                                   //0x30
    ULONGLONG StrongImageReference;                                         //0x38
}; 

----------------------------------------
Structure: _MI_IO_CACHE_STATS

//0x28 bytes (sizeof)
struct _MI_IO_CACHE_STATS
{
    ULONGLONG UnusedBlocks;                                                 //0x0
    ULONG ActiveCacheMatch;                                                 //0x8
    ULONG ActiveCacheOverride;                                              //0xc
    ULONG UnmappedCacheFlush;                                               //0x10
    ULONG UnmappedCacheMatch;                                               //0x14
    ULONG UnmappedCacheConflict;                                            //0x18
    ULONG PermanentIoAttributeConflict;                                     //0x1c
    ULONG PermanentIoNodeConflict;                                          //0x20
}; 

----------------------------------------
Structure: _MI_IO_PAGE_STATE

//0x68 bytes (sizeof)
struct _MI_IO_PAGE_STATE
{
    volatile LONG IoPfnLock;                                                //0x0
    struct _RTL_AVL_TREE IoPfnRoot[3];                                      //0x8
    struct _LIST_ENTRY UnusedCachedMaps;                                    //0x20
    ULONG OldestCacheFlushTimeStamp;                                        //0x30
    struct _MI_IO_CACHE_STATS IoCacheStats;                                 //0x38
    struct _RTL_AVL_TREE InvariantIoSpace;                                  //0x60
}; 

----------------------------------------
Structure: _MI_LARGEPAGE_VAD_INFO

//0x18 bytes (sizeof)
struct _MI_LARGEPAGE_VAD_INFO
{
    UCHAR LargeImageBias;                                                   //0x0
    UCHAR Spare[3];                                                         //0x1
    ULONGLONG ActualImageViewSize;                                          //0x8
    struct _EPARTITION* ReferencedPartition;                                //0x10
}; 

----------------------------------------
Structure: _MI_LARGE_PAGE_LISTS_CHANGING

//0x20 bytes (sizeof)
struct _MI_LARGE_PAGE_LISTS_CHANGING
{
    struct _MI_LARGE_PAGE_LISTS_CHANGING* Next;                             //0x0
    struct _KGATE Gate;                                                     //0x8
}; 

----------------------------------------
Structure: _MI_LDW_WORK_CONTEXT

//0x38 bytes (sizeof)
struct _MI_LDW_WORK_CONTEXT
{
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x0
    struct _FILE_OBJECT* FileObject;                                        //0x20
    LONG ErrorStatus;                                                       //0x28
    volatile LONG Active;                                                   //0x2c
    UCHAR FreeWhenDone;                                                     //0x30
}; 

----------------------------------------
Structure: _MI_MODWRITE_DATA

//0x40 bytes (sizeof)
struct _MI_MODWRITE_DATA
{
    LONGLONG PagesLoad;                                                     //0x0
    ULONGLONG PagesAverage;                                                 //0x8
    ULONGLONG AverageAvailablePages;                                        //0x10
    ULONGLONG PagesWritten;                                                 //0x18
    ULONG WritesIssued;                                                     //0x20
    ULONG IgnoredReservationsCount;                                         //0x24
    ULONG FreedReservationsCount;                                           //0x28
    ULONG WriteBurstCount;                                                  //0x2c
    ULONGLONG IgnoreReservationsStartTime;                                  //0x30
    unionvolatile _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;      //0x38
    USHORT IgnoreReservations:1;                                            //0x3c
    USHORT Spare:15;                                                        //0x3c
    USHORT Spare1;                                                          //0x3e
}; 

----------------------------------------
Structure: _MI_NODE_INFORMATION

//0x11c0 bytes (sizeof)
struct _MI_NODE_INFORMATION
{
    struct _MI_FREE_LARGE_PAGES FreeLargePages[3];                          //0x0
    struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;              //0xc90
    struct _MMPFNLIST_SHORT StandbyPageList[4][8];                          //0xcb8
    struct _RTL_BITMAP FreePageListHeadsBitmap[2];                          //0xfc0
    ULONG FreePageListHeadsBitmapBuffer[16];                                //0xfe0
    volatile ULONGLONG FreeCount[2];                                        //0x1020
    ULONGLONG TotalPages[4];                                                //0x1030
    ULONGLONG TotalPagesEntireNode;                                         //0x1050
    ULONG CurrentHugeRangeColor;                                            //0x1058
    ULONGLONG HugeIoRangeFreeCount[2];                                      //0x1060
    ULONG MmShiftedColor;                                                   //0x1070
    ULONG Color;                                                            //0x1074
    volatile ULONGLONG ChannelFreeCount[4][2];                              //0x1078
    struct
    {
        ULONG ChannelsHotCold:1;                                            //0x10b8
        ULONG Spare:31;                                                     //0x10b8
    } Flags;                                                                //0x10b8
    ULONG LargeListMoveInProgress;                                          //0x10bc
    struct _MI_LARGE_PAGE_LISTS_CHANGING* LargeListWaiters;                 //0x10c0
    struct _EX_PUSH_LOCK NodeLock;                                          //0x10c8
    ULONGLONG ZeroThreadHugeMapLock;                                        //0x10d0
    UCHAR ChannelStatus;                                                    //0x10d8
    UCHAR ChannelOrdering[4];                                               //0x10d9
    UCHAR LockedChannelOrdering[4];                                         //0x10dd
    UCHAR PowerAttribute[4];                                                //0x10e1
    ULONGLONG LargePageLock;                                                //0x10e8
    struct _MI_PAGE_COLORS PageColorTable;                                  //0x10f0
    ULONGLONG NumberOfPagesGoingBad;                                        //0x1100
    struct _MI_WRITE_CALIBRATION WriteCalibration;                          //0x1108
    VOID* BootZeroContext;                                                  //0x1128
    VOID* BootZeroPageTimesPerProcessor;                                    //0x1130
    VOID* ZeroingVaBase;                                                    //0x1138
    ULONGLONG TotalBytesToZero;                                             //0x1140
    ULONGLONG PerProcessorNumberOfBytesToZero;                              //0x1148
    VOID* ZeroingContext;                                                   //0x1150
    volatile ULONG ZeroingProcessorCount;                                   //0x1158
    volatile LONG ZeroHand;                                                 //0x115c
    volatile LONG FinishedProcessors;                                       //0x1160
    ULONGLONG CyclesToZeroOneLargePage;                                     //0x1168
    ULONGLONG* ScaledCyclesToZeroOneLargePage;                              //0x1170
    struct _GROUP_AFFINITY GroupAffinity;                                   //0x1178
    USHORT ProcessorCount;                                                  //0x1188
    UCHAR BackgroundZeroingActive;                                          //0x118a
    struct _PHYSICAL_MEMORY_DESCRIPTOR* ZeroingPhysicalMemoryBlock;         //0x1190
}; 

----------------------------------------
Structure: _MI_NODE_NUMBER_ZERO_BASED

//0x4 bytes (sizeof)
struct _MI_NODE_NUMBER_ZERO_BASED
{
    ULONG ZeroBased;                                                        //0x0
}; 

----------------------------------------
Structure: _MI_PAGEFILE_BITMAPS_CACHE_ENTRY

//0x38 bytes (sizeof)
struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
{
    union
    {
        struct _RTL_BALANCED_NODE LengthTreeNode;                           //0x0
        struct _LIST_ENTRY FreeListEntry;                                   //0x0
    };
    struct _RTL_BALANCED_NODE LocationTreeNode;                             //0x18
    ULONG StartingIndex;                                                    //0x30
    ULONG Length;                                                           //0x34
}; 

----------------------------------------
Structure: _MI_PAGEFILE_TRACES

//0x78 bytes (sizeof)
struct _MI_PAGEFILE_TRACES
{
    LONG Status;                                                            //0x0
    USHORT PartitionId;                                                     //0x4
    UCHAR Priority;                                                         //0x6
    UCHAR IrpPriority;                                                      //0x7
    UCHAR ReservationWrite;                                                 //0x8
    union _LARGE_INTEGER CurrentTime;                                       //0x10
    ULONGLONG AvailablePages;                                               //0x18
    ULONGLONG ModifiedPagesTotal;                                           //0x20
    ULONGLONG ModifiedPagefilePages;                                        //0x28
    ULONGLONG ModifiedNoWritePages;                                         //0x30
    ULONGLONG ModifiedPagefileNoReservationPages;                           //0x38
    struct
    {
        struct _MDL Mdl;                                                    //0x40
        ULONGLONG Page[1];                                                  //0x70
    } MdlHack;                                                              //0x40
}; 

----------------------------------------
Structure: _MI_PAGELIST_STATE

//0x88 bytes (sizeof)
struct _MI_PAGELIST_STATE
{
    volatile LONG ActiveSpinLock;                                           //0x0
    struct _RTL_AVL_TREE ActiveThreadTree;                                  //0x8
    volatile LONG ActiveZeroSpinLock;                                       //0x10
    struct _RTL_AVL_TREE ActiveZeroThreadTree;                              //0x18
    struct _MMPFN LargePfnTemplate;                                         //0x20
    struct _MMPFN LargePfnBasePageTemplate;                                 //0x50
    ULONG NumberOfLargePageListHeads;                                       //0x80
}; 

----------------------------------------
Structure: _MI_PAGE_COLORS

//0x10 bytes (sizeof)
struct _MI_PAGE_COLORS
{
    ULONG PageSize[4];                                                      //0x0
}; 

----------------------------------------
Structure: _MI_PAGE_COMBINE_STATISTICS

//0x28 bytes (sizeof)
struct _MI_PAGE_COMBINE_STATISTICS
{
    ULONGLONG PagesScannedActive;                                           //0x0
    ULONGLONG PagesScannedStandby;                                          //0x8
    ULONGLONG PagesCombined;                                                //0x10
    ULONG CombineScanCount;                                                 //0x18
    LONG CombinedBlocksInUse;                                               //0x1c
    LONG SumCombinedBlocksReferenceCount;                                   //0x20
}; 

----------------------------------------
Structure: _MI_PAGE_COMBINING_SUPPORT

//0x190 bytes (sizeof)
struct _MI_PAGE_COMBINING_SUPPORT
{
    struct _MI_PARTITION* Partition;                                        //0x0
    struct _LIST_ENTRY ArbitraryPfnMapList;                                 //0x8
    struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;                        //0x18
    ULONG CombiningThreadCount;                                             //0x40
    struct _LIST_ENTRY CombinePageFreeList;                                 //0x48
    ULONGLONG CombineFreeListLock;                                          //0x58
    struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];              //0x60
    ULONGLONG CommonPageCombineDomain;                                      //0x160
    struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;                    //0x168
}; 

----------------------------------------
Structure: _MI_PAGING_FILE_SPACE_BITMAPS

//0x28 bytes (sizeof)
struct _MI_PAGING_FILE_SPACE_BITMAPS
{
    union
    {
        ULONG RefCount;                                                     //0x0
        struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;                       //0x0
    };
    struct _RTL_BITMAP AllocationBitmap;                                    //0x8
    union
    {
        struct _RTL_BITMAP ReservationBitmap;                               //0x18
        struct _RTL_BITMAP EvictedBitmap;                                   //0x18
    };
}; 

----------------------------------------
Structure: _MI_PAGING_IO_STATE

//0xb0 bytes (sizeof)
struct _MI_PAGING_IO_STATE
{
    struct _RTL_AVL_TREE PageFileHead;                                      //0x0
    volatile LONG PageFileHeadSpinLock;                                     //0x8
    LONG PrefetchSeekThreshold;                                             //0xc
    ULONG InPageSinglePages;                                                //0x10
    union _SLIST_HEADER InPageSupportSListHead[2];                          //0x20
    union _SLIST_HEADER ReservedInPageSupportSListHead[2];                  //0x40
    UCHAR InPageSupportSListMinimum[2];                                     //0x60
    struct _MMINPAGE_SUPPORT* FirstReservedInPageBlock[2];                  //0x68
    struct _MMINPAGE_SUPPORT* LastReservedInPageBlock[2];                   //0x78
    struct _MMPTE* ReservedPtes;                                            //0x88
    ULONGLONG ReservedPtesLock;                                             //0x90
    ULONG ReservedPtesBitBuffer;                                            //0x98
    volatile LONG DelayPageFaults;                                          //0x9c
    ULONG FileCompressionBoundary;                                          //0xa0
    UCHAR MdlsAdjusted;                                                     //0xa4
}; 

----------------------------------------
Structure: _MI_PARTITION

//0x2d00 bytes (sizeof)
struct _MI_PARTITION
{
    struct _MI_PARTITION_CORE Core;                                         //0x0
    struct _MI_PARTITION_MODWRITES Modwriter;                               //0x1b8
    struct _MI_PARTITION_STORES Store;                                      //0x480
    struct _MI_PARTITION_SEGMENTS Segments;                                 //0x540
    struct _MI_PARTITION_PAGE_LISTS PageLists;                              //0x880
    struct _MI_PARTITION_COMMIT Commit;                                     //0x1840
    struct _MI_PARTITION_ZEROING Zeroing;                                   //0x1880
    struct _MI_PAGE_COMBINING_SUPPORT PageCombine;                          //0x1930
    VOID* WorkingSetControl;                                                //0x1ac0
    struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;           //0x1ac8
    ULONG SessionDetachTimeStamp;                                           //0x1ad8
    struct _MI_VISIBLE_PARTITION Vp;                                        //0x1b00
}; 

----------------------------------------
Structure: _MI_PARTITION_COMMIT

//0x40 bytes (sizeof)
struct _MI_PARTITION_COMMIT
{
    ULONGLONG PeakCommitment;                                               //0x0
    ULONGLONG TotalCommitLimitMaximum;                                      //0x8
    volatile LONG Popups[2];                                                //0x10
    ULONGLONG LowCommitThreshold;                                           //0x18
    ULONGLONG HighCommitThreshold;                                          //0x20
    ULONGLONG EventLock;                                                    //0x28
    ULONGLONG SystemCommitReserve;                                          //0x30
    ULONGLONG OverCommit;                                                   //0x38
}; 

----------------------------------------
Structure: _MI_PARTITION_CORE

//0x1b8 bytes (sizeof)
struct _MI_PARTITION_CORE
{
    USHORT PartitionId;                                                     //0x0
    union
    {
        ULONG LongFlags;                                                    //0x4
        struct _MI_PARTITION_FLAGS Flags;                                   //0x4
    } u;                                                                    //0x4
    ULONG Signature;                                                        //0x8
    UCHAR MemoryConfigurationChanged;                                       //0xc
    struct _MI_NODE_INFORMATION* NodeInformation;                           //0x10
    struct _RTL_AVL_TREE PageRoot;                                          //0x18
    struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;                     //0x20
    ULONGLONG MemoryBlockReferences;                                        //0x28
    struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;                               //0x30
    ULONGLONG PfnUnmapCount;                                                //0x50
    VOID* PfnUnmapWaitList;                                                 //0x58
    struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;                         //0x60
    struct _KEVENT ExitEvent;                                               //0x68
    VOID* SystemThreadHandles[6];                                           //0x80
    struct _EPARTITION* PartitionObject;                                    //0xb0
    struct _EX_PUSH_LOCK PartitionSystemThreadsLock;                        //0xb8
    struct _EX_PUSH_LOCK DynamicMemoryPushLock;                             //0xc0
    volatile LONG DynamicMemoryLock;                                        //0xc8
    UCHAR PfnUnmapActive;                                                   //0xcc
    struct _KEVENT TemporaryMemoryEvent;                                    //0xd0
    VOID* RootDirectory;                                                    //0xe8
    VOID* KernelObjectsDirectory;                                           //0xf0
    struct _KEVENT* MemoryEvents[11];                                       //0xf8
    VOID* MemoryEventHandles[11];                                           //0x150
    ULONGLONG TotalHugeIoRanges;                                            //0x1a8
    ULONGLONG NonChargedSecurePages;                                        //0x1b0
}; 

----------------------------------------
Structure: _MI_PARTITION_FLAGS

//0x4 bytes (sizeof)
struct _MI_PARTITION_FLAGS
{
    ULONG BeingDeleted:1;                                                   //0x0
    ULONG PageListsInitialized:1;                                           //0x0
    ULONG StoreReservedPagesCharged:1;                                      //0x0
    ULONG UseProtectedSlabAllocators:1;                                     //0x0
    ULONG UseUnprotectedSlabAllocators:1;                                   //0x0
    ULONG PureHoldingPartition:1;                                           //0x0
    ULONG ZeroPagesOptional:1;                                              //0x0
    ULONG BackgroundZeroingDisabled:1;                                      //0x0
}; 

----------------------------------------
Structure: _MI_PARTITION_MODWRITES

//0x2c0 bytes (sizeof)
struct _MI_PARTITION_MODWRITES
{
    struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;                     //0x0
    struct _MMPAGE_FILE_EXPANSION PageFileContract;                         //0x58
    ULONGLONG NumberOfMappedMdls;                                           //0xb0
    volatile LONG NumberOfMappedMdlsInUse;                                  //0xb8
    ULONG NumberOfMappedMdlsInUsePeak;                                      //0xbc
    struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;                         //0xc0
    UCHAR NeedMappedMdl;                                                    //0xe8
    UCHAR NeedPageFileMdl;                                                  //0xe9
    UCHAR ModwriterActive;                                                  //0xea
    UCHAR TransitionInserted;                                               //0xeb
    LONG LastModifiedWriteError;                                            //0xec
    LONG LastMappedWriteError;                                              //0xf0
    volatile ULONG MappedFileWriteSucceeded;                                //0xf4
    ULONG MappedWriteBurstCount;                                            //0xf8
    ULONG LowPriorityModWritesOutstanding;                                  //0xfc
    struct _KEVENT BoostModWriteIoPriorityEvent;                            //0x100
    LONG ModifiedWriterThreadPriority;                                      //0x118
    ULONGLONG ModifiedPagesLowPriorityGoal;                                 //0x120
    struct _KEVENT ModifiedPageWriterEvent;                                 //0x128
    struct _KEVENT ModifiedWriterExitedEvent;                               //0x140
    volatile LONG WriteAllPagefilePages;                                    //0x158
    volatile LONG WriteAllMappedPages;                                      //0x15c
    struct _KEVENT MappedPageWriterEvent;                                   //0x160
    struct _MI_MODWRITE_DATA ModWriteData;                                  //0x178
    struct _KEVENT RescanPageFilesEvent;                                    //0x1b8
    struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;                         //0x1d0
    struct _ETHREAD* ModifiedPageWriterThread;                              //0x1f8
    struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;                       //0x200
    struct _WORK_QUEUE_ITEM PagefileScanWorkItem;                           //0x208
    ULONG PagefileScanCount;                                                //0x228
    volatile LONG ClusterRestrictionLock;                                   //0x22c
    struct _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];                 //0x230
    struct _KEVENT NotifyStoreMemoryConditions;                             //0x238
    volatile UCHAR DelayMappedWrite;                                        //0x250
    volatile ULONG PagefileReservationsEnabled;                             //0x254
    struct _EX_PUSH_LOCK PageFileCreationLock;                              //0x258
    struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;                           //0x260
    ULONGLONG LastTrimPagefileTime;                                         //0x280
    struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;                 //0x288
    volatile LONG WsSwapPageFileContractionInProgress;                      //0x2a8
    struct _EX_PUSH_LOCK WorkingSetSwapLock;                                //0x2b0
    volatile LONG WorkingSetInswapLock;                                     //0x2b8
}; 

----------------------------------------
Structure: _MI_PARTITION_PAGE_LISTS

//0xfc0 bytes (sizeof)
struct _MI_PARTITION_PAGE_LISTS
{
    struct _MMPFNLIST* FreePagesByColor[2];                                 //0x0
    struct _MMPFNLIST ZeroedPageListHead;                                   //0x40
    struct _MMPFNLIST FreePageListHead;                                     //0x80
    struct _MMPFNLIST StandbyPageListHead;                                  //0xc0
    struct _MMPFNLIST StandbyPageListByPriority[8];                         //0x100
    struct _MMPFNLIST ModifiedPageListNoReservation;                        //0x240
    struct _MMPFNLIST ModifiedPageListByReservation[16];                    //0x280
    struct _MMPFNLIST MappedPageListHead[16];                               //0x500
    struct _MMPFNLIST BadPageListHead;                                      //0x780
    struct _MMPFNLIST EnclavePageListHead;                                  //0x7c0
    union _SLIST_HEADER* FreePageSlist[2];                                  //0x7e8
    struct _MMPFNLIST* PageLocationList[8];                                 //0x7f8
    volatile ULONG StandbyRepurposedByPriority[8];                          //0x838
    volatile ULONGLONG TransitionSharedPages;                               //0x880
    ULONGLONG TransitionSharedPagesPeak[6];                                 //0x888
    struct _KEVENT MappedPageListHeadEvent[16];                             //0x8b8
    struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];                  //0xa38
    ULONG DecayHand;                                                        //0xa58
    UCHAR StandbyListDiscard;                                               //0xa5c
    UCHAR FreeListDiscard;                                                  //0xa5d
    UCHAR PfnBitMapsReady;                                                  //0xa5e
    ULONGLONG LastDecayHandUpdateTime;                                      //0xa60
    struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;                       //0xa68
    struct _RTL_AVL_TREE HugePfnBadPages;                                   //0xaa0
    ULONGLONG AvailableEventsLock;                                          //0xac0
    struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];       //0xac8
    VOID* MirrorListLocks;                                                  //0xb28
    volatile ULONGLONG TransitionPrivatePages;                              //0xb40
    struct _RTL_BITMAP_EX LargePfnBitMap[2];                                //0xb48
    struct _MI_FREE_LARGE_PAGE_LIST* LargePageListHeads;                    //0xb68
    UCHAR* MediumPagesOnFreeZeroList;                                       //0xb70
    struct _RTL_BITMAP_EX LargePageRebuildCandidates;                       //0xb78
    WCHAR* LargePagesOnFreeZeroList;                                        //0xb88
    volatile LONG HugePageRebuildCandidatesExist;                           //0xb90
    struct _KEVENT LargePageCandidatesExistEvent;                           //0xb98
    ULONGLONG LowMemoryThreshold;                                           //0xbb0
    ULONGLONG HighMemoryThreshold;                                          //0xbb8
    struct _MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[2][4];                   //0xbc0
    struct _RTL_BITMAP_EX SlabPfnBitMap;                                    //0xf80
    VOID* HugePfnLists;                                                     //0xf90
    ULONGLONG AvailableHugeIoRanges;                                        //0xf98
}; 

----------------------------------------
Structure: _MI_PARTITION_SEGMENTS

//0x340 bytes (sizeof)
struct _MI_PARTITION_SEGMENTS
{
    volatile LONG SegmentListLock;                                          //0x0
    ULONG DeleteOnCloseCount;                                               //0x4
    volatile LONGLONG FsControlAreaCount;                                   //0x8
    volatile LONGLONG PfControlAreaCount;                                   //0x10
    volatile LONGLONG CloneHeaderCount;                                     //0x18
    struct _KEVENT DeleteSubsectionCleanup;                                 //0x20
    struct _KEVENT UnusedSegmentCleanup;                                    //0x38
    ULONGLONG SubsectionDeletePtes;                                         //0x50
    struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;                     //0x58
    struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;          //0xb0
    struct _LIST_ENTRY DeleteOnCloseList;                                   //0x100
    struct _KTIMER DeleteOnCloseTimer;                                      //0x110
    UCHAR DeleteOnCloseTimerActive;                                         //0x150
    UCHAR SegmentDereferenceThreadExists;                                   //0x151
    VOID* SegmentDereferenceActiveControlArea;                              //0x158
    ULONGLONG UnusedSegmentPagedPool;                                       //0x160
    struct _LIST_ENTRY UnusedSegmentList;                                   //0x168
    struct _LIST_ENTRY UnusedSubsectionList;                                //0x178
    struct _LIST_ENTRY DeleteSubsectionList;                                //0x188
    struct _KEVENT ControlAreaDeleteEvent;                                  //0x198
    struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;                        //0x1b0
    struct _MI_PTE_CHAIN_HEAD FreeSystemCache;                              //0x1b8
    struct _KEVENT CloneDereferenceEvent;                                   //0x1d0
    union _SLIST_HEADER CloneProtosSListHead;                               //0x1f0
    struct _EX_PUSH_LOCK SystemCacheInitLock;                               //0x200
    ULONG PagefileExtensionWaiters;                                         //0x208
    ULONG PagefileExtensionRequests;                                        //0x20c
    struct _KEVENT PagefileExtensionWaitEvent;                              //0x210
    struct _MI_CROSS_PARTITION_CHARGES SharedCharges[7];                    //0x228
    struct _KEVENT* SharedChargesDrainEvent;                                //0x308
    struct _KEVENT* ControlAreasDrainEvent;                                 //0x310
    struct _KEVENT* CloneHeaderDrainEvent;                                  //0x318
    struct _EX_RUNDOWN_REF_CACHE_AWARE* ProbeRundownReference;              //0x320
}; 

----------------------------------------
Structure: _MI_PARTITION_STATE

//0xc0 bytes (sizeof)
struct _MI_PARTITION_STATE
{
    ULONGLONG PartitionLock;                                                //0x0
    struct _EX_PUSH_LOCK PartitionIdLock;                                   //0x8
    ULONGLONG InitialPartitionIdBits;                                       //0x10
    struct _LIST_ENTRY PartitionList;                                       //0x18
    struct _RTL_BITMAP* PartitionIdBitmap;                                  //0x28
    struct _RTL_BITMAP InitialPartitionIdBitmap;                            //0x30
    struct _MI_PARTITION* TempPartitionPointers[1];                         //0x40
    struct _MI_PARTITION** Partition;                                       //0x48
    ULONGLONG TotalPagesInChildPartitions;                                  //0x50
    ULONG CrossPartitionDenials;                                            //0x58
    UCHAR MultiplePartitionsExist;                                          //0x5c
    struct _RTL_BITMAP_EX HugeIoPfnBitMap;                                  //0x60
    struct _MI_HUGE_PFN* HugePfnDatabase;                                   //0x70
    ULONGLONG HugeRangesLock;                                               //0x80
}; 

----------------------------------------
Structure: _MI_PARTITION_STORES

//0x90 bytes (sizeof)
struct _MI_PARTITION_STORES
{
    union
    {
        LONG FlushCompleting:1;                                             //0x0
        LONG FlushInProgress:31;                                            //0x0
        volatile LONG Long;                                                 //0x0
    } WriteAllStoreHintedPages;                                             //0x0
    ULONG VirtualPageFileNumber;                                            //0x4
    ULONG Registered;                                                       //0x8
    ULONG ReadClusterSizeMax;                                               //0xc
    ULONG EvictFlushRequestCount;                                           //0x10
    ULONG ModifiedWriteDisableCount;                                        //0x14
    ULONG WriteIssueFailures;                                               //0x18
    ULONG WritesOutstanding;                                                //0x1c
    volatile LONG EvictFlushLock;                                           //0x20
    struct _ETHREAD* EvictionThread;                                        //0x28
    struct _KEVENT EvictEvent;                                              //0x30
    union _SLIST_HEADER WriteSupportSListHead;                              //0x50
    struct _KEVENT EvictFlushCompleteEvent;                                 //0x60
    struct _RTL_BITMAP* ModifiedWriteFailedBitmap;                          //0x78
    struct _EPROCESS* StoreProcess;                                         //0x80
    ULONG DeleteStoredPages;                                                //0x88
}; 

----------------------------------------
Structure: _MI_PARTITION_ZEROING

//0xb0 bytes (sizeof)
struct _MI_PARTITION_ZEROING
{
    struct _KEVENT PageEvent;                                               //0x0
    UCHAR ThreadPriorityStatic;                                             //0x18
    UCHAR AdaptiveZeroingEnabled;                                           //0x19
    LONG ZeroFreePageSlistMinimum;                                          //0x1c
    struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;                      //0x20
    volatile LONG NodeCount;                                                //0x40
    volatile LONG BackgroundZeroingDisabled;                                //0x44
    struct _KGATE LargeBootZeroingComplete;                                 //0x48
    struct _MI_WRITE_CALIBRATION WriteCalibration;                          //0x60
    UCHAR IpiCalibrationFailed;                                             //0x80
    volatile LONG ActiveProcessorsForIpiCalibration;                        //0x84
    volatile LONG NodesReadyForIpiCalibration;                              //0x88
    struct _KEVENT ReleaseNodeZeroingThreads;                               //0x90
    struct _MI_ZERO_THREAD_CONTEXT* ThreadContext;                          //0xa8
}; 

----------------------------------------
Structure: _MI_PER_SESSION_PROTOS

//0x58 bytes (sizeof)
struct _MI_PER_SESSION_PROTOS
{
    union
    {
        struct _RTL_BALANCED_NODE SessionProtoNode;                         //0x0
        struct _SINGLE_LIST_ENTRY FreeList;                                 //0x0
        VOID* DriverAddress;                                                //0x0
    };
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x18
    ULONGLONG NumberOfPtes;                                                 //0x38
    union
    {
        ULONG SessionId;                                                    //0x40
        struct _SUBSECTION* Subsection;                                     //0x40
    };
    struct _MMPTE* SubsectionBase;                                          //0x48
    union
    {
        ULONG ReferenceCount;                                               //0x50
        ULONG NumberOfPtesToFree;                                           //0x50
    } u2;                                                                   //0x50
}; 

----------------------------------------
Structure: _MI_PHYSICAL_VIEW

//0x30 bytes (sizeof)
struct _MI_PHYSICAL_VIEW
{
    struct _RTL_BALANCED_NODE PhysicalNode;                                 //0x0
    struct _MMVAD_SHORT* Vad;                                               //0x18
    struct _AWEINFO* AweInfo;                                               //0x20
    union
    {
        ULONG ViewPageSize:2;                                               //0x28
        struct _CONTROL_AREA* ControlArea;                                  //0x28
    } u1;                                                                   //0x28
}; 

----------------------------------------
Structure: _MI_POOL_STATE

//0xa8 bytes (sizeof)
struct _MI_POOL_STATE
{
    ULONGLONG MaximumNonPagedPoolThreshold;                                 //0x0
    volatile ULONGLONG AllocatedNonPagedPool;                               //0x8
    volatile ULONGLONG AllocatedSecureNonPagedPool;                         //0x10
    struct _SINGLE_LIST_ENTRY BadPoolHead;                                  //0x18
    ULONG HighEventSets;                                                    //0x20
    UCHAR HighEventSetsValid;                                               //0x24
    ULONGLONG LowPagedPoolThreshold;                                        //0x28
    ULONGLONG HighPagedPoolThreshold;                                       //0x30
    volatile LONG PermittedFaultsLock;                                      //0x38
    struct _RTL_AVL_TREE PermittedFaultsTree;                               //0x40
    struct _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];        //0x48
    ULONGLONG TotalPagedPoolQuota;                                          //0x98
    ULONGLONG TotalNonPagedPoolQuota;                                       //0xa0
}; 

----------------------------------------
Structure: _MI_PROBE_RAISE_TRACKER

//0x44 bytes (sizeof)
struct _MI_PROBE_RAISE_TRACKER
{
    ULONG UserRangeInKernel;                                                //0x0
    ULONG FaultFailed;                                                      //0x4
    ULONG WriteFaultFailed;                                                 //0x8
    ULONG LargePageFailed;                                                  //0xc
    ULONG UserAccessToKernelPte;                                            //0x10
    ULONG BadPageLocation;                                                  //0x14
    ULONG InsufficientCharge;                                               //0x18
    ULONG PageTableCharge;                                                  //0x1c
    ULONG NoPhysicalMapping;                                                //0x20
    ULONG NoIoReference;                                                    //0x24
    ULONG ProbeFailed;                                                      //0x28
    ULONG PteIsZero;                                                        //0x2c
    ULONG StrongCodeWrite;                                                  //0x30
    ULONG ReducedCloneCommitChargeFailed;                                   //0x34
    ULONG CopyOnWriteAtDispatchNoPages;                                     //0x38
    ULONG NoPageTablesAllowed;                                              //0x3c
    ULONG EnclavePageFailed;                                                //0x40
}; 

----------------------------------------
Structure: _MI_PROCESS_STATE

//0x48 bytes (sizeof)
struct _MI_PROCESS_STATE
{
    VOID* SystemDllBase;                                                    //0x0
    ULONG ColorSeed;                                                        //0x8
    LONG RotatingUniprocessorNumber;                                        //0xc
    union _LARGE_INTEGER CriticalSectionTimeout;                            //0x10
    struct _LIST_ENTRY ProcessList;                                         //0x18
    struct _MMPTE* SharedUserDataPte[2];                                    //0x28
    VOID* HypervisorSharedVa;                                               //0x38
    ULONGLONG VadSecureCookie;                                              //0x40
}; 

----------------------------------------
Structure: _MI_PROTOTYPE_PTES_NODE

//0x20 bytes (sizeof)
struct _MI_PROTOTYPE_PTES_NODE
{
    struct _RTL_BALANCED_NODE Node;                                         //0x0
    union
    {
        struct
        {
            ULONGLONG AllocationType:3;                                     //0x18
            ULONGLONG Inserted:1;                                           //0x18
        } e1;                                                               //0x18
        struct
        {
            ULONGLONG PrototypePtesFlags;                                   //0x18
        } e2;                                                               //0x18
    } u1;                                                                   //0x18
}; 

----------------------------------------
Structure: _MI_PTE_CHAIN_HEAD

//0x18 bytes (sizeof)
struct _MI_PTE_CHAIN_HEAD
{
    struct _MMPTE Flink;                                                    //0x0
    struct _MMPTE Blink;                                                    //0x8
    struct _MMPTE* PteBase;                                                 //0x10
}; 

----------------------------------------
Structure: _MI_REBUILD_LARGE_PAGE_TIMER

//0x28 bytes (sizeof)
struct _MI_REBUILD_LARGE_PAGE_TIMER
{
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x0
    UCHAR SecondsLeft;                                                      //0x20
    UCHAR RebuildActive;                                                    //0x21
    UCHAR NextPassDelta;                                                    //0x22
    UCHAR LargeSubPagesActive;                                              //0x23
}; 

----------------------------------------
Structure: _MI_RESAVAIL_FAILURES

//0x8 bytes (sizeof)
struct _MI_RESAVAIL_FAILURES
{
    ULONG Wrap;                                                             //0x0
    ULONG NoCharge;                                                         //0x4
}; 

----------------------------------------
Structure: _MI_RESTRICTED_MODWRITES

//0x3 bytes (sizeof)
struct _MI_RESTRICTED_MODWRITES
{
    UCHAR MaximumClusterPages;                                              //0x0
    UCHAR ReducedClusterWrites;                                             //0x1
    UCHAR ImposeDelay;                                                      //0x2
}; 

----------------------------------------
Structure: _MI_RESUME_WORKITEM

//0x38 bytes (sizeof)
struct _MI_RESUME_WORKITEM
{
    struct _KEVENT ResumeCompleteEvent;                                     //0x0
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x18
}; 

----------------------------------------
Structure: _MI_REVERSE_VIEW_MAP

//0x28 bytes (sizeof)
struct _MI_REVERSE_VIEW_MAP
{
    struct _LIST_ENTRY ViewLinks;                                           //0x0
    union
    {
        VOID* SystemCacheVa;                                                //0x10
        VOID* SessionViewVa;                                                //0x10
        struct _EPROCESS* VadsProcess;                                      //0x10
        ULONGLONG Type:2;                                                   //0x10
    };
    union
    {
        struct _SUBSECTION* Subsection;                                     //0x18
        ULONGLONG SubsectionType:1;                                         //0x18
    };
    union
    {
        struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes;      //0x20
        ULONGLONG SectionOffset;                                            //0x20
    };
}; 

----------------------------------------
Structure: _MI_SECTION_IMAGE_INFORMATION

//0x50 bytes (sizeof)
struct _MI_SECTION_IMAGE_INFORMATION
{
    struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;             //0x0
    struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;            //0x40
}; 

----------------------------------------
Structure: _MI_SECTION_STATE

//0x340 bytes (sizeof)
struct _MI_SECTION_STATE
{
    volatile LONG SectionObjectPointersLock;                                //0x0
    struct _RTL_AVL_TREE SectionBasedRoot;                                  //0x8
    struct _EX_PUSH_LOCK SectionBasedLock;                                  //0x10
    volatile ULONGLONG UnusedSegmentPagedPool;                              //0x18
    ULONG DataSectionProtectionMask;                                        //0x20
    VOID* HighSectionBase;                                                  //0x28
    struct _MSUBSECTION PhysicalSubsection;                                 //0x30
    struct _CONTROL_AREA PhysicalControlArea;                               //0xc0
    struct _MMPFNLIST PurgingExtentPages;                                   //0x140
    struct _MMPFN* DanglingExtentPages;                                     //0x168
    struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;                        //0x170
    struct _MI_EXTENT_DELETION_WAIT_BLOCK DanglingExtentsDeletionWaitList;  //0x190
    UCHAR FileOnlyMemoryPfnsCreated;                                        //0x1b0
    UCHAR DanglingExtentsWorkerActive;                                      //0x1b1
    UCHAR PurgingExtentsNeedWatchdog;                                       //0x1b2
    struct _RTL_AVL_TREE PrototypePtesTree;                                 //0x1b8
    volatile LONG PrototypePtesTreeSpinLock;                                //0x1c0
    struct _EX_PUSH_LOCK RelocateBitmapsLock;                               //0x1c8
    struct _RTL_BITMAP_EX ImageBitMapNative;                                //0x1d0
    ULONGLONG ImageBiasNative;                                              //0x1e0
    struct _MI_DLL_OVERFLOW_AREA OverflowArea;                              //0x1e8
    struct _MI_SECTION_WOW_STATE Wow[1];                                    //0x208
    ULONGLONG ImageBiasWow;                                                 //0x248
    struct _RTL_BITMAP_EX ImageBitMapWowScratch;                            //0x250
    struct _RTL_BITMAP_EX ImageBitMap64Low;                                 //0x260
    ULONGLONG ImageBias64Low;                                               //0x270
    VOID* ApiSetSection;                                                    //0x278
    VOID* ApiSetSchema;                                                     //0x280
    ULONGLONG ApiSetSchemaSize;                                             //0x288
    ULONG LostDataFiles;                                                    //0x290
    ULONG LostDataPages;                                                    //0x294
    ULONG ImageFailureReason;                                               //0x298
    struct _SECTION* CfgBitMapSection;                                      //0x2a0
    struct _CONTROL_AREA* CfgBitMapControlArea;                             //0x2a8
    struct _RTL_BITMAP_EX KernelCfgBitMap;                                  //0x2b0
    struct _EX_PUSH_LOCK KernelCfgBitMapLock;                               //0x2c0
    ULONG ImageCfgFailure;                                                  //0x2c8
    ULONG RetpolineReservePages;                                            //0x2cc
    struct _MDL* RetpolineStubMdl;                                          //0x2d0
    struct _RTL_BITMAP_EX KernelRetpolineBitMap;                            //0x2d8
    struct _RTL_RETPOLINE_ROUTINES* RetpolineRoutines;                      //0x2e8
    struct _MMPTE* RetpolineRevertPte;                                      //0x2f0
    struct _LIST_ENTRY NonRetpolineImageLoadList;                           //0x2f8
    ULONG RetpolineStubPages;                                               //0x308
    LONG RetpolineBootStatus;                                               //0x30c
    ULONG ImageBreakpointEnabled;                                           //0x310
    ULONG ImageBreakpointChecksum;                                          //0x314
    ULONG ImageBreakpointSize;                                              //0x318
    volatile LONG ImageValidationFailed;                                    //0x31c
    struct _RTL_AVL_TREE ImageExtentTree;                                   //0x320
    struct _EX_PUSH_LOCK ImageExtentTreeLock;                               //0x328
    ULONG HotPatchReserveSize;                                              //0x330
}; 

----------------------------------------
Structure: _MI_SECTION_WOW_STATE

//0x40 bytes (sizeof)
struct _MI_SECTION_WOW_STATE
{
    struct _RTL_BITMAP_EX ImageBitMap;                                      //0x0
    struct _MI_DLL_OVERFLOW_AREA OverflowArea;                              //0x10
    struct _SECTION* CfgBitMapSection;                                      //0x30
    struct _CONTROL_AREA* CfgBitMapControlArea;                             //0x38
}; 

----------------------------------------
Structure: _MI_SESSION_DRIVER_UNLOAD

//0x8 bytes (sizeof)
struct _MI_SESSION_DRIVER_UNLOAD
{
    union
    {
        VOID (*Function)(struct _DRIVER_OBJECT* arg1);                      //0x0
        ULONGLONG FunctionValue;                                            //0x0
    };
}; 

----------------------------------------
Structure: _MI_SESSION_STATE

//0x10a8 bytes (sizeof)
struct _MI_SESSION_STATE
{
    struct _MMSESSION SystemSession;                                        //0x0
    UCHAR CodePageEdited;                                                   //0x20
    ULONGLONG* DynamicVaBitBuffer;                                          //0x28
    ULONGLONG DynamicVaBitBufferPages;                                      //0x30
    VOID* DynamicVaStart;                                                   //0x38
    VOID* ImageVaStart;                                                     //0x40
    struct _MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];                //0x48
    ULONG* DynamicPtesBitBuffer;                                            //0x1048
    struct _EX_PUSH_LOCK IdLock;                                            //0x1050
    struct _EPROCESS* LeaderProcess;                                        //0x1058
    struct _EX_PUSH_LOCK InitializeLock;                                    //0x1060
    struct _MMWSL_INSTANCE* WorkingSetList;                                 //0x1068
    VOID* SessionBase;                                                      //0x1070
    VOID* SessionCore;                                                      //0x1078
    struct _RTL_AVL_TREE SessionIdNodes;                                    //0x1080
    struct _KEVENT DeleteInProgressEvent;                                   //0x1088
    ULONG DeleteInProgressCount;                                            //0x10a0
}; 

----------------------------------------
Structure: _MI_SHUTDOWN_STATE

//0x78 bytes (sizeof)
struct _MI_SHUTDOWN_STATE
{
    UCHAR CrashDumpInitialized;                                             //0x0
    UCHAR ConnectedStandbyActive;                                           //0x1
    UCHAR ZeroPageFileAtShutdown;                                           //0x2
    ULONG SystemShutdown;                                                   //0x4
    LONG ShutdownFlushInProgress;                                           //0x8
    ULONG MirroringActive;                                                  //0xc
    struct _MI_RESUME_WORKITEM ResumeItem;                                  //0x10
    struct _ETHREAD* MirrorHoldsPfn;                                        //0x48
    struct _RTL_BITMAP_EX MirrorBitMaps[2];                                 //0x50
    struct _MMPTE* CrashDumpPte;                                            //0x70
}; 

----------------------------------------
Structure: _MI_SLAB_ALLOCATOR_CONTEXT

//0x78 bytes (sizeof)
struct _MI_SLAB_ALLOCATOR_CONTEXT
{
    struct _RTL_RB_TREE AllocationsTree;                                    //0x0
    volatile LONG Lock;                                                     //0x10
    struct _MI_SLAB_ALLOCATOR_ENTRY* SlabEntryHint;                         //0x18
    ULONGLONG FreePageCount;                                                //0x20
    ULONGLONG SlabEntryCount;                                               //0x28
    enum _MI_SLAB_ALLOCATOR_TYPE Type;                                      //0x30
    enum _MI_SLAB_ALLOCATOR_PROTECTION Protection;                          //0x34
    union
    {
        ULONG EntryBecameEmpty:1;                                           //0x38
        ULONG Spare:31;                                                     //0x38
        ULONG AllFlags;                                                     //0x38
    } Flags;                                                                //0x38
    struct _MMPFNLIST StandbyList;                                          //0x40
    ULONGLONG LastReplenishTime;                                            //0x68
    ULONGLONG LastFailureTime;                                              //0x70
}; 

----------------------------------------
Structure: _MI_SLAB_ALLOCATOR_ENTRY

//0x0 bytes (sizeof)
struct _MI_SLAB_ALLOCATOR_ENTRY; 

----------------------------------------
Structure: _MI_STANDBY_STATE

//0x90 bytes (sizeof)
struct _MI_STANDBY_STATE
{
    ULONGLONG FirstDecayPage;                                               //0x0
    union _SLIST_HEADER PfnDecayFreeSList;                                  //0x10
    struct _MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;                    //0x20
    struct _KDPC AllocatePfnRepurposeDpc;                                   //0x28
    union _SLIST_HEADER PageHeatListSlist;                                  //0x70
    volatile LONG PageHeatListDisableAllocation;                            //0x80
}; 

----------------------------------------
Structure: _MI_STORE_INPAGE_COMPLETE_FLAGS

//0x4 bytes (sizeof)
struct _MI_STORE_INPAGE_COMPLETE_FLAGS
{
    union
    {
        ULONG EntireFlags;                                                  //0x0
        struct
        {
            ULONG StoreFault:1;                                             //0x0
            ULONG LowResourceFailure:1;                                     //0x0
            ULONG Spare:14;                                                 //0x0
            ULONG RemainingPageCount:16;                                    //0x0
        };
    };
}; 

----------------------------------------
Structure: _MI_SUB64K_FREE_RANGES

//0x38 bytes (sizeof)
struct _MI_SUB64K_FREE_RANGES
{
    struct _RTL_BITMAP_EX BitMap;                                           //0x0
    struct _LIST_ENTRY ListEntry;                                           //0x10
    struct _MMVAD_SHORT* Vad;                                               //0x20
    ULONG SetBits;                                                          //0x28
    ULONG FullSetBits;                                                      //0x2c
    ULONG SubListIndex:2;                                                   //0x30
    ULONG Hint:30;                                                          //0x30
}; 

----------------------------------------
Structure: _MI_SUBSECTION_ENTRY1

//0x4 bytes (sizeof)
struct _MI_SUBSECTION_ENTRY1
{
    ULONG CrossPartitionReferences:30;                                      //0x0
    ULONG SubsectionMappedLarge:2;                                          //0x0
}; 

----------------------------------------
Structure: _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES

//0x8 bytes (sizeof)
struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
{
    ULONGLONG NumberOfPtes:6;                                               //0x0
    ULONGLONG PartitionId:10;                                               //0x0
    ULONGLONG SectionOffset:48;                                             //0x0
}; 

----------------------------------------
Structure: _MI_SYSTEM_IMAGE_STATE

//0xa8 bytes (sizeof)
struct _MI_SYSTEM_IMAGE_STATE
{
    struct _LIST_ENTRY FixupList;                                           //0x0
    struct _EX_PUSH_LOCK LoadLock;                                          //0x10
    struct _ETHREAD* LoadLockOwner;                                         //0x18
    ULONG LoadLockCount;                                                    //0x20
    volatile LONG FixupLock;                                                //0x24
    UCHAR FirstLoadEver;                                                    //0x28
    UCHAR LargePageAll;                                                     //0x29
    ULONGLONG LastPage;                                                     //0x30
    struct _LIST_ENTRY LargePageList;                                       //0x38
    struct _LIST_ENTRY StrongCodeLoadFailureList;                           //0x48
    struct _KLDR_DATA_TABLE_ENTRY* SystemBase[1];                           //0x58
    struct _KLDR_DATA_TABLE_ENTRY* BeingDeleted;                            //0x60
    struct _EX_PUSH_LOCK MappingRangesPushLock;                             //0x68
    struct _MI_DRIVER_VA* MappingRanges[2];                                 //0x70
    ULONGLONG PageCount;                                                    //0x80
    struct _MM_SYSTEM_PAGE_COUNTS PageCounts;                               //0x88
    struct _EX_PUSH_LOCK CollidedLock;                                      //0x98
    struct _RTL_AVL_TREE ImageTree;                                         //0xa0
}; 

----------------------------------------
Structure: _MI_SYSTEM_INFORMATION

//0x32c0 bytes (sizeof)
struct _MI_SYSTEM_INFORMATION
{
    struct _MI_POOL_STATE Pools;                                            //0x0
    struct _MI_SECTION_STATE Sections;                                      //0xc0
    struct _MI_SYSTEM_IMAGE_STATE SystemImages;                             //0x400
    struct _MI_SESSION_STATE Sessions;                                      //0x4a8
    struct _MI_PROCESS_STATE Processes;                                     //0x1550
    struct _MI_HARDWARE_STATE Hardware;                                     //0x15c0
    struct _MI_SYSTEM_VA_STATE SystemVa;                                    //0x1780
    struct _MI_COMBINE_STATE PageCombines;                                  //0x1c40
    struct _MI_PAGELIST_STATE PageLists;                                    //0x1c60
    struct _MI_PARTITION_STATE Partitions;                                  //0x1d00
    struct _MI_SHUTDOWN_STATE Shutdowns;                                    //0x1dc0
    struct _MI_ERROR_STATE Errors;                                          //0x1e38
    struct _MI_ACCESS_LOG_STATE AccessLog;                                  //0x1f00
    struct _MI_DEBUGGER_STATE Debugger;                                     //0x1f80
    struct _MI_STANDBY_STATE Standby;                                       //0x20a0
    struct _MI_SYSTEM_PTE_STATE SystemPtes;                                 //0x2140
    struct _MI_IO_PAGE_STATE IoPages;                                       //0x2340
    struct _MI_PAGING_IO_STATE PagingIo;                                    //0x23b0
    struct _MI_COMMON_PAGE_STATE CommonPages;                               //0x2460
    struct _MI_SYSTEM_TRIM_STATE Trims;                                     //0x2540
    struct _MI_ENCLAVE_STATE Enclaves;                                      //0x2580
    ULONGLONG Cookie;                                                       //0x25c8
    VOID* volatile* BootRegistryRuns;                                       //0x25d0
    volatile LONG ZeroingDisabled;                                          //0x25d8
    UCHAR FullyInitialized;                                                 //0x25dc
    UCHAR SafeBooted;                                                       //0x25dd
    struct _tlgProvider_t* TraceLogging;                                    //0x25e0
    struct _MI_VISIBLE_STATE Vs;                                            //0x2600
}; 

----------------------------------------
Structure: _MI_SYSTEM_NODE_INFORMATION

//0xb0 bytes (sizeof)
struct _MI_SYSTEM_NODE_INFORMATION
{
    struct _CACHED_KSTACK_LIST CachedKernelStacks[2];                       //0x0
    struct _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool;                    //0x40
    ULONGLONG CachedNonPagedPoolCount;                                      //0x88
    ULONGLONG NonPagedPoolSpinLock;                                         //0x90
    struct _MMPFN* CachedNonPagedPool;                                      //0x98
    VOID* NonPagedPoolFirstVa;                                              //0xa0
    VOID* NonPagedPoolLastVa;                                               //0xa8
}; 

----------------------------------------
Structure: _MI_SYSTEM_PTE_STATE

//0x200 bytes (sizeof)
struct _MI_SYSTEM_PTE_STATE
{
    struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;                      //0x0
    union _SLIST_HEADER DeadPteTrackerSListHead;                            //0x80
    ULONGLONG PteTrackerLock;                                               //0x90
    struct _RTL_BITMAP_EX PteTrackingBitmap;                                //0x98
    struct _MI_CACHED_PTES* CachedPteHeads;                                 //0xa8
    struct _MI_CACHED_PTES* CachedKernelStackPteHeads;                      //0xb0
    struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;                           //0xb8
    struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;                          //0x118
    ULONG StackGrowthFailures;                                              //0x178
    UCHAR KernelStackPages;                                                 //0x17c
    UCHAR TrackPtesAborted;                                                 //0x17d
    UCHAR AdjustCounter;                                                    //0x17e
    volatile LONG ReservedMappingLock;                                      //0x180
    struct _RTL_AVL_TREE ReservedMappingTree;                               //0x188
    struct _MMPFN* ReservedMappingPageTablePfns;                            //0x190
    struct _RTL_AVL_TREE OutswappedKernelStackRoot;                         //0x198
    volatile LONG OutswappedKernelStackLock;                                //0x1a0
    struct _MMPTE* BreakMakePte;                                            //0x1a8
    struct _MI_ULTRA_VA_CONTEXT UltraSpaceContext;                          //0x1b0
    ULONG NumberOfUltraMdlMaps;                                             //0x1f0
    struct _MI_ULTRA_MDL_NODE* UltraMdlNodeMappings;                        //0x1f8
}; 

----------------------------------------
Structure: _MI_SYSTEM_PTE_TYPE

//0x60 bytes (sizeof)
struct _MI_SYSTEM_PTE_TYPE
{
    struct _RTL_BITMAP_EX Bitmap;                                           //0x0
    struct _MMPTE* BasePte;                                                 //0x10
    ULONG Flags;                                                            //0x18
    enum _MI_SYSTEM_VA_TYPE VaType;                                         //0x1c
    ULONG* FailureCount;                                                    //0x20
    ULONG PteFailures;                                                      //0x28
    union
    {
        ULONGLONG SpinLock;                                                 //0x30
        struct _EX_PUSH_LOCK* GlobalPushLock;                               //0x30
    };
    volatile ULONGLONG TotalSystemPtes;                                     //0x38
    ULONGLONG Hint;                                                         //0x40
    ULONGLONG LowestBitEverAllocated;                                       //0x48
    struct _MI_CACHED_PTES* CachedPtes;                                     //0x50
    volatile ULONGLONG TotalFreeSystemPtes;                                 //0x58
}; 

----------------------------------------
Structure: _MI_SYSTEM_TRIM_STATE

//0x40 bytes (sizeof)
struct _MI_SYSTEM_TRIM_STATE
{
    ULONGLONG ExpansionLock;                                                //0x0
    volatile LONG TrimInProgressCount;                                      //0x8
    struct _KEVENT PeriodicWorkingSetEvent;                                 //0x10
    ULONG TrimAllPageFaultCount[3];                                         //0x28
}; 

----------------------------------------
Structure: _MI_SYSTEM_VA_ASSIGNMENT

//0x10 bytes (sizeof)
struct _MI_SYSTEM_VA_ASSIGNMENT
{
    VOID* BaseAddress;                                                      //0x0
    ULONGLONG NumberOfBytes;                                                //0x8
}; 

----------------------------------------
Structure: _MI_SYSTEM_VA_STATE

//0x4c0 bytes (sizeof)
struct _MI_SYSTEM_VA_STATE
{
    ULONGLONG SystemTablesLock;                                             //0x0
    ULONGLONG AvailableSystemCacheVa;                                       //0x8
    struct _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;                    //0x10
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;                      //0x58
    struct _MI_DYNAMIC_BITMAP DynamicBitMapDriverImages[2];                 //0xa0
    struct _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;                       //0x130
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;                     //0x178
    struct _MI_DYNAMIC_BITMAP DynamicBitMapSecureNonPagedPool;              //0x1c0
    VOID* HalPrivateVaStart;                                                //0x208
    ULONGLONG HalPrivateVaSize;                                             //0x210
    ULONG SystemVaAssignment[8];                                            //0x218
    ULONG SystemVaAssignmentHint;                                           //0x238
    ULONG TopLevelPteLockBits[32];                                          //0x23c
    volatile LONG DeleteKvaLock;                                            //0x2bc
    struct _MI_WSLE* WsleArrays[8];                                         //0x2c0
    VOID* PagableHyperSpace;                                                //0x300
    VOID* HyperSpaceEnd;                                                    //0x308
    ULONGLONG PagableHyperSpaceBytes;                                       //0x310
    ULONGLONG PageTableCommitmentOffset[2];                                 //0x318
    struct _KEVENT FreeSystemCacheVa;                                       //0x328
    ULONGLONG SystemVaLock;                                                 //0x340
    ULONGLONG SystemCacheViewLock;                                          //0x348
    struct _MMWSL_INSTANCE SystemWorkingSetList[8];                         //0x350
    ULONGLONG SelfmapLock[4];                                               //0x490
}; 

----------------------------------------
Structure: _MI_TRIAGE_DUMP_DATA

//0x38 bytes (sizeof)
struct _MI_TRIAGE_DUMP_DATA
{
    ULONGLONG BadPageCount;                                                 //0x0
    LONG BadPagesDetected;                                                  //0x8
    LONG ZeroedPageSingleBitErrorsDetected;                                 //0xc
    LONG ScrubPasses;                                                       //0x10
    LONG ScrubBadPagesFound;                                                //0x14
    ULONG PageHashErrors;                                                   //0x18
    ULONGLONG FeatureBits;                                                  //0x20
    ULONG TimeZoneId;                                                       //0x28
    union _MI_FLAGS Flags;                                                  //0x2c
    VOID* VsmConnection;                                                    //0x30
}; 

----------------------------------------
Structure: _MI_ULTRA_MDL_NODE

//0x200 bytes (sizeof)
struct _MI_ULTRA_MDL_NODE
{
    struct _MI_ALIGNED_SLIST UltraMdlMaps[8];                               //0x0
}; 

----------------------------------------
Structure: _MI_ULTRA_VA_CONTEXT

//0x40 bytes (sizeof)
struct _MI_ULTRA_VA_CONTEXT
{
    ULONGLONG Lock;                                                         //0x0
    VOID* ZeroMapping;                                                      //0x8
    ULONGLONG AllocationHintBit;                                            //0x10
    struct _RTL_BITMAP_EX Bitmap[2];                                        //0x18
    volatile LONG ConcurrencyMaximum;                                       //0x38
    volatile LONG ConcurrencyCount;                                         //0x3c
}; 

----------------------------------------
Structure: _MI_VAD_EVENT_BLOCK

//0x48 bytes (sizeof)
struct _MI_VAD_EVENT_BLOCK
{
    struct _MI_VAD_EVENT_BLOCK* Next;                                       //0x0
    union
    {
        struct _KGATE Gate;                                                 //0x8
        struct _MMADDRESS_LIST SecureInfo;                                  //0x8
        struct _RTL_BITMAP_EX BitMap;                                       //0x8
        struct _MMINPAGE_SUPPORT* InPageSupport;                            //0x8
        struct _MI_LARGEPAGE_VAD_INFO LargePage;                            //0x8
        struct _MI_PHYSICAL_VIEW AweView;                                   //0x8
        struct _ETHREAD* CreatingThread;                                    //0x8
        struct _MI_SUB64K_FREE_RANGES PebTeb;                               //0x8
        struct _MMVAD_SHORT* PlaceholderVad;                                //0x8
    };
    ULONG WaitReason;                                                       //0x40
}; 

----------------------------------------
Structure: _MI_VAD_SEQUENTIAL_INFO

//0x8 bytes (sizeof)
struct _MI_VAD_SEQUENTIAL_INFO
{
    ULONGLONG Length:12;                                                    //0x0
    ULONGLONG Vpn:52;                                                       //0x0
}; 

----------------------------------------
Structure: _MI_VISIBLE_PARTITION

//0x1200 bytes (sizeof)
struct _MI_VISIBLE_PARTITION
{
    ULONGLONG LowestPhysicalPage;                                           //0x0
    ULONGLONG HighestPhysicalPage;                                          //0x8
    ULONGLONG NumberOfPhysicalPages;                                        //0x10
    volatile ULONG NumberOfPagingFiles;                                     //0x18
    UCHAR SystemCacheInitialized;                                           //0x1c
    struct _MMPAGING_FILE* PagingFile[16];                                  //0x20
    volatile ULONGLONG AvailablePages;                                      //0xc0
    volatile ULONGLONG ResidentAvailablePages;                              //0x100
    struct _MMSUPPORT_INSTANCE PartitionWs[1];                              //0x140
    struct _MMWSL_INSTANCE PartitionWorkingSetLists[1];                     //0x200
    volatile ULONGLONG TotalCommittedPages;                                 //0x228
    struct _MMPFNLIST ModifiedPageListHead;                                 //0x240
    struct _MMPFNLIST ModifiedNoWritePageListHead;                          //0x280
    ULONGLONG TotalCommitLimit;                                             //0x2a8
    ULONGLONG TotalPagesForPagingFile;                                      //0x2b0
    ULONGLONG VadPhysicalPages;                                             //0x2b8
    ULONGLONG ProcessLockedFilePages;                                       //0x2c0
    volatile ULONGLONG SharedCommit;                                        //0x2c8
    ULONGLONG SlabAllocatorPages;                                           //0x2d0
    ULONG ChargeCommitmentFailures[4];                                      //0x2d8
    volatile LONG PageFileTraceIndex;                                       //0x2e8
    struct _MI_PAGEFILE_TRACES PageFileTraces[32];                          //0x2f0
}; 

----------------------------------------
Structure: _MI_VISIBLE_STATE

//0xcc0 bytes (sizeof)
struct _MI_VISIBLE_STATE
{
    struct _LIST_ENTRY SessionWsList;                                       //0x0
    struct _RTL_BITMAP* SessionIdBitmap;                                    //0x10
    struct _MM_PAGED_POOL_INFO PagedPoolInfo;                               //0x18
    ULONGLONG MaximumNonPagedPoolInPages;                                   //0x30
    ULONGLONG SizeOfPagedPoolInPages;                                       //0x38
    struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;                               //0x40
    volatile ULONGLONG NonPagedPoolCommit;                                  //0xa0
    volatile ULONGLONG SmallNonPagedPtesCommit;                             //0xa8
    volatile ULONGLONG BootCommit;                                          //0xb0
    volatile ULONGLONG MdlPagesAllocated;                                   //0xb8
    volatile ULONGLONG SystemPageTableCommit;                               //0xc0
    volatile ULONGLONG ProcessCommit;                                       //0xc8
    volatile LONG DriverCommit;                                             //0xd0
    UCHAR PagingLevels;                                                     //0xd4
    volatile ULONGLONG PfnDatabaseCommit;                                   //0xd8
    struct _MMSUPPORT_FULL SystemWs[6];                                     //0x100
    struct _MMSUPPORT_SHARED SystemCacheShared;                             //0x880
    struct _MMSUPPORT_AGGREGATION AggregateSystemWs[1];                     //0x900
    ULONG MapCacheFailures;                                                 //0x920
    ULONGLONG PagefileHashPages;                                            //0x928
    struct _SYSPTES_HEADER PteHeader;                                       //0x930
    ULONGLONG SystemVaTypeCount[16];                                        //0xa48
    UCHAR SystemVaType[256];                                                //0xac8
    struct _MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[13];                    //0xbc8
}; 

----------------------------------------
Structure: _MI_WRITE_CALIBRATION

//0x20 bytes (sizeof)
struct _MI_WRITE_CALIBRATION
{
    ULONG MaximumNumberProcessors;                                          //0x0
    enum _MI_WRITE_TYPES OptimalWriteType;                                  //0x4
    ULONGLONG PerProcessorNumberOfBytes;                                    //0x8
    ULONG OptimalWriteProcessors[2];                                        //0x10
    struct _MI_WRITE_MODES* RawTimeStamps;                                  //0x18
}; 

----------------------------------------
Structure: _MI_WRITE_MODES

//0x10 bytes (sizeof)
struct _MI_WRITE_MODES
{
    ULONGLONG WriteType[2];                                                 //0x0
}; 

----------------------------------------
Structure: _MI_WSLE

//0x1 bytes (sizeof)
struct _MI_WSLE
{
    union
    {
        struct
        {
            UCHAR Age:4;                                                    //0x0
            UCHAR Protection:3;                                             //0x0
            UCHAR Reserved:1;                                               //0x0
        } e1;                                                               //0x0
        struct
        {
            UCHAR EntireWsle;                                               //0x0
        } e2;                                                               //0x0
    } u1;                                                                   //0x0
}; 

----------------------------------------
Structure: _MI_ZERO_COST_COUNTS

//0x10 bytes (sizeof)
struct _MI_ZERO_COST_COUNTS
{
    ULONGLONG NativeSum;                                                    //0x0
    ULONGLONG CachedSum;                                                    //0x8
}; 

----------------------------------------
Structure: _MI_ZERO_THREAD_CONTEXT

//0x0 bytes (sizeof)
struct _MI_ZERO_THREAD_CONTEXT; 

----------------------------------------
Structure: _MMADDRESS_LIST

//0x10 bytes (sizeof)
struct _MMADDRESS_LIST
{
    union
    {
        struct _MMSECURE_FLAGS Flags;                                       //0x0
        ULONG FlagsLong;                                                    //0x0
        VOID* StartVa;                                                      //0x0
    } u1;                                                                   //0x0
    VOID* EndVa;                                                            //0x8
}; 

----------------------------------------
Structure: _MMCLONE_BLOCK

//0x20 bytes (sizeof)
struct _MMCLONE_BLOCK
{
    struct _MMPTE ProtoPte;                                                 //0x0
    ULONGLONG CrossPartitionReferences;                                     //0x8
    union
    {
        volatile ULONGLONG CloneCommitCount;                                //0x10
        struct _MI_CLONE_BLOCK_FLAGS u1;                                    //0x10
    };
    volatile ULONGLONG CloneRefCount;                                       //0x18
}; 

----------------------------------------
Structure: _MMCLONE_DESCRIPTOR

//0x70 bytes (sizeof)
struct _MMCLONE_DESCRIPTOR
{
    union
    {
        struct _RTL_BALANCED_NODE CloneNode;                                //0x0
        struct _MMCLONE_DESCRIPTOR* Next;                                   //0x0
    };
    struct _MMCLONE_BLOCK* StartingCloneBlock;                              //0x18
    struct _MMCLONE_BLOCK* EndingCloneBlock;                                //0x20
    ULONGLONG NumberOfPtes;                                                 //0x28
    volatile ULONGLONG NumberOfReferences;                                  //0x30
    struct _MMCLONE_HEADER* CloneHeader;                                    //0x38
    ULONGLONG NonPagedPoolQuotaCharge;                                      //0x40
    struct _SLIST_ENTRY DeleteList;                                         //0x50
    ULONGLONG NestingLevel;                                                 //0x60
}; 

----------------------------------------
Structure: _MMCLONE_HEADER

//0x20 bytes (sizeof)
struct _MMCLONE_HEADER
{
    ULONGLONG NumberOfPtes;                                                 //0x0
    volatile ULONGLONG NumberOfProcessReferences;                           //0x8
    struct _MMCLONE_BLOCK* ClonePtes;                                       //0x10
    struct _MI_PARTITION* Partition;                                        //0x18
}; 

----------------------------------------
Structure: _MMDEREFERENCE_SEGMENT_HEADER

//0x50 bytes (sizeof)
struct _MMDEREFERENCE_SEGMENT_HEADER
{
    struct _KSEMAPHORE Semaphore;                                           //0x0
    struct _LIST_ENTRY ControlAreaDeleteListHead;                           //0x20
    struct _LIST_ENTRY UnusedSegmentDeleteListHead;                         //0x30
    struct _LIST_ENTRY PagefileExtensionListHead;                           //0x40
}; 

----------------------------------------
Structure: _MMEXTEND_INFO

//0x10 bytes (sizeof)
struct _MMEXTEND_INFO
{
    ULONGLONG CommittedSize;                                                //0x0
    ULONG ReferenceCount;                                                   //0x8
}; 

----------------------------------------
Structure: _MMINPAGE_FLAGS

//0x4 bytes (sizeof)
struct _MMINPAGE_FLAGS
{
    ULONG GetExtents:1;                                                     //0x0
    ULONG PrefetchSystemVmType:2;                                           //0x0
    ULONG VaPrefetchReadBlock:1;                                            //0x0
    ULONG CollidedFlowThrough:1;                                            //0x0
    ULONG ForceCollisions:1;                                                //0x0
    ULONG InPageExpanded:1;                                                 //0x0
    ULONG IssuedAtLowPriority:1;                                            //0x0
    ULONG FaultFromStore:1;                                                 //0x0
    ULONG PagePriority:3;                                                   //0x0
    ULONG ClusteredPagePriority:3;                                          //0x0
    ULONG MakeClusterValid:1;                                               //0x0
    ULONG PerformRelocations:1;                                             //0x0
    ULONG ZeroLastPage:1;                                                   //0x0
    ULONG UserFault:1;                                                      //0x0
    ULONG StandbyProtectionNeeded:1;                                        //0x0
    ULONG PteChanged:1;                                                     //0x0
    ULONG PageFileFault:1;                                                  //0x0
    ULONG PageFilePageHashActive:1;                                         //0x0
    ULONG CoalescedIo:1;                                                    //0x0
    ULONG VmLockNotNeeded:1;                                                //0x0
    ULONG Spare0:1;                                                         //0x0
    ULONG Spare1:6;                                                         //0x0
}; 

----------------------------------------
Structure: _MMINPAGE_SUPPORT

//0x1c0 bytes (sizeof)
struct _MMINPAGE_SUPPORT
{
    union
    {
        struct _LIST_ENTRY ListEntry;                                       //0x0
        struct _SLIST_ENTRY SListEntry;                                     //0x0
    };
    struct _LIST_ENTRY ListHead;                                            //0x10
    struct _KEVENT Event;                                                   //0x20
    struct _KEVENT CollidedEvent;                                           //0x38
    struct _IO_STATUS_BLOCK IoStatus;                                       //0x50
    union _LARGE_INTEGER ReadOffset;                                        //0x60
    union
    {
        struct _KAPC_STATE ApcState;                                        //0x68
        struct _MI_HARD_FAULT_STATE HardFaultState;                         //0x68
    } u2;                                                                   //0x68
    struct _ETHREAD* Thread;                                                //0x98
    struct _MMPFN* LockedProtoPfn;                                          //0xa0
    struct _MMPTE PteContents;                                              //0xa8
    volatile LONG WaitCount;                                                //0xb0
    volatile LONG InjectRetry;                                              //0xb4
    ULONG ByteCount;                                                        //0xb8
    union
    {
        ULONG ImagePteOffset;                                               //0xbc
        ULONG TossPage;                                                     //0xbc
    } u3;                                                                   //0xbc
    union
    {
        struct _MMINPAGE_FLAGS e1;                                          //0xc0
        ULONG LongFlags;                                                    //0xc0
    } u1;                                                                   //0xc0
    union
    {
        struct _FILE_OBJECT* FilePointer;                                   //0xc8
        struct _MMPAGING_FILE* PagingFile;                                  //0xc8
    };
    union
    {
        struct _CONTROL_AREA* ControlArea;                                  //0xd0
        struct _SUBSECTION* Subsection;                                     //0xd0
    };
    VOID* Autoboost;                                                        //0xd8
    VOID* FaultingAddress;                                                  //0xe0
    struct _MMPTE* PointerPte;                                              //0xe8
    struct _MMPTE* BasePte;                                                 //0xf0
    struct _MMPFN* Pfn;                                                     //0xf8
    struct _MDL* PrefetchMdl;                                               //0x100
    volatile LONGLONG ProbeCount;                                           //0x108
    struct _MDL Mdl;                                                        //0x110
    union
    {
        ULONGLONG Page[16];                                                 //0x140
        struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;                  //0x140
    };
}; 

----------------------------------------
Structure: _MMINPAGE_SUPPORT_FLOW_THROUGH

//0x38 bytes (sizeof)
struct _MMINPAGE_SUPPORT_FLOW_THROUGH
{
    ULONGLONG Page[1];                                                      //0x0
    struct _MMINPAGE_SUPPORT* InitialInPageSupport;                         //0x8
    struct _MMPAGING_FILE* PagingFile;                                      //0x10
    ULONGLONG PageFileOffset;                                               //0x18
    struct _RTL_BALANCED_NODE Node;                                         //0x20
}; 

----------------------------------------
Structure: _MMMOD_WRITER_LISTHEAD

//0x28 bytes (sizeof)
struct _MMMOD_WRITER_LISTHEAD
{
    struct _LIST_ENTRY ListHead;                                            //0x0
    union
    {
        struct _KGATE Gate;                                                 //0x10
        struct _KEVENT Event;                                               //0x10
    };
}; 

----------------------------------------
Structure: _MMMOD_WRITER_MDL_ENTRY

//0x108 bytes (sizeof)
struct _MMMOD_WRITER_MDL_ENTRY
{
    struct _LIST_ENTRY Links;                                               //0x0
    union
    {
        struct _IO_STATUS_BLOCK IoStatus;                                   //0x10
    } u;                                                                    //0x10
    struct _IRP* Irp;                                                       //0x20
    struct _MODWRITER_FLAGS u1;                                             //0x28
    ULONG StoreWriteRefCount;                                               //0x2c
    struct _KAPC StoreWriteCompletionApc;                                   //0x30
    ULONG ByteCount;                                                        //0x88
    ULONG ChargedPages;                                                     //0x8c
    struct _MMPAGING_FILE* PagingFile;                                      //0x90
    struct _FILE_OBJECT* File;                                              //0x98
    struct _CONTROL_AREA* ControlArea;                                      //0xa0
    struct _ERESOURCE* FileResource;                                        //0xa8
    union _LARGE_INTEGER WriteOffset;                                       //0xb0
    union _LARGE_INTEGER IssueTime;                                         //0xb8
    struct _MI_PARTITION* Partition;                                        //0xc0
    struct _MDL* PointerMdl;                                                //0xc8
    struct _MDL Mdl;                                                        //0xd0
    ULONGLONG Page[1];                                                      //0x100
}; 

----------------------------------------
Structure: _MMPAGE_FILE_EXPANSION

//0x58 bytes (sizeof)
struct _MMPAGE_FILE_EXPANSION
{
    struct _SEGMENT* Segment;                                               //0x0
    struct _LIST_ENTRY DereferenceList;                                     //0x8
    struct _MI_PARTITION* Partition;                                        //0x18
    ULONGLONG RequestedExpansionSize;                                       //0x20
    ULONGLONG ActualExpansion;                                              //0x28
    struct _KEVENT Event;                                                   //0x30
    volatile LONG InProgress;                                               //0x48
    union
    {
        ULONG LongFlags;                                                    //0x4c
        struct _MMPAGE_FILE_EXPANSION_FLAGS Flags;                          //0x4c
    } u1;                                                                   //0x4c
    VOID** volatile ActiveEntry;                                            //0x50
}; 

----------------------------------------
Structure: _MMPAGE_FILE_EXPANSION_FLAGS

//0x4 bytes (sizeof)
struct _MMPAGE_FILE_EXPANSION_FLAGS
{
    UCHAR PageFileNumber:8;                                                 //0x0
    UCHAR Spare1:8;                                                         //0x1
    UCHAR Spare2:8;                                                         //0x2
    UCHAR IgnoreCurrentCommit:1;                                            //0x3
    UCHAR IncreaseMinimumSize:1;                                            //0x3
    UCHAR AttemptForCantExtend:1;                                           //0x3
    UCHAR UnusedSegmentDeletion:1;                                          //0x3
    UCHAR PageFileContract:1;                                               //0x3
    UCHAR NoWait:1;                                                         //0x3
    UCHAR Spare3:2;                                                         //0x3
}; 

----------------------------------------
Structure: _MMPAGING_FILE

//0x120 bytes (sizeof)
struct _MMPAGING_FILE
{
    ULONGLONG Size;                                                         //0x0
    ULONGLONG MaximumSize;                                                  //0x8
    ULONGLONG MinimumSize;                                                  //0x10
    ULONGLONG FreeSpace;                                                    //0x18
    ULONGLONG PeakUsage;                                                    //0x20
    ULONGLONG HighestPage;                                                  //0x28
    ULONGLONG FreeReservationSpace;                                         //0x30
    struct _FILE_OBJECT* File;                                              //0x38
    struct _MMMOD_WRITER_MDL_ENTRY** Entry;                                 //0x40
    ULONG NumberOfModWriterEntries;                                         //0x48
    union _SLIST_HEADER PfnsToFree;                                         //0x50
    struct _UNICODE_STRING PageFileName;                                    //0x60
    struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;                          //0x70
    ULONG AllocationBitmapHint;                                             //0x78
    ULONG LargestAllocationCluster;                                         //0x7c
    ULONG RefreshAllocationCluster;                                         //0x80
    ULONG LastRefreshAllocationCluster;                                     //0x84
    ULONG ReservedClusterSizeAggregate;                                     //0x88
    ULONG MaximumRunLengthInBitmaps;                                        //0x8c
    struct _RTL_RB_TREE BitmapsCacheLengthTree;                             //0x90
    struct _RTL_RB_TREE BitmapsCacheLocationTree;                           //0xa0
    struct _LIST_ENTRY BitmapsCacheFreeList;                                //0xb0
    struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY* BitmapsCacheEntries;           //0xc0
    union
    {
        ULONG ToBeEvictedCount;                                             //0xc8
        ULONG HybridPriority;                                               //0xc8
    };
    USHORT PageFileNumber:4;                                                //0xcc
    USHORT WsSwapPagefile:1;                                                //0xcc
    USHORT NoReservations:1;                                                //0xcc
    USHORT VirtualStorePagefile:1;                                          //0xcc
    USHORT SwapSupported:1;                                                 //0xcc
    USHORT NodeInserted:1;                                                  //0xcc
    USHORT StackNotified:1;                                                 //0xcc
    USHORT BackedBySCM:1;                                                   //0xcc
    USHORT SpecialPurposeMemory:1;                                          //0xcc
    USHORT Spare0:3;                                                        //0xcc
    UCHAR AdriftMdls:1;                                                     //0xce
    UCHAR Spare1:7;                                                         //0xce
    UCHAR IgnoreReservations:1;                                             //0xcf
    UCHAR Spare2:7;                                                         //0xcf
    ULONG PageHashPages;                                                    //0xd0
    ULONG PageHashPagesPeak;                                                //0xd4
    ULONG* PageHash;                                                        //0xd8
    VOID* FileHandle;                                                       //0xe0
    volatile LONG SpinLock;                                                 //0xe8
    struct _RTL_AVL_TREE FlowThroughReadRoot;                               //0xf0
    struct _MI_PARTITION* Partition;                                        //0xf8
    struct _RTL_BALANCED_NODE FileObjectNode;                               //0x100
}; 

----------------------------------------
Structure: _MMPFN

//0x30 bytes (sizeof)
struct _MMPFN
{
    union
    {
        struct _LIST_ENTRY ListEntry;                                       //0x0
        struct _RTL_BALANCED_NODE TreeNode;                                 //0x0
        struct
        {
            union
            {
                struct _SINGLE_LIST_ENTRY NextSlistPfn;                     //0x0
                VOID* Next;                                                 //0x0
                ULONGLONG Flink:36;                                         //0x0
                ULONGLONG NodeFlinkHigh:28;                                 //0x0
                struct _MI_ACTIVE_PFN Active;                               //0x0
            } u1;                                                           //0x0
            union
            {
                struct _MMPTE* PteAddress;                                  //0x8
                ULONGLONG PteLong;                                          //0x8
            };
            struct _MMPTE OriginalPte;                                      //0x10
        };
    };
    struct _MIPFNBLINK u2;                                                  //0x18
    union
    {
        struct
        {
            USHORT ReferenceCount;                                          //0x20
            struct _MMPFNENTRY1 e1;                                         //0x22
        };
        struct
        {
            struct _MMPFNENTRY3 e3;                                         //0x23
        struct
        {
            USHORT ReferenceCount;                                          //0x20
        } e2;                                                               //0x20
        };
        struct
        {
            ULONG EntireField;                                              //0x20
        } e4;                                                               //0x20
    } u3;                                                                   //0x20
    USHORT NodeBlinkLow;                                                    //0x24
    UCHAR Unused:4;                                                         //0x26
    UCHAR Unused2:4;                                                        //0x26
    union
    {
        UCHAR ViewCount;                                                    //0x27
        UCHAR NodeFlinkLow;                                                 //0x27
        struct
        {
            UCHAR ModifiedListBucketIndex:4;                                //0x27
            UCHAR AnchorLargePageSize:2;                                    //0x27
        };
    };
    union
    {
        ULONGLONG PteFrame:36;                                              //0x28
        ULONGLONG ResidentPage:1;                                           //0x28
        ULONGLONG Unused1:1;                                                //0x28
        ULONGLONG Unused2:1;                                                //0x28
        ULONGLONG Partition:10;                                             //0x28
        ULONGLONG FileOnly:1;                                               //0x28
        ULONGLONG PfnExists:1;                                              //0x28
        ULONGLONG Spare:9;                                                  //0x28
        ULONGLONG PageIdentity:3;                                           //0x28
        ULONGLONG PrototypePte:1;                                           //0x28
        ULONGLONG EntireField;                                              //0x28
    } u4;                                                                   //0x28
}; 

----------------------------------------
Structure: _MMPFNENTRY1

//0x1 bytes (sizeof)
struct _MMPFNENTRY1
{
    UCHAR PageLocation:3;                                                   //0x0
    UCHAR WriteInProgress:1;                                                //0x0
    UCHAR Modified:1;                                                       //0x0
    UCHAR ReadInProgress:1;                                                 //0x0
    UCHAR CacheAttribute:2;                                                 //0x0
}; 

----------------------------------------
Structure: _MMPFNENTRY3

//0x1 bytes (sizeof)
struct _MMPFNENTRY3
{
    UCHAR Priority:3;                                                       //0x0
    UCHAR OnProtectedStandby:1;                                             //0x0
    UCHAR InPageError:1;                                                    //0x0
    UCHAR SystemChargedPage:1;                                              //0x0
    UCHAR RemovalRequested:1;                                               //0x0
    UCHAR ParityError:1;                                                    //0x0
}; 

----------------------------------------
Structure: _MMPFNLIST

//0x28 bytes (sizeof)
struct _MMPFNLIST
{
    ULONGLONG Total;                                                        //0x0
    enum _MMLISTS ListName;                                                 //0x8
    ULONGLONG Flink;                                                        //0x10
    ULONGLONG Blink;                                                        //0x18
    ULONGLONG Lock;                                                         //0x20
}; 

----------------------------------------
Structure: _MMPFNLIST_SHORT

//0x18 bytes (sizeof)
struct _MMPFNLIST_SHORT
{
    ULONGLONG Total;                                                        //0x0
    ULONGLONG Flink;                                                        //0x8
    ULONGLONG Blink;                                                        //0x10
}; 

----------------------------------------
Structure: _MMPTE

//0x8 bytes (sizeof)
struct _MMPTE
{
    union
    {
        ULONGLONG Long;                                                     //0x0
        volatile ULONGLONG VolatileLong;                                    //0x0
        struct _MMPTE_HARDWARE Hard;                                        //0x0
        struct _MMPTE_PROTOTYPE Proto;                                      //0x0
        struct _MMPTE_SOFTWARE Soft;                                        //0x0
        struct _MMPTE_TIMESTAMP TimeStamp;                                  //0x0
        struct _MMPTE_TRANSITION Trans;                                     //0x0
        struct _MMPTE_SUBSECTION Subsect;                                   //0x0
        struct _MMPTE_LIST List;                                            //0x0
    } u;                                                                    //0x0
}; 

----------------------------------------
Structure: _MMPTE_HARDWARE

//0x8 bytes (sizeof)
struct _MMPTE_HARDWARE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Dirty1:1;                                                     //0x0
    ULONGLONG Owner:1;                                                      //0x0
    ULONGLONG WriteThrough:1;                                               //0x0
    ULONGLONG CacheDisable:1;                                               //0x0
    ULONGLONG Accessed:1;                                                   //0x0
    ULONGLONG Dirty:1;                                                      //0x0
    ULONGLONG LargePage:1;                                                  //0x0
    ULONGLONG Global:1;                                                     //0x0
    ULONGLONG CopyOnWrite:1;                                                //0x0
    ULONGLONG Unused:1;                                                     //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG ReservedForHardware:4;                                        //0x0
    ULONGLONG ReservedForSoftware:4;                                        //0x0
    ULONGLONG WsleAge:4;                                                    //0x0
    ULONGLONG WsleProtection:3;                                             //0x0
    ULONGLONG NoExecute:1;                                                  //0x0
}; 

----------------------------------------
Structure: _MMPTE_LIST

//0x8 bytes (sizeof)
struct _MMPTE_LIST
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG OneEntry:1;                                                   //0x0
    ULONGLONG filler0:2;                                                    //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG filler1:16;                                                   //0x0
    ULONGLONG NextEntry:36;                                                 //0x0
}; 

----------------------------------------
Structure: _MMPTE_PROTOTYPE

//0x8 bytes (sizeof)
struct _MMPTE_PROTOTYPE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG DemandFillProto:1;                                            //0x0
    ULONGLONG HiberVerifyConverted:1;                                       //0x0
    ULONGLONG ReadOnly:1;                                                   //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Combined:1;                                                   //0x0
    ULONGLONG Unused1:4;                                                    //0x0
    LONGLONG ProtoAddress:48;                                               //0x0
}; 

----------------------------------------
Structure: _MMPTE_SOFTWARE

//0x8 bytes (sizeof)
struct _MMPTE_SOFTWARE
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG PageFileReserved:1;                                           //0x0
    ULONGLONG PageFileAllocated:1;                                          //0x0
    ULONGLONG ColdPage:1;                                                   //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFileLow:4;                                                //0x0
    ULONGLONG UsedPageTableEntries:10;                                      //0x0
    ULONGLONG ShadowStack:1;                                                //0x0
    ULONGLONG Unused:5;                                                     //0x0
    ULONGLONG PageFileHigh:32;                                              //0x0
}; 

----------------------------------------
Structure: _MMPTE_SUBSECTION

//0x8 bytes (sizeof)
struct _MMPTE_SUBSECTION
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Unused0:3;                                                    //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG ColdPage:1;                                                   //0x0
    ULONGLONG Unused1:3;                                                    //0x0
    ULONGLONG ExecutePrivilege:1;                                           //0x0
    LONGLONG SubsectionAddress:48;                                          //0x0
}; 

----------------------------------------
Structure: _MMPTE_TIMESTAMP

//0x8 bytes (sizeof)
struct _MMPTE_TIMESTAMP
{
    ULONGLONG MustBeZero:1;                                                 //0x0
    ULONGLONG Unused:3;                                                     //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFileLow:4;                                                //0x0
    ULONGLONG Reserved:16;                                                  //0x0
    ULONGLONG GlobalTimeStamp:32;                                           //0x0
}; 

----------------------------------------
Structure: _MMPTE_TRANSITION

//0x8 bytes (sizeof)
struct _MMPTE_TRANSITION
{
    ULONGLONG Valid:1;                                                      //0x0
    ULONGLONG Write:1;                                                      //0x0
    ULONGLONG Spare:1;                                                      //0x0
    ULONGLONG IoTracker:1;                                                  //0x0
    ULONGLONG SwizzleBit:1;                                                 //0x0
    ULONGLONG Protection:5;                                                 //0x0
    ULONGLONG Prototype:1;                                                  //0x0
    ULONGLONG Transition:1;                                                 //0x0
    ULONGLONG PageFrameNumber:36;                                           //0x0
    ULONGLONG Unused:16;                                                    //0x0
}; 

----------------------------------------
Structure: _MMSECTION_FLAGS

//0x4 bytes (sizeof)
struct _MMSECTION_FLAGS
{
    ULONG BeingDeleted:1;                                                   //0x0
    ULONG BeingCreated:1;                                                   //0x0
    ULONG BeingPurged:1;                                                    //0x0
    ULONG NoModifiedWriting:1;                                              //0x0
    ULONG FailAllIo:1;                                                      //0x0
    ULONG Image:1;                                                          //0x0
    ULONG Based:1;                                                          //0x0
    ULONG File:1;                                                           //0x0
    ULONG AttemptingDelete:1;                                               //0x0
    ULONG PrefetchCreated:1;                                                //0x0
    ULONG PhysicalMemory:1;                                                 //0x0
    ULONG ImageControlAreaOnRemovableMedia:1;                               //0x0
    ULONG Reserve:1;                                                        //0x0
    ULONG Commit:1;                                                         //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG WasPurged:1;                                                      //0x0
    ULONG UserReference:1;                                                  //0x0
    ULONG GlobalMemory:1;                                                   //0x0
    ULONG DeleteOnClose:1;                                                  //0x0
    ULONG FilePointerNull:1;                                                //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG GlobalOnlyPerSession:1;                                           //0x0
    ULONG UserWritable:1;                                                   //0x0
    ULONG SystemVaAllocated:1;                                              //0x0
    ULONG PreferredFsCompressionBoundary:1;                                 //0x0
    ULONG UsingFileExtents:1;                                               //0x0
    ULONG PageSize64K:1;                                                    //0x0
}; 

----------------------------------------
Structure: _MMSECTION_FLAGS2

//0x4 bytes (sizeof)
struct _MMSECTION_FLAGS2
{
    USHORT PartitionId:10;                                                  //0x0
    UCHAR NoCrossPartitionAccess:1;                                         //0x2
    UCHAR SubsectionCrossPartitionReferenceOverflow:1;                      //0x2
}; 

----------------------------------------
Structure: _MMSECURE_FLAGS

//0x4 bytes (sizeof)
struct _MMSECURE_FLAGS
{
    ULONG ReadOnly:1;                                                       //0x0
    ULONG ReadWrite:1;                                                      //0x0
    ULONG SecNoChange:1;                                                    //0x0
    ULONG NoDelete:1;                                                       //0x0
    ULONG RequiresPteReversal:1;                                            //0x0
    ULONG ExclusiveSecure:1;                                                //0x0
    ULONG UserModeOnly:1;                                                   //0x0
    ULONG NoInherit:1;                                                      //0x0
    ULONG CheckVad:1;                                                       //0x0
    ULONG Spare:3;                                                          //0x0
}; 

----------------------------------------
Structure: _MMSESSION

//0x20 bytes (sizeof)
struct _MMSESSION
{
    struct _EX_PUSH_LOCK SystemSpaceViewLock;                               //0x0
    struct _EX_PUSH_LOCK* SystemSpaceViewLockPointer;                       //0x8
    struct _RTL_AVL_TREE ViewRoot;                                          //0x10
    ULONG ViewCount;                                                        //0x18
    ULONG BitmapFailures;                                                   //0x1c
}; 

----------------------------------------
Structure: _MMSUBSECTION_FLAGS

//0x4 bytes (sizeof)
struct _MMSUBSECTION_FLAGS
{
    USHORT SubsectionAccessed:1;                                            //0x0
    USHORT Protection:5;                                                    //0x0
    USHORT StartingSector4132:10;                                           //0x0
    USHORT SubsectionStatic:1;                                              //0x2
    USHORT GlobalMemory:1;                                                  //0x2
    USHORT Spare:1;                                                         //0x2
    USHORT OnDereferenceList:1;                                             //0x2
    USHORT SectorEndOffset:12;                                              //0x2
}; 

----------------------------------------
Structure: _MMSUPPORT_AGGREGATION

//0x20 bytes (sizeof)
struct _MMSUPPORT_AGGREGATION
{
    ULONG PageFaultCount;                                                   //0x0
    ULONGLONG WorkingSetSize;                                               //0x8
    ULONGLONG WorkingSetLeafSize;                                           //0x10
    ULONGLONG PeakWorkingSetSize;                                           //0x18
}; 

----------------------------------------
Structure: _MMSUPPORT_FLAGS

//0x4 bytes (sizeof)
struct _MMSUPPORT_FLAGS
{
    union
    {
        struct
        {
            UCHAR WorkingSetType:3;                                         //0x0
            UCHAR Reserved0:3;                                              //0x0
            UCHAR MaximumWorkingSetHard:1;                                  //0x0
            UCHAR MinimumWorkingSetHard:1;                                  //0x0
            UCHAR SessionMaster:1;                                          //0x1
            UCHAR TrimmerState:2;                                           //0x1
            UCHAR Reserved:1;                                               //0x1
            UCHAR PageStealers:4;                                           //0x1
        };
        USHORT u1;                                                          //0x0
    };
    UCHAR MemoryPriority;                                                   //0x2
    union
    {
        struct
        {
            UCHAR WsleDeleted:1;                                            //0x3
            UCHAR SvmEnabled:1;                                             //0x3
            UCHAR ForceAge:1;                                               //0x3
            UCHAR ForceTrim:1;                                              //0x3
            UCHAR NewMaximum:1;                                             //0x3
            UCHAR CommitReleaseState:2;                                     //0x3
        };
        UCHAR u2;                                                           //0x3
    };
}; 

----------------------------------------
Structure: _MMSUPPORT_FULL

//0x140 bytes (sizeof)
struct _MMSUPPORT_FULL
{
    struct _MMSUPPORT_INSTANCE Instance;                                    //0x0
    struct _MMSUPPORT_SHARED Shared;                                        //0xc0
}; 

----------------------------------------
Structure: _MMSUPPORT_INSTANCE

//0xc0 bytes (sizeof)
struct _MMSUPPORT_INSTANCE
{
    ULONG NextPageColor;                                                    //0x0
    ULONG PageFaultCount;                                                   //0x4
    ULONGLONG TrimmedPageCount;                                             //0x8
    struct _MMWSL_INSTANCE* VmWorkingSetList;                               //0x10
    struct _LIST_ENTRY WorkingSetExpansionLinks;                            //0x18
    ULONGLONG AgeDistribution[8];                                           //0x28
    struct _KGATE* ExitOutswapGate;                                         //0x68
    ULONGLONG MinimumWorkingSetSize;                                        //0x70
    ULONGLONG WorkingSetLeafSize;                                           //0x78
    ULONGLONG WorkingSetLeafPrivateSize;                                    //0x80
    ULONGLONG WorkingSetSize;                                               //0x88
    ULONGLONG WorkingSetPrivateSize;                                        //0x90
    ULONGLONG MaximumWorkingSetSize;                                        //0x98
    ULONGLONG PeakWorkingSetSize;                                           //0xa0
    ULONG HardFaultCount;                                                   //0xa8
    USHORT LastTrimStamp;                                                   //0xac
    USHORT PartitionId;                                                     //0xae
    ULONGLONG SelfmapLock;                                                  //0xb0
    struct _MMSUPPORT_FLAGS Flags;                                          //0xb8
}; 

----------------------------------------
Structure: _MMSUPPORT_SHARED

//0x80 bytes (sizeof)
struct _MMSUPPORT_SHARED
{
    volatile LONG WorkingSetLock;                                           //0x0
    LONG GoodCitizenWaiting;                                                //0x4
    ULONGLONG ReleasedCommitDebt;                                           //0x8
    ULONGLONG ResetPagesRepurposedCount;                                    //0x10
    VOID* WsSwapSupport;                                                    //0x18
    VOID* CommitReleaseContext;                                             //0x20
    VOID* AccessLog;                                                        //0x28
    volatile ULONGLONG ChargedWslePages;                                    //0x30
    ULONGLONG ActualWslePages;                                              //0x38
    ULONGLONG WorkingSetCoreLock;                                           //0x40
    VOID* ShadowMapping;                                                    //0x48
}; 

----------------------------------------
Structure: _MMVAD

//0x88 bytes (sizeof)
struct _MMVAD
{
    struct _MMVAD_SHORT Core;                                               //0x0
    union
    {
        ULONG LongFlags2;                                                   //0x40
        volatile struct _MMVAD_FLAGS2 VadFlags2;                            //0x40
    } u2;                                                                   //0x40
    struct _SUBSECTION* Subsection;                                         //0x48
    struct _MMPTE* FirstPrototypePte;                                       //0x50
    struct _MMPTE* LastContiguousPte;                                       //0x58
    struct _LIST_ENTRY ViewLinks;                                           //0x60
    struct _EPROCESS* VadsProcess;                                          //0x70
    union
    {
        struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;                        //0x78
        struct _MMEXTEND_INFO* ExtendedInfo;                                //0x78
    } u4;                                                                   //0x78
    struct _FILE_OBJECT* FileObject;                                        //0x80
}; 

----------------------------------------
Structure: _MMVAD_FLAGS

//0x4 bytes (sizeof)
struct _MMVAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemory:1;                                                  //0x0
}; 

----------------------------------------
Structure: _MMVAD_FLAGS1

//0x4 bytes (sizeof)
struct _MMVAD_FLAGS1
{
    ULONG CommitCharge:31;                                                  //0x0
    ULONG MemCommit:1;                                                      //0x0
}; 

----------------------------------------
Structure: _MMVAD_FLAGS2

//0x4 bytes (sizeof)
struct _MMVAD_FLAGS2
{
    ULONG FileOffset:24;                                                    //0x0
    ULONG Large:1;                                                          //0x0
    ULONG TrimBehind:1;                                                     //0x0
    ULONG Inherit:1;                                                        //0x0
    ULONG NoValidationNeeded:1;                                             //0x0
    ULONG PrivateDemandZero:1;                                              //0x0
    ULONG Spare:3;                                                          //0x0
}; 

----------------------------------------
Structure: _MMVAD_SHORT

//0x40 bytes (sizeof)
struct _MMVAD_SHORT
{
    union
    {
        struct
        {
            struct _MMVAD_SHORT* NextVad;                                   //0x0
            VOID* ExtraCreateInfo;                                          //0x8
        };
        struct _RTL_BALANCED_NODE VadNode;                                  //0x0
    };
    ULONG StartingVpn;                                                      //0x18
    ULONG EndingVpn;                                                        //0x1c
    UCHAR StartingVpnHigh;                                                  //0x20
    UCHAR EndingVpnHigh;                                                    //0x21
    UCHAR CommitChargeHigh;                                                 //0x22
    UCHAR SpareNT64VadUChar;                                                //0x23
    LONG ReferenceCount;                                                    //0x24
    struct _EX_PUSH_LOCK PushLock;                                          //0x28
    union
    {
        ULONG LongFlags;                                                    //0x30
        struct _MMVAD_FLAGS VadFlags;                                       //0x30
        struct _MM_PRIVATE_VAD_FLAGS PrivateVadFlags;                       //0x30
        struct _MM_GRAPHICS_VAD_FLAGS GraphicsVadFlags;                     //0x30
        struct _MM_SHARED_VAD_FLAGS SharedVadFlags;                         //0x30
        volatile ULONG VolatileVadLong;                                     //0x30
    } u;                                                                    //0x30
    union
    {
        ULONG LongFlags1;                                                   //0x34
        struct _MMVAD_FLAGS1 VadFlags1;                                     //0x34
    } u1;                                                                   //0x34
    struct _MI_VAD_EVENT_BLOCK* EventList;                                  //0x38
}; 

----------------------------------------
Structure: _MMWORKING_SET_EXPANSION_HEAD

//0x10 bytes (sizeof)
struct _MMWORKING_SET_EXPANSION_HEAD
{
    struct _LIST_ENTRY ListHead;                                            //0x0
}; 

----------------------------------------
Structure: _MMWSL_INSTANCE

//0x28 bytes (sizeof)
struct _MMWSL_INSTANCE
{
    struct _MMPTE* NextPteToTrim;                                           //0x0
    struct _MMPTE* NextPteToAge;                                            //0x8
    struct _MMPTE* NextPteToAccessClear;                                    //0x10
    ULONG LastAccessClearingRemainder;                                      //0x18
    ULONG LastAgingRemainder;                                               //0x1c
    ULONGLONG LockedEntries;                                                //0x20
}; 

----------------------------------------
Structure: _MM_DRIVER_VERIFIER_DATA

//0xa8 bytes (sizeof)
struct _MM_DRIVER_VERIFIER_DATA
{
    ULONG Level;                                                            //0x0
    volatile ULONG RaiseIrqls;                                              //0x4
    volatile ULONG AcquireSpinLocks;                                        //0x8
    volatile ULONG SynchronizeExecutions;                                   //0xc
    volatile ULONG AllocationsAttempted;                                    //0x10
    volatile ULONG AllocationsSucceeded;                                    //0x14
    volatile ULONG AllocationsSucceededSpecialPool;                         //0x18
    ULONG AllocationsWithNoTag;                                             //0x1c
    ULONG TrimRequests;                                                     //0x20
    ULONG Trims;                                                            //0x24
    ULONG AllocationsFailed;                                                //0x28
    volatile ULONG AllocationsFailedDeliberately;                           //0x2c
    volatile ULONG Loads;                                                   //0x30
    volatile ULONG Unloads;                                                 //0x34
    ULONG UnTrackedPool;                                                    //0x38
    ULONG UserTrims;                                                        //0x3c
    volatile ULONG CurrentPagedPoolAllocations;                             //0x40
    volatile ULONG CurrentNonPagedPoolAllocations;                          //0x44
    ULONG PeakPagedPoolAllocations;                                         //0x48
    ULONG PeakNonPagedPoolAllocations;                                      //0x4c
    volatile ULONGLONG PagedBytes;                                          //0x50
    volatile ULONGLONG NonPagedBytes;                                       //0x58
    ULONGLONG PeakPagedBytes;                                               //0x60
    ULONGLONG PeakNonPagedBytes;                                            //0x68
    volatile ULONG BurstAllocationsFailedDeliberately;                      //0x70
    ULONG SessionTrims;                                                     //0x74
    volatile ULONG OptionChanges;                                           //0x78
    volatile ULONG VerifyMode;                                              //0x7c
    struct _UNICODE_STRING PreviousBucketName;                              //0x80
    volatile ULONG ExecutePoolTypes;                                        //0x90
    volatile ULONG ExecutePageProtections;                                  //0x94
    volatile ULONG ExecutePageMappings;                                     //0x98
    volatile ULONG ExecuteWriteSections;                                    //0x9c
    volatile ULONG SectionAlignmentFailures;                                //0xa0
    volatile ULONG IATInExecutableSection;                                  //0xa4
}; 

----------------------------------------
Structure: _MM_GRAPHICS_VAD_FLAGS

//0x4 bytes (sizeof)
struct _MM_GRAPHICS_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysSet:1;                                         //0x0
    ULONG WriteWatch:1;                                                     //0x0
    ULONG FixedLargePageSize:1;                                             //0x0
    ULONG ZeroFillPagesOptional:1;                                          //0x0
    ULONG GraphicsAlwaysSet:1;                                              //0x0
    ULONG GraphicsUseCoherentBus:1;                                         //0x0
    ULONG GraphicsNoCache:1;                                                //0x0
    ULONG GraphicsPageProtection:3;                                         //0x0
}; 

----------------------------------------
Structure: _MM_PAGED_POOL_INFO

//0x18 bytes (sizeof)
struct _MM_PAGED_POOL_INFO
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    ULONGLONG MaximumSize;                                                  //0x8
    ULONGLONG AllocatedPagedPool;                                           //0x10
}; 

----------------------------------------
Structure: _MM_PAGE_ACCESS_INFO

//0x8 bytes (sizeof)
struct _MM_PAGE_ACCESS_INFO
{
    union
    {
        union _MM_PAGE_ACCESS_INFO_FLAGS Flags;                             //0x0
        ULONGLONG FileOffset;                                               //0x0
        VOID* VirtualAddress;                                               //0x0
        VOID* PointerProtoPte;                                              //0x0
    };
}; 

----------------------------------------
Structure: _MM_PAGE_ACCESS_INFO_HEADER

//0x48 bytes (sizeof)
struct _MM_PAGE_ACCESS_INFO_HEADER
{
    struct _SINGLE_LIST_ENTRY Link;                                         //0x0
    enum _MM_PAGE_ACCESS_TYPE Type;                                         //0x8
    union
    {
        ULONG EmptySequenceNumber;                                          //0xc
        ULONG CurrentFileIndex;                                             //0xc
    };
    ULONGLONG CreateTime;                                                   //0x10
    union
    {
        ULONGLONG EmptyTime;                                                //0x18
        struct _MM_PAGE_ACCESS_INFO* TempEntry;                             //0x18
    };
    union
    {
        struct
        {
            struct _MM_PAGE_ACCESS_INFO* PageEntry;                         //0x20
            ULONGLONG* FileEntry;                                           //0x28
            ULONGLONG* FirstFileEntry;                                      //0x30
            struct _EPROCESS* Process;                                      //0x38
            ULONG SessionId;                                                //0x40
        };
        struct
        {
            ULONGLONG* PageFrameEntry;                                      //0x20
            ULONGLONG* LastPageFrameEntry;                                  //0x28
        };
    };
}; 

----------------------------------------
Structure: _MM_PRIVATE_VAD_FLAGS

//0x4 bytes (sizeof)
struct _MM_PRIVATE_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysSet:1;                                         //0x0
    ULONG WriteWatch:1;                                                     //0x0
    ULONG FixedLargePageSize:1;                                             //0x0
    ULONG ZeroFillPagesOptional:1;                                          //0x0
    ULONG Graphics:1;                                                       //0x0
    ULONG Enclave:1;                                                        //0x0
    ULONG ShadowStack:1;                                                    //0x0
    ULONG PhysicalMemoryPfnsReferenced:1;                                   //0x0
}; 

----------------------------------------
Structure: _MM_SESSION_SPACE

//0x5000 bytes (sizeof)
struct _MM_SESSION_SPACE
{
    volatile LONG ReferenceCount;                                           //0x0
    union
    {
        ULONG LongFlags;                                                    //0x4
        struct _MM_SESSION_SPACE_FLAGS Flags;                               //0x4
    } u;                                                                    //0x4
    ULONG SessionId;                                                        //0x8
    volatile LONG ProcessReferenceToSession;                                //0xc
    struct _LIST_ENTRY ProcessList;                                         //0x10
    ULONGLONG SessionPageDirectoryIndex;                                    //0x20
    volatile ULONGLONG NonPagablePages;                                     //0x28
    volatile ULONGLONG CommittedPages;                                      //0x30
    VOID* PagedPoolStart;                                                   //0x38
    VOID* PagedPoolEnd;                                                     //0x40
    VOID* SessionObject;                                                    //0x48
    VOID* SessionObjectHandle;                                              //0x50
    struct _RTL_AVL_TREE ImageTree;                                         //0x58
    ULONG LocaleId;                                                         //0x60
    ULONG AttachCount;                                                      //0x64
    struct _KGATE AttachGate;                                               //0x68
    struct _LIST_ENTRY WsListEntry;                                         //0x80
    struct _RTL_BALANCED_NODE WsTreeEntry;                                  //0x90
    struct _MM_PAGED_POOL_INFO PagedPoolInfo;                               //0xa8
    struct _MMSESSION Session;                                              //0xc0
    ULONGLONG CombineDomain;                                                //0xe0
    struct _MMSUPPORT_FULL Vm;                                              //0x100
    struct _MMWSL_INSTANCE WorkingSetList;                                  //0x240
    struct _MMSUPPORT_AGGREGATION AggregateSessionWs;                       //0x280
    VOID* HeapState;                                                        //0x2a0
    struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;                          //0x2a8
    ULONG TopLevelPteLockBits[32];                                          //0x2b0
    struct _MMPTE PageDirectory;                                            //0x330
    struct _EX_PUSH_LOCK SessionVaLock;                                     //0x338
    struct _RTL_BITMAP_EX DynamicVaBitMap;                                  //0x340
    ULONGLONG DynamicVaHint;                                                //0x350
    struct _EX_PUSH_LOCK SessionPteLock;                                    //0x358
    LONG PoolBigEntriesInUse;                                               //0x360
    volatile LONG PagedPoolPdeCount;                                        //0x364
    ULONG DynamicSessionPdeCount;                                           //0x368
    struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;                               //0x370
    VOID* PoolTrackTableExpansion;                                          //0x3d0
    ULONGLONG PoolTrackTableExpansionSize;                                  //0x3d8
    VOID* PoolTrackBigPages;                                                //0x3e0
    ULONGLONG PoolTrackBigPagesSize;                                        //0x3e8
    struct _RTL_AVL_TREE PermittedFaultsTree;                               //0x3f0
    enum _IO_SESSION_STATE IoState;                                         //0x3f8
    ULONG IoStateSequence;                                                  //0x3fc
    struct _KEVENT IoNotificationEvent;                                     //0x400
    struct _EJOB* ServerSilo;                                               //0x418
    ULONGLONG CreateTime;                                                   //0x420
    UCHAR PoolTags[16384];                                                  //0x1000
}; 

----------------------------------------
Structure: _MM_SESSION_SPACE_FLAGS

//0x4 bytes (sizeof)
struct _MM_SESSION_SPACE_FLAGS
{
    ULONG Initialized:1;                                                    //0x0
    ULONG DeletePending:1;                                                  //0x0
    ULONG PoolInitialized:1;                                                //0x0
    ULONG DynamicVaInitialized:1;                                           //0x0
    ULONG WsInitialized:1;                                                  //0x0
    ULONG PoolDestroyed:1;                                                  //0x0
    ULONG ObjectInitialized:1;                                              //0x0
    ULONG SessionHeapInitialized:1;                                         //0x0
    ULONG SessionHeapDestroyed:1;                                           //0x0
    ULONG LeakedPoolDeliberately:1;                                         //0x0
    ULONG Filler:22;                                                        //0x0
}; 

----------------------------------------
Structure: _MM_SHARED_VAD_FLAGS

//0x4 bytes (sizeof)
struct _MM_SHARED_VAD_FLAGS
{
    ULONG Lock:1;                                                           //0x0
    ULONG LockContended:1;                                                  //0x0
    ULONG DeleteInProgress:1;                                               //0x0
    ULONG NoChange:1;                                                       //0x0
    ULONG VadType:3;                                                        //0x0
    ULONG Protection:5;                                                     //0x0
    ULONG PreferredNode:6;                                                  //0x0
    ULONG PageSize:2;                                                       //0x0
    ULONG PrivateMemoryAlwaysClear:1;                                       //0x0
    ULONG PrivateFixup:1;                                                   //0x0
    ULONG HotPatchAllowed:1;                                                //0x0
}; 

----------------------------------------
Structure: _MM_SYSTEM_PAGE_COUNTS

//0x10 bytes (sizeof)
struct _MM_SYSTEM_PAGE_COUNTS
{
    ULONG SystemCodePage;                                                   //0x0
    ULONG SystemDriverPage;                                                 //0x4
    LONG TotalSystemCodePages;                                              //0x8
    LONG TotalSystemDriverPages;                                            //0xc
}; 

----------------------------------------
Structure: _MODWRITER_FLAGS

//0x4 bytes (sizeof)
struct _MODWRITER_FLAGS
{
    ULONG KeepForever:1;                                                    //0x0
    ULONG Networked:1;                                                      //0x0
    ULONG IoPriority:3;                                                     //0x0
    ULONG ModifiedStoreWrite:1;                                             //0x0
}; 

----------------------------------------
Structure: _MSUBSECTION

//0x90 bytes (sizeof)
struct _MSUBSECTION
{
    struct _SUBSECTION Core;                                                //0x0
    struct _RTL_BALANCED_NODE SubsectionNode;                               //0x38
    struct _LIST_ENTRY DereferenceList;                                     //0x50
    ULONGLONG NumberOfMappedViews;                                          //0x60
    ULONG NumberOfPfnReferences;                                            //0x68
    ULONG LargeViews;                                                       //0x6c
    struct _MI_PROTOTYPE_PTES_NODE ProtosNode;                              //0x70
}; 

----------------------------------------
Structure: _NAMED_PIPE_CREATE_PARAMETERS

//0x28 bytes (sizeof)
struct _NAMED_PIPE_CREATE_PARAMETERS
{
    ULONG NamedPipeType;                                                    //0x0
    ULONG ReadMode;                                                         //0x4
    ULONG CompletionMode;                                                   //0x8
    ULONG MaximumInstances;                                                 //0xc
    ULONG InboundQuota;                                                     //0x10
    ULONG OutboundQuota;                                                    //0x14
    union _LARGE_INTEGER DefaultTimeout;                                    //0x18
    UCHAR TimeoutSpecified;                                                 //0x20
}; 

----------------------------------------
Structure: _NB10

//0x14 bytes (sizeof)
struct _NB10
{
    ULONG Signature;                                                        //0x0
    ULONG Offset;                                                           //0x4
    ULONG TimeStamp;                                                        //0x8
    ULONG Age;                                                              //0xc
    CHAR PdbName[1];                                                        //0x10
}; 

----------------------------------------
Structure: _NETWORK_LOADER_BLOCK

//0x20 bytes (sizeof)
struct _NETWORK_LOADER_BLOCK
{
    UCHAR* DHCPServerACK;                                                   //0x0
    ULONG DHCPServerACKLength;                                              //0x8
    UCHAR* BootServerReplyPacket;                                           //0x10
    ULONG BootServerReplyPacketLength;                                      //0x18
}; 

----------------------------------------
Structure: _NLS_DATA_BLOCK

//0x18 bytes (sizeof)
struct _NLS_DATA_BLOCK
{
    VOID* AnsiCodePageData;                                                 //0x0
    VOID* OemCodePageData;                                                  //0x8
    VOID* UnicodeCaseTableData;                                             //0x10
}; 

----------------------------------------
Structure: _NONOPAQUE_OPLOCK

//0xa0 bytes (sizeof)
struct _NONOPAQUE_OPLOCK
{
    struct _IRP* IrpExclusiveOplock;                                        //0x0
    struct _FILE_OBJECT* FileObject;                                        //0x8
    struct _EPROCESS* ExclusiveOplockOwner;                                 //0x10
    struct _ETHREAD* ExclusiveOplockOwnerThread;                            //0x18
    UCHAR WaiterPriority;                                                   //0x20
    struct _LIST_ENTRY IrpOplocksR;                                         //0x28
    struct _LIST_ENTRY IrpOplocksRH;                                        //0x38
    struct _LIST_ENTRY RHBreakQueue;                                        //0x48
    struct _LIST_ENTRY WaitingIrps;                                         //0x58
    struct _LIST_ENTRY DelayAckFileObjectQueue;                             //0x68
    struct _LIST_ENTRY AtomicQueue;                                         //0x78
    struct _GUID* DeleterParentKey;                                         //0x88
    ULONG OplockState;                                                      //0x90
    struct _FAST_MUTEX* FastMutex;                                          //0x98
}; 

----------------------------------------
Structure: _NON_PAGED_DEBUG_INFO

//0x20 bytes (sizeof)
struct _NON_PAGED_DEBUG_INFO
{
    USHORT Signature;                                                       //0x0
    USHORT Flags;                                                           //0x2
    ULONG Size;                                                             //0x4
    USHORT Machine;                                                         //0x8
    USHORT Characteristics;                                                 //0xa
    ULONG TimeDateStamp;                                                    //0xc
    ULONG CheckSum;                                                         //0x10
    ULONG SizeOfImage;                                                      //0x14
    ULONGLONG ImageBase;                                                    //0x18
}; 

----------------------------------------
Structure: _NPAGED_LOOKASIDE_LIST

//0x80 bytes (sizeof)
struct _NPAGED_LOOKASIDE_LIST
{
    struct _GENERAL_LOOKASIDE L;                                            //0x0
}; 

----------------------------------------
Structure: _NT_TIB

//0x38 bytes (sizeof)
struct _NT_TIB
{
    struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;                   //0x0
    VOID* StackBase;                                                        //0x8
    VOID* StackLimit;                                                       //0x10
    VOID* SubSystemTib;                                                     //0x18
    union
    {
        VOID* FiberData;                                                    //0x20
        ULONG Version;                                                      //0x20
    };
    VOID* ArbitraryUserPointer;                                             //0x28
    struct _NT_TIB* Self;                                                   //0x30
}; 

----------------------------------------
Structure: _NT_TIB32

//0x1c bytes (sizeof)
struct _NT_TIB32
{
    ULONG ExceptionList;                                                    //0x0
    ULONG StackBase;                                                        //0x4
    ULONG StackLimit;                                                       //0x8
    ULONG SubSystemTib;                                                     //0xc
    union
    {
        ULONG FiberData;                                                    //0x10
        ULONG Version;                                                      //0x10
    };
    ULONG ArbitraryUserPointer;                                             //0x14
    ULONG Self;                                                             //0x18
}; 

----------------------------------------
Structure: _NT_TIB64

//0x38 bytes (sizeof)
struct _NT_TIB64
{
    ULONGLONG ExceptionList;                                                //0x0
    ULONGLONG StackBase;                                                    //0x8
    ULONGLONG StackLimit;                                                   //0x10
    ULONGLONG SubSystemTib;                                                 //0x18
    union
    {
        ULONGLONG FiberData;                                                //0x20
        ULONG Version;                                                      //0x20
    };
    ULONGLONG ArbitraryUserPointer;                                         //0x28
    ULONGLONG Self;                                                         //0x30
}; 

----------------------------------------
Structure: _NUMA_MEMORY_RANGE

//0x18 bytes (sizeof)
struct _NUMA_MEMORY_RANGE
{
    ULONG ProximityId;                                                      //0x0
    ULONGLONG BasePage;                                                     //0x8
    ULONGLONG EndPage;                                                      //0x10
}; 

----------------------------------------
Structure: _OBJECT_ATTRIBUTES

//0x30 bytes (sizeof)
struct _OBJECT_ATTRIBUTES
{
    ULONG Length;                                                           //0x0
    VOID* RootDirectory;                                                    //0x8
    struct _UNICODE_STRING* ObjectName;                                     //0x10
    ULONG Attributes;                                                       //0x18
    VOID* SecurityDescriptor;                                               //0x20
    VOID* SecurityQualityOfService;                                         //0x28
}; 

----------------------------------------
Structure: _OBJECT_CREATE_INFORMATION

//0x40 bytes (sizeof)
struct _OBJECT_CREATE_INFORMATION
{
    ULONG Attributes;                                                       //0x0
    VOID* RootDirectory;                                                    //0x8
    CHAR ProbeMode;                                                         //0x10
    ULONG PagedPoolCharge;                                                  //0x14
    ULONG NonPagedPoolCharge;                                               //0x18
    ULONG SecurityDescriptorCharge;                                         //0x1c
    VOID* SecurityDescriptor;                                               //0x20
    struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;                       //0x28
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;           //0x30
}; 

----------------------------------------
Structure: _OBJECT_DIRECTORY

//0x158 bytes (sizeof)
struct _OBJECT_DIRECTORY
{
    struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];                        //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x128
    struct _DEVICE_MAP* DeviceMap;                                          //0x130
    struct _OBJECT_DIRECTORY* ShadowDirectory;                              //0x138
    VOID* NamespaceEntry;                                                   //0x140
    VOID* SessionObject;                                                    //0x148
    ULONG Flags;                                                            //0x150
    ULONG SessionId;                                                        //0x154
}; 

----------------------------------------
Structure: _OBJECT_DIRECTORY_ENTRY

//0x18 bytes (sizeof)
struct _OBJECT_DIRECTORY_ENTRY
{
    struct _OBJECT_DIRECTORY_ENTRY* ChainLink;                              //0x0
    VOID* Object;                                                           //0x8
    ULONG HashValue;                                                        //0x10
}; 

----------------------------------------
Structure: _OBJECT_DUMP_CONTROL

//0x10 bytes (sizeof)
struct _OBJECT_DUMP_CONTROL
{
    VOID* Stream;                                                           //0x0
    ULONG Detail;                                                           //0x8
}; 

----------------------------------------
Structure: _OBJECT_FOOTER

//0x30 bytes (sizeof)
struct _OBJECT_FOOTER
{
    struct _HANDLE_REVOCATION_INFO HandleRevocationInfo;                    //0x0
    struct _OB_EXTENDED_USER_INFO ExtendedUserInfo;                         //0x20
}; 

----------------------------------------
Structure: _OBJECT_HANDLE_COUNT_DATABASE

//0x18 bytes (sizeof)
struct _OBJECT_HANDLE_COUNT_DATABASE
{
    ULONG CountEntries;                                                     //0x0
    struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];                //0x8
}; 

----------------------------------------
Structure: _OBJECT_HANDLE_COUNT_ENTRY

//0x10 bytes (sizeof)
struct _OBJECT_HANDLE_COUNT_ENTRY
{
    struct _EPROCESS* Process;                                              //0x0
    ULONG HandleCount:24;                                                   //0x8
    ULONG LockCount:8;                                                      //0x8
}; 

----------------------------------------
Structure: _OBJECT_HANDLE_INFORMATION

//0x8 bytes (sizeof)
struct _OBJECT_HANDLE_INFORMATION
{
    ULONG HandleAttributes;                                                 //0x0
    ULONG GrantedAccess;                                                    //0x4
}; 

----------------------------------------
Structure: _OBJECT_HEADER

//0x38 bytes (sizeof)
struct _OBJECT_HEADER
{
    LONGLONG PointerCount;                                                  //0x0
    union
    {
        LONGLONG HandleCount;                                               //0x8
        VOID* NextToFree;                                                   //0x8
    };
    struct _EX_PUSH_LOCK Lock;                                              //0x10
    UCHAR TypeIndex;                                                        //0x18
    union
    {
        UCHAR TraceFlags;                                                   //0x19
        struct
        {
            UCHAR DbgRefTrace:1;                                            //0x19
            UCHAR DbgTracePermanent:1;                                      //0x19
        };
    };
    UCHAR InfoMask;                                                         //0x1a
    union
    {
        UCHAR Flags;                                                        //0x1b
        struct
        {
            UCHAR NewObject:1;                                              //0x1b
            UCHAR KernelObject:1;                                           //0x1b
            UCHAR KernelOnlyAccess:1;                                       //0x1b
            UCHAR ExclusiveObject:1;                                        //0x1b
            UCHAR PermanentObject:1;                                        //0x1b
            UCHAR DefaultSecurityQuota:1;                                   //0x1b
            UCHAR SingleHandleEntry:1;                                      //0x1b
            UCHAR DeletedInline:1;                                          //0x1b
        };
    };
    ULONG Reserved;                                                         //0x1c
    union
    {
        struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;                //0x20
        VOID* QuotaBlockCharged;                                            //0x20
    };
    VOID* SecurityDescriptor;                                               //0x28
    struct _QUAD Body;                                                      //0x30
}; 

----------------------------------------
Structure: _OBJECT_HEADER_AUDIT_INFO

//0x10 bytes (sizeof)
struct _OBJECT_HEADER_AUDIT_INFO
{
    VOID* SecurityDescriptor;                                               //0x0
    ULONGLONG Reserved;                                                     //0x8
}; 

----------------------------------------
Structure: _OBJECT_HEADER_CREATOR_INFO

//0x20 bytes (sizeof)
struct _OBJECT_HEADER_CREATOR_INFO
{
    struct _LIST_ENTRY TypeList;                                            //0x0
    VOID* CreatorUniqueProcess;                                             //0x10
    USHORT CreatorBackTraceIndex;                                           //0x18
    USHORT Reserved1;                                                       //0x1a
    ULONG Reserved2;                                                        //0x1c
}; 

----------------------------------------
Structure: _OBJECT_HEADER_EXTENDED_INFO

//0x10 bytes (sizeof)
struct _OBJECT_HEADER_EXTENDED_INFO
{
    struct _OBJECT_FOOTER* Footer;                                          //0x0
    ULONGLONG Reserved;                                                     //0x8
}; 

----------------------------------------
Structure: _OBJECT_HEADER_HANDLE_INFO

//0x10 bytes (sizeof)
struct _OBJECT_HEADER_HANDLE_INFO
{
    union
    {
        struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;          //0x0
        struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;                      //0x0
    };
}; 

----------------------------------------
Structure: _OBJECT_HEADER_NAME_INFO

//0x20 bytes (sizeof)
struct _OBJECT_HEADER_NAME_INFO
{
    struct _OBJECT_DIRECTORY* Directory;                                    //0x0
    struct _UNICODE_STRING Name;                                            //0x8
    LONG ReferenceCount;                                                    //0x18
    ULONG Reserved;                                                         //0x1c
}; 

----------------------------------------
Structure: _OBJECT_HEADER_PADDING_INFO

//0x4 bytes (sizeof)
struct _OBJECT_HEADER_PADDING_INFO
{
    ULONG PaddingAmount;                                                    //0x0
}; 

----------------------------------------
Structure: _OBJECT_HEADER_PROCESS_INFO

//0x10 bytes (sizeof)
struct _OBJECT_HEADER_PROCESS_INFO
{
    struct _EPROCESS* ExclusiveProcess;                                     //0x0
    ULONGLONG Reserved;                                                     //0x8
}; 

----------------------------------------
Structure: _OBJECT_HEADER_QUOTA_INFO

//0x20 bytes (sizeof)
struct _OBJECT_HEADER_QUOTA_INFO
{
    ULONG PagedPoolCharge;                                                  //0x0
    ULONG NonPagedPoolCharge;                                               //0x4
    ULONG SecurityDescriptorCharge;                                         //0x8
    ULONG Reserved1;                                                        //0xc
    VOID* SecurityDescriptorQuotaBlock;                                     //0x10
    ULONGLONG Reserved2;                                                    //0x18
}; 

----------------------------------------
Structure: _OBJECT_NAMESPACE_LOOKUPTABLE

//0x260 bytes (sizeof)
struct _OBJECT_NAMESPACE_LOOKUPTABLE
{
    struct _LIST_ENTRY HashBuckets[37];                                     //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x250
    ULONG NumberOfPrivateSpaces;                                            //0x258
}; 

----------------------------------------
Structure: _OBJECT_NAME_INFORMATION

//0x10 bytes (sizeof)
struct _OBJECT_NAME_INFORMATION
{
    struct _UNICODE_STRING Name;                                            //0x0
}; 

----------------------------------------
Structure: _OBJECT_REF_INFO

//0x28 bytes (sizeof)
struct _OBJECT_REF_INFO
{
    struct _OBJECT_HEADER* ObjectHeader;                                    //0x0
    VOID* NextRef;                                                          //0x8
    UCHAR ImageFileName[16];                                                //0x10
    USHORT NextPos;                                                         //0x20
    USHORT MaxStacks;                                                       //0x22
    struct _OBJECT_REF_STACK_INFO StackInfo[0];                             //0x24
}; 

----------------------------------------
Structure: _OBJECT_REF_STACK_INFO

//0xc bytes (sizeof)
struct _OBJECT_REF_STACK_INFO
{
    ULONG Sequence;                                                         //0x0
    USHORT Index;                                                           //0x4
    USHORT NumTraces;                                                       //0x6
    ULONG Tag;                                                              //0x8
}; 

----------------------------------------
Structure: _OBJECT_REF_TRACE

//0x80 bytes (sizeof)
struct _OBJECT_REF_TRACE
{
    VOID* StackTrace[16];                                                   //0x0
}; 

----------------------------------------
Structure: _OBJECT_SYMBOLIC_LINK

//0x28 bytes (sizeof)
struct _OBJECT_SYMBOLIC_LINK
{
    union _LARGE_INTEGER CreationTime;                                      //0x0
    union
    {
        struct _UNICODE_STRING LinkTarget;                                  //0x8
        struct
        {
            LONG (*Callback)(struct _OBJECT_SYMBOLIC_LINK* arg1, VOID* arg2, struct _UNICODE_STRING* arg3, VOID** arg4); //0x8
            VOID* CallbackContext;                                          //0x10
        };
    };
    ULONG DosDeviceDriveIndex;                                              //0x18
    ULONG Flags;                                                            //0x1c
    ULONG AccessMask;                                                       //0x20
}; 

----------------------------------------
Structure: _OBJECT_TYPE

//0xd8 bytes (sizeof)
struct _OBJECT_TYPE
{
    struct _LIST_ENTRY TypeList;                                            //0x0
    struct _UNICODE_STRING Name;                                            //0x10
    VOID* DefaultObject;                                                    //0x20
    UCHAR Index;                                                            //0x28
    ULONG TotalNumberOfObjects;                                             //0x2c
    ULONG TotalNumberOfHandles;                                             //0x30
    ULONG HighWaterNumberOfObjects;                                         //0x34
    ULONG HighWaterNumberOfHandles;                                         //0x38
    struct _OBJECT_TYPE_INITIALIZER TypeInfo;                               //0x40
    struct _EX_PUSH_LOCK TypeLock;                                          //0xb8
    ULONG Key;                                                              //0xc0
    struct _LIST_ENTRY CallbackList;                                        //0xc8
}; 

----------------------------------------
Structure: _OBJECT_TYPE_INITIALIZER

//0x78 bytes (sizeof)
struct _OBJECT_TYPE_INITIALIZER
{
    USHORT Length;                                                          //0x0
    union
    {
        USHORT ObjectTypeFlags;                                             //0x2
        struct
        {
            UCHAR CaseInsensitive:1;                                        //0x2
            UCHAR UnnamedObjectsOnly:1;                                     //0x2
            UCHAR UseDefaultObject:1;                                       //0x2
            UCHAR SecurityRequired:1;                                       //0x2
            UCHAR MaintainHandleCount:1;                                    //0x2
            UCHAR MaintainTypeList:1;                                       //0x2
            UCHAR SupportsObjectCallbacks:1;                                //0x2
            UCHAR CacheAligned:1;                                           //0x2
            UCHAR UseExtendedParameters:1;                                  //0x3
            UCHAR Reserved:7;                                               //0x3
        };
    };
    ULONG ObjectTypeCode;                                                   //0x4
    ULONG InvalidAttributes;                                                //0x8
    struct _GENERIC_MAPPING GenericMapping;                                 //0xc
    ULONG ValidAccessMask;                                                  //0x1c
    ULONG RetainAccess;                                                     //0x20
    enum _POOL_TYPE PoolType;                                               //0x24
    ULONG DefaultPagedPoolCharge;                                           //0x28
    ULONG DefaultNonPagedPoolCharge;                                        //0x2c
    VOID (*DumpProcedure)(VOID* arg1, struct _OBJECT_DUMP_CONTROL* arg2);   //0x30
    LONG (*OpenProcedure)(enum _OB_OPEN_REASON arg1, CHAR arg2, struct _EPROCESS* arg3, VOID* arg4, ULONG* arg5, ULONG arg6); //0x38
    VOID (*CloseProcedure)(struct _EPROCESS* arg1, VOID* arg2, ULONGLONG arg3, ULONGLONG arg4); //0x40
    VOID (*DeleteProcedure)(VOID* arg1);                                    //0x48
    union
    {
        LONG (*ParseProcedure)(VOID* arg1, VOID* arg2, struct _ACCESS_STATE* arg3, CHAR arg4, ULONG arg5, struct _UNICODE_STRING* arg6, struct _UNICODE_STRING* arg7, VOID* arg8, struct _SECURITY_QUALITY_OF_SERVICE* arg9, VOID** arg10); //0x50
        LONG (*ParseProcedureEx)(VOID* arg1, VOID* arg2, struct _ACCESS_STATE* arg3, CHAR arg4, ULONG arg5, struct _UNICODE_STRING* arg6, struct _UNICODE_STRING* arg7, VOID* arg8, struct _SECURITY_QUALITY_OF_SERVICE* arg9, struct _OB_EXTENDED_PARSE_PARAMETERS* arg10, VOID** arg11); //0x50
    };
    LONG (*SecurityProcedure)(VOID* arg1, enum _SECURITY_OPERATION_CODE arg2, ULONG* arg3, VOID* arg4, ULONG* arg5, VOID** arg6, enum _POOL_TYPE arg7, struct _GENERIC_MAPPING* arg8, CHAR arg9); //0x58
    LONG (*QueryNameProcedure)(VOID* arg1, UCHAR arg2, struct _OBJECT_NAME_INFORMATION* arg3, ULONG arg4, ULONG* arg5, CHAR arg6); //0x60
    UCHAR (*OkayToCloseProcedure)(struct _EPROCESS* arg1, VOID* arg2, VOID* arg3, CHAR arg4); //0x68
    ULONG WaitObjectFlagMask;                                               //0x70
    USHORT WaitObjectFlagOffset;                                            //0x74
    USHORT WaitObjectPointerOffset;                                         //0x76
}; 

----------------------------------------
Structure: _OBP_LOOKUP_CONTEXT

//0x28 bytes (sizeof)
struct _OBP_LOOKUP_CONTEXT
{
    struct _OBJECT_DIRECTORY* Directory;                                    //0x0
    VOID* Object;                                                           //0x8
    struct _OBJECT_DIRECTORY_ENTRY** EntryLink;                             //0x10
    ULONG HashValue;                                                        //0x18
    USHORT HashIndex;                                                       //0x1c
    UCHAR DirectoryLocked;                                                  //0x1e
    UCHAR LockedExclusive;                                                  //0x1f
    ULONG LockStateSignature;                                               //0x20
}; 

----------------------------------------
Structure: _OBP_SILODRIVERSTATE

//0x2e0 bytes (sizeof)
struct _OBP_SILODRIVERSTATE
{
    struct _DEVICE_MAP* SystemDeviceMap;                                    //0x0
    struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;               //0x8
    struct _EX_PUSH_LOCK DeviceMapLock;                                     //0x78
    struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;       //0x80
}; 

----------------------------------------
Structure: _OBP_SYSTEM_DOS_DEVICE_STATE

//0x6c bytes (sizeof)
struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
    ULONG GlobalDeviceMap;                                                  //0x0
    ULONG LocalDeviceCount[26];                                             //0x4
}; 

----------------------------------------
Structure: _OB_DUPLICATE_OBJECT_STATE

//0x28 bytes (sizeof)
struct _OB_DUPLICATE_OBJECT_STATE
{
    struct _EPROCESS* SourceProcess;                                        //0x0
    VOID* SourceHandle;                                                     //0x8
    VOID* Object;                                                           //0x10
    ULONG TargetAccess;                                                     //0x18
    struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;                             //0x1c
    ULONG HandleAttributes;                                                 //0x24
}; 

----------------------------------------
Structure: _OB_EXTENDED_PARSE_PARAMETERS

//0x10 bytes (sizeof)
struct _OB_EXTENDED_PARSE_PARAMETERS
{
    USHORT Length;                                                          //0x0
    ULONG RestrictedAccessMask;                                             //0x4
    struct _EJOB* Silo;                                                     //0x8
}; 

----------------------------------------
Structure: _OB_EXTENDED_USER_INFO

//0x10 bytes (sizeof)
struct _OB_EXTENDED_USER_INFO
{
    VOID* Context1;                                                         //0x0
    VOID* Context2;                                                         //0x8
}; 

----------------------------------------
Structure: _OB_HANDLE_REVOCATION_BLOCK

//0x20 bytes (sizeof)
struct _OB_HANDLE_REVOCATION_BLOCK
{
    struct _LIST_ENTRY RevocationInfos;                                     //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x10
    struct _EX_RUNDOWN_REF Rundown;                                         //0x18
}; 

----------------------------------------
Structure: _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2

//0x20 bytes (sizeof)
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
    ULONG Version;                                                          //0x0
    ULONG AbnormalResetOccurred;                                            //0x4
    ULONG OfflineMemoryDumpCapable;                                         //0x8
    union _LARGE_INTEGER ResetDataAddress;                                  //0x10
    ULONG ResetDataSize;                                                    //0x18
}; 

----------------------------------------
Structure: _OPEN_PACKET

//0xe0 bytes (sizeof)
struct _OPEN_PACKET
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    struct _FILE_OBJECT* FileObject;                                        //0x8
    LONG FinalStatus;                                                       //0x10
    ULONGLONG Information;                                                  //0x18
    ULONG ParseCheck;                                                       //0x20
    union
    {
        struct _FILE_OBJECT* RelatedFileObject;                             //0x28
        struct _DEVICE_OBJECT* ReferencedDeviceObject;                      //0x28
    };
    struct _OBJECT_ATTRIBUTES* OriginalAttributes;                          //0x30
    union _LARGE_INTEGER AllocationSize;                                    //0x38
    ULONG CreateOptions;                                                    //0x40
    USHORT FileAttributes;                                                  //0x44
    USHORT ShareAccess;                                                     //0x46
    VOID* EaBuffer;                                                         //0x48
    ULONG EaLength;                                                         //0x50
    ULONG Options;                                                          //0x54
    ULONG Disposition;                                                      //0x58
    struct _FILE_BASIC_INFORMATION* BasicInformation;                       //0x60
    struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;              //0x68
    VOID* FileInformation;                                                  //0x70
    enum _CREATE_FILE_TYPE CreateFileType;                                  //0x78
    VOID* MailslotOrPipeParameters;                                         //0x80
    UCHAR Override;                                                         //0x88
    UCHAR QueryOnly;                                                        //0x89
    UCHAR DeleteOnly;                                                       //0x8a
    UCHAR FullAttributes;                                                   //0x8b
    struct _DUMMY_FILE_OBJECT* LocalFileObject;                             //0x90
    ULONG InternalFlags;                                                    //0x98
    CHAR AccessMode;                                                        //0x9c
    struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;                   //0xa0
    enum _FILE_INFORMATION_CLASS FileInformationClass;                      //0xc8
    ULONG FileInformationLength;                                            //0xcc
    UCHAR FilterQuery;                                                      //0xd0
    LONGLONG ExtendedCreateFlags;                                           //0xd8
}; 

----------------------------------------
Structure: _OWNER_ENTRY

//0x10 bytes (sizeof)
struct _OWNER_ENTRY
{
    ULONGLONG OwnerThread;                                                  //0x0
    union
    {
        struct
        {
            ULONG IoPriorityBoosted:1;                                      //0x8
            ULONG OwnerReferenced:1;                                        //0x8
            ULONG IoQoSPriorityBoosted:1;                                   //0x8
            ULONG OwnerCount:29;                                            //0x8
        };
        ULONG TableSize;                                                    //0x8
    };
}; 

----------------------------------------
Structure: _PAGED_LOOKASIDE_LIST

//0x80 bytes (sizeof)
struct _PAGED_LOOKASIDE_LIST
{
    struct _GENERAL_LOOKASIDE L;                                            //0x0
}; 

----------------------------------------
Structure: _PAGEFAULT_HISTORY

//0x0 bytes (sizeof)
struct _PAGEFAULT_HISTORY; 

----------------------------------------
Structure: _PALPC_PORT_REFERENCE_WAIT_BLOCK

//0x20 bytes (sizeof)
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
    struct _KEVENT DesiredReferenceNoEvent;                                 //0x0
    LONG DesiredReferenceNo;                                                //0x18
}; 

----------------------------------------
Structure: _PCAT_FIRMWARE_INFORMATION

//0x4 bytes (sizeof)
struct _PCAT_FIRMWARE_INFORMATION
{
    ULONG PlaceHolder;                                                      //0x0
}; 

----------------------------------------
Structure: _PCI_BUSMASTER_DESCRIPTOR

//0xc bytes (sizeof)
struct _PCI_BUSMASTER_DESCRIPTOR
{
    enum _PCI_BUSMASTER_RID_TYPE Type;                                      //0x0
    ULONG Segment;                                                          //0x4
    union
    {
        struct
        {
            UCHAR Bus;                                                      //0x8
            UCHAR Device;                                                   //0x9
            UCHAR Function;                                                 //0xa
            UCHAR Reserved;                                                 //0xb
        } DeviceRid;                                                        //0x8
        struct
        {
            UCHAR Bus;                                                      //0x8
            UCHAR Device;                                                   //0x9
            UCHAR Function;                                                 //0xa
            UCHAR Reserved;                                                 //0xb
        } BridgeRid;                                                        //0x8
        struct
        {
            UCHAR SecondaryBus;                                             //0x8
            UCHAR SubordinateBus;                                           //0x9
        } MultipleBridges;                                                  //0x8
    };
}; 

----------------------------------------
Structure: _PCW_BUFFER

//0x0 bytes (sizeof)
struct _PCW_BUFFER; 

----------------------------------------
Structure: _PCW_COUNTER_DESCRIPTOR

//0x8 bytes (sizeof)
struct _PCW_COUNTER_DESCRIPTOR
{
    USHORT Id;                                                              //0x0
    USHORT StructIndex;                                                     //0x2
    USHORT Offset;                                                          //0x4
    USHORT Size;                                                            //0x6
}; 

----------------------------------------
Structure: _PCW_COUNTER_INFORMATION

//0x10 bytes (sizeof)
struct _PCW_COUNTER_INFORMATION
{
    ULONGLONG CounterMask;                                                  //0x0
    struct _UNICODE_STRING* InstanceMask;                                   //0x8
}; 

----------------------------------------
Structure: _PCW_DATA

//0x10 bytes (sizeof)
struct _PCW_DATA
{
    VOID* Data;                                                             //0x0
    ULONG Size;                                                             //0x8
}; 

----------------------------------------
Structure: _PCW_INSTANCE

//0x0 bytes (sizeof)
struct _PCW_INSTANCE; 

----------------------------------------
Structure: _PCW_MASK_INFORMATION

//0x28 bytes (sizeof)
struct _PCW_MASK_INFORMATION
{
    ULONGLONG CounterMask;                                                  //0x0
    struct _UNICODE_STRING* InstanceMask;                                   //0x8
    ULONG InstanceId;                                                       //0x10
    UCHAR CollectMultiple;                                                  //0x14
    struct _PCW_BUFFER* Buffer;                                             //0x18
    struct _KEVENT* CancelEvent;                                            //0x20
}; 

----------------------------------------
Structure: _PCW_PROCESSOR_INFO

//0xc8 bytes (sizeof)
struct _PCW_PROCESSOR_INFO
{
    ULONGLONG IdleTime;                                                     //0x0
    ULONGLONG AvailableTime;                                                //0x8
    ULONGLONG UserTime;                                                     //0x10
    ULONGLONG KernelTime;                                                   //0x18
    ULONG Interrupts;                                                       //0x20
    ULONGLONG DpcTime;                                                      //0x28
    ULONGLONG InterruptTime;                                                //0x30
    ULONG ClockInterrupts;                                                  //0x38
    ULONG DpcCount;                                                         //0x3c
    ULONG DpcRate;                                                          //0x40
    ULONGLONG C1Time;                                                       //0x48
    ULONGLONG C2Time;                                                       //0x50
    ULONGLONG C3Time;                                                       //0x58
    ULONGLONG C1Transitions;                                                //0x60
    ULONGLONG C2Transitions;                                                //0x68
    ULONGLONG C3Transitions;                                                //0x70
    ULONGLONG StallTime;                                                    //0x78
    ULONG ParkingStatus;                                                    //0x80
    ULONG CurrentFrequency;                                                 //0x84
    ULONG PercentMaxFrequency;                                              //0x88
    ULONG StateFlags;                                                       //0x8c
    ULONG NominalThroughput;                                                //0x90
    ULONG ActiveThroughput;                                                 //0x94
    ULONGLONG ScaledThroughput;                                             //0x98
    ULONGLONG ScaledKernelThroughput;                                       //0xa0
    ULONGLONG AverageIdleTime;                                              //0xa8
    ULONGLONG IdleBreakEvents;                                              //0xb0
    ULONG PerformanceLimit;                                                 //0xb8
    ULONG PerformanceLimitFlags;                                            //0xbc
    ULONGLONG ScaledFrequency;                                              //0xc0
}; 

----------------------------------------
Structure: _PCW_REGISTRATION

//0x0 bytes (sizeof)
struct _PCW_REGISTRATION; 

----------------------------------------
Structure: _PCW_REGISTRATION_INFORMATION

//0x30 bytes (sizeof)
struct _PCW_REGISTRATION_INFORMATION
{
    ULONG Version;                                                          //0x0
    struct _UNICODE_STRING* Name;                                           //0x8
    ULONG CounterCount;                                                     //0x10
    struct _PCW_COUNTER_DESCRIPTOR* Counters;                               //0x18
    LONG (*Callback)(enum _PCW_CALLBACK_TYPE arg1, union _PCW_CALLBACK_INFORMATION* arg2, VOID* arg3); //0x20
    VOID* CallbackContext;                                                  //0x28
}; 

----------------------------------------
Structure: _PEB

//0x7c8 bytes (sizeof)
struct _PEB
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    UCHAR Padding0[4];                                                      //0x4
    VOID* Mutant;                                                           //0x8
    VOID* ImageBaseAddress;                                                 //0x10
    struct _PEB_LDR_DATA* Ldr;                                              //0x18
    struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;                 //0x20
    VOID* SubSystemData;                                                    //0x28
    VOID* ProcessHeap;                                                      //0x30
    struct _RTL_CRITICAL_SECTION* FastPebLock;                              //0x38
    union _SLIST_HEADER* volatile AtlThunkSListPtr;                         //0x40
    VOID* IFEOKey;                                                          //0x48
    union
    {
        ULONG CrossProcessFlags;                                            //0x50
        struct
        {
            ULONG ProcessInJob:1;                                           //0x50
            ULONG ProcessInitializing:1;                                    //0x50
            ULONG ProcessUsingVEH:1;                                        //0x50
            ULONG ProcessUsingVCH:1;                                        //0x50
            ULONG ProcessUsingFTH:1;                                        //0x50
            ULONG ProcessPreviouslyThrottled:1;                             //0x50
            ULONG ProcessCurrentlyThrottled:1;                              //0x50
            ULONG ProcessImagesHotPatched:1;                                //0x50
            ULONG ReservedBits0:24;                                         //0x50
        };
    };
    UCHAR Padding1[4];                                                      //0x54
    union
    {
        VOID* KernelCallbackTable;                                          //0x58
        VOID* UserSharedInfoPtr;                                            //0x58
    };
    ULONG SystemReserved;                                                   //0x60
    ULONG AtlThunkSListPtr32;                                               //0x64
    VOID* ApiSetMap;                                                        //0x68
    ULONG TlsExpansionCounter;                                              //0x70
    UCHAR Padding2[4];                                                      //0x74
    VOID* TlsBitmap;                                                        //0x78
    ULONG TlsBitmapBits[2];                                                 //0x80
    VOID* ReadOnlySharedMemoryBase;                                         //0x88
    VOID* SharedData;                                                       //0x90
    VOID** ReadOnlyStaticServerData;                                        //0x98
    VOID* AnsiCodePageData;                                                 //0xa0
    VOID* OemCodePageData;                                                  //0xa8
    VOID* UnicodeCaseTableData;                                             //0xb0
    ULONG NumberOfProcessors;                                               //0xb8
    ULONG NtGlobalFlag;                                                     //0xbc
    union _LARGE_INTEGER CriticalSectionTimeout;                            //0xc0
    ULONGLONG HeapSegmentReserve;                                           //0xc8
    ULONGLONG HeapSegmentCommit;                                            //0xd0
    ULONGLONG HeapDeCommitTotalFreeThreshold;                               //0xd8
    ULONGLONG HeapDeCommitFreeBlockThreshold;                               //0xe0
    ULONG NumberOfHeaps;                                                    //0xe8
    ULONG MaximumNumberOfHeaps;                                             //0xec
    VOID** ProcessHeaps;                                                    //0xf0
    VOID* GdiSharedHandleTable;                                             //0xf8
    VOID* ProcessStarterHelper;                                             //0x100
    ULONG GdiDCAttributeList;                                               //0x108
    UCHAR Padding3[4];                                                      //0x10c
    struct _RTL_CRITICAL_SECTION* LoaderLock;                               //0x110
    ULONG OSMajorVersion;                                                   //0x118
    ULONG OSMinorVersion;                                                   //0x11c
    USHORT OSBuildNumber;                                                   //0x120
    USHORT OSCSDVersion;                                                    //0x122
    ULONG OSPlatformId;                                                     //0x124
    ULONG ImageSubsystem;                                                   //0x128
    ULONG ImageSubsystemMajorVersion;                                       //0x12c
    ULONG ImageSubsystemMinorVersion;                                       //0x130
    UCHAR Padding4[4];                                                      //0x134
    ULONGLONG ActiveProcessAffinityMask;                                    //0x138
    ULONG GdiHandleBuffer[60];                                              //0x140
    VOID (*PostProcessInitRoutine)();                                       //0x230
    VOID* TlsExpansionBitmap;                                               //0x238
    ULONG TlsExpansionBitmapBits[32];                                       //0x240
    ULONG SessionId;                                                        //0x2c0
    UCHAR Padding5[4];                                                      //0x2c4
    union _ULARGE_INTEGER AppCompatFlags;                                   //0x2c8
    union _ULARGE_INTEGER AppCompatFlagsUser;                               //0x2d0
    VOID* pShimData;                                                        //0x2d8
    VOID* AppCompatInfo;                                                    //0x2e0
    struct _UNICODE_STRING CSDVersion;                                      //0x2e8
    struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;                 //0x2f8
    struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;                //0x300
    struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;    //0x308
    struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;                 //0x310
    ULONGLONG MinimumStackCommit;                                           //0x318
    VOID* SparePointers[4];                                                 //0x320
    ULONG SpareUlongs[5];                                                   //0x340
    VOID* WerRegistrationData;                                              //0x358
    VOID* WerShipAssertPtr;                                                 //0x360
    VOID* pUnused;                                                          //0x368
    VOID* pImageHeaderHash;                                                 //0x370
    union
    {
        ULONG TracingFlags;                                                 //0x378
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x378
            ULONG CritSecTracingEnabled:1;                                  //0x378
            ULONG LibLoaderTracingEnabled:1;                                //0x378
            ULONG SpareTracingBits:29;                                      //0x378
        };
    };
    UCHAR Padding6[4];                                                      //0x37c
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x380
    ULONGLONG TppWorkerpListLock;                                           //0x388
    struct _LIST_ENTRY TppWorkerpList;                                      //0x390
    VOID* WaitOnAddressHashTable[128];                                      //0x3a0
    VOID* TelemetryCoverageHeader;                                          //0x7a0
    ULONG CloudFileFlags;                                                   //0x7a8
    ULONG CloudFileDiagFlags;                                               //0x7ac
    CHAR PlaceholderCompatibilityMode;                                      //0x7b0
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x7b1
    struct _LEAP_SECOND_DATA* LeapSecondData;                               //0x7b8
    union
    {
        ULONG LeapSecondFlags;                                              //0x7c0
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x7c0
            ULONG Reserved:31;                                              //0x7c0
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x7c4
}; 

----------------------------------------
Structure: _PEB32

//0x480 bytes (sizeof)
struct _PEB32
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    ULONG Mutant;                                                           //0x4
    ULONG ImageBaseAddress;                                                 //0x8
    ULONG Ldr;                                                              //0xc
    ULONG ProcessParameters;                                                //0x10
    ULONG SubSystemData;                                                    //0x14
    ULONG ProcessHeap;                                                      //0x18
    ULONG FastPebLock;                                                      //0x1c
    ULONG AtlThunkSListPtr;                                                 //0x20
    ULONG IFEOKey;                                                          //0x24
    union
    {
        ULONG CrossProcessFlags;                                            //0x28
        struct
        {
            ULONG ProcessInJob:1;                                           //0x28
            ULONG ProcessInitializing:1;                                    //0x28
            ULONG ProcessUsingVEH:1;                                        //0x28
            ULONG ProcessUsingVCH:1;                                        //0x28
            ULONG ProcessUsingFTH:1;                                        //0x28
            ULONG ProcessPreviouslyThrottled:1;                             //0x28
            ULONG ProcessCurrentlyThrottled:1;                              //0x28
            ULONG ProcessImagesHotPatched:1;                                //0x28
            ULONG ReservedBits0:24;                                         //0x28
        };
    };
    union
    {
        ULONG KernelCallbackTable;                                          //0x2c
        ULONG UserSharedInfoPtr;                                            //0x2c
    };
    ULONG SystemReserved;                                                   //0x30
    ULONG AtlThunkSListPtr32;                                               //0x34
    ULONG ApiSetMap;                                                        //0x38
    ULONG TlsExpansionCounter;                                              //0x3c
    ULONG TlsBitmap;                                                        //0x40
    ULONG TlsBitmapBits[2];                                                 //0x44
    ULONG ReadOnlySharedMemoryBase;                                         //0x4c
    ULONG SharedData;                                                       //0x50
    ULONG ReadOnlyStaticServerData;                                         //0x54
    ULONG AnsiCodePageData;                                                 //0x58
    ULONG OemCodePageData;                                                  //0x5c
    ULONG UnicodeCaseTableData;                                             //0x60
    ULONG NumberOfProcessors;                                               //0x64
    ULONG NtGlobalFlag;                                                     //0x68
    union _LARGE_INTEGER CriticalSectionTimeout;                            //0x70
    ULONG HeapSegmentReserve;                                               //0x78
    ULONG HeapSegmentCommit;                                                //0x7c
    ULONG HeapDeCommitTotalFreeThreshold;                                   //0x80
    ULONG HeapDeCommitFreeBlockThreshold;                                   //0x84
    ULONG NumberOfHeaps;                                                    //0x88
    ULONG MaximumNumberOfHeaps;                                             //0x8c
    ULONG ProcessHeaps;                                                     //0x90
    ULONG GdiSharedHandleTable;                                             //0x94
    ULONG ProcessStarterHelper;                                             //0x98
    ULONG GdiDCAttributeList;                                               //0x9c
    ULONG LoaderLock;                                                       //0xa0
    ULONG OSMajorVersion;                                                   //0xa4
    ULONG OSMinorVersion;                                                   //0xa8
    USHORT OSBuildNumber;                                                   //0xac
    USHORT OSCSDVersion;                                                    //0xae
    ULONG OSPlatformId;                                                     //0xb0
    ULONG ImageSubsystem;                                                   //0xb4
    ULONG ImageSubsystemMajorVersion;                                       //0xb8
    ULONG ImageSubsystemMinorVersion;                                       //0xbc
    ULONG ActiveProcessAffinityMask;                                        //0xc0
    ULONG GdiHandleBuffer[34];                                              //0xc4
    ULONG PostProcessInitRoutine;                                           //0x14c
    ULONG TlsExpansionBitmap;                                               //0x150
    ULONG TlsExpansionBitmapBits[32];                                       //0x154
    ULONG SessionId;                                                        //0x1d4
    union _ULARGE_INTEGER AppCompatFlags;                                   //0x1d8
    union _ULARGE_INTEGER AppCompatFlagsUser;                               //0x1e0
    ULONG pShimData;                                                        //0x1e8
    ULONG AppCompatInfo;                                                    //0x1ec
    struct _STRING32 CSDVersion;                                            //0x1f0
    ULONG ActivationContextData;                                            //0x1f8
    ULONG ProcessAssemblyStorageMap;                                        //0x1fc
    ULONG SystemDefaultActivationContextData;                               //0x200
    ULONG SystemAssemblyStorageMap;                                         //0x204
    ULONG MinimumStackCommit;                                               //0x208
    ULONG SparePointers[4];                                                 //0x20c
    ULONG SpareUlongs[5];                                                   //0x21c
    ULONG WerRegistrationData;                                              //0x230
    ULONG WerShipAssertPtr;                                                 //0x234
    ULONG pUnused;                                                          //0x238
    ULONG pImageHeaderHash;                                                 //0x23c
    union
    {
        ULONG TracingFlags;                                                 //0x240
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x240
            ULONG CritSecTracingEnabled:1;                                  //0x240
            ULONG LibLoaderTracingEnabled:1;                                //0x240
            ULONG SpareTracingBits:29;                                      //0x240
        };
    };
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x248
    ULONG TppWorkerpListLock;                                               //0x250
    struct LIST_ENTRY32 TppWorkerpList;                                     //0x254
    ULONG WaitOnAddressHashTable[128];                                      //0x25c
    ULONG TelemetryCoverageHeader;                                          //0x45c
    ULONG CloudFileFlags;                                                   //0x460
    ULONG CloudFileDiagFlags;                                               //0x464
    CHAR PlaceholderCompatibilityMode;                                      //0x468
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x469
    ULONG LeapSecondData;                                                   //0x470
    union
    {
        ULONG LeapSecondFlags;                                              //0x474
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x474
            ULONG Reserved:31;                                              //0x474
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x478
}; 

----------------------------------------
Structure: _PEB64

//0x7c8 bytes (sizeof)
struct _PEB64
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages:1;                                    //0x3
            UCHAR IsProtectedProcess:1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated:1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
            UCHAR IsPackagedProcess:1;                                      //0x3
            UCHAR IsAppContainer:1;                                         //0x3
            UCHAR IsProtectedProcessLight:1;                                //0x3
            UCHAR IsLongPathAwareProcess:1;                                 //0x3
        };
    };
    UCHAR Padding0[4];                                                      //0x4
    ULONGLONG Mutant;                                                       //0x8
    ULONGLONG ImageBaseAddress;                                             //0x10
    ULONGLONG Ldr;                                                          //0x18
    ULONGLONG ProcessParameters;                                            //0x20
    ULONGLONG SubSystemData;                                                //0x28
    ULONGLONG ProcessHeap;                                                  //0x30
    ULONGLONG FastPebLock;                                                  //0x38
    ULONGLONG AtlThunkSListPtr;                                             //0x40
    ULONGLONG IFEOKey;                                                      //0x48
    union
    {
        ULONG CrossProcessFlags;                                            //0x50
        struct
        {
            ULONG ProcessInJob:1;                                           //0x50
            ULONG ProcessInitializing:1;                                    //0x50
            ULONG ProcessUsingVEH:1;                                        //0x50
            ULONG ProcessUsingVCH:1;                                        //0x50
            ULONG ProcessUsingFTH:1;                                        //0x50
            ULONG ProcessPreviouslyThrottled:1;                             //0x50
            ULONG ProcessCurrentlyThrottled:1;                              //0x50
            ULONG ProcessImagesHotPatched:1;                                //0x50
            ULONG ReservedBits0:24;                                         //0x50
        };
    };
    UCHAR Padding1[4];                                                      //0x54
    union
    {
        ULONGLONG KernelCallbackTable;                                      //0x58
        ULONGLONG UserSharedInfoPtr;                                        //0x58
    };
    ULONG SystemReserved;                                                   //0x60
    ULONG AtlThunkSListPtr32;                                               //0x64
    ULONGLONG ApiSetMap;                                                    //0x68
    ULONG TlsExpansionCounter;                                              //0x70
    UCHAR Padding2[4];                                                      //0x74
    ULONGLONG TlsBitmap;                                                    //0x78
    ULONG TlsBitmapBits[2];                                                 //0x80
    ULONGLONG ReadOnlySharedMemoryBase;                                     //0x88
    ULONGLONG SharedData;                                                   //0x90
    ULONGLONG ReadOnlyStaticServerData;                                     //0x98
    ULONGLONG AnsiCodePageData;                                             //0xa0
    ULONGLONG OemCodePageData;                                              //0xa8
    ULONGLONG UnicodeCaseTableData;                                         //0xb0
    ULONG NumberOfProcessors;                                               //0xb8
    ULONG NtGlobalFlag;                                                     //0xbc
    union _LARGE_INTEGER CriticalSectionTimeout;                            //0xc0
    ULONGLONG HeapSegmentReserve;                                           //0xc8
    ULONGLONG HeapSegmentCommit;                                            //0xd0
    ULONGLONG HeapDeCommitTotalFreeThreshold;                               //0xd8
    ULONGLONG HeapDeCommitFreeBlockThreshold;                               //0xe0
    ULONG NumberOfHeaps;                                                    //0xe8
    ULONG MaximumNumberOfHeaps;                                             //0xec
    ULONGLONG ProcessHeaps;                                                 //0xf0
    ULONGLONG GdiSharedHandleTable;                                         //0xf8
    ULONGLONG ProcessStarterHelper;                                         //0x100
    ULONG GdiDCAttributeList;                                               //0x108
    UCHAR Padding3[4];                                                      //0x10c
    ULONGLONG LoaderLock;                                                   //0x110
    ULONG OSMajorVersion;                                                   //0x118
    ULONG OSMinorVersion;                                                   //0x11c
    USHORT OSBuildNumber;                                                   //0x120
    USHORT OSCSDVersion;                                                    //0x122
    ULONG OSPlatformId;                                                     //0x124
    ULONG ImageSubsystem;                                                   //0x128
    ULONG ImageSubsystemMajorVersion;                                       //0x12c
    ULONG ImageSubsystemMinorVersion;                                       //0x130
    UCHAR Padding4[4];                                                      //0x134
    ULONGLONG ActiveProcessAffinityMask;                                    //0x138
    ULONG GdiHandleBuffer[60];                                              //0x140
    ULONGLONG PostProcessInitRoutine;                                       //0x230
    ULONGLONG TlsExpansionBitmap;                                           //0x238
    ULONG TlsExpansionBitmapBits[32];                                       //0x240
    ULONG SessionId;                                                        //0x2c0
    UCHAR Padding5[4];                                                      //0x2c4
    union _ULARGE_INTEGER AppCompatFlags;                                   //0x2c8
    union _ULARGE_INTEGER AppCompatFlagsUser;                               //0x2d0
    ULONGLONG pShimData;                                                    //0x2d8
    ULONGLONG AppCompatInfo;                                                //0x2e0
    struct _STRING64 CSDVersion;                                            //0x2e8
    ULONGLONG ActivationContextData;                                        //0x2f8
    ULONGLONG ProcessAssemblyStorageMap;                                    //0x300
    ULONGLONG SystemDefaultActivationContextData;                           //0x308
    ULONGLONG SystemAssemblyStorageMap;                                     //0x310
    ULONGLONG MinimumStackCommit;                                           //0x318
    ULONGLONG SparePointers[4];                                             //0x320
    ULONG SpareUlongs[5];                                                   //0x340
    ULONGLONG WerRegistrationData;                                          //0x358
    ULONGLONG WerShipAssertPtr;                                             //0x360
    ULONGLONG pUnused;                                                      //0x368
    ULONGLONG pImageHeaderHash;                                             //0x370
    union
    {
        ULONG TracingFlags;                                                 //0x378
        struct
        {
            ULONG HeapTracingEnabled:1;                                     //0x378
            ULONG CritSecTracingEnabled:1;                                  //0x378
            ULONG LibLoaderTracingEnabled:1;                                //0x378
            ULONG SpareTracingBits:29;                                      //0x378
        };
    };
    UCHAR Padding6[4];                                                      //0x37c
    ULONGLONG CsrServerReadOnlySharedMemoryBase;                            //0x380
    ULONGLONG TppWorkerpListLock;                                           //0x388
    struct LIST_ENTRY64 TppWorkerpList;                                     //0x390
    ULONGLONG WaitOnAddressHashTable[128];                                  //0x3a0
    ULONGLONG TelemetryCoverageHeader;                                      //0x7a0
    ULONG CloudFileFlags;                                                   //0x7a8
    ULONG CloudFileDiagFlags;                                               //0x7ac
    CHAR PlaceholderCompatibilityMode;                                      //0x7b0
    CHAR PlaceholderCompatibilityModeReserved[7];                           //0x7b1
    ULONGLONG LeapSecondData;                                               //0x7b8
    union
    {
        ULONG LeapSecondFlags;                                              //0x7c0
        struct
        {
            ULONG SixtySecondEnabled:1;                                     //0x7c0
            ULONG Reserved:31;                                              //0x7c0
        };
    };
    ULONG NtGlobalFlag2;                                                    //0x7c4
}; 

----------------------------------------
Structure: _PEBS_DS_SAVE_AREA

//0xa0 bytes (sizeof)
struct _PEBS_DS_SAVE_AREA
{
    union
    {
        struct _PEBS_DS_SAVE_AREA32 As32Bit;                                //0x0
        struct _PEBS_DS_SAVE_AREA64 As64Bit;                                //0x0
    };
}; 

----------------------------------------
Structure: _PEBS_DS_SAVE_AREA32

//0x80 bytes (sizeof)
struct _PEBS_DS_SAVE_AREA32
{
    ULONG BtsBufferBase;                                                    //0x0
    ULONG BtsIndex;                                                         //0x4
    ULONG BtsAbsoluteMaximum;                                               //0x8
    ULONG BtsInterruptThreshold;                                            //0xc
    ULONG PebsBufferBase;                                                   //0x10
    ULONG PebsIndex;                                                        //0x14
    ULONG PebsAbsoluteMaximum;                                              //0x18
    ULONG PebsInterruptThreshold;                                           //0x1c
    ULONGLONG PebsGpCounterReset[8];                                        //0x20
    ULONGLONG PebsFixedCounterReset[4];                                     //0x60
}; 

----------------------------------------
Structure: _PEBS_DS_SAVE_AREA64

//0xa0 bytes (sizeof)
struct _PEBS_DS_SAVE_AREA64
{
    ULONGLONG BtsBufferBase;                                                //0x0
    ULONGLONG BtsIndex;                                                     //0x8
    ULONGLONG BtsAbsoluteMaximum;                                           //0x10
    ULONGLONG BtsInterruptThreshold;                                        //0x18
    ULONGLONG PebsBufferBase;                                               //0x20
    ULONGLONG PebsIndex;                                                    //0x28
    ULONGLONG PebsAbsoluteMaximum;                                          //0x30
    ULONGLONG PebsInterruptThreshold;                                       //0x38
    ULONGLONG PebsGpCounterReset[8];                                        //0x40
    ULONGLONG PebsFixedCounterReset[4];                                     //0x80
}; 

----------------------------------------
Structure: _PEB_LDR_DATA

//0x58 bytes (sizeof)
struct _PEB_LDR_DATA
{
    ULONG Length;                                                           //0x0
    UCHAR Initialized;                                                      //0x4
    VOID* SsHandle;                                                         //0x8
    struct _LIST_ENTRY InLoadOrderModuleList;                               //0x10
    struct _LIST_ENTRY InMemoryOrderModuleList;                             //0x20
    struct _LIST_ENTRY InInitializationOrderModuleList;                     //0x30
    VOID* EntryInProgress;                                                  //0x40
    UCHAR ShutdownInProgress;                                               //0x48
    VOID* ShutdownThreadId;                                                 //0x50
}; 

----------------------------------------
Structure: _PENDING_RELATIONS_LIST_ENTRY

//0x70 bytes (sizeof)
struct _PENDING_RELATIONS_LIST_ENTRY
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x10
    struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;                            //0x30
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x38
    struct _RELATION_LIST* RelationsList;                                   //0x40
    struct _IRP* EjectIrp;                                                  //0x48
    enum IRPLOCK Lock;                                                      //0x50
    ULONG Problem;                                                          //0x54
    UCHAR ProfileChangingEject;                                             //0x58
    UCHAR DisplaySafeRemovalDialog;                                         //0x59
    enum _SYSTEM_POWER_STATE LightestSleepState;                            //0x5c
    struct DOCK_INTERFACE* DockInterface;                                   //0x60
    UCHAR DequeuePending;                                                   //0x68
    enum _PNP_DEVICE_DELETE_TYPE DeleteType;                                //0x6c
}; 

----------------------------------------
Structure: _PEP_ACPI_EXTENDED_ADDRESS

//0x48 bytes (sizeof)
struct _PEP_ACPI_EXTENDED_ADDRESS
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    union _PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    UCHAR ResourceFlags;                                                    //0x8
    UCHAR GeneralFlags;                                                     //0x9
    UCHAR TypeSpecificFlags;                                                //0xa
    UCHAR RevisionId;                                                       //0xb
    UCHAR Reserved;                                                         //0xc
    ULONGLONG Granularity;                                                  //0x10
    ULONGLONG MinimumAddress;                                               //0x18
    ULONGLONG MaximumAddress;                                               //0x20
    ULONGLONG TranslationAddress;                                           //0x28
    ULONGLONG AddressLength;                                                //0x30
    ULONGLONG TypeAttribute;                                                //0x38
    struct _UNICODE_STRING* DescriptorName;                                 //0x40
}; 

----------------------------------------
Structure: _PEP_ACPI_GPIO_RESOURCE

//0x48 bytes (sizeof)
struct _PEP_ACPI_GPIO_RESOURCE
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    union _PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    enum _KINTERRUPT_MODE InterruptType;                                    //0x8
    enum _KINTERRUPT_POLARITY InterruptPolarity;                            //0xc
    enum _GPIO_PIN_CONFIG_TYPE PinConfig;                                   //0x10
    enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;                    //0x14
    USHORT DriveStrength;                                                   //0x18
    USHORT DebounceTimeout;                                                 //0x1a
    WCHAR* PinTable;                                                        //0x20
    USHORT PinCount;                                                        //0x28
    UCHAR ResourceSourceIndex;                                              //0x2a
    struct _UNICODE_STRING* ResourceSourceName;                             //0x30
    UCHAR* VendorData;                                                      //0x38
    USHORT VendorDataLength;                                                //0x40
}; 

----------------------------------------
Structure: _PEP_ACPI_INTERRUPT_RESOURCE

//0x20 bytes (sizeof)
struct _PEP_ACPI_INTERRUPT_RESOURCE
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    enum _KINTERRUPT_MODE InterruptType;                                    //0x4
    enum _KINTERRUPT_POLARITY InterruptPolarity;                            //0x8
    union _PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0xc
    UCHAR Count;                                                            //0x10
    ULONG* Pins;                                                            //0x18
}; 

----------------------------------------
Structure: _PEP_ACPI_IO_MEMORY_RESOURCE

//0x20 bytes (sizeof)
struct _PEP_ACPI_IO_MEMORY_RESOURCE
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    UCHAR Information;                                                      //0x4
    union _LARGE_INTEGER MinimumAddress;                                    //0x8
    union _LARGE_INTEGER MaximumAddress;                                    //0x10
    ULONG Alignment;                                                        //0x18
    ULONG Length;                                                           //0x1c
}; 

----------------------------------------
Structure: _PEP_ACPI_SPB_I2C_RESOURCE

//0x30 bytes (sizeof)
struct _PEP_ACPI_SPB_I2C_RESOURCE
{
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG ConnectionSpeed;                                                  //0x28
    USHORT SlaveAddress;                                                    //0x2c
}; 

----------------------------------------
Structure: _PEP_ACPI_SPB_RESOURCE

//0x28 bytes (sizeof)
struct _PEP_ACPI_SPB_RESOURCE
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    union _PEP_ACPI_RESOURCE_FLAGS Flags;                                   //0x4
    USHORT TypeSpecificFlags;                                               //0x8
    UCHAR ResourceSourceIndex;                                              //0xa
    struct _UNICODE_STRING* ResourceSourceName;                             //0x10
    CHAR* VendorData;                                                       //0x18
    USHORT VendorDataLength;                                                //0x20
}; 

----------------------------------------
Structure: _PEP_ACPI_SPB_SPI_RESOURCE

//0x38 bytes (sizeof)
struct _PEP_ACPI_SPB_SPI_RESOURCE
{
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG ConnectionSpeed;                                                  //0x28
    UCHAR DataBitLength;                                                    //0x2c
    UCHAR Phase;                                                            //0x2d
    UCHAR Polarity;                                                         //0x2e
    USHORT DeviceSelection;                                                 //0x30
}; 

----------------------------------------
Structure: _PEP_ACPI_SPB_UART_RESOURCE

//0x38 bytes (sizeof)
struct _PEP_ACPI_SPB_UART_RESOURCE
{
    struct _PEP_ACPI_SPB_RESOURCE SpbCommon;                                //0x0
    ULONG BaudRate;                                                         //0x28
    USHORT RxBufferSize;                                                    //0x2c
    USHORT TxBufferSize;                                                    //0x2e
    UCHAR Parity;                                                           //0x30
    UCHAR LinesInUse;                                                       //0x31
}; 

----------------------------------------
Structure: _PEP_CRASHDUMP_INFORMATION

//0x10 bytes (sizeof)
struct _PEP_CRASHDUMP_INFORMATION
{
    struct PEPHANDLE__* DeviceHandle;                                       //0x0
    VOID* DeviceContext;                                                    //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE

//0x28 bytes (sizeof)
struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG CompletionFlags;                                                  //0x8
    LONG MethodStatus;                                                      //0xc
    VOID* CompletionContext;                                                //0x10
    ULONGLONG OutputArgumentSize;                                           //0x18
    struct _ACPI_METHOD_ARGUMENT_V1* OutputArguments;                       //0x20
}; 

----------------------------------------
Structure: _PEP_WORK_ACPI_NOTIFY

//0x10 bytes (sizeof)
struct _PEP_WORK_ACPI_NOTIFY
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG NotifyCode;                                                       //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_ACTIVE_COMPLETE

//0x10 bytes (sizeof)
struct _PEP_WORK_ACTIVE_COMPLETE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_COMPLETE_IDLE_STATE

//0x10 bytes (sizeof)
struct _PEP_WORK_COMPLETE_IDLE_STATE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_COMPLETE_PERF_STATE

//0x10 bytes (sizeof)
struct _PEP_WORK_COMPLETE_PERF_STATE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
    UCHAR Succeeded;                                                        //0xc
}; 

----------------------------------------
Structure: _PEP_WORK_DEVICE_IDLE

//0x10 bytes (sizeof)
struct _PEP_WORK_DEVICE_IDLE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    UCHAR IgnoreIdleTimeout;                                                //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_DEVICE_POWER

//0x10 bytes (sizeof)
struct _PEP_WORK_DEVICE_POWER
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    UCHAR PowerRequired;                                                    //0x8
}; 

----------------------------------------
Structure: _PEP_WORK_IDLE_STATE

//0x10 bytes (sizeof)
struct _PEP_WORK_IDLE_STATE
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    ULONG Component;                                                        //0x8
    ULONG State;                                                            //0xc
}; 

----------------------------------------
Structure: _PEP_WORK_INFORMATION

//0x40 bytes (sizeof)
struct _PEP_WORK_INFORMATION
{
    enum _PEP_WORK_TYPE WorkType;                                           //0x0
    union
    {
        struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;                    //0x8
        struct _PEP_WORK_IDLE_STATE IdleState;                              //0x8
        struct _PEP_WORK_DEVICE_POWER DevicePower;                          //0x8
        struct _PEP_WORK_POWER_CONTROL PowerControl;                        //0x8
        struct _PEP_WORK_DEVICE_IDLE DeviceIdle;                            //0x8
        struct _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;             //0x8
        struct _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;             //0x8
        struct _PEP_WORK_ACPI_NOTIFY AcpiNotify;                            //0x8
        struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete; //0x8
    };
}; 

----------------------------------------
Structure: _PEP_WORK_POWER_CONTROL

//0x38 bytes (sizeof)
struct _PEP_WORK_POWER_CONTROL
{
    struct POHANDLE__* DeviceHandle;                                        //0x0
    struct _GUID* PowerControlCode;                                         //0x8
    VOID* RequestContext;                                                   //0x10
    VOID* InBuffer;                                                         //0x18
    ULONGLONG InBufferSize;                                                 //0x20
    VOID* OutBuffer;                                                        //0x28
    ULONGLONG OutBufferSize;                                                //0x30
}; 

----------------------------------------
Structure: _PERFINFO_GROUPMASK

//0x20 bytes (sizeof)
struct _PERFINFO_GROUPMASK
{
    ULONG Masks[8];                                                         //0x0
}; 

----------------------------------------
Structure: _PERFINFO_PPM_STATE_SELECTION

//0xc bytes (sizeof)
struct _PERFINFO_PPM_STATE_SELECTION
{
    ULONG SelectedState;                                                    //0x0
    ULONG VetoedStates;                                                     //0x4
    ULONG VetoReason[1];                                                    //0x8
}; 

----------------------------------------
Structure: _PERF_CONTROL_STATE_SELECTION

//0x28 bytes (sizeof)
struct _PERF_CONTROL_STATE_SELECTION
{
    ULONGLONG SelectedState;                                                //0x0
    ULONG SelectedPercent;                                                  //0x8
    ULONG SelectedFrequency;                                                //0xc
    ULONG MinPercent;                                                       //0x10
    ULONG MaxPercent;                                                       //0x14
    ULONG TolerancePercent;                                                 //0x18
    ULONG EppPercent;                                                       //0x1c
    ULONG AutonomousActivityWindow;                                         //0x20
    UCHAR Autonomous;                                                       //0x24
    UCHAR InheritFromDomain;                                                //0x25
}; 

----------------------------------------
Structure: _PERIODIC_CAPTURE_STATE_GUIDS

//0x10 bytes (sizeof)
struct _PERIODIC_CAPTURE_STATE_GUIDS
{
    USHORT ProviderCount;                                                   //0x0
    struct _GUID* Providers;                                                //0x8
}; 

----------------------------------------
Structure: _PF_KERNEL_GLOBALS

//0x60 bytes (sizeof)
struct _PF_KERNEL_GLOBALS
{
    ULONGLONG AccessBufferAgeThreshold;                                     //0x0
    struct _EX_RUNDOWN_REF AccessBufferRef;                                 //0x8
    struct _KEVENT AccessBufferExistsEvent;                                 //0x10
    ULONG AccessBufferMax;                                                  //0x28
    union _SLIST_HEADER AccessBufferList;                                   //0x40
    LONG StreamSequenceNumber;                                              //0x50
    ULONG Flags;                                                            //0x54
    LONG ScenarioPrefetchCount;                                             //0x58
}; 

----------------------------------------
Structure: _PHYSICAL_MEMORY_DESCRIPTOR

//0x20 bytes (sizeof)
struct _PHYSICAL_MEMORY_DESCRIPTOR
{
    ULONG NumberOfRuns;                                                     //0x0
    ULONGLONG NumberOfPages;                                                //0x8
    struct _PHYSICAL_MEMORY_RUN Run[1];                                     //0x10
}; 

----------------------------------------
Structure: _PHYSICAL_MEMORY_RUN

//0x10 bytes (sizeof)
struct _PHYSICAL_MEMORY_RUN
{
    ULONGLONG BasePage;                                                     //0x0
    ULONGLONG PageCount;                                                    //0x8
}; 

----------------------------------------
Structure: _PI_BUS_EXTENSION

//0x70 bytes (sizeof)
struct _PI_BUS_EXTENSION
{
    ULONG Flags;                                                            //0x0
    UCHAR NumberCSNs;                                                       //0x4
    UCHAR* ReadDataPort;                                                    //0x8
    UCHAR DataPortMapped;                                                   //0x10
    UCHAR* AddressPort;                                                     //0x18
    UCHAR AddrPortMapped;                                                   //0x20
    UCHAR* CommandPort;                                                     //0x28
    UCHAR CmdPortMapped;                                                    //0x30
    ULONG NextSlotNumber;                                                   //0x34
    struct _SINGLE_LIST_ENTRY DeviceList;                                   //0x38
    struct _SINGLE_LIST_ENTRY CardList;                                     //0x40
    struct _DEVICE_OBJECT* PhysicalBusDevice;                               //0x48
    struct _DEVICE_OBJECT* FunctionalBusDevice;                             //0x50
    struct _DEVICE_OBJECT* AttachedDevice;                                  //0x58
    ULONG BusNumber;                                                        //0x60
    enum _SYSTEM_POWER_STATE SystemPowerState;                              //0x64
    enum _DEVICE_POWER_STATE DevicePowerState;                              //0x68
}; 

----------------------------------------
Structure: _PI_RESOURCE_ARBITER_ENTRY

//0x70 bytes (sizeof)
struct _PI_RESOURCE_ARBITER_ENTRY
{
    struct _LIST_ENTRY DeviceArbiterList;                                   //0x0
    UCHAR ResourceType;                                                     //0x10
    struct _ARBITER_INTERFACE* ArbiterInterface;                            //0x18
    struct _DEVICE_NODE* DeviceNode;                                        //0x20
    struct _LIST_ENTRY ResourceList;                                        //0x28
    struct _LIST_ENTRY BestResourceList;                                    //0x38
    struct _LIST_ENTRY BestConfig;                                          //0x48
    struct _LIST_ENTRY ActiveArbiterList;                                   //0x58
    UCHAR State;                                                            //0x68
    UCHAR ResourcesChanged;                                                 //0x69
}; 

----------------------------------------
Structure: _PLATFORM_IDLE_ACCOUNTING

//0x408 bytes (sizeof)
struct _PLATFORM_IDLE_ACCOUNTING
{
    ULONG ResetCount;                                                       //0x0
    ULONG StateCount;                                                       //0x4
    ULONG DeepSleepCount;                                                   //0x8
    enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                //0xc
    ULONGLONG StartTime;                                                    //0x10
    struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];                        //0x18
}; 

----------------------------------------
Structure: _PLATFORM_IDLE_STATE_ACCOUNTING

//0x3f0 bytes (sizeof)
struct _PLATFORM_IDLE_STATE_ACCOUNTING
{
    ULONG CancelCount;                                                      //0x0
    ULONG FailureCount;                                                     //0x4
    ULONG SuccessCount;                                                     //0x8
    ULONGLONG MaxTime;                                                      //0x10
    ULONGLONG MinTime;                                                      //0x18
    ULONGLONG TotalTime;                                                    //0x20
    ULONG InvalidBucketIndex;                                               //0x28
    struct _PPM_SELECTION_STATISTICS SelectionStatistics;                   //0x30
    struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                     //0xb0
}; 

----------------------------------------
Structure: _PLATFORM_INTERRUPT

//0x10 bytes (sizeof)
struct _PLATFORM_INTERRUPT
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    USHORT Flags;                                                           //0x2
    UCHAR InterruptType;                                                    //0x4
    UCHAR APICID;                                                           //0x5
    UCHAR ACPIEID;                                                          //0x6
    UCHAR IOSAPICVector;                                                    //0x7
    ULONG GlobalVector;                                                     //0x8
    ULONG Reserved;                                                         //0xc
}; 

----------------------------------------
Structure: _PLUGPLAY_EVENT_BLOCK

//0x50 bytes (sizeof)
struct _PLUGPLAY_EVENT_BLOCK
{
    struct _GUID EventGuid;                                                 //0x0
    enum _PLUGPLAY_EVENT_CATEGORY EventCategory;                            //0x10
    ULONG* Result;                                                          //0x18
    ULONG Flags;                                                            //0x20
    ULONG TotalSize;                                                        //0x24
    VOID* DeviceObject;                                                     //0x28
    union
    {
        struct
        {
            struct _GUID ClassGuid;                                         //0x30
            WCHAR SymbolicLinkName[1];                                      //0x40
        } DeviceClass;                                                      //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } TargetDevice;                                                     //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } InstallDevice;                                                    //0x30
        struct
        {
            VOID* NotificationStructure;                                    //0x30
            WCHAR DeviceId[1];                                              //0x38
        } CustomNotification;                                               //0x30
        struct
        {
            VOID* Notification;                                             //0x30
        } ProfileNotification;                                              //0x30
        struct
        {
            ULONG NotificationCode;                                         //0x30
            ULONG NotificationData;                                         //0x34
        } PowerNotification;                                                //0x30
        struct
        {
            enum _PNP_VETO_TYPE VetoType;                                   //0x30
            WCHAR DeviceIdVetoNameBuffer[1];                                //0x34
        } VetoNotification;                                                 //0x30
        struct
        {
            struct _GUID BlockedDriverGuid;                                 //0x30
        } BlockedDriverNotification;                                        //0x30
        struct
        {
            WCHAR ParentId[1];                                              //0x30
        } InvalidIDNotification;                                            //0x30
        struct
        {
            struct _GUID PowerSettingGuid;                                  //0x30
            ULONG Flags;                                                    //0x40
            ULONG SessionId;                                                //0x44
            ULONG DataLength;                                               //0x48
            UCHAR Data[1];                                                  //0x4c
        } PowerSettingNotification;                                         //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } PropertyChangeNotification;                                       //0x30
        struct
        {
            WCHAR DeviceId[1];                                              //0x30
        } DeviceInstanceNotification;                                       //0x30
    } u;                                                                    //0x30
}; 

----------------------------------------
Structure: _PNP_ASSIGN_RESOURCES_CONTEXT

//0x10 bytes (sizeof)
struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
    ULONG IncludeFailedDevices;                                             //0x0
    ULONG DeviceCount;                                                      //0x4
    struct _DEVICE_OBJECT* DeviceList[1];                                   //0x8
}; 

----------------------------------------
Structure: _PNP_DEVICE_ACTION_ENTRY

//0x60 bytes (sizeof)
struct _PNP_DEVICE_ACTION_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x10
    enum _PNP_DEVICE_ACTION_REQUEST RequestType;                            //0x18
    UCHAR ReorderingBarrier;                                                //0x1c
    ULONGLONG RequestArgument;                                              //0x20
    struct _KEVENT* CompletionEvent;                                        //0x28
    LONG* CompletionStatus;                                                 //0x30
    struct _GUID ActivityId;                                                //0x38
    LONG RefCount;                                                          //0x48
    UCHAR Dequeued;                                                         //0x4c
    struct _EX_PUSH_LOCK CancelLock;                                        //0x50
    UCHAR CancelRequested;                                                  //0x58
}; 

----------------------------------------
Structure: _PNP_DEVICE_COMPLETION_QUEUE

//0x50 bytes (sizeof)
struct _PNP_DEVICE_COMPLETION_QUEUE
{
    struct _LIST_ENTRY DispatchedList;                                      //0x0
    ULONG DispatchedCount;                                                  //0x10
    struct _LIST_ENTRY CompletedList;                                       //0x18
    struct _KSEMAPHORE CompletedSemaphore;                                  //0x28
    ULONGLONG SpinLock;                                                     //0x48
}; 

----------------------------------------
Structure: _PNP_DEVICE_COMPLETION_REQUEST

//0x48 bytes (sizeof)
struct _PNP_DEVICE_COMPLETION_REQUEST
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _DEVICE_NODE* DeviceNode;                                        //0x10
    VOID* Context;                                                          //0x18
    enum _PNP_DEVNODE_STATE CompletionState;                                //0x20
    ULONG IrpPended;                                                        //0x24
    LONG Status;                                                            //0x28
    VOID* Information;                                                      //0x30
    LONG ReferenceCount;                                                    //0x38
    struct _PNP_WATCHDOG* Watchdog;                                         //0x40
}; 

----------------------------------------
Structure: _PNP_DEVICE_EVENT_ENTRY

//0xc0 bytes (sizeof)
struct _PNP_DEVICE_EVENT_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG Argument;                                                         //0x10
    LONG ArgumentStatus;                                                    //0x14
    struct _KEVENT* CallerEvent;                                            //0x18
    VOID (*Callback)(VOID* arg1);                                           //0x20
    VOID* Context;                                                          //0x28
    enum _PNP_VETO_TYPE* VetoType;                                          //0x30
    struct _UNICODE_STRING* VetoName;                                       //0x38
    ULONG RefCount;                                                         //0x40
    ULONG Lock;                                                             //0x44
    UCHAR Cancel;                                                           //0x48
    struct _PNP_DEVICE_EVENT_ENTRY* Parent;                                 //0x50
    struct _GUID ActivityId;                                                //0x58
    struct _PNP_WATCHDOG* Watchdog;                                         //0x68
    struct _PLUGPLAY_EVENT_BLOCK Data;                                      //0x70
}; 

----------------------------------------
Structure: _PNP_DEVICE_EVENT_LIST

//0x88 bytes (sizeof)
struct _PNP_DEVICE_EVENT_LIST
{
    LONG Status;                                                            //0x0
    struct _KMUTANT EventQueueMutex;                                        //0x8
    struct _FAST_MUTEX Lock;                                                //0x40
    struct _LIST_ENTRY List;                                                //0x78
}; 

----------------------------------------
Structure: _PNP_REBALANCE_TRACE_CONTEXT

//0x70 bytes (sizeof)
struct _PNP_REBALANCE_TRACE_CONTEXT
{
    ULONG DeviceCount;                                                      //0x0
    ULONG RebalancePhase;                                                   //0x4
    enum _PNP_REBALANCE_REASON Reason[2];                                   //0x8
    enum _PNP_REBALANCE_FAILURE Failure[2];                                 //0x10
    struct _DEVICE_NODE* SubtreeRoot;                                       //0x18
    UCHAR SubtreeIncludesRoot;                                              //0x20
    struct _DEVICE_NODE* TriggerRoot;                                       //0x28
    UCHAR RebalanceDueToDynamicPartitioning;                                //0x30
    ULONGLONG BeginTime;                                                    //0x38
    struct _DEVICE_NODE* VetoNode[2];                                       //0x40
    enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2]; //0x50
    struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;            //0x58
}; 

----------------------------------------
Structure: _PNP_REPLACE_PROCESSOR_LIST

//0x18 bytes (sizeof)
struct _PNP_REPLACE_PROCESSOR_LIST
{
    ULONGLONG* Affinity;                                                    //0x0
    ULONG GroupCount;                                                       //0x8
    ULONG AllocatedCount;                                                   //0xc
    ULONG Count;                                                            //0x10
    ULONG ApicIds[1];                                                       //0x14
}; 

----------------------------------------
Structure: _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT

//0x18 bytes (sizeof)
struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
{
    UCHAR ResourceType;                                                     //0x0
    ULONG AlternativeCount;                                                 //0x4
    struct _IO_RESOURCE_DESCRIPTOR* ResourceRequests;                       //0x8
    VOID* ArbiterInstance;                                                  //0x10
}; 

----------------------------------------
Structure: _PNP_RESOURCE_REQUEST

//0x40 bytes (sizeof)
struct _PNP_RESOURCE_REQUEST
{
    struct _DEVICE_OBJECT* PhysicalDevice;                                  //0x0
    ULONG Flags;                                                            //0x8
    enum _ARBITER_REQUEST_SOURCE AllocationType;                            //0xc
    ULONG Priority;                                                         //0x10
    ULONG Position;                                                         //0x14
    struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;            //0x18
    VOID* ReqList;                                                          //0x20
    struct _CM_RESOURCE_LIST* ResourceAssignment;                           //0x28
    struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;                 //0x30
    LONG Status;                                                            //0x38
}; 

----------------------------------------
Structure: _PNP_WATCHDOG

//0x28 bytes (sizeof)
struct _PNP_WATCHDOG
{
    ULONGLONG WatchdogStart;                                                //0x0
    struct _WDT_HANDLE* WatchdogTimer;                                      //0x8
    enum _PNP_WATCHDOG_TYPE WatchdogContextType;                            //0x10
    VOID* WatchdogContext;                                                  //0x18
    UCHAR TriggerEventLogged;                                               //0x20
}; 

----------------------------------------
Structure: _POOL_HEADER

//0x10 bytes (sizeof)
struct _POOL_HEADER
{
    union
    {
        struct
        {
            USHORT PreviousSize:8;                                          //0x0
            USHORT PoolIndex:8;                                             //0x0
            USHORT BlockSize:8;                                             //0x2
            USHORT PoolType:8;                                              //0x2
        };
        ULONG Ulong1;                                                       //0x0
    };
    ULONG PoolTag;                                                          //0x4
    union
    {
        struct _EPROCESS* ProcessBilled;                                    //0x8
        struct
        {
            USHORT AllocatorBackTraceIndex;                                 //0x8
            USHORT PoolTagHash;                                             //0xa
        };
    };
}; 

----------------------------------------
Structure: _POOL_TRACKER_BIG_PAGES

//0x18 bytes (sizeof)
struct _POOL_TRACKER_BIG_PAGES
{
    volatile ULONGLONG Va;                                                  //0x0
    ULONG Key;                                                              //0x8
    ULONG Pattern:8;                                                        //0xc
    ULONG PoolType:12;                                                      //0xc
    ULONG SlushSize:12;                                                     //0xc
    ULONGLONG NumberOfBytes;                                                //0x10
}; 

----------------------------------------
Structure: _POOL_TRACKER_TABLE

//0x38 bytes (sizeof)
struct _POOL_TRACKER_TABLE
{
    volatile LONG Key;                                                      //0x0
    ULONGLONG NonPagedBytes;                                                //0x8
    ULONGLONG NonPagedAllocs;                                               //0x10
    ULONGLONG NonPagedFrees;                                                //0x18
    ULONGLONG PagedBytes;                                                   //0x20
    ULONGLONG PagedAllocs;                                                  //0x28
    ULONGLONG PagedFrees;                                                   //0x30
}; 

----------------------------------------
Structure: _POP_ACTION_TRIGGER

//0x18 bytes (sizeof)
struct _POP_ACTION_TRIGGER
{
    enum POWER_POLICY_DEVICE_TYPE Type;                                     //0x0
    ULONG Flags;                                                            //0x4
    struct _POP_TRIGGER_WAIT* Wait;                                         //0x8
    union
    {
        struct
        {
            ULONG PercentLevel;                                             //0x10
        } Battery;                                                          //0x10
        struct
        {
            ULONG Type;                                                     //0x10
        } Button;                                                           //0x10
    };
}; 

----------------------------------------
Structure: _POP_COMPONENT_POWER_PROFILE

//0x28 bytes (sizeof)
struct _POP_COMPONENT_POWER_PROFILE
{
    struct _GUID ComponentGuid;                                             //0x0
    struct _POP_DEVICE_POWER_PROFILE* Device;                               //0x10
    ULONGLONG FxCount;                                                      //0x18
    struct _PO_POWER_PLANE_PROFILE FxPower[1];                              //0x20
}; 

----------------------------------------
Structure: _POP_COOLING_EXTENSION

//0x90 bytes (sizeof)
struct _POP_COOLING_EXTENSION
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _LIST_ENTRY RequestListHead;                                     //0x10
    struct _POP_RW_LOCK Lock;                                               //0x20
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x30
    VOID* NotificationEntry;                                                //0x38
    UCHAR Enabled;                                                          //0x40
    UCHAR ActiveEngaged;                                                    //0x41
    UCHAR ThrottleLimit;                                                    //0x42
    UCHAR UpdatingToCurrent;                                                //0x43
    struct _KEVENT* RemovalFlushEvent;                                      //0x48
    struct _KEVENT* PnpFlushEvent;                                          //0x50
    struct _THERMAL_COOLING_INTERFACE Interface;                            //0x58
}; 

----------------------------------------
Structure: _POP_CURRENT_BROADCAST

//0x18 bytes (sizeof)
struct _POP_CURRENT_BROADCAST
{
    UCHAR InProgress;                                                       //0x0
    struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;                       //0x4
    enum POWER_ACTION PowerAction;                                          //0x8
    struct _POP_DEVICE_SYS_STATE* DeviceState;                              //0x10
}; 

----------------------------------------
Structure: _POP_DEVICE_POWER_PROFILE

//0x58 bytes (sizeof)
struct _POP_DEVICE_POWER_PROFILE
{
    struct _UNICODE_STRING DeviceId;                                        //0x0
    struct _POP_POWER_PLANE* PowerPlane;                                    //0x10
    struct _POP_FX_DEVICE* FxDevice;                                        //0x18
    LONG PowerDrawMw;                                                       //0x20
    struct _PO_POWER_PLANE_PROFILE DxPower[4];                              //0x24
    ULONGLONG ComponentCount;                                               //0x48
    struct _POP_COMPONENT_POWER_PROFILE** Components;                       //0x50
}; 

----------------------------------------
Structure: _POP_DEVICE_SYS_STATE

//0x1d8 bytes (sizeof)
struct _POP_DEVICE_SYS_STATE
{
    UCHAR IrpMinor;                                                         //0x0
    enum _SYSTEM_POWER_STATE SystemState;                                   //0x4
    ULONGLONG SpinLock;                                                     //0x8
    struct _KTHREAD* Thread;                                                //0x10
    struct _KEVENT* AbortEvent;                                             //0x18
    struct _KSEMAPHORE* ReadySemaphore;                                     //0x20
    struct _KSEMAPHORE* FinishedSemaphore;                                  //0x28
    struct _PO_DEVICE_NOTIFY_ORDER Order;                                   //0x30
    struct _LIST_ENTRY Pending;                                             //0x1b0
    LONG Status;                                                            //0x1c0
    struct _DEVICE_OBJECT* FailedDevice;                                    //0x1c8
    UCHAR Waking;                                                           //0x1d0
    UCHAR Cancelled;                                                        //0x1d1
    UCHAR IgnoreErrors;                                                     //0x1d2
    UCHAR IgnoreNotImplemented;                                             //0x1d3
    UCHAR TimeRefreshLockAcquired;                                          //0x1d4
}; 

----------------------------------------
Structure: _POP_FX_ACCOUNTING

//0xe0 bytes (sizeof)
struct _POP_FX_ACCOUNTING
{
    ULONGLONG Lock;                                                         //0x0
    UCHAR Active;                                                           //0x8
    ULONG DripsRequiredState;                                               //0xc
    LONG Level;                                                             //0x10
    LONGLONG ActiveStamp;                                                   //0x18
    struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;           //0x20
    struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting;   //0x80
}; 

----------------------------------------
Structure: _POP_FX_ACTIVE_TIME_ACCOUNTING

//0x60 bytes (sizeof)
struct _POP_FX_ACTIVE_TIME_ACCOUNTING
{
    ULONGLONG Total;                                                        //0x0
    ULONGLONG Unattributed;                                                 //0x8
    ULONGLONG Buckets[5];                                                   //0x10
    ULONGLONG PerBucket[5];                                                 //0x38
}; 

----------------------------------------
Structure: _POP_FX_COMPONENT

//0x1b8 bytes (sizeof)
struct _POP_FX_COMPONENT
{
    struct _GUID Id;                                                        //0x0
    ULONG Index;                                                            //0x10
    struct _POP_FX_WORK_ORDER WorkOrder;                                    //0x18
    struct _POP_FX_DEVICE* Device;                                          //0x50
    unionvolatile _POP_FX_COMPONENT_FLAGS Flags;                            //0x58
    volatile LONG Resident;                                                 //0x60
    struct _KEVENT ActiveEvent;                                             //0x68
    ULONGLONG IdleLock;                                                     //0x80
    volatile LONG IdleConditionComplete;                                    //0x88
    volatile LONG IdleStateComplete;                                        //0x8c
    ULONGLONG IdleStamp;                                                    //0x90
    volatile ULONG CurrentIdleState;                                        //0x98
    ULONG IdleStateCount;                                                   //0x9c
    struct _POP_FX_IDLE_STATE* IdleStates;                                  //0xa0
    ULONG DeepestWakeableIdleState;                                         //0xa8
    ULONG ProviderCount;                                                    //0xac
    struct _POP_FX_PROVIDER* Providers;                                     //0xb0
    ULONG IdleProviderCount;                                                //0xb8
    ULONG DependentCount;                                                   //0xbc
    struct _POP_FX_DEPENDENT* Dependents;                                   //0xc0
    struct _POP_FX_ACCOUNTING Accounting;                                   //0xc8
    struct _POP_FX_PERF_INFO* Performance;                                  //0x1a8
    struct _POP_COMPONENT_POWER_PROFILE* PowerProfile;                      //0x1b0
}; 

----------------------------------------
Structure: _POP_FX_DEPENDENT

//0x8 bytes (sizeof)
struct _POP_FX_DEPENDENT
{
    ULONG Index;                                                            //0x0
    ULONG ProviderIndex;                                                    //0x4
}; 

----------------------------------------
Structure: _POP_FX_DEVICE

//0x4b8 bytes (sizeof)
struct _POP_FX_DEVICE
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _IRP* Irp;                                                       //0x10
    struct _POP_IRP_DATA* IrpData;                                          //0x18
    unionvolatile _POP_FX_DEVICE_STATUS Status;                             //0x20
    volatile LONG PowerReqCall;                                             //0x24
    volatile LONG PowerNotReqCall;                                          //0x28
    struct _DEVICE_NODE* DevNode;                                           //0x30
    struct PEPHANDLE__* DpmContext;                                         //0x38
    struct _POP_FX_PLUGIN* Plugin;                                          //0x40
    struct PEPHANDLE__* PluginHandle;                                       //0x48
    struct _POP_FX_PLUGIN* AcpiPlugin;                                      //0x50
    struct PEPHANDLE__* AcpiPluginHandle;                                   //0x58
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x60
    struct _DEVICE_OBJECT* TargetDevice;                                    //0x68
    struct _POP_FX_DRIVER_CALLBACKS Callbacks;                              //0x70
    VOID* DriverContext;                                                    //0xc0
    struct _LIST_ENTRY AcpiLink;                                            //0xc8
    struct _UNICODE_STRING DeviceId;                                        //0xd8
    volatile LONG CommonReferenceFlags;                                     //0xe8
    struct _IO_REMOVE_LOCK RemoveLock;                                      //0xf0
    struct _IO_REMOVE_LOCK AcpiRemoveLock;                                  //0x110
    struct _POP_FX_WORK_ORDER WorkOrder;                                    //0x130
    ULONGLONG IdleLock;                                                     //0x168
    struct _KTIMER IdleTimer;                                               //0x170
    struct _KDPC IdleDpc;                                                   //0x1b0
    ULONGLONG IdleTimeout;                                                  //0x1f0
    ULONGLONG IdleStamp;                                                    //0x1f8
    struct _DEVICE_OBJECT* NextIrpDeviceObject[2];                          //0x200
    union _POWER_STATE NextIrpPowerState[2];                                //0x210
    VOID (*NextIrpCallerCompletion[2])(struct _DEVICE_OBJECT* arg1, UCHAR arg2, union _POWER_STATE arg3, VOID* arg4, struct _IO_STATUS_BLOCK* arg5); //0x218
    VOID* NextIrpCallerContext[2];                                          //0x228
    struct _KEVENT IrpCompleteEvent;                                        //0x238
    UCHAR (*PowerOnDumpDeviceCallback)(struct _PEP_CRASHDUMP_INFORMATION* arg1); //0x250
    struct _POP_FX_ACCOUNTING Accounting;                                   //0x258
    volatile ULONG Flags;                                                   //0x338
    ULONG ComponentCount;                                                   //0x33c
    struct _POP_FX_COMPONENT** Components;                                  //0x340
    ULONG LogEntries;                                                       //0x348
    struct _POP_FX_LOG_ENTRY* Log;                                          //0x350
    volatile LONG LogIndex;                                                 //0x358
    struct _DRIVER_OBJECT* DripsWatchdogDriverObject;                       //0x360
    struct _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;             //0x368
    ULONG DirectedTimeout;                                                  //0x390
    struct _POP_FX_WORK_ORDER DirectedWorkOrder;                            //0x398
    struct _POP_FX_WORK_ORDER_WATCHDOG_INFO DirectedWorkWatchdogInfo;       //0x3d0
    ULONGLONG DirectedLock;                                                 //0x480
    volatile LONG DirectedTransitionCallCount;                              //0x488
    struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE DirectedTransitionState; //0x490
    struct _POP_DEVICE_POWER_PROFILE* PowerProfile;                         //0x4a0
    struct _UNICODE_STRING FriendlyName;                                    //0x4a8
}; 

----------------------------------------
Structure: _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE

//0x10 bytes (sizeof)
struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
{
    VOID* CompletionContext;                                                //0x0
    LONG CompletionStatus;                                                  //0x8
    ULONG DIrpPending:1;                                                    //0xc
    ULONG DIrpCompleted:1;                                                  //0xc
}; 

----------------------------------------
Structure: _POP_FX_DRIPS_WATCHDOG_CONTEXT

//0x28 bytes (sizeof)
struct _POP_FX_DRIPS_WATCHDOG_CONTEXT
{
    struct _LIST_ENTRY Link;                                                //0x0
    ULONG ComponentIndex;                                                   //0x10
    struct _DEVICE_NODE** ChildDevices;                                     //0x18
    ULONG ChildDeviceCount;                                                 //0x20
}; 

----------------------------------------
Structure: _POP_FX_DRIVER_CALLBACKS

//0x50 bytes (sizeof)
struct _POP_FX_DRIVER_CALLBACKS
{
    VOID (*ComponentActive)(VOID* arg1, ULONG arg2);                        //0x0
    VOID (*ComponentIdle)(VOID* arg1, ULONG arg2);                          //0x8
    VOID (*ComponentIdleState)(VOID* arg1, ULONG arg2, ULONG arg3);         //0x10
    VOID (*DevicePowerRequired)(VOID* arg1);                                //0x18
    VOID (*DevicePowerNotRequired)(VOID* arg1);                             //0x20
    LONG (*PowerControl)(VOID* arg1, struct _GUID* arg2, VOID* arg3, ULONGLONG arg4, VOID* arg5, ULONGLONG arg6, ULONGLONG* arg7); //0x28
    VOID (*ComponentCriticalTransition)(VOID* arg1, ULONG arg2, UCHAR arg3); //0x30
    VOID (*DripsWatchdogCallback)(VOID* arg1, struct _DEVICE_OBJECT* arg2, ULONG arg3); //0x38
    VOID (*DirectedPowerUpCallback)(VOID* arg1, ULONG arg2);                //0x40
    VOID (*DirectedPowerDownCallback)(VOID* arg1, ULONG arg2);              //0x48
}; 

----------------------------------------
Structure: _POP_FX_IDLE_STATE

//0x18 bytes (sizeof)
struct _POP_FX_IDLE_STATE
{
    ULONGLONG TransitionLatency;                                            //0x0
    ULONGLONG ResidencyRequirement;                                         //0x8
    ULONG NominalPower;                                                     //0x10
}; 

----------------------------------------
Structure: _POP_FX_LOG_ENTRY

//0x18 bytes (sizeof)
struct _POP_FX_LOG_ENTRY
{
    ULONGLONG Timestamp;                                                    //0x0
    UCHAR Operation;                                                        //0x8
    UCHAR Component;                                                        //0x9
    USHORT Processor;                                                       //0xa
    USHORT Process;                                                         //0xc
    USHORT Thread;                                                          //0xe
    ULONGLONG Information;                                                  //0x10
}; 

----------------------------------------
Structure: _POP_FX_PERF_INFO

//0xa0 bytes (sizeof)
struct _POP_FX_PERF_INFO
{
    struct _POP_FX_COMPONENT* Component;                                    //0x0
    struct _KEVENT CompletedEvent;                                          //0x8
    VOID (*ComponentPerfState)(VOID* arg1, ULONG arg2, UCHAR arg3, VOID* arg4); //0x20
    unionvolatile _POP_FX_PERF_FLAGS Flags;                                 //0x28
    struct _PO_FX_PERF_STATE_CHANGE* LastChange;                            //0x30
    ULONG LastChangeCount;                                                  //0x38
    ULONGLONG LastChangeStamp;                                              //0x40
    UCHAR LastChangeNominal;                                                //0x48
    UCHAR PepRegistered;                                                    //0x49
    UCHAR QueryOnIdleStates;                                                //0x4a
    VOID* volatile RequestDriverContext;                                    //0x50
    struct _POP_FX_WORK_ORDER WorkOrder;                                    //0x58
    ULONG SetsCount;                                                        //0x90
    struct _POP_FX_PERF_SET* Sets;                                          //0x98
}; 

----------------------------------------
Structure: _POP_FX_PERF_SET

//0x20 bytes (sizeof)
struct _POP_FX_PERF_SET
{
    struct _PO_FX_COMPONENT_PERF_SET* PerfSet;                              //0x0
    ULONGLONG CurrentPerf;                                                  //0x8
    ULONGLONG CurrentPerfStamp;                                             //0x10
    UCHAR CurrentPerfNominal;                                               //0x18
}; 

----------------------------------------
Structure: _POP_FX_PLUGIN

//0x1a8 bytes (sizeof)
struct _POP_FX_PLUGIN
{
    struct _LIST_ENTRY Link;                                                //0x0
    ULONG Version;                                                          //0x10
    ULONGLONG Flags;                                                        //0x18
    struct _KQUEUE WorkQueue;                                               //0x20
    UCHAR (*AcceptDeviceNotification)(ULONG arg1, VOID* arg2);              //0x60
    UCHAR (*AcceptProcessorNotification)(struct PEPHANDLE__* arg1, ULONG arg2, VOID* arg3); //0x68
    UCHAR (*AcceptAcpiNotification)(ULONG arg1, VOID* arg2);                //0x70
    struct _POP_FX_WORK_POOL PluginWorkPool;                                //0x78
}; 

----------------------------------------
Structure: _POP_FX_PROVIDER

//0x8 bytes (sizeof)
struct _POP_FX_PROVIDER
{
    ULONG Index;                                                            //0x0
    UCHAR Activating;                                                       //0x4
}; 

----------------------------------------
Structure: _POP_FX_WORK_ORDER

//0x38 bytes (sizeof)
struct _POP_FX_WORK_ORDER
{
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x0
    LONG WorkCount;                                                         //0x20
    VOID* Context;                                                          //0x28
    struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;             //0x30
}; 

----------------------------------------
Structure: _POP_FX_WORK_ORDER_WATCHDOG_INFO

//0xb0 bytes (sizeof)
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _KTIMER Timer;                                                   //0x10
    struct _KDPC Dpc;                                                       //0x50
    struct _POP_FX_WORK_ORDER* WorkOrder;                                   //0x90
    struct _PEP_WORK_INFORMATION* CurrentWorkInfo;                          //0x98
    ULONGLONG WatchdogStart;                                                //0xa0
    struct _KTHREAD* WorkerThread;                                          //0xa8
}; 

----------------------------------------
Structure: _POP_FX_WORK_POOL

//0x130 bytes (sizeof)
struct _POP_FX_WORK_POOL
{
    struct _POP_FX_PLUGIN* Plugin;                                          //0x0
    ULONGLONG EmergencyWorkQueueLock;                                       //0x8
    struct _LIST_ENTRY EmergencyWorkQueue;                                  //0x10
    struct _KSEMAPHORE WorkPoolQueues[2];                                   //0x20
    volatile LONG WorkItemStatus;                                           //0x60
    struct _POP_FX_WORK_POOL_ITEM WorkItems[4];                             //0x68
    struct _KTHREAD* EmergencyWorkerThread;                                 //0x108
    struct _KTHREAD* DynamicWorkerThreads[4];                               //0x110
}; 

----------------------------------------
Structure: _POP_FX_WORK_POOL_ITEM

//0x28 bytes (sizeof)
struct _POP_FX_WORK_POOL_ITEM
{
    struct _POP_FX_WORK_POOL* WorkPool;                                     //0x0
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x8
}; 

----------------------------------------
Structure: _POP_HIBER_CONTEXT

//0x1c8 bytes (sizeof)
struct _POP_HIBER_CONTEXT
{
    UCHAR Reset;                                                            //0x0
    UCHAR HiberFlags;                                                       //0x1
    UCHAR WroteHiberFile;                                                   //0x2
    UCHAR KernelPhaseVerificationActive;                                    //0x3
    volatile UCHAR InitializationFinished;                                  //0x4
    volatile LONG NextTableLockHeld;                                        //0x8
    volatile LONG BootPhaseFinishedBarrier;                                 //0xc
    volatile LONG KernelResumeFinishedBarrier;                              //0x10
    volatile LONG HvCaptureReadyBarrier;                                    //0x14
    volatile LONG HvCaptureCompletedBarrier;                                //0x18
    UCHAR MapFrozen;                                                        //0x1c
    union
    {
        struct _RTL_BITMAP DiscardMap;                                      //0x20
        struct _RTL_BITMAP KernelPhaseMap;                                  //0x20
    };
    struct _RTL_BITMAP BootPhaseMap;                                        //0x30
    struct _LIST_ENTRY ClonedRanges;                                        //0x40
    ULONG ClonedRangeCount;                                                 //0x50
    ULONGLONG ClonedPageCount;                                              //0x58
    struct _RTL_BITMAP* CurrentMap;                                         //0x60
    struct _LIST_ENTRY* NextCloneRange;                                     //0x68
    ULONGLONG NextPreserve;                                                 //0x70
    struct _MDL* LoaderMdl;                                                 //0x78
    struct _MDL* AllocatedMdl;                                              //0x80
    ULONGLONG PagesOut;                                                     //0x88
    VOID* IoPages;                                                          //0x90
    ULONG IoPagesCount;                                                     //0x98
    VOID* CurrentMcb;                                                       //0xa0
    struct _DUMP_STACK_CONTEXT* DumpStack;                                  //0xa8
    struct _KPROCESSOR_STATE* WakeState;                                    //0xb0
    ULONG IoProgress;                                                       //0xb8
    LONG Status;                                                            //0xbc
    ULONG GraphicsProc;                                                     //0xc0
    struct PO_MEMORY_IMAGE* MemoryImage;                                    //0xc8
    ULONG* PerformanceStats;                                                //0xd0
    struct _MDL* BootLoaderLogMdl;                                          //0xd8
    struct _MDL* FirmwareRuntimeInformationMdl;                             //0xe0
    VOID* FirmwareRuntimeInformationVa;                                     //0xe8
    VOID* ResumeContext;                                                    //0xf0
    ULONG ResumeContextPages;                                               //0xf8
    ULONG SecurePages;                                                      //0xfc
    ULONG ProcessorCount;                                                   //0x100
    struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;                    //0x108
    CHAR* ProdConsBuffer;                                                   //0x110
    ULONG ProdConsSize;                                                     //0x118
    ULONG MaxDataPages;                                                     //0x11c
    VOID* ExtraBuffer;                                                      //0x120
    ULONGLONG ExtraBufferSize;                                              //0x128
    VOID* ExtraMapVa;                                                       //0x130
    ULONGLONG BitlockerKeyPFN;                                              //0x138
    struct _POP_IO_INFO IoInfo;                                             //0x140
    WCHAR* IoChecksums;                                                     //0x1b0
    ULONGLONG IoChecksumsSize;                                              //0x1b8
    ULONG HardwareConfigurationSignature;                                   //0x1c0
    UCHAR IumEnabled;                                                       //0x1c4
    UCHAR SecureBoot;                                                       //0x1c5
}; 

----------------------------------------
Structure: _POP_IO_INFO

//0x70 bytes (sizeof)
struct _POP_IO_INFO
{
    struct _MDL* DumpMdl;                                                   //0x0
    enum _POP_IO_STATUS IoStatus;                                           //0x8
    ULONGLONG IoStartCount;                                                 //0x10
    ULONGLONG IoBytesCompleted;                                             //0x18
    ULONGLONG IoBytesInProgress;                                            //0x20
    ULONGLONG RequestSize;                                                  //0x28
    union _LARGE_INTEGER IoLocation;                                        //0x30
    ULONGLONG FileOffset;                                                   //0x38
    VOID* Buffer;                                                           //0x40
    UCHAR AsyncCapable;                                                     //0x48
    ULONGLONG BytesToRead;                                                  //0x50
    ULONG Pages;                                                            //0x58
    ULONGLONG HighestChecksumIndex;                                         //0x60
    USHORT PreviousChecksum;                                                //0x68
}; 

----------------------------------------
Structure: _POP_IRP_DATA

//0x100 bytes (sizeof)
struct _POP_IRP_DATA
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _IRP* Irp;                                                       //0x10
    struct _DEVICE_OBJECT* Pdo;                                             //0x18
    struct _DEVICE_OBJECT* TargetDevice;                                    //0x20
    struct _DEVICE_OBJECT* CurrentDevice;                                   //0x28
    ULONGLONG WatchdogStart;                                                //0x30
    struct _KTIMER WatchdogTimer;                                           //0x38
    struct _KDPC WatchdogDpc;                                               //0x78
    UCHAR MinorFunction;                                                    //0xb8
    enum _POWER_STATE_TYPE PowerStateType;                                  //0xbc
    union _POWER_STATE PowerState;                                          //0xc0
    UCHAR WatchdogEnabled;                                                  //0xc4
    struct _POP_FX_DEVICE* FxDevice;                                        //0xc8
    UCHAR SystemTransition;                                                 //0xd0
    UCHAR NotifyPEP;                                                        //0xd1
    LONG IrpSequenceID;                                                     //0xd4
    union
    {
        struct
        {
            VOID (*CallerCompletion)(struct _DEVICE_OBJECT* arg1, UCHAR arg2, union _POWER_STATE arg3, VOID* arg4, struct _IO_STATUS_BLOCK* arg5); //0xd8
            VOID* CallerContext;                                            //0xe0
            struct _DEVICE_OBJECT* CallerDevice;                            //0xe8
            UCHAR SystemWake;                                               //0xf0
        } Device;                                                           //0xd8
        struct
        {
            struct _PO_DEVICE_NOTIFY* NotifyDevice;                         //0xd8
            UCHAR FxDeviceActivated;                                        //0xe0
        } System;                                                           //0xd8
    };
    enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON DStateReason;                 //0xf8
}; 

----------------------------------------
Structure: _POP_IRP_WORKER_ENTRY

//0x30 bytes (sizeof)
struct _POP_IRP_WORKER_ENTRY
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _ETHREAD* Thread;                                                //0x10
    struct _IRP* Irp;                                                       //0x18
    struct _DEVICE_OBJECT* Device;                                          //0x20
    UCHAR Static;                                                           //0x28
}; 

----------------------------------------
Structure: _POP_PER_PROCESSOR_CONTEXT

//0x80 bytes (sizeof)
struct _POP_PER_PROCESSOR_CONTEXT
{
    UCHAR* UncompressedData;                                                //0x0
    VOID* MappingVa;                                                        //0x8
    VOID* XpressEncodeWorkspace;                                            //0x10
    UCHAR* CompressedDataBuffer;                                            //0x18
    ULONGLONG CopyTicks;                                                    //0x20
    ULONGLONG CompressTicks;                                                //0x28
    ULONGLONG BytesCopied;                                                  //0x30
    ULONGLONG PagesProcessed;                                               //0x38
    ULONGLONG DecompressTicks;                                              //0x40
    ULONGLONG ResumeCopyTicks;                                              //0x48
    ULONGLONG SharedBufferTicks;                                            //0x50
    ULONGLONG DecompressTicksByMethod[2];                                   //0x58
    ULONGLONG DecompressSizeByMethod[2];                                    //0x68
    ULONG CompressCount;                                                    //0x78
    ULONG HuffCompressCount;                                                //0x7c
}; 

----------------------------------------
Structure: _POP_POLICY_DEVICE

//0x40 bytes (sizeof)
struct _POP_POLICY_DEVICE
{
    struct _LIST_ENTRY Link;                                                //0x0
    enum POWER_POLICY_DEVICE_TYPE DeviceType;                               //0x10
    VOID* Notification;                                                     //0x18
    struct _UNICODE_STRING Name;                                            //0x20
    struct _DEVICE_OBJECT* Device;                                          //0x30
    struct _IRP* Irp;                                                       //0x38
}; 

----------------------------------------
Structure: _POP_POWER_ACTION

//0x1c8 bytes (sizeof)
struct _POP_POWER_ACTION
{
    UCHAR Updates;                                                          //0x0
    UCHAR State;                                                            //0x1
    UCHAR Shutdown;                                                         //0x2
    enum POWER_ACTION Action;                                               //0x4
    enum _SYSTEM_POWER_STATE LightestState;                                 //0x8
    ULONG Flags;                                                            //0xc
    LONG Status;                                                            //0x10
    enum POWER_POLICY_DEVICE_TYPE DeviceType;                               //0x14
    ULONG DeviceTypeFlags;                                                  //0x18
    UCHAR IrpMinor;                                                         //0x1c
    UCHAR Waking;                                                           //0x1d
    enum _SYSTEM_POWER_STATE SystemState;                                   //0x20
    enum _SYSTEM_POWER_STATE NextSystemState;                               //0x24
    enum _SYSTEM_POWER_STATE EffectiveSystemState;                          //0x28
    enum _SYSTEM_POWER_STATE CurrentSystemState;                            //0x2c
    struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;                        //0x30
    struct _POP_DEVICE_SYS_STATE* DevState;                                 //0x38
    struct _POP_HIBER_CONTEXT* HiberContext;                                //0x40
    ULONGLONG WakeTime;                                                     //0x48
    ULONGLONG SleepTime;                                                    //0x50
    ULONGLONG WakeFirstUnattendedTime;                                      //0x58
    enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;                          //0x60
    struct
    {
        ULONGLONG RequestedTime;                                            //0x68
        ULONGLONG ProgrammedTime;                                           //0x70
        struct _DIAGNOSTIC_BUFFER* TimerInfo;                               //0x78
    } WakeAlarm[3];                                                         //0x68
    UCHAR WakeAlarmPaused;                                                  //0xb0
    ULONGLONG WakeAlarmLastTime;                                            //0xb8
    ULONGLONG DozeDeferralStartTime;                                        //0xc0
    struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;                  //0xc8
    ULONGLONG WatchdogLock;                                                 //0x118
    struct _KDPC WatchdogDpc;                                               //0x120
    struct _KTIMER WatchdogTimer;                                           //0x160
    UCHAR WatchdogInitialized;                                              //0x1a0
    enum _POP_POWER_ACTION_WATCHDOG_STATE WatchdogState;                    //0x1a4
    ULONGLONG WatchdogStartTime;                                            //0x1a8
    struct _KTHREAD* ActionWorkerThread;                                    //0x1b0
    struct _KTHREAD* PromoteActionWorkerThread;                             //0x1b8
    struct _KTHREAD* UnlockAfterSleepWorkerThread;                          //0x1c0
}; 

----------------------------------------
Structure: _POP_POWER_PLANE

//0x40 bytes (sizeof)
struct _POP_POWER_PLANE
{
    struct _UNICODE_STRING PowerPlaneId;                                    //0x0
    ULONGLONG Lock;                                                         //0x10
    UCHAR OldIrql;                                                          //0x18
    volatile LONG DevicePowerMw;                                            //0x1c
    VOID* PmaxHandle;                                                       //0x20
    VOID (*NotifyDevicePowerDraw)(VOID* arg1, ULONG arg2);                  //0x28
    ULONGLONG DeviceCount;                                                  //0x30
    struct _POP_DEVICE_POWER_PROFILE** Devices;                             //0x38
}; 

----------------------------------------
Structure: _POP_POWER_SETTING_VALUES

//0x148 bytes (sizeof)
struct _POP_POWER_SETTING_VALUES
{
    ULONG StructureSize;                                                    //0x0
    struct _SYSTEM_POWER_POLICY PopPolicy;                                  //0x4
    enum SYSTEM_POWER_CONDITION CurrentAcDcPowerState;                      //0xec
    UCHAR AwayModeEnabled;                                                  //0xf0
    UCHAR AwayModeEngaged;                                                  //0xf1
    UCHAR AwayModePolicyAllowed;                                            //0xf2
    volatile LONG AwayModeIgnoreUserPresent;                                //0xf4
    volatile LONG AwayModeIgnoreAction;                                     //0xf8
    UCHAR DisableFastS4;                                                    //0xfc
    UCHAR DisableStandbyStates;                                             //0xfd
    ULONG UnattendSleepTimeout;                                             //0x100
    volatile ULONG DiskIgnoreTime;                                          //0x104
    volatile ULONG DeviceIdlePolicy;                                        //0x108
    ULONG VideoDimTimeout;                                                  //0x10c
    ULONG VideoNormalBrightness;                                            //0x110
    ULONG VideoDimBrightness;                                               //0x114
    ULONG AlsOffset;                                                        //0x118
    ULONG AlsEnabled;                                                       //0x11c
    ULONG EsBrightness;                                                     //0x120
    UCHAR SwitchShutdownForced;                                             //0x124
    ULONG SystemCoolingPolicy;                                              //0x128
    UCHAR MediaBufferingEngaged;                                            //0x12c
    UCHAR AudioActivity;                                                    //0x12d
    UCHAR FullscreenVideoPlayback;                                          //0x12e
    ULONG EsBatteryThreshold;                                               //0x130
    UCHAR EsAggressive;                                                     //0x134
    UCHAR EsUserAwaySetting;                                                //0x135
    ULONG ConnectivityInStandby;                                            //0x138
    ULONG DisconnectedStandbyMode;                                          //0x13c
    ULONG UserPresencePredictionEnabled;                                    //0x140
    UCHAR AirplaneModeEnabled;                                              //0x144
    UCHAR BluetoothDeviceCharging;                                          //0x145
}; 

----------------------------------------
Structure: _POP_PPM_PROFILE

//0x15b0 bytes (sizeof)
struct _POP_PPM_PROFILE
{
    WCHAR* Name;                                                            //0x0
    UCHAR Id;                                                               //0x8
    struct _GUID Guid;                                                      //0xc
    ULONG Flags;                                                            //0x1c
    UCHAR Priority;                                                         //0x20
    struct _PPM_ENGINE_SETTINGS Settings[2];                                //0x28
    ULONGLONG StartTime;                                                    //0x1588
    ULONGLONG Count;                                                        //0x1590
    ULONGLONG MaxDuration;                                                  //0x1598
    ULONGLONG MinDuration;                                                  //0x15a0
    ULONGLONG TotalDuration;                                                //0x15a8
}; 

----------------------------------------
Structure: _POP_RW_LOCK

//0x10 bytes (sizeof)
struct _POP_RW_LOCK
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    struct _KTHREAD* Thread;                                                //0x8
}; 

----------------------------------------
Structure: _POP_SHUTDOWN_BUG_CHECK

//0x48 bytes (sizeof)
struct _POP_SHUTDOWN_BUG_CHECK
{
    struct _ETHREAD* InitiatingThread;                                      //0x0
    struct _EPROCESS* InitiatingProcess;                                    //0x8
    VOID* ThreadId;                                                         //0x10
    VOID* ProcessId;                                                        //0x18
    ULONG Code;                                                             //0x20
    ULONGLONG Parameter1;                                                   //0x28
    ULONGLONG Parameter2;                                                   //0x30
    ULONGLONG Parameter3;                                                   //0x38
    ULONGLONG Parameter4;                                                   //0x40
}; 

----------------------------------------
Structure: _POP_THERMAL_TELEMETRY_TRACKER

//0x218 bytes (sizeof)
struct _POP_THERMAL_TELEMETRY_TRACKER
{
    UCHAR AccountingDisabled;                                               //0x0
    UCHAR ActiveLevels;                                                     //0x1
    ULONGLONG LastPassiveUpdateTime;                                        //0x8
    ULONGLONG LastActiveUpdateTime;                                         //0x10
    ULONGLONG TotalPassiveTime[21];                                         //0x18
    ULONGLONG PassiveTimeSnap[21];                                          //0xc0
    ULONGLONG TotalActiveTime[10];                                          //0x168
    ULONGLONG ActiveTimeSnap[10];                                           //0x1b8
    ULONGLONG TotalTime;                                                    //0x208
    ULONGLONG TotalTimeSnap;                                                //0x210
}; 

----------------------------------------
Structure: _POP_THERMAL_ZONE

//0x420 bytes (sizeof)
struct _POP_THERMAL_ZONE
{
    union
    {
        struct _POP_POLICY_DEVICE PolicyDevice;                             //0x0
        struct
        {
            struct _LIST_ENTRY Link;                                        //0x0
            enum POWER_POLICY_DEVICE_TYPE DeviceType;                       //0x10
            VOID* Notification;                                             //0x18
            struct _UNICODE_STRING Name;                                    //0x20
            struct _DEVICE_OBJECT* Device;                                  //0x30
            struct _IRP* Irp;                                               //0x38
        };
    };
    UCHAR State;                                                            //0x40
    UCHAR Flags;                                                            //0x41
    UCHAR Removing;                                                         //0x42
    UCHAR Mode;                                                             //0x43
    UCHAR PendingMode;                                                      //0x44
    UCHAR ActivePoint;                                                      //0x45
    UCHAR PendingActivePoint;                                               //0x46
    UCHAR Critical;                                                         //0x47
    UCHAR ThermalStandby;                                                   //0x48
    UCHAR OverThrottled;                                                    //0x49
    LONG HighPrecisionThrottle;                                             //0x4c
    LONG Throttle;                                                          //0x50
    LONG PendingThrottle;                                                   //0x54
    ULONG ThrottleReasons;                                                  //0x58
    ULONGLONG LastPassiveTime;                                              //0x60
    ULONG SampleRate;                                                       //0x68
    ULONG LastTemp;                                                         //0x6c
    struct _THERMAL_INFORMATION_EX Info;                                    //0x70
    struct _THERMAL_POLICY Policy;                                          //0xcc
    UCHAR PolicyDriver;                                                     //0xe4
    ULONG PollingRate;                                                      //0xe8
    ULONGLONG LastTemperatureTime;                                          //0xf0
    ULONGLONG LastActiveStartTime;                                          //0xf8
    ULONGLONG LastPassiveStartTime;                                         //0x100
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x108
    struct _KTIMER2 ZoneUpdateTimer;                                        //0x128
    struct _POP_RW_LOCK Lock;                                               //0x1b0
    struct _KEVENT ZoneStopped;                                             //0x1c0
    struct _KEVENT TemperatureUpdated;                                      //0x1d8
    ULONG InstanceId;                                                       //0x1f0
    struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;                 //0x1f8
    struct _UNICODE_STRING Description;                                     //0x410
}; 

----------------------------------------
Structure: _POP_TRIGGER_WAIT

//0x38 bytes (sizeof)
struct _POP_TRIGGER_WAIT
{
    struct _KEVENT Event;                                                   //0x0
    LONG Status;                                                            //0x18
    struct _LIST_ENTRY Link;                                                //0x20
    struct _POP_ACTION_TRIGGER* Trigger;                                    //0x30
}; 

----------------------------------------
Structure: _PORT_MESSAGE

//0x28 bytes (sizeof)
struct _PORT_MESSAGE
{
    union
    {
        struct
        {
            SHORT DataLength;                                               //0x0
            SHORT TotalLength;                                              //0x2
        } s1;                                                               //0x0
        ULONG Length;                                                       //0x0
    } u1;                                                                   //0x0
    union
    {
        struct
        {
            SHORT Type;                                                     //0x4
            SHORT DataInfoOffset;                                           //0x6
        } s2;                                                               //0x4
        ULONG ZeroInit;                                                     //0x4
    } u2;                                                                   //0x4
    union
    {
        struct _CLIENT_ID ClientId;                                         //0x8
        double DoNotUseThisField;                                           //0x8
    };
    ULONG MessageId;                                                        //0x18
    union
    {
        ULONGLONG ClientViewSize;                                           //0x20
        ULONG CallbackId;                                                   //0x20
    };
}; 

----------------------------------------
Structure: _PORT_MESSAGE32

//0x18 bytes (sizeof)
struct _PORT_MESSAGE32
{
    union
    {
        struct
        {
            SHORT DataLength;                                               //0x0
            SHORT TotalLength;                                              //0x2
        } s1;                                                               //0x0
        ULONG Length;                                                       //0x0
    } u1;                                                                   //0x0
    union
    {
        struct
        {
            SHORT Type;                                                     //0x4
            SHORT DataInfoOffset;                                           //0x6
        } s2;                                                               //0x4
        ULONG ZeroInit;                                                     //0x4
    } u2;                                                                   //0x4
    union
    {
        struct _CLIENT_ID32 ClientId;                                       //0x8
        double DoNotUseThisField;                                           //0x8
    };
    ULONG MessageId;                                                        //0x10
    union
    {
        ULONG ClientViewSize;                                               //0x14
        ULONG CallbackId;                                                   //0x14
    };
}; 

----------------------------------------
Structure: _POWER_SEQUENCE

//0xc bytes (sizeof)
struct _POWER_SEQUENCE
{
    ULONG SequenceD1;                                                       //0x0
    ULONG SequenceD2;                                                       //0x4
    ULONG SequenceD3;                                                       //0x8
}; 

----------------------------------------
Structure: _PO_DEVICE_NOTIFY

//0x68 bytes (sizeof)
struct _PO_DEVICE_NOTIFY
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _LIST_ENTRY PowerChildren;                                       //0x10
    struct _LIST_ENTRY PowerParents;                                        //0x20
    struct _DEVICE_OBJECT* TargetDevice;                                    //0x30
    UCHAR OrderLevel;                                                       //0x38
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x40
    WCHAR* DeviceName;                                                      //0x48
    WCHAR* DriverName;                                                      //0x50
    ULONG ChildCount;                                                       //0x58
    ULONG ActiveChild;                                                      //0x5c
    ULONG ParentCount;                                                      //0x60
    ULONG ActiveParent;                                                     //0x64
}; 

----------------------------------------
Structure: _PO_DEVICE_NOTIFY_ORDER

//0x180 bytes (sizeof)
struct _PO_DEVICE_NOTIFY_ORDER
{
    UCHAR Locked;                                                           //0x0
    struct _DEVICE_OBJECT** WarmEjectPdoPointer;                            //0x8
    struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];                            //0x10
    ULONG Flags;                                                            //0x178
}; 

----------------------------------------
Structure: _PO_DIAG_STACK_RECORD

//0x10 bytes (sizeof)
struct _PO_DIAG_STACK_RECORD
{
    ULONG StackDepth;                                                       //0x0
    VOID* Stack[1];                                                         //0x8
}; 

----------------------------------------
Structure: _PO_DIRECTED_DRIPS_STATE

//0x38 bytes (sizeof)
struct _PO_DIRECTED_DRIPS_STATE
{
    struct _LIST_ENTRY QueueLink;                                           //0x0
    struct _LIST_ENTRY VisitedQueueLink;                                    //0x10
    volatile ULONG Flags;                                                   //0x20
    ULONG CachedFlags;                                                      //0x24
    ULONG DeviceUsageCount;                                                 //0x28
    VOID* Diagnostic;                                                       //0x30
}; 

----------------------------------------
Structure: _PO_FX_COMPONENT_PERF_SET

//0x30 bytes (sizeof)
struct _PO_FX_COMPONENT_PERF_SET
{
    struct _UNICODE_STRING Name;                                            //0x0
    ULONGLONG Flags;                                                        //0x10
    enum _PO_FX_PERF_STATE_UNIT Unit;                                       //0x18
    enum _PO_FX_PERF_STATE_TYPE Type;                                       //0x1c
    union
    {
        struct
        {
            ULONG Count;                                                    //0x20
            struct _PO_FX_PERF_STATE* States;                               //0x28
        } Discrete;                                                         //0x20
        struct
        {
            ULONGLONG Minimum;                                              //0x20
            ULONGLONG Maximum;                                              //0x28
        } Range;                                                            //0x20
    };
}; 

----------------------------------------
Structure: _PO_FX_PERF_STATE

//0x10 bytes (sizeof)
struct _PO_FX_PERF_STATE
{
    ULONGLONG Value;                                                        //0x0
    VOID* Context;                                                          //0x8
}; 

----------------------------------------
Structure: _PO_FX_PERF_STATE_CHANGE

//0x10 bytes (sizeof)
struct _PO_FX_PERF_STATE_CHANGE
{
    ULONG Set;                                                              //0x0
    union
    {
        ULONG StateIndex;                                                   //0x8
        ULONGLONG StateValue;                                               //0x8
    };
}; 

----------------------------------------
Structure: _PO_HIBER_PERF

//0x1f8 bytes (sizeof)
struct _PO_HIBER_PERF
{
    ULONGLONG HiberIoTicks;                                                 //0x0
    ULONGLONG HiberIoCpuTicks;                                              //0x8
    ULONGLONG HiberInitTicks;                                               //0x10
    ULONGLONG HiberHiberFileTicks;                                          //0x18
    ULONGLONG HiberCompressTicks;                                           //0x20
    ULONGLONG HiberSharedBufferTicks;                                       //0x28
    ULONGLONG HiberChecksumTicks;                                           //0x30
    ULONGLONG HiberChecksumIoTicks;                                         //0x38
    union _LARGE_INTEGER TotalHibernateTime;                                //0x40
    union _LARGE_INTEGER HibernateCompleteTimestamp;                        //0x48
    ULONG POSTTime;                                                         //0x50
    ULONG ResumeBootMgrTime;                                                //0x54
    ULONG BootmgrUserInputTime;                                             //0x58
    ULONGLONG ResumeAppTicks;                                               //0x60
    ULONGLONG ResumeAppStartTimestamp;                                      //0x68
    ULONGLONG ResumeLibraryInitTicks;                                       //0x70
    ULONGLONG ResumeInitTicks;                                              //0x78
    ULONGLONG ResumeRestoreImageStartTimestamp;                             //0x80
    ULONGLONG ResumeHiberFileTicks;                                         //0x88
    ULONGLONG ResumeIoTicks;                                                //0x90
    ULONGLONG ResumeDecompressTicks;                                        //0x98
    ULONGLONG ResumeAllocateTicks;                                          //0xa0
    ULONGLONG ResumeUserInOutTicks;                                         //0xa8
    ULONGLONG ResumeMapTicks;                                               //0xb0
    ULONGLONG ResumeUnmapTicks;                                             //0xb8
    ULONGLONG ResumeChecksumTicks;                                          //0xc0
    ULONGLONG ResumeChecksumIoTicks;                                        //0xc8
    ULONGLONG ResumeKernelSwitchTimestamp;                                  //0xd0
    ULONGLONG CyclesPerMs;                                                  //0xd8
    ULONGLONG WriteLogDataTimestamp;                                        //0xe0
    ULONGLONG KernelReturnFromHandler;                                      //0xe8
    ULONGLONG TimeStampCounterAtSwitchTime;                                 //0xf0
    ULONGLONG HalTscOffset;                                                 //0xf8
    ULONGLONG HvlTscOffset;                                                 //0x100
    ULONGLONG SleeperThreadEnd;                                             //0x108
    ULONGLONG PostCmosUpdateTimestamp;                                      //0x110
    ULONGLONG KernelReturnSystemPowerStateTimestamp;                        //0x118
    ULONGLONG IoBoundedness;                                                //0x120
    ULONGLONG KernelDecompressTicks;                                        //0x128
    ULONGLONG KernelIoTicks;                                                //0x130
    ULONGLONG KernelCopyTicks;                                              //0x138
    ULONGLONG ReadCheckCount;                                               //0x140
    ULONGLONG KernelInitTicks;                                              //0x148
    ULONGLONG KernelResumeHiberFileTicks;                                   //0x150
    ULONGLONG KernelIoCpuTicks;                                             //0x158
    ULONGLONG KernelSharedBufferTicks;                                      //0x160
    ULONGLONG KernelAnimationTicks;                                         //0x168
    ULONGLONG KernelChecksumTicks;                                          //0x170
    ULONGLONG KernelChecksumIoTicks;                                        //0x178
    union _LARGE_INTEGER AnimationStart;                                    //0x180
    union _LARGE_INTEGER AnimationStop;                                     //0x188
    ULONG DeviceResumeTime;                                                 //0x190
    ULONGLONG SecurePagesProcessed;                                         //0x198
    ULONGLONG BootPagesProcessed;                                           //0x1a0
    ULONGLONG KernelPagesProcessed;                                         //0x1a8
    ULONGLONG BootBytesWritten;                                             //0x1b0
    ULONGLONG KernelBytesWritten;                                           //0x1b8
    ULONGLONG BootPagesWritten;                                             //0x1c0
    ULONGLONG KernelPagesWritten;                                           //0x1c8
    ULONGLONG BytesWritten;                                                 //0x1d0
    ULONG PagesWritten;                                                     //0x1d8
    ULONG FileRuns;                                                         //0x1dc
    ULONG NoMultiStageResumeReason;                                         //0x1e0
    ULONG MaxHuffRatio;                                                     //0x1e4
    ULONGLONG AdjustedTotalResumeTime;                                      //0x1e8
    ULONGLONG ResumeCompleteTimestamp;                                      //0x1f0
}; 

----------------------------------------
Structure: _PO_IRP_MANAGER

//0x20 bytes (sizeof)
struct _PO_IRP_MANAGER
{
    struct _PO_IRP_QUEUE DeviceIrpQueue;                                    //0x0
    struct _PO_IRP_QUEUE SystemIrpQueue;                                    //0x10
}; 

----------------------------------------
Structure: _PO_IRP_QUEUE

//0x10 bytes (sizeof)
struct _PO_IRP_QUEUE
{
    struct _IRP* CurrentIrp;                                                //0x0
    struct _IRP* PendingIrpList;                                            //0x8
}; 

----------------------------------------
Structure: _PO_NOTIFY_ORDER_LEVEL

//0x48 bytes (sizeof)
struct _PO_NOTIFY_ORDER_LEVEL
{
    ULONG DeviceCount;                                                      //0x0
    ULONG ActiveCount;                                                      //0x4
    struct _LIST_ENTRY WaitSleep;                                           //0x8
    struct _LIST_ENTRY ReadySleep;                                          //0x18
    struct _LIST_ENTRY ReadyS0;                                             //0x28
    struct _LIST_ENTRY WaitS0;                                              //0x38
}; 

----------------------------------------
Structure: _PO_POWER_PLANE_PROFILE

//0x8 bytes (sizeof)
struct _PO_POWER_PLANE_PROFILE
{
    ULONG ExclusivePowerMw;                                                 //0x0
    ULONG PeakPowerMw;                                                      //0x4
}; 

----------------------------------------
Structure: _PO_PROCESS_ENERGY_CONTEXT

//0x0 bytes (sizeof)
struct _PO_PROCESS_ENERGY_CONTEXT; 

----------------------------------------
Structure: _PPC_DBGKD_CONTROL_SET

//0xc bytes (sizeof)
struct _PPC_DBGKD_CONTROL_SET
{
    ULONG Continue;                                                         //0x0
    ULONG CurrentSymbolStart;                                               //0x4
    ULONG CurrentSymbolEnd;                                                 //0x8
}; 

----------------------------------------
Structure: _PPM_CONCURRENCY_ACCOUNTING

//0x28 bytes (sizeof)
struct _PPM_CONCURRENCY_ACCOUNTING
{
    ULONGLONG Lock;                                                         //0x0
    ULONG Processors;                                                       //0x8
    ULONG ActiveProcessors;                                                 //0xc
    ULONGLONG LastUpdateTime;                                               //0x10
    ULONGLONG TotalTime;                                                    //0x18
    ULONGLONG AccumulatedTime[1];                                           //0x20
}; 

----------------------------------------
Structure: _PPM_COORDINATED_SELECTION

//0x18 bytes (sizeof)
struct _PPM_COORDINATED_SELECTION
{
    ULONG MaximumStates;                                                    //0x0
    ULONG SelectedStates;                                                   //0x4
    ULONG DefaultSelection;                                                 //0x8
    ULONG* Selection;                                                       //0x10
}; 

----------------------------------------
Structure: _PPM_ENGINE_SETTINGS

//0xab0 bytes (sizeof)
struct _PPM_ENGINE_SETTINGS
{
    union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];                     //0x0
    UCHAR ThrottlingPolicy;                                                 //0x10
    ULONG PerfTimeCheck;                                                    //0x14
    UCHAR PerfHistoryCount[2];                                              //0x18
    UCHAR PerfMinPolicy[2];                                                 //0x1a
    UCHAR PerfMaxPolicy[2];                                                 //0x1c
    UCHAR PerfDecreaseTime[2];                                              //0x1e
    UCHAR PerfIncreaseTime[2];                                              //0x20
    UCHAR PerfDecreasePolicy[2];                                            //0x22
    UCHAR PerfIncreasePolicy[2];                                            //0x24
    UCHAR PerfDecreaseThreshold[2];                                         //0x26
    UCHAR PerfIncreaseThreshold[2];                                         //0x28
    ULONG PerfFrequencyCap[2];                                              //0x2c
    ULONG PerfBoostPolicy;                                                  //0x34
    ULONG PerfBoostMode;                                                    //0x38
    ULONG PerfReductionTolerance;                                           //0x3c
    ULONG EnergyPerfPreference[2];                                          //0x40
    ULONG AutonomousActivityWindow;                                         //0x48
    UCHAR AutonomousPreference;                                             //0x4c
    UCHAR LatencyHintPerf[2];                                               //0x4d
    UCHAR LatencyHintUnpark[2];                                             //0x4f
    ULONG ResponsivenessDisableThreshold[2];                                //0x54
    ULONG ResponsivenessEnableThreshold[2];                                 //0x5c
    UCHAR ResponsivenessDisableTime[2];                                     //0x64
    UCHAR ResponsivenessEnableTime[2];                                      //0x66
    ULONG ResponsivenessEppCeiling[2];                                      //0x68
    ULONG ResponsivenessPerfFloor[2];                                       //0x70
    UCHAR DutyCycling;                                                      //0x78
    UCHAR ParkingPerfState[2];                                              //0x79
    UCHAR DistributeUtility;                                                //0x7b
    UCHAR CoreParkingOverUtilizationThreshold;                              //0x7c
    UCHAR CoreParkingConcurrencyThreshold;                                  //0x7d
    UCHAR CoreParkingHeadroomThreshold;                                     //0x7e
    UCHAR CoreParkingDistributionThreshold;                                 //0x7f
    UCHAR CoreParkingDecreasePolicy;                                        //0x80
    UCHAR CoreParkingIncreasePolicy;                                        //0x81
    ULONG CoreParkingDecreaseTime;                                          //0x84
    ULONG CoreParkingIncreaseTime;                                          //0x88
    UCHAR CoreParkingMinCores[2];                                           //0x8c
    UCHAR CoreParkingMaxCores[2];                                           //0x8e
    ULONG SoftParkLatency;                                                  //0x90
    UCHAR AllowScaling;                                                     //0x94
    UCHAR IdleDisabled;                                                     //0x95
    ULONG IdleTimeCheck;                                                    //0x98
    UCHAR IdleDemotePercent;                                                //0x9c
    UCHAR IdlePromotePercent;                                               //0x9d
    UCHAR IdleStateMax;                                                     //0x9e
    UCHAR HeteroDecreaseTime;                                               //0x9f
    UCHAR HeteroIncreaseTime;                                               //0xa0
    UCHAR HeteroDecreaseThreshold[1280];                                    //0xa1
    UCHAR HeteroIncreaseThreshold[1280];                                    //0x5a1
    UCHAR Class0FloorPerformance;                                           //0xaa1
    UCHAR Class1InitialPerformance;                                         //0xaa2
    enum _KHETERO_CPU_POLICY ThreadPolicies[2];                             //0xaa4
}; 

----------------------------------------
Structure: _PPM_FFH_THROTTLE_STATE_INFO

//0x20 bytes (sizeof)
struct _PPM_FFH_THROTTLE_STATE_INFO
{
    UCHAR EnableLogging;                                                    //0x0
    ULONG MismatchCount;                                                    //0x4
    UCHAR Initialized;                                                      //0x8
    ULONGLONG LastValue;                                                    //0x10
    union _LARGE_INTEGER LastLogTickCount;                                  //0x18
}; 

----------------------------------------
Structure: _PPM_IDLE_STATE

//0xf8 bytes (sizeof)
struct _PPM_IDLE_STATE
{
    struct _KAFFINITY_EX DomainMembers;                                     //0x0
    struct _UNICODE_STRING Name;                                            //0xa8
    ULONG Latency;                                                          //0xb8
    ULONG BreakEvenDuration;                                                //0xbc
    ULONG Power;                                                            //0xc0
    ULONG StateFlags;                                                       //0xc4
    struct _PPM_VETO_ACCOUNTING VetoAccounting;                             //0xc8
    UCHAR StateType;                                                        //0xf0
    UCHAR InterruptsEnabled;                                                //0xf1
    UCHAR Interruptible;                                                    //0xf2
    UCHAR ContextRetained;                                                  //0xf3
    UCHAR CacheCoherent;                                                    //0xf4
    UCHAR WakesSpuriously;                                                  //0xf5
    UCHAR PlatformOnly;                                                     //0xf6
    UCHAR NoCState;                                                         //0xf7
}; 

----------------------------------------
Structure: _PPM_IDLE_STATES

//0x428 bytes (sizeof)
struct _PPM_IDLE_STATES
{
    UCHAR InterfaceVersion;                                                 //0x0
    UCHAR IdleOverride;                                                     //0x1
    UCHAR EstimateIdleDuration;                                             //0x2
    UCHAR ExitLatencyTraceEnabled;                                          //0x3
    UCHAR NonInterruptibleTransition;                                       //0x4
    UCHAR UnaccountedTransition;                                            //0x5
    UCHAR IdleDurationLimited;                                              //0x6
    UCHAR IdleCheckLimited;                                                 //0x7
    UCHAR StrictVetoBias;                                                   //0x8
    ULONG ExitLatencyCountdown;                                             //0xc
    ULONG TargetState;                                                      //0x10
    ULONG ActualState;                                                      //0x14
    ULONG OldState;                                                         //0x18
    ULONG OverrideIndex;                                                    //0x1c
    ULONG ProcessorIdleCount;                                               //0x20
    ULONG Type;                                                             //0x24
    ULONGLONG LevelId;                                                      //0x28
    USHORT ReasonFlags;                                                     //0x30
    volatile ULONGLONG InitiateWakeStamp;                                   //0x38
    LONG PreviousStatus;                                                    //0x40
    ULONG PreviousCancelReason;                                             //0x44
    struct _KAFFINITY_EX PrimaryProcessorMask;                              //0x48
    struct _KAFFINITY_EX SecondaryProcessorMask;                            //0xf0
    VOID (*IdlePrepare)(struct _PROCESSOR_IDLE_PREPARE_INFO* arg1);         //0x198
    LONG (*IdlePreExecute)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x1a0
    LONG (*IdleExecute)(VOID* arg1, ULONGLONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG* arg7); //0x1a8
    ULONG (*IdlePreselect)(VOID* arg1, struct _PROCESSOR_IDLE_CONSTRAINTS* arg2); //0x1b0
    ULONG (*IdleTest)(VOID* arg1, ULONG arg2, ULONG arg3);                  //0x1b8
    ULONG (*IdleAvailabilityCheck)(VOID* arg1, ULONG arg2);                 //0x1c0
    VOID (*IdleComplete)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x1c8
    VOID (*IdleCancel)(VOID* arg1, ULONG arg2);                             //0x1d0
    UCHAR (*IdleIsHalted)(VOID* arg1);                                      //0x1d8
    UCHAR (*IdleInitiateWake)(VOID* arg1);                                  //0x1e0
    struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;                        //0x1e8
    struct _KAFFINITY_EX DeepIdleSnapshot;                                  //0x240
    struct _PERFINFO_PPM_STATE_SELECTION* Tracing;                          //0x2e8
    struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;               //0x2f0
    struct _PPM_SELECTION_MENU ProcessorMenu;                               //0x2f8
    struct _PPM_SELECTION_MENU CoordinatedMenu;                             //0x308
    struct _PPM_COORDINATED_SELECTION CoordinatedSelection;                 //0x318
    struct _PPM_IDLE_STATE State[1];                                        //0x330
}; 

----------------------------------------
Structure: _PPM_PLATFORM_STATE

//0x180 bytes (sizeof)
struct _PPM_PLATFORM_STATE
{
    ULONGLONG LevelId;                                                      //0x0
    ULONG Latency;                                                          //0x8
    ULONG BreakEvenDuration;                                                //0xc
    struct _PPM_VETO_ACCOUNTING VetoAccounting;                             //0x10
    UCHAR TransitionDebugger;                                               //0x38
    UCHAR Platform;                                                         //0x39
    ULONG DependencyListCount;                                              //0x3c
    struct _KAFFINITY_EX Processors;                                        //0x40
    struct _UNICODE_STRING Name;                                            //0xe8
    struct _PPM_SELECTION_DEPENDENCY* DependencyLists;                      //0xf8
    unionvolatile _PPM_COORDINATED_SYNCHRONIZATION Synchronization;         //0x100
    volatile ULONGLONG EnterTime;                                           //0x108
    union
    {
        volatile LONG RefCount;                                             //0x140
        UCHAR CacheAlign0[64];                                              //0x140
    };
}; 

----------------------------------------
Structure: _PPM_PLATFORM_STATES

//0x1c0 bytes (sizeof)
struct _PPM_PLATFORM_STATES
{
    ULONG StateCount;                                                       //0x0
    ULONG InterfaceVersion;                                                 //0x4
    ULONG ProcessorCount;                                                   //0x8
    UCHAR CoordinatedInterface;                                             //0xc
    ULONG (*IdleTest)(VOID* arg1, ULONG arg2, ULONG arg3);                  //0x10
    LONG (*IdlePreExecute)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x18
    VOID (*IdleComplete)(VOID* arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG* arg5); //0x20
    LONG (*QueryPlatformStateResidency)(VOID* arg1, struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES* arg2); //0x28
    struct _PLATFORM_IDLE_ACCOUNTING* Accounting;                           //0x30
    UCHAR DeepSleepEnabled;                                                 //0x38
    struct _PPM_PLATFORM_STATE State[1];                                    //0x40
}; 

----------------------------------------
Structure: _PPM_SELECTION_DEPENDENCY

//0x18 bytes (sizeof)
struct _PPM_SELECTION_DEPENDENCY
{
    ULONG Processor;                                                        //0x0
    struct _PPM_SELECTION_MENU Menu;                                        //0x8
}; 

----------------------------------------
Structure: _PPM_SELECTION_MENU

//0x10 bytes (sizeof)
struct _PPM_SELECTION_MENU
{
    ULONG Count;                                                            //0x0
    struct _PPM_SELECTION_MENU_ENTRY* Entries;                              //0x8
}; 

----------------------------------------
Structure: _PPM_SELECTION_MENU_ENTRY

//0x18 bytes (sizeof)
struct _PPM_SELECTION_MENU_ENTRY
{
    UCHAR StrictDependency;                                                 //0x0
    UCHAR InitiatingState;                                                  //0x1
    UCHAR DependentState;                                                   //0x2
    ULONG StateIndex;                                                       //0x4
    ULONG Dependencies;                                                     //0x8
    struct _PPM_SELECTION_DEPENDENCY* DependencyList;                       //0x10
}; 

----------------------------------------
Structure: _PPM_SELECTION_STATISTICS

//0x80 bytes (sizeof)
struct _PPM_SELECTION_STATISTICS
{
    ULONGLONG SelectedCount;                                                //0x0
    ULONGLONG VetoCount;                                                    //0x8
    ULONGLONG PreVetoCount;                                                 //0x10
    ULONGLONG WrongProcessorCount;                                          //0x18
    ULONGLONG LatencyCount;                                                 //0x20
    ULONGLONG IdleDurationCount;                                            //0x28
    ULONGLONG DeviceDependencyCount;                                        //0x30
    ULONGLONG ProcessorDependencyCount;                                     //0x38
    ULONGLONG PlatformOnlyCount;                                            //0x40
    ULONGLONG InterruptibleCount;                                           //0x48
    ULONGLONG LegacyOverrideCount;                                          //0x50
    ULONGLONG CstateCheckCount;                                             //0x58
    ULONGLONG NoCStateCount;                                                //0x60
    ULONGLONG CoordinatedDependencyCount;                                   //0x68
    ULONGLONG NotClockOwnerCount;                                           //0x70
    struct _PPM_VETO_ACCOUNTING* PreVetoAccounting;                         //0x78
}; 

----------------------------------------
Structure: _PPM_VETO_ACCOUNTING

//0x28 bytes (sizeof)
struct _PPM_VETO_ACCOUNTING
{
    volatile LONG VetoPresent;                                              //0x0
    struct _LIST_ENTRY VetoListHead;                                        //0x8
    UCHAR CsAccountingBlocks;                                               //0x18
    UCHAR BlocksDrips;                                                      //0x19
    ULONG PreallocatedVetoCount;                                            //0x1c
    struct _PPM_VETO_ENTRY* PreallocatedVetoList;                           //0x20
}; 

----------------------------------------
Structure: _PPM_VETO_ENTRY

//0x40 bytes (sizeof)
struct _PPM_VETO_ENTRY
{
    struct _LIST_ENTRY Link;                                                //0x0
    ULONG VetoReason;                                                       //0x10
    ULONG ReferenceCount;                                                   //0x14
    ULONGLONG HitCount;                                                     //0x18
    ULONGLONG LastActivationTime;                                           //0x20
    ULONGLONG TotalActiveTime;                                              //0x28
    ULONGLONG CsActivationTime;                                             //0x30
    ULONGLONG CsActiveTime;                                                 //0x38
}; 

----------------------------------------
Structure: _PP_LOOKASIDE_LIST

//0x10 bytes (sizeof)
struct _PP_LOOKASIDE_LIST
{
    struct _GENERAL_LOOKASIDE* P;                                           //0x0
    struct _GENERAL_LOOKASIDE* L;                                           //0x8
}; 

----------------------------------------
Structure: _PRIVATE_CACHE_MAP

//0x78 bytes (sizeof)
struct _PRIVATE_CACHE_MAP
{
    union
    {
        SHORT NodeTypeCode;                                                 //0x0
        struct _PRIVATE_CACHE_MAP_FLAGS Flags;                              //0x0
    };
    ULONG ReadAheadMask;                                                    //0x4
    struct _FILE_OBJECT* FileObject;                                        //0x8
    union _LARGE_INTEGER FileOffset1;                                       //0x10
    union _LARGE_INTEGER BeyondLastByte1;                                   //0x18
    union _LARGE_INTEGER FileOffset2;                                       //0x20
    union _LARGE_INTEGER BeyondLastByte2;                                   //0x28
    ULONG SequentialReadCount;                                              //0x30
    ULONG ReadAheadLength;                                                  //0x34
    union _LARGE_INTEGER ReadAheadOffset;                                   //0x38
    union _LARGE_INTEGER ReadAheadBeyondLastByte;                           //0x40
    ULONGLONG PrevReadAheadBeyondLastByte;                                  //0x48
    ULONGLONG ReadAheadSpinLock;                                            //0x50
    ULONG PipelinedReadAheadRequestSize;                                    //0x58
    ULONG ReadAheadGrowth;                                                  //0x5c
    struct _LIST_ENTRY PrivateLinks;                                        //0x60
    VOID* ReadAheadWorkItem;                                                //0x70
}; 

----------------------------------------
Structure: _PRIVATE_CACHE_MAP_FLAGS

//0x4 bytes (sizeof)
struct _PRIVATE_CACHE_MAP_FLAGS
{
    ULONG DontUse:16;                                                       //0x0
    ULONG ReadAheadActive:1;                                                //0x0
    ULONG ReadAheadEnabled:1;                                               //0x0
    ULONG PagePriority:3;                                                   //0x0
    ULONG PipelineReadAheads:1;                                             //0x0
    ULONG Available:10;                                                     //0x0
}; 

----------------------------------------
Structure: _PRIVILEGE_SET

//0x14 bytes (sizeof)
struct _PRIVILEGE_SET
{
    ULONG PrivilegeCount;                                                   //0x0
    ULONG Control;                                                          //0x4
    struct _LUID_AND_ATTRIBUTES Privilege[1];                               //0x8
}; 

----------------------------------------
Structure: _PROCESSOR_IDLE_CONSTRAINTS

//0x30 bytes (sizeof)
struct _PROCESSOR_IDLE_CONSTRAINTS
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONGLONG IdleTime;                                                     //0x8
    ULONGLONG ExpectedIdleDuration;                                         //0x10
    ULONGLONG MaxIdleDuration;                                              //0x18
    ULONG OverrideState;                                                    //0x20
    ULONG TimeCheck;                                                        //0x24
    UCHAR PromotePercent;                                                   //0x28
    UCHAR DemotePercent;                                                    //0x29
    UCHAR Parked;                                                           //0x2a
    UCHAR Interruptible;                                                    //0x2b
    UCHAR PlatformIdle;                                                     //0x2c
    UCHAR ExpectedWakeReason;                                               //0x2d
    UCHAR IdleStateMax;                                                     //0x2e
}; 

----------------------------------------
Structure: _PROCESSOR_IDLE_DEPENDENCY

//0x8 bytes (sizeof)
struct _PROCESSOR_IDLE_DEPENDENCY
{
    ULONG ProcessorIndex;                                                   //0x0
    UCHAR ExpectedState;                                                    //0x4
    UCHAR AllowDeeperStates;                                                //0x5
    UCHAR LooseDependency;                                                  //0x6
}; 

----------------------------------------
Structure: _PROCESSOR_IDLE_PREPARE_INFO

//0x58 bytes (sizeof)
struct _PROCESSOR_IDLE_PREPARE_INFO
{
    VOID* Context;                                                          //0x0
    struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;                         //0x8
    ULONG DependencyCount;                                                  //0x38
    ULONG DependencyUsed;                                                   //0x3c
    struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;                     //0x40
    ULONG PlatformIdleStateIndex;                                           //0x48
    ULONG ProcessorIdleStateIndex;                                          //0x4c
    ULONG IdleSelectFailureMask;                                            //0x50
}; 

----------------------------------------
Structure: _PROCESSOR_NUMBER

//0x4 bytes (sizeof)
struct _PROCESSOR_NUMBER
{
    USHORT Group;                                                           //0x0
    UCHAR Number;                                                           //0x2
    UCHAR Reserved;                                                         //0x3
}; 

----------------------------------------
Structure: _PROCESSOR_PLATFORM_STATE_RESIDENCIES

//0x18 bytes (sizeof)
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
    ULONG Count;                                                            //0x0
    struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];                   //0x8
}; 

----------------------------------------
Structure: _PROCESSOR_PLATFORM_STATE_RESIDENCY

//0x10 bytes (sizeof)
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
    ULONGLONG Residency;                                                    //0x0
    ULONGLONG TransitionCount;                                              //0x8
}; 

----------------------------------------
Structure: _PROCESSOR_POWER_STATE

//0x200 bytes (sizeof)
struct _PROCESSOR_POWER_STATE
{
    struct _PPM_IDLE_STATES* IdleStates;                                    //0x0
    struct _PROC_IDLE_ACCOUNTING* IdleAccounting;                           //0x8
    ULONGLONG IdleTimeLast;                                                 //0x10
    ULONGLONG IdleTimeTotal;                                                //0x18
    volatile ULONGLONG IdleTimeEntry;                                       //0x20
    ULONGLONG IdleTimeExpiration;                                           //0x28
    UCHAR NonInterruptibleTransition;                                       //0x30
    UCHAR PepWokenTransition;                                               //0x31
    UCHAR HvTargetState;                                                    //0x32
    UCHAR SoftParked;                                                       //0x33
    ULONG TargetIdleState;                                                  //0x34
    struct _PROC_IDLE_POLICY IdlePolicy;                                    //0x38
    unionvolatile _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;          //0x40
    struct _PROC_FEEDBACK PerfFeedback;                                     //0x48
    enum _PROC_HYPERVISOR_STATE Hypervisor;                                 //0xd8
    ULONG LastSysTime;                                                      //0xdc
    ULONGLONG WmiDispatchPtr;                                               //0xe0
    LONG WmiInterfaceEnabled;                                               //0xe8
    struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;               //0xf0
    struct _KDPC PerfActionDpc;                                             //0x110
    volatile LONG PerfActionMask;                                           //0x150
    struct _PROC_IDLE_SNAP HvIdleCheck;                                     //0x158
    struct _PROC_PERF_CHECK_CONTEXT CheckContext;                           //0x168
    struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;                        //0x1a8
    struct _PPM_CONCURRENCY_ACCOUNTING* ClassConcurrency;                   //0x1b0
    UCHAR ArchitecturalEfficiencyClass;                                     //0x1b8
    UCHAR PerformanceSchedulingClass;                                       //0x1b9
    UCHAR EfficiencySchedulingClass;                                        //0x1ba
    UCHAR Unused;                                                           //0x1bb
    UCHAR Parked;                                                           //0x1bc
    UCHAR LongPriorQosPeriod;                                               //0x1bd
    union
    {
        ULONGLONG SnapTimeLast;                                             //0x1c0
        ULONGLONG EnergyConsumed;                                           //0x1c0
    };
    ULONGLONG ActiveTime;                                                   //0x1c8
    ULONGLONG TotalTime;                                                    //0x1d0
    struct _POP_FX_DEVICE* FxDevice;                                        //0x1d8
    ULONGLONG LastQosTranstionTsc;                                          //0x1e0
    ULONGLONG QosTransitionHysteresis;                                      //0x1e8
    enum _KHETERO_CPU_QOS RequestedQosClass;                                //0x1f0
    enum _KHETERO_CPU_QOS ResolvedQosClass;                                 //0x1f4
    USHORT QosEquivalencyMask;                                              //0x1f8
    USHORT HwFeedbackTableIndex;                                            //0x1fa
    UCHAR HwFeedbackParkHint;                                               //0x1fc
    UCHAR HwFeedbackPerformanceClass;                                       //0x1fd
    UCHAR HwFeedbackEfficiencyClass;                                        //0x1fe
    UCHAR HeteroCoreType;                                                   //0x1ff
}; 

----------------------------------------
Structure: _PROCESSOR_PROFILE_CONTROL_AREA

//0xa0 bytes (sizeof)
struct _PROCESSOR_PROFILE_CONTROL_AREA
{
    struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;                               //0x0
}; 

----------------------------------------
Structure: _PROCESS_DISK_COUNTERS

//0x28 bytes (sizeof)
struct _PROCESS_DISK_COUNTERS
{
    ULONGLONG BytesRead;                                                    //0x0
    ULONGLONG BytesWritten;                                                 //0x8
    ULONGLONG ReadOperationCount;                                           //0x10
    ULONGLONG WriteOperationCount;                                          //0x18
    ULONGLONG FlushOperationCount;                                          //0x20
}; 

----------------------------------------
Structure: _PROCESS_ENERGY_VALUES

//0x110 bytes (sizeof)
struct _PROCESS_ENERGY_VALUES
{
    ULONGLONG Cycles[4][2];                                                 //0x0
    ULONGLONG DiskEnergy;                                                   //0x40
    ULONGLONG NetworkTailEnergy;                                            //0x48
    ULONGLONG MBBTailEnergy;                                                //0x50
    ULONGLONG NetworkTxRxBytes;                                             //0x58
    ULONGLONG MBBTxRxBytes;                                                 //0x60
    union
    {
        union _ENERGY_STATE_DURATION Durations[3];                          //0x68
        struct
        {
            union _ENERGY_STATE_DURATION ForegroundDuration;                //0x68
            union _ENERGY_STATE_DURATION DesktopVisibleDuration;            //0x70
            union _ENERGY_STATE_DURATION PSMForegroundDuration;             //0x78
        };
    };
    ULONG CompositionRendered;                                              //0x80
    ULONG CompositionDirtyGenerated;                                        //0x84
    ULONG CompositionDirtyPropagated;                                       //0x88
    ULONG Reserved1;                                                        //0x8c
    ULONGLONG AttributedCycles[4][2];                                       //0x90
    ULONGLONG WorkOnBehalfCycles[4][2];                                     //0xd0
}; 

----------------------------------------
Structure: _PROCESS_ENERGY_VALUES_EXTENSION

//0xa0 bytes (sizeof)
struct _PROCESS_ENERGY_VALUES_EXTENSION
{
    union
    {
        union _TIMELINE_BITMAP Timelines[14];                               //0x0
        struct
        {
            union _TIMELINE_BITMAP CpuTimeline;                             //0x0
            union _TIMELINE_BITMAP DiskTimeline;                            //0x8
            union _TIMELINE_BITMAP NetworkTimeline;                         //0x10
            union _TIMELINE_BITMAP MBBTimeline;                             //0x18
            union _TIMELINE_BITMAP ForegroundTimeline;                      //0x20
            union _TIMELINE_BITMAP DesktopVisibleTimeline;                  //0x28
            union _TIMELINE_BITMAP CompositionRenderedTimeline;             //0x30
            union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;       //0x38
            union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;      //0x40
            union _TIMELINE_BITMAP InputTimeline;                           //0x48
            union _TIMELINE_BITMAP AudioInTimeline;                         //0x50
            union _TIMELINE_BITMAP AudioOutTimeline;                        //0x58
            union _TIMELINE_BITMAP DisplayRequiredTimeline;                 //0x60
            union _TIMELINE_BITMAP KeyboardInputTimeline;                   //0x68
        };
    };
    union
    {
        union _ENERGY_STATE_DURATION Durations[5];                          //0x70
        struct
        {
            union _ENERGY_STATE_DURATION InputDuration;                     //0x70
            union _ENERGY_STATE_DURATION AudioInDuration;                   //0x78
            union _ENERGY_STATE_DURATION AudioOutDuration;                  //0x80
            union _ENERGY_STATE_DURATION DisplayRequiredDuration;           //0x88
            union _ENERGY_STATE_DURATION PSMBackgroundDuration;             //0x90
        };
    };
    ULONG KeyboardInput;                                                    //0x98
    ULONG MouseInput;                                                       //0x9c
}; 

----------------------------------------
Structure: _PROCESS_EXTENDED_ENERGY_VALUES

//0x1b0 bytes (sizeof)
struct _PROCESS_EXTENDED_ENERGY_VALUES
{
    struct _PROCESS_ENERGY_VALUES Base;                                     //0x0
    struct _PROCESS_ENERGY_VALUES_EXTENSION Extension;                      //0x110
}; 

----------------------------------------
Structure: _PROCLOCALAPIC

//0x8 bytes (sizeof)
struct _PROCLOCALAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ACPIProcessorID;                                                  //0x2
    UCHAR APICID;                                                           //0x3
    ULONG Flags;                                                            //0x4
}; 

----------------------------------------
Structure: _PROCLOCALSAPIC

//0x11 bytes (sizeof)
struct _PROCLOCALSAPIC
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    UCHAR ACPIProcessorID;                                                  //0x2
    UCHAR APICID;                                                           //0x3
    UCHAR APICEID;                                                          //0x4
    UCHAR Reserved[3];                                                      //0x5
    ULONG Flags;                                                            //0x8
    ULONG ACPIProcessorUIDInteger;                                          //0xc
    CHAR ACPIProcessorUIDString[1];                                         //0x10
}; 

----------------------------------------
Structure: _PROC_FEEDBACK

//0x90 bytes (sizeof)
struct _PROC_FEEDBACK
{
    ULONGLONG Lock;                                                         //0x0
    ULONGLONG CyclesLast;                                                   //0x8
    ULONGLONG CyclesActive;                                                 //0x10
    struct _PROC_FEEDBACK_COUNTER* Counters[2];                             //0x18
    ULONGLONG LastUpdateTime;                                               //0x28
    ULONGLONG UnscaledTime;                                                 //0x30
    volatile LONGLONG UnaccountedTime;                                      //0x38
    ULONGLONG ScaledTime[2];                                                //0x40
    ULONGLONG UnaccountedKernelTime;                                        //0x50
    ULONGLONG PerformanceScaledKernelTime;                                  //0x58
    ULONG UserTimeLast;                                                     //0x60
    ULONG KernelTimeLast;                                                   //0x64
    ULONGLONG IdleGenerationNumberLast;                                     //0x68
    ULONGLONG HvActiveTimeLast;                                             //0x70
    ULONGLONG StallCyclesLast;                                              //0x78
    ULONGLONG StallTime;                                                    //0x80
    UCHAR KernelTimesIndex;                                                 //0x88
    UCHAR CounterDiscardsIdleTime;                                          //0x89
}; 

----------------------------------------
Structure: _PROC_FEEDBACK_COUNTER

//0x30 bytes (sizeof)
struct _PROC_FEEDBACK_COUNTER
{
    union
    {
        VOID (*InstantaneousRead)(ULONGLONG arg1, ULONG* arg2);             //0x0
        VOID (*DifferentialRead)(ULONGLONG arg1, UCHAR arg2, ULONGLONG* arg3, ULONGLONG* arg4); //0x0
    };
    ULONGLONG LastActualCount;                                              //0x8
    ULONGLONG LastReferenceCount;                                           //0x10
    ULONG CachedValue;                                                      //0x18
    UCHAR Affinitized;                                                      //0x20
    UCHAR Differential;                                                     //0x21
    UCHAR DiscardIdleTime;                                                  //0x22
    UCHAR Scaling;                                                          //0x23
    ULONGLONG Context;                                                      //0x28
}; 

----------------------------------------
Structure: _PROC_IDLE_ACCOUNTING

//0x410 bytes (sizeof)
struct _PROC_IDLE_ACCOUNTING
{
    ULONG StateCount;                                                       //0x0
    ULONG TotalTransitions;                                                 //0x4
    ULONG ResetCount;                                                       //0x8
    ULONG AbortCount;                                                       //0xc
    ULONGLONG StartTime;                                                    //0x10
    ULONGLONG PriorIdleTime;                                                //0x18
    enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                //0x20
    struct _PROC_IDLE_STATE_ACCOUNTING State[1];                            //0x28
}; 

----------------------------------------
Structure: _PROC_IDLE_POLICY

//0x6 bytes (sizeof)
struct _PROC_IDLE_POLICY
{
    UCHAR PromotePercent;                                                   //0x0
    UCHAR DemotePercent;                                                    //0x1
    UCHAR PromotePercentBase;                                               //0x2
    UCHAR DemotePercentBase;                                                //0x3
    UCHAR AllowScaling;                                                     //0x4
    UCHAR ForceLightIdle;                                                   //0x5
}; 

----------------------------------------
Structure: _PROC_IDLE_SNAP

//0x10 bytes (sizeof)
struct _PROC_IDLE_SNAP
{
    ULONGLONG Time;                                                         //0x0
    ULONGLONG Idle;                                                         //0x8
}; 

----------------------------------------
Structure: _PROC_IDLE_STATE_ACCOUNTING

//0x3e8 bytes (sizeof)
struct _PROC_IDLE_STATE_ACCOUNTING
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONG CancelCount;                                                      //0x8
    ULONG FailureCount;                                                     //0xc
    ULONG SuccessCount;                                                     //0x10
    ULONG InvalidBucketIndex;                                               //0x14
    ULONGLONG MinTime;                                                      //0x18
    ULONGLONG MaxTime;                                                      //0x20
    struct _PPM_SELECTION_STATISTICS SelectionStatistics;                   //0x28
    struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                     //0xa8
}; 

----------------------------------------
Structure: _PROC_IDLE_STATE_BUCKET

//0x20 bytes (sizeof)
struct _PROC_IDLE_STATE_BUCKET
{
    ULONGLONG TotalTime;                                                    //0x0
    ULONGLONG MinTime;                                                      //0x8
    ULONGLONG MaxTime;                                                      //0x10
    ULONG Count;                                                            //0x18
}; 

----------------------------------------
Structure: _PROC_PERF_CHECK

//0x158 bytes (sizeof)
struct _PROC_PERF_CHECK
{
    ULONGLONG LastActive;                                                   //0x0
    ULONGLONG LastTime;                                                     //0x8
    ULONGLONG LastStall;                                                    //0x10
    ULONG LastResponsivenessEvents;                                         //0x18
    struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;                         //0x20
    struct _PROC_PERF_CHECK_SNAP CurrentSnap;                               //0x80
    struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap;                         //0xe0
    ULONG LastDeliveredPerformance;                                         //0x140
    ULONG LastDeliveredFrequency;                                           //0x144
    UCHAR TaggedThreadPercent[3];                                           //0x148
    UCHAR Class0FloorPerfSelection;                                         //0x14b
    UCHAR Class1MinimumPerfSelection;                                       //0x14c
    ULONG CurrentResponsivenessEvents;                                      //0x150
}; 

----------------------------------------
Structure: _PROC_PERF_CHECK_CONTEXT

//0x40 bytes (sizeof)
struct _PROC_PERF_CHECK_CONTEXT
{
    struct _PROC_PERF_DOMAIN* Domain;                                       //0x0
    struct _PROC_PERF_CONSTRAINT* Constraint;                               //0x8
    struct _PROC_PERF_CHECK* PerfCheck;                                     //0x10
    struct _PROC_PERF_LOAD* Load;                                           //0x18
    struct _PROC_PERF_HISTORY* PerfHistory;                                 //0x20
    ULONG Utility;                                                          //0x28
    ULONG AffinitizedUtility;                                               //0x2c
    ULONG MediaUtility;                                                     //0x30
    USHORT LatestAffinitizedPercent;                                        //0x34
    USHORT AveragePerformancePercent;                                       //0x36
    ULONG RelativePerformance;                                              //0x38
    UCHAR NtProcessor;                                                      //0x3c
}; 

----------------------------------------
Structure: _PROC_PERF_CHECK_SNAP

//0x60 bytes (sizeof)
struct _PROC_PERF_CHECK_SNAP
{
    ULONGLONG Time;                                                         //0x0
    ULONGLONG Active;                                                       //0x8
    ULONGLONG Stall;                                                        //0x10
    ULONGLONG FrequencyScaledActive;                                        //0x18
    ULONGLONG PerformanceScaledActive;                                      //0x20
    ULONGLONG PerformanceScaledKernelActive;                                //0x28
    ULONGLONG CyclesActive;                                                 //0x30
    ULONGLONG CyclesAffinitized;                                            //0x38
    ULONGLONG TaggedThreadCycles[3];                                        //0x40
    ULONG ResponsivenessEvents;                                             //0x58
}; 

----------------------------------------
Structure: _PROC_PERF_CONSTRAINT

//0x88 bytes (sizeof)
struct _PROC_PERF_CONSTRAINT
{
    struct _PROC_PERF_CHECK_CONTEXT* CheckContext;                          //0x0
    ULONGLONG PerfContext;                                                  //0x8
    enum _PROCESSOR_PRESENCE Presence;                                      //0x10
    ULONG ProcessorId;                                                      //0x14
    ULONG PlatformCap;                                                      //0x18
    ULONG ThermalCap;                                                       //0x1c
    ULONG LimitReasons;                                                     //0x20
    ULONGLONG PlatformCapStartTime;                                         //0x28
    ULONG ProcCap;                                                          //0x30
    ULONG ProcFloor;                                                        //0x34
    ULONG TargetPercent;                                                    //0x38
    UCHAR EngageResponsivenessOverrides;                                    //0x3c
    UCHAR ResponsivenessChangeCount;                                        //0x3d
    struct _PERF_CONTROL_STATE_SELECTION Selection;                         //0x40
    ULONG DomainSelectionGeneration;                                        //0x68
    ULONG PreviousFrequency;                                                //0x6c
    ULONG PreviousPercent;                                                  //0x70
    ULONG LatestFrequencyPercent;                                           //0x74
    ULONG LatestPerformancePercent;                                         //0x78
    UCHAR Force;                                                            //0x7c
    UCHAR UseQosUpdateLock;                                                 //0x7d
    ULONGLONG QosUpdateLock;                                                //0x80
}; 

----------------------------------------
Structure: _PROC_PERF_DOMAIN

//0x300 bytes (sizeof)
struct _PROC_PERF_DOMAIN
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _PROC_PERF_CHECK_CONTEXT* Master;                                //0x10
    struct _KAFFINITY_EX Members;                                           //0x18
    ULONGLONG DomainContext;                                                //0xc0
    ULONG ProcessorCount;                                                   //0xc8
    UCHAR EfficiencyClass;                                                  //0xcc
    UCHAR NominalPerformanceClass;                                          //0xcd
    UCHAR HighestPerformanceClass;                                          //0xce
    enum _PROCESSOR_PRESENCE Presence;                                      //0xd0
    struct _PROC_PERF_CONSTRAINT* Processors;                               //0xd8
    VOID (*GetFFHThrottleState)(ULONGLONG* arg1);                           //0xe0
    VOID (*TimeWindowHandler)(ULONGLONG arg1, ULONG arg2);                  //0xe8
    VOID (*BoostPolicyHandler)(ULONGLONG arg1, ULONG arg2);                 //0xf0
    VOID (*BoostModeHandler)(ULONGLONG arg1, ULONG arg2);                   //0xf8
    VOID (*AutonomousActivityWindowHandler)(ULONGLONG arg1, ULONG arg2);    //0x100
    VOID (*AutonomousModeHandler)(ULONGLONG arg1, ULONG arg2);              //0x108
    VOID (*ReinitializeHandler)(ULONGLONG arg1);                            //0x110
    ULONG (*PerfSelectionHandler)(ULONGLONG arg1, ULONG arg2, ULONG arg3, ULONG arg4, ULONG arg5, ULONG arg6, ULONG arg7, ULONG* arg8, ULONGLONG* arg9); //0x118
    VOID (*PerfControlHandler)(ULONGLONG arg1, struct _PERF_CONTROL_STATE_SELECTION* arg2, UCHAR arg3, UCHAR arg4); //0x120
    VOID (*PerfControlHandlerHidden)(ULONGLONG arg1, struct _PERF_CONTROL_STATE_SELECTION* arg2, UCHAR arg3, UCHAR arg4); //0x128
    VOID (*DomainPerfControlHandler)(ULONGLONG arg1, struct _PERF_CONTROL_STATE_SELECTION* arg2, UCHAR arg3, UCHAR arg4); //0x130
    ULONG MaxFrequency;                                                     //0x138
    ULONG NominalFrequency;                                                 //0x13c
    ULONG MaxPercent;                                                       //0x140
    ULONG MinPerfPercent;                                                   //0x144
    ULONG MinThrottlePercent;                                               //0x148
    ULONG AdvertizedMaximumFrequency;                                       //0x14c
    ULONGLONG MinimumRelativePerformance;                                   //0x150
    ULONGLONG NominalRelativePerformance;                                   //0x158
    UCHAR NominalRelativePerformancePercent;                                //0x160
    UCHAR Coordination;                                                     //0x161
    UCHAR HardPlatformCap;                                                  //0x162
    UCHAR AffinitizeControl;                                                //0x163
    UCHAR EfficientThrottle;                                                //0x164
    UCHAR AllowSchedulerDirectedPerfStates;                                 //0x165
    UCHAR InitiateAllProcessors;                                            //0x166
    UCHAR AutonomousMode;                                                   //0x167
    UCHAR ProvideGuidance;                                                  //0x168
    ULONG DesiredPercent;                                                   //0x16c
    ULONG GuaranteedPercent;                                                //0x170
    UCHAR EngageResponsivenessOverrides;                                    //0x174
    struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[5];                      //0x178
    ULONG QosDisableReasons[5];                                             //0x204
    USHORT QosEquivalencyMasks[5];                                          //0x218
    UCHAR QosSupported;                                                     //0x222
    volatile ULONG SelectionGeneration;                                     //0x224
    struct _PERF_CONTROL_STATE_SELECTION QosSelection[5];                   //0x228
    ULONGLONG PerfChangeTime;                                               //0x2f0
    ULONG PerfChangeIntervalCount;                                          //0x2f8
    UCHAR Force;                                                            //0x2fc
    UCHAR Update;                                                           //0x2fd
    UCHAR Apply;                                                            //0x2fe
}; 

----------------------------------------
Structure: _PROC_PERF_HISTORY

//0x2c bytes (sizeof)
struct _PROC_PERF_HISTORY
{
    ULONG Count;                                                            //0x0
    ULONG Slot;                                                             //0x4
    ULONG UtilityTotal;                                                     //0x8
    ULONG AffinitizedUtilityTotal;                                          //0xc
    ULONG FrequencyTotal;                                                   //0x10
    ULONG TaggedPercentTotal[3];                                            //0x14
    struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];                         //0x20
}; 

----------------------------------------
Structure: _PROC_PERF_HISTORY_ENTRY

//0xa bytes (sizeof)
struct _PROC_PERF_HISTORY_ENTRY
{
    USHORT Utility;                                                         //0x0
    USHORT AffinitizedUtility;                                              //0x2
    USHORT Frequency;                                                       //0x4
    UCHAR TaggedPercent[3];                                                 //0x6
}; 

----------------------------------------
Structure: _PROC_PERF_LOAD

//0x2 bytes (sizeof)
struct _PROC_PERF_LOAD
{
    UCHAR BusyPercentage;                                                   //0x0
    UCHAR FrequencyPercentage;                                              //0x1
}; 

----------------------------------------
Structure: _PROC_PERF_QOS_CLASS_POLICY

//0x1c bytes (sizeof)
struct _PROC_PERF_QOS_CLASS_POLICY
{
    ULONG MaxPolicyPercent;                                                 //0x0
    ULONG MaxEquivalentFrequencyPercent;                                    //0x4
    ULONG MinPolicyPercent;                                                 //0x8
    ULONG AutonomousActivityWindow;                                         //0xc
    ULONG EnergyPerfPreference;                                             //0x10
    UCHAR ProvideGuidance;                                                  //0x14
    UCHAR AllowThrottling;                                                  //0x15
    UCHAR PerfBoostMode;                                                    //0x16
    UCHAR LatencyHintPerf;                                                  //0x17
    UCHAR TrackDesiredCrossClass;                                           //0x18
}; 

----------------------------------------
Structure: _PROFILE_PARAMETER_BLOCK

//0x10 bytes (sizeof)
struct _PROFILE_PARAMETER_BLOCK
{
    USHORT Status;                                                          //0x0
    USHORT Reserved;                                                        //0x2
    USHORT DockingState;                                                    //0x4
    USHORT Capabilities;                                                    //0x6
    ULONG DockID;                                                           //0x8
    ULONG SerialNumber;                                                     //0xc
}; 

----------------------------------------
Structure: _PSP_STORAGE

//0x0 bytes (sizeof)
struct _PSP_STORAGE; 

----------------------------------------
Structure: _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES

//0x10 bytes (sizeof)
struct _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
{
    struct _RTL_AVL_TREE Tree;                                              //0x0
    struct _EX_PUSH_LOCK Lock;                                              //0x8
}; 

----------------------------------------
Structure: _PS_IO_CONTROL_ENTRY

//0x38 bytes (sizeof)
struct _PS_IO_CONTROL_ENTRY
{
    union
    {
        struct _RTL_BALANCED_NODE VolumeTreeNode;                           //0x0
        struct
        {
            struct _LIST_ENTRY FreeListEntry;                               //0x0
            ULONGLONG ReservedForParentValue;                               //0x10
        };
    };
    ULONGLONG VolumeKey;                                                    //0x18
    struct _EX_RUNDOWN_REF Rundown;                                         //0x20
    VOID* IoControl;                                                        //0x28
    VOID* VolumeIoAttribution;                                              //0x30
}; 

----------------------------------------
Structure: _PS_JOB_WAKE_INFORMATION

//0x48 bytes (sizeof)
struct _PS_JOB_WAKE_INFORMATION
{
    ULONGLONG NotificationChannel;                                          //0x0
    ULONGLONG WakeCounters[7];                                              //0x8
    ULONGLONG NoWakeCounter;                                                //0x40
}; 

----------------------------------------
Structure: _PS_MITIGATION_AUDIT_OPTIONS_MAP

//0x18 bytes (sizeof)
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
    ULONGLONG Map[3];                                                       //0x0
}; 

----------------------------------------
Structure: _PS_MITIGATION_OPTIONS_MAP

//0x18 bytes (sizeof)
struct _PS_MITIGATION_OPTIONS_MAP
{
    ULONGLONG Map[3];                                                       //0x0
}; 

----------------------------------------
Structure: _PS_PROCESS_WAKE_INFORMATION

//0x30 bytes (sizeof)
struct _PS_PROCESS_WAKE_INFORMATION
{
    ULONGLONG NotificationChannel;                                          //0x0
    ULONG WakeCounters[7];                                                  //0x8
    struct _JOBOBJECT_WAKE_FILTER WakeFilter;                               //0x24
    ULONG NoWakeCounter;                                                    //0x2c
}; 

----------------------------------------
Structure: _PS_PROPERTY_SET

//0x18 bytes (sizeof)
struct _PS_PROPERTY_SET
{
    struct _LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG Lock;                                                         //0x10
}; 

----------------------------------------
Structure: _PS_PROTECTION

//0x1 bytes (sizeof)
struct _PS_PROTECTION
{
    union
    {
        UCHAR Level;                                                        //0x0
        struct
        {
            UCHAR Type:3;                                                   //0x0
            UCHAR Audit:1;                                                  //0x0
            UCHAR Signer:4;                                                 //0x0
        };
    };
}; 

----------------------------------------
Structure: _PS_TRUSTLET_ATTRIBUTE_DATA

//0x10 bytes (sizeof)
struct _PS_TRUSTLET_ATTRIBUTE_DATA
{
    struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header;                            //0x0
    ULONGLONG Data[1];                                                      //0x8
}; 

----------------------------------------
Structure: _PS_TRUSTLET_ATTRIBUTE_HEADER

//0x8 bytes (sizeof)
struct _PS_TRUSTLET_ATTRIBUTE_HEADER
{
    struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;                       //0x0
    ULONG InstanceNumber:8;                                                 //0x4
    ULONG Reserved:24;                                                      //0x4
}; 

----------------------------------------
Structure: _PS_TRUSTLET_ATTRIBUTE_TYPE

//0x4 bytes (sizeof)
struct _PS_TRUSTLET_ATTRIBUTE_TYPE
{
    union
    {
        struct
        {
            UCHAR Version;                                                  //0x0
            UCHAR DataCount;                                                //0x1
            UCHAR SemanticType;                                             //0x2
            union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;         //0x3
        };
        ULONG AttributeType;                                                //0x0
    };
}; 

----------------------------------------
Structure: _PS_TRUSTLET_CREATE_ATTRIBUTES

//0x18 bytes (sizeof)
struct _PS_TRUSTLET_CREATE_ATTRIBUTES
{
    ULONGLONG TrustletIdentity;                                             //0x0
    struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];                       //0x8
}; 

----------------------------------------
Structure: _PS_TRUSTLET_TKSESSION_ID

//0x20 bytes (sizeof)
struct _PS_TRUSTLET_TKSESSION_ID
{
    ULONGLONG SessionId[4];                                                 //0x0
}; 

----------------------------------------
Structure: _PTE_TRACKER

//0x80 bytes (sizeof)
struct _PTE_TRACKER
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _MDL* Mdl;                                                       //0x10
    ULONGLONG Count;                                                        //0x18
    VOID* SystemVa;                                                         //0x20
    VOID* StartVa;                                                          //0x28
    ULONG Offset;                                                           //0x30
    ULONG Length;                                                           //0x34
    ULONGLONG Page;                                                         //0x38
    ULONG IoMapping:1;                                                      //0x40
    ULONG Matched:1;                                                        //0x40
    ULONG CacheAttribute:2;                                                 //0x40
    ULONG GuardPte:1;                                                       //0x40
    ULONG Spare:27;                                                         //0x40
    VOID* StackTrace[7];                                                    //0x48
}; 

----------------------------------------
Structure: _QUAD

//0x8 bytes (sizeof)
struct _QUAD
{
    union
    {
        LONGLONG UseThisFieldToCopy;                                        //0x0
        double DoNotUseThisField;                                           //0x0
    };
}; 

----------------------------------------
Structure: _REGISTERED_INTERRUPT_CONTROLLER

//0x160 bytes (sizeof)
struct _REGISTERED_INTERRUPT_CONTROLLER
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    VOID* InternalData;                                                     //0x10
    ULONG InternalDataSize;                                                 //0x18
    struct _INTERRUPT_FUNCTION_TABLE FunctionTable;                         //0x20
    enum _KNOWN_CONTROLLER_TYPE KnownType;                                  //0xd8
    ULONG Capabilities;                                                     //0xdc
    ULONG Flags;                                                            //0xe0
    ULONG MaxPriority;                                                      //0xe4
    ULONG UnitId;                                                           //0xe8
    struct _LIST_ENTRY LinesHead;                                           //0xf0
    struct _LIST_ENTRY OutputLinesHead;                                     //0x100
    LONG MinLine;                                                           //0x110
    LONG MaxLine;                                                           //0x114
    ULONG MaxClusterSize;                                                   //0x118
    ULONG MaxClusters;                                                      //0x11c
    ULONG InterruptReplayDataSize;                                          //0x120
    enum _INTERRUPT_PROBLEM Problem;                                        //0x124
    LONG ProblemStatus;                                                     //0x128
    CHAR* ProblemSourceFile;                                                //0x130
    ULONG ProblemSourceLine;                                                //0x138
    ULONG CustomProblem;                                                    //0x13c
    LONG CustomProblemStatus;                                               //0x140
    struct _UNICODE_STRING ResourceId;                                      //0x148
    struct POHANDLE__* PowerHandle;                                         //0x158
}; 

----------------------------------------
Structure: _RELATION_LIST

//0x10 bytes (sizeof)
struct _RELATION_LIST
{
    struct _DEVICE_OBJECT_LIST* DeviceObjectList;                           //0x0
    UCHAR Sorted;                                                           //0x8
}; 

----------------------------------------
Structure: _RELATIVE_SYMLINK_INFO

//0x20 bytes (sizeof)
struct _RELATIVE_SYMLINK_INFO
{
    USHORT ExposedNamespaceLength;                                          //0x0
    USHORT Flags;                                                           //0x2
    USHORT DeviceNameLength;                                                //0x4
    USHORT Reserved;                                                        //0x6
    struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;                      //0x8
    struct _UNICODE_STRING OpenedName;                                      //0x10
}; 

----------------------------------------
Structure: _REMOTE_PORT_VIEW

//0x18 bytes (sizeof)
struct _REMOTE_PORT_VIEW
{
    ULONG Length;                                                           //0x0
    ULONGLONG ViewSize;                                                     //0x8
    VOID* ViewBase;                                                         //0x10
}; 

----------------------------------------
Structure: _REQUEST_MAILBOX

//0x40 bytes (sizeof)
struct _REQUEST_MAILBOX
{
    struct _REQUEST_MAILBOX* Next;                                          //0x0
    ULONGLONG RequestSummary;                                               //0x8
    struct _KREQUEST_PACKET RequestPacket;                                  //0x10
    volatile LONG* NodeTargetCountAddr;                                     //0x30
    volatile LONG NodeTargetCount;                                          //0x38
}; 

----------------------------------------
Structure: _RH_OP_CONTEXT

//0x48 bytes (sizeof)
struct _RH_OP_CONTEXT
{
    struct _LIST_ENTRY Links;                                               //0x0
    struct _IRP* OplockRequestIrp;                                          //0x10
    struct _FILE_OBJECT* OplockRequestFileObject;                           //0x18
    struct _EPROCESS* OplockRequestProcess;                                 //0x20
    struct _ETHREAD* OplockOwnerThread;                                     //0x28
    ULONG Flags;                                                            //0x30
    struct _LIST_ENTRY AtomicLinks;                                         //0x38
}; 

----------------------------------------
Structure: _RSDP

//0x24 bytes (sizeof)
struct _RSDP
{
    ULONGLONG Signature;                                                    //0x0
    UCHAR Checksum;                                                         //0x8
    UCHAR OEMID[6];                                                         //0x9
    UCHAR Revision;                                                         //0xf
    ULONG RsdtAddress;                                                      //0x10
    ULONG Length;                                                           //0x14
    union _LARGE_INTEGER XsdtAddress;                                       //0x18
    UCHAR XChecksum;                                                        //0x20
    UCHAR Reserved[3];                                                      //0x21
}; 

----------------------------------------
Structure: _RSDS

//0x1c bytes (sizeof)
struct _RSDS
{
    ULONG Signature;                                                        //0x0
    struct _GUID Guid;                                                      //0x4
    ULONG Age;                                                              //0x14
    CHAR PdbName[1];                                                        //0x18
}; 

----------------------------------------
Structure: _RSDT_32

//0x28 bytes (sizeof)
struct _RSDT_32
{
    struct _DESCRIPTION_HEADER Header;                                      //0x0
    ULONG Tables[1];                                                        //0x24
}; 

----------------------------------------
Structure: _RTLP_HP_ALLOC_TRACKER

//0x50 bytes (sizeof)
struct _RTLP_HP_ALLOC_TRACKER
{
    ULONGLONG BaseAddress;                                                  //0x0
    union
    {
        struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap;                      //0x8
        UCHAR AllocTrackerBitmapBuffer[72];                                 //0x8
    };
}; 

----------------------------------------
Structure: _RTLP_HP_HEAP_GLOBALS

//0x38 bytes (sizeof)
struct _RTLP_HP_HEAP_GLOBALS
{
    ULONGLONG HeapKey;                                                      //0x0
    ULONGLONG LfhKey;                                                       //0x8
    struct _HEAP_FAILURE_INFORMATION* FailureInfo;                          //0x10
    struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                     //0x18
}; 

----------------------------------------
Structure: _RTLP_HP_HEAP_MANAGER

//0x38d0 bytes (sizeof)
struct _RTLP_HP_HEAP_MANAGER
{
    struct _RTLP_HP_HEAP_GLOBALS* Globals;                                  //0x0
    struct _RTLP_HP_ALLOC_TRACKER AllocTracker;                             //0x8
    struct _HEAP_VAMGR_CTX VaMgr;                                           //0x58
    struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];                     //0x3898
    struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;                   //0x38c8
}; 

----------------------------------------
Structure: _RTLP_HP_METADATA_HEAP_CTX

//0x10 bytes (sizeof)
struct _RTLP_HP_METADATA_HEAP_CTX
{
    struct _SEGMENT_HEAP* Heap;                                             //0x0
    union _RTL_RUN_ONCE InitOnce;                                           //0x8
}; 

----------------------------------------
Structure: _RTLP_HP_PADDING_HEADER

//0x10 bytes (sizeof)
struct _RTLP_HP_PADDING_HEADER
{
    ULONGLONG PaddingSize;                                                  //0x0
    ULONGLONG Spare;                                                        //0x8
}; 

----------------------------------------
Structure: _RTLP_HP_QUEUE_LOCK_HANDLE

//0x18 bytes (sizeof)
struct _RTLP_HP_QUEUE_LOCK_HANDLE
{
    ULONGLONG Reserved1;                                                    //0x0
    ULONGLONG LockPtr;                                                      //0x8
    ULONGLONG HandleData;                                                   //0x10
}; 

----------------------------------------
Structure: _RTLP_RANGE_LIST_ENTRY

//0x38 bytes (sizeof)
struct _RTLP_RANGE_LIST_ENTRY
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    union
    {
        struct
        {
            VOID* UserData;                                                 //0x10
            VOID* Owner;                                                    //0x18
        } Allocated;                                                        //0x10
        struct
        {
            struct _LIST_ENTRY ListHead;                                    //0x10
        } Merged;                                                           //0x10
    };
    UCHAR Attributes;                                                       //0x20
    UCHAR PublicFlags;                                                      //0x21
    USHORT PrivateFlags;                                                    //0x22
    struct _LIST_ENTRY ListEntry;                                           //0x28
}; 

----------------------------------------
Structure: _RTL_ACTIVATION_CONTEXT_STACK_FRAME

//0x18 bytes (sizeof)
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;                   //0x0
    struct _ACTIVATION_CONTEXT* ActivationContext;                          //0x8
    ULONG Flags;                                                            //0x10
}; 

----------------------------------------
Structure: _RTL_ATOM_TABLE

//0x28 bytes (sizeof)
struct _RTL_ATOM_TABLE
{
    ULONG Signature;                                                        //0x0
    volatile LONG ReferenceCount;                                           //0x4
    struct _EX_PUSH_LOCK PushLock;                                          //0x8
    struct _HANDLE_TABLE* ExHandleTable;                                    //0x10
    ULONG Flags;                                                            //0x18
    ULONG NumberOfBuckets;                                                  //0x1c
    struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];                               //0x20
}; 

----------------------------------------
Structure: _RTL_ATOM_TABLE_ENTRY

//0x30 bytes (sizeof)
struct _RTL_ATOM_TABLE_ENTRY
{
    struct _RTL_ATOM_TABLE_ENTRY* HashLink;                                 //0x0
    USHORT HandleIndex;                                                     //0x8
    USHORT Atom;                                                            //0xa
    struct _RTL_ATOM_TABLE_REFERENCE Reference;                             //0x10
    UCHAR NameLength;                                                       //0x28
    WCHAR Name[1];                                                          //0x2a
}; 

----------------------------------------
Structure: _RTL_ATOM_TABLE_REFERENCE

//0x18 bytes (sizeof)
struct _RTL_ATOM_TABLE_REFERENCE
{
    struct _LIST_ENTRY LowBoxList;                                          //0x0
    ULONG LowBoxID;                                                         //0x10
    USHORT ReferenceCount;                                                  //0x14
    USHORT Flags;                                                           //0x16
}; 

----------------------------------------
Structure: _RTL_AVL_TABLE

//0x68 bytes (sizeof)
struct _RTL_AVL_TABLE
{
    struct _RTL_BALANCED_LINKS BalancedRoot;                                //0x0
    VOID* OrderedPointer;                                                   //0x20
    ULONG WhichOrderedElement;                                              //0x28
    ULONG NumberGenericTableElements;                                       //0x2c
    ULONG DepthOfTree;                                                      //0x30
    struct _RTL_BALANCED_LINKS* RestartKey;                                 //0x38
    ULONG DeleteCount;                                                      //0x40
    enum _RTL_GENERIC_COMPARE_RESULTS (*CompareRoutine)(struct _RTL_AVL_TABLE* arg1, VOID* arg2, VOID* arg3); //0x48
    VOID* (*AllocateRoutine)(struct _RTL_AVL_TABLE* arg1, ULONG arg2);      //0x50
    VOID (*FreeRoutine)(struct _RTL_AVL_TABLE* arg1, VOID* arg2);           //0x58
    VOID* TableContext;                                                     //0x60
}; 

----------------------------------------
Structure: _RTL_AVL_TREE

//0x8 bytes (sizeof)
struct _RTL_AVL_TREE
{
    struct _RTL_BALANCED_NODE* Root;                                        //0x0
}; 

----------------------------------------
Structure: _RTL_BALANCED_LINKS

//0x20 bytes (sizeof)
struct _RTL_BALANCED_LINKS
{
    struct _RTL_BALANCED_LINKS* Parent;                                     //0x0
    struct _RTL_BALANCED_LINKS* LeftChild;                                  //0x8
    struct _RTL_BALANCED_LINKS* RightChild;                                 //0x10
    CHAR Balance;                                                           //0x18
    UCHAR Reserved[3];                                                      //0x19
}; 

----------------------------------------
Structure: _RTL_BALANCED_NODE

//0x18 bytes (sizeof)
struct _RTL_BALANCED_NODE
{
    union
    {
        struct _RTL_BALANCED_NODE* Children[2];                             //0x0
        struct
        {
            struct _RTL_BALANCED_NODE* Left;                                //0x0
            struct _RTL_BALANCED_NODE* Right;                               //0x8
        };
    };
    union
    {
        struct
        {
            UCHAR Red:1;                                                    //0x10
            UCHAR Balance:2;                                                //0x10
        };
        ULONGLONG ParentValue;                                              //0x10
    };
}; 

----------------------------------------
Structure: _RTL_BITMAP

//0x10 bytes (sizeof)
struct _RTL_BITMAP
{
    ULONG SizeOfBitMap;                                                     //0x0
    ULONG* Buffer;                                                          //0x8
}; 

----------------------------------------
Structure: _RTL_BITMAP_EX

//0x10 bytes (sizeof)
struct _RTL_BITMAP_EX
{
    ULONGLONG SizeOfBitMap;                                                 //0x0
    ULONGLONG* Buffer;                                                      //0x8
}; 

----------------------------------------
Structure: _RTL_CHASH_ENTRY

//0x8 bytes (sizeof)
struct _RTL_CHASH_ENTRY
{
    ULONGLONG Key;                                                          //0x0
}; 

----------------------------------------
Structure: _RTL_CHASH_TABLE

//0x18 bytes (sizeof)
struct _RTL_CHASH_TABLE
{
    struct _RTL_CHASH_ENTRY* Table;                                         //0x0
    ULONG EntrySizeShift;                                                   //0x8
    ULONG EntryMax;                                                         //0xc
    ULONG EntryCount;                                                       //0x10
}; 

----------------------------------------
Structure: _RTL_CRITICAL_SECTION

//0x28 bytes (sizeof)
struct _RTL_CRITICAL_SECTION
{
    struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;                          //0x0
    LONG LockCount;                                                         //0x8
    LONG RecursionCount;                                                    //0xc
    VOID* OwningThread;                                                     //0x10
    VOID* LockSemaphore;                                                    //0x18
    ULONGLONG SpinCount;                                                    //0x20
}; 

----------------------------------------
Structure: _RTL_CRITICAL_SECTION_DEBUG

//0x30 bytes (sizeof)
struct _RTL_CRITICAL_SECTION_DEBUG
{
    USHORT Type;                                                            //0x0
    USHORT CreatorBackTraceIndex;                                           //0x2
    struct _RTL_CRITICAL_SECTION* CriticalSection;                          //0x8
    struct _LIST_ENTRY ProcessLocksList;                                    //0x10
    ULONG EntryCount;                                                       //0x20
    ULONG ContentionCount;                                                  //0x24
    ULONG Flags;                                                            //0x28
    USHORT CreatorBackTraceIndexHigh;                                       //0x2c
    USHORT SpareUSHORT;                                                     //0x2e
}; 

----------------------------------------
Structure: _RTL_CSPARSE_BITMAP

//0x40 bytes (sizeof)
struct _RTL_CSPARSE_BITMAP
{
    ULONGLONG* CommitBitmap;                                                //0x0
    ULONGLONG* UserBitmap;                                                  //0x8
    ULONGLONG BitCount;                                                     //0x10
    ULONGLONG BitmapLock;                                                   //0x18
    ULONGLONG DecommitPageIndex;                                            //0x20
    ULONGLONG RtlpCSparseBitmapWakeLock;                                    //0x28
    UCHAR LockType;                                                         //0x30
    UCHAR AddressSpace;                                                     //0x31
    UCHAR MemType;                                                          //0x32
    UCHAR AllocAlignment;                                                   //0x33
    ULONG CommitDirectoryMaxSize;                                           //0x34
    ULONGLONG CommitDirectory[1];                                           //0x38
}; 

----------------------------------------
Structure: _RTL_DRIVE_LETTER_CURDIR

//0x18 bytes (sizeof)
struct _RTL_DRIVE_LETTER_CURDIR
{
    USHORT Flags;                                                           //0x0
    USHORT Length;                                                          //0x2
    ULONG TimeStamp;                                                        //0x4
    struct _STRING DosPath;                                                 //0x8
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_HASH_TABLE

//0x28 bytes (sizeof)
struct _RTL_DYNAMIC_HASH_TABLE
{
    ULONG Flags;                                                            //0x0
    ULONG Shift;                                                            //0x4
    ULONG TableSize;                                                        //0x8
    ULONG Pivot;                                                            //0xc
    ULONG DivisorMask;                                                      //0x10
    ULONG NumEntries;                                                       //0x14
    ULONG NonEmptyBuckets;                                                  //0x18
    ULONG NumEnumerators;                                                   //0x1c
    VOID* Directory;                                                        //0x20
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_HASH_TABLE_CONTEXT

//0x18 bytes (sizeof)
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
    struct _LIST_ENTRY* ChainHead;                                          //0x0
    struct _LIST_ENTRY* PrevLinkage;                                        //0x8
    ULONGLONG Signature;                                                    //0x10
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_HASH_TABLE_ENTRY

//0x18 bytes (sizeof)
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
    struct _LIST_ENTRY Linkage;                                             //0x0
    ULONGLONG Signature;                                                    //0x10
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR

//0x28 bytes (sizeof)
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
    union
    {
        struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                     //0x0
        struct _LIST_ENTRY* CurEntry;                                       //0x0
    };
    struct _LIST_ENTRY* ChainHead;                                          //0x18
    ULONG BucketIndex;                                                      //0x20
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_LOOKASIDE

//0x1040 bytes (sizeof)
struct _RTL_DYNAMIC_LOOKASIDE
{
    ULONGLONG EnabledBucketBitmap;                                          //0x0
    ULONG BucketCount;                                                      //0x8
    ULONG ActiveBucketCount;                                                //0xc
    struct _RTL_LOOKASIDE Buckets[64];                                      //0x40
}; 

----------------------------------------
Structure: _RTL_DYNAMIC_TIME_ZONE_INFORMATION

//0x1b0 bytes (sizeof)
struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION
{
    struct _RTL_TIME_ZONE_INFORMATION tzi;                                  //0x0
    WCHAR TimeZoneKeyName[128];                                             //0xac
    UCHAR DynamicDaylightTimeDisabled;                                      //0x1ac
}; 

----------------------------------------
Structure: _RTL_FEATURE_CONFIGURATION

//0xc bytes (sizeof)
struct _RTL_FEATURE_CONFIGURATION
{
    ULONG FeatureId;                                                        //0x0
    ULONG Priority:4;                                                       //0x4
    ULONG EnabledState:2;                                                   //0x4
    ULONG IsWexpConfiguration:1;                                            //0x4
    ULONG HasSubscriptions:1;                                               //0x4
    ULONG Variant:6;                                                        //0x4
    ULONG VariantPayloadKind:2;                                             //0x4
    ULONG VariantPayload;                                                   //0x8
}; 

----------------------------------------
Structure: _RTL_FEATURE_USAGE_REPORT

//0x8 bytes (sizeof)
struct _RTL_FEATURE_USAGE_REPORT
{
    ULONG FeatureId;                                                        //0x0
    USHORT ReportingKind;                                                   //0x4
    USHORT ReportingOptions;                                                //0x6
}; 

----------------------------------------
Structure: _RTL_HASH_ENTRY

//0x10 bytes (sizeof)
struct _RTL_HASH_ENTRY
{
    struct _SINGLE_LIST_ENTRY BucketLink;                                   //0x0
    ULONGLONG Key;                                                          //0x8
}; 

----------------------------------------
Structure: _RTL_HASH_TABLE

//0x10 bytes (sizeof)
struct _RTL_HASH_TABLE
{
    ULONG EntryCount;                                                       //0x0
    ULONG MaskBitCount:5;                                                   //0x4
    ULONG BucketCount:27;                                                   //0x4
    struct _SINGLE_LIST_ENTRY* Buckets;                                     //0x8
}; 

----------------------------------------
Structure: _RTL_HASH_TABLE_ITERATOR

//0x18 bytes (sizeof)
struct _RTL_HASH_TABLE_ITERATOR
{
    struct _RTL_HASH_TABLE* Hash;                                           //0x0
    struct _RTL_HASH_ENTRY* HashEntry;                                      //0x8
    struct _SINGLE_LIST_ENTRY* Bucket;                                      //0x10
}; 

----------------------------------------
Structure: _RTL_HEAP_MEMORY_LIMIT_DATA

//0x20 bytes (sizeof)
struct _RTL_HEAP_MEMORY_LIMIT_DATA
{
    ULONGLONG CommitLimitBytes;                                             //0x0
    ULONGLONG CommitLimitFailureCode;                                       //0x8
    ULONGLONG MaxAllocationSizeBytes;                                       //0x10
    ULONGLONG AllocationLimitFailureCode;                                   //0x18
}; 

----------------------------------------
Structure: _RTL_HP_LFH_CONFIG

//0x4 bytes (sizeof)
struct _RTL_HP_LFH_CONFIG
{
    USHORT MaxBlockSize;                                                    //0x0
    USHORT WitholdPageCrossingBlocks:1;                                     //0x2
    USHORT DisableRandomization:1;                                          //0x2
}; 

----------------------------------------
Structure: _RTL_HP_SEG_ALLOC_POLICY

//0x18 bytes (sizeof)
struct _RTL_HP_SEG_ALLOC_POLICY
{
    ULONGLONG MinLargePages;                                                //0x0
    ULONGLONG MaxLargePages;                                                //0x8
    UCHAR MinUtilization;                                                   //0x10
}; 

----------------------------------------
Structure: _RTL_HP_SUB_ALLOCATOR_CONFIGS

//0x8 bytes (sizeof)
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
{
    struct _RTL_HP_LFH_CONFIG LfhConfigs;                                   //0x0
    struct _RTL_HP_VS_CONFIG VsConfigs;                                     //0x4
}; 

----------------------------------------
Structure: _RTL_HP_VS_CONFIG

//0x4 bytes (sizeof)
struct _RTL_HP_VS_CONFIG
{
    struct
    {
        ULONG PageAlignLargeAllocs:1;                                       //0x0
        ULONG FullDecommit:1;                                               //0x0
        ULONG EnableDelayFree:1;                                            //0x0
    } Flags;                                                                //0x0
}; 

----------------------------------------
Structure: _RTL_LOOKASIDE

//0x40 bytes (sizeof)
struct _RTL_LOOKASIDE
{
    union _SLIST_HEADER ListHead;                                           //0x0
    USHORT Depth;                                                           //0x10
    USHORT MaximumDepth;                                                    //0x12
    ULONG TotalAllocates;                                                   //0x14
    ULONG AllocateMisses;                                                   //0x18
    ULONG TotalFrees;                                                       //0x1c
    ULONG FreeMisses;                                                       //0x20
    ULONG LastTotalAllocates;                                               //0x24
    ULONG LastAllocateMisses;                                               //0x28
    ULONG LastTotalFrees;                                                   //0x2c
}; 

----------------------------------------
Structure: _RTL_QUERY_REGISTRY_TABLE

//0x38 bytes (sizeof)
struct _RTL_QUERY_REGISTRY_TABLE
{
    LONG (*QueryRoutine)(WCHAR* arg1, ULONG arg2, VOID* arg3, ULONG arg4, VOID* arg5, VOID* arg6); //0x0
    ULONG Flags;                                                            //0x8
    WCHAR* Name;                                                            //0x10
    VOID* EntryContext;                                                     //0x18
    ULONG DefaultType;                                                      //0x20
    VOID* DefaultData;                                                      //0x28
    ULONG DefaultLength;                                                    //0x30
}; 

----------------------------------------
Structure: _RTL_RANGE

//0x28 bytes (sizeof)
struct _RTL_RANGE
{
    ULONGLONG Start;                                                        //0x0
    ULONGLONG End;                                                          //0x8
    VOID* UserData;                                                         //0x10
    VOID* Owner;                                                            //0x18
    UCHAR Attributes;                                                       //0x20
    UCHAR Flags;                                                            //0x21
}; 

----------------------------------------
Structure: _RTL_RANGE_LIST

//0x20 bytes (sizeof)
struct _RTL_RANGE_LIST
{
    struct _LIST_ENTRY ListHead;                                            //0x0
    ULONG Flags;                                                            //0x10
    ULONG Count;                                                            //0x14
    ULONG Stamp;                                                            //0x18
}; 

----------------------------------------
Structure: _RTL_RB_TREE

//0x10 bytes (sizeof)
struct _RTL_RB_TREE
{
    struct _RTL_BALANCED_NODE* Root;                                        //0x0
    union
    {
        UCHAR Encoded:1;                                                    //0x8
        struct _RTL_BALANCED_NODE* Min;                                     //0x8
    };
}; 

----------------------------------------
Structure: _RTL_RETPOLINE_ROUTINES

//0x50 bytes (sizeof)
struct _RTL_RETPOLINE_ROUTINES
{
    ULONG UnwindDataOffset;                                                 //0x0
    ULONG SwitchtableJump[16];                                              //0x4
    ULONG CfgIndirectRax;                                                   //0x44
    ULONG NonCfgIndirectRax;                                                //0x48
    ULONG ImportR10;                                                        //0x4c
}; 

----------------------------------------
Structure: _RTL_SPARSE_ARRAY

//0x50 bytes (sizeof)
struct _RTL_SPARSE_ARRAY
{
    ULONGLONG ElementCount;                                                 //0x0
    ULONG ElementSizeShift;                                                 //0x8
    struct _RTL_CSPARSE_BITMAP Bitmap;                                      //0x10
}; 

----------------------------------------
Structure: _RTL_SPLAY_LINKS

//0x18 bytes (sizeof)
struct _RTL_SPLAY_LINKS
{
    struct _RTL_SPLAY_LINKS* Parent;                                        //0x0
    struct _RTL_SPLAY_LINKS* LeftChild;                                     //0x8
    struct _RTL_SPLAY_LINKS* RightChild;                                    //0x10
}; 

----------------------------------------
Structure: _RTL_SRWLOCK

//0x8 bytes (sizeof)
struct _RTL_SRWLOCK
{
    union
    {
        struct
        {
            ULONGLONG Locked:1;                                             //0x0
            ULONGLONG Waiting:1;                                            //0x0
            ULONGLONG Waking:1;                                             //0x0
            ULONGLONG MultipleShared:1;                                     //0x0
            ULONGLONG Shared:60;                                            //0x0
        };
        ULONGLONG Value;                                                    //0x0
        VOID* Ptr;                                                          //0x0
    };
}; 

----------------------------------------
Structure: _RTL_STACKDB_CONTEXT

//0x48 bytes (sizeof)
struct _RTL_STACKDB_CONTEXT
{
    struct _RTL_HASH_TABLE StackSegmentTable;                               //0x0
    struct _RTL_HASH_TABLE StackEntryTable;                                 //0x10
    struct _RTL_SRWLOCK StackEntryTableLock;                                //0x20
    struct _RTL_SRWLOCK SegmentTableLock;                                   //0x28
    VOID* (*Allocate)(ULONGLONG arg1, VOID* arg2);                          //0x30
    VOID (*Free)(VOID* arg1, VOID* arg2);                                   //0x38
    VOID* AllocatorContext;                                                 //0x40
}; 

----------------------------------------
Structure: _RTL_TIME_ZONE_INFORMATION

//0xac bytes (sizeof)
struct _RTL_TIME_ZONE_INFORMATION
{
    LONG Bias;                                                              //0x0
    WCHAR StandardName[32];                                                 //0x4
    struct _TIME_FIELDS StandardStart;                                      //0x44
    LONG StandardBias;                                                      //0x54
    WCHAR DaylightName[32];                                                 //0x58
    struct _TIME_FIELDS DaylightStart;                                      //0x98
    LONG DaylightBias;                                                      //0xa8
}; 

----------------------------------------
Structure: _RTL_UMS_CONTEXT

//0x520 bytes (sizeof)
struct _RTL_UMS_CONTEXT
{
    struct _SINGLE_LIST_ENTRY Link;                                         //0x0
    struct _CONTEXT Context;                                                //0x10
    VOID* Teb;                                                              //0x4e0
    VOID* UserContext;                                                      //0x4e8
    union
    {
        struct
        {
            volatile ULONG ScheduledThread:1;                               //0x4f0
            volatile ULONG Suspended:1;                                     //0x4f0
            volatile ULONG VolatileContext:1;                               //0x4f0
            volatile ULONG Terminated:1;                                    //0x4f0
            volatile ULONG DebugActive:1;                                   //0x4f0
            volatile ULONG RunningOnSelfThread:1;                           //0x4f0
            volatile ULONG DenyRunningOnSelfThread:1;                       //0x4f0
        };
        volatile LONG Flags;                                                //0x4f0
    };
    union
    {
        struct
        {
            volatile ULONGLONG KernelUpdateLock:2;                          //0x4f8
            volatile ULONGLONG PrimaryClientID:62;                          //0x4f8
        };
        volatile ULONGLONG ContextLock;                                     //0x4f8
    };
    struct _RTL_UMS_CONTEXT* PrimaryUmsContext;                             //0x500
    ULONG SwitchCount;                                                      //0x508
    ULONG KernelYieldCount;                                                 //0x50c
    ULONG MixedYieldCount;                                                  //0x510
    ULONG YieldCount;                                                       //0x514
}; 

----------------------------------------
Structure: _RTL_USER_PROCESS_PARAMETERS

//0x440 bytes (sizeof)
struct _RTL_USER_PROCESS_PARAMETERS
{
    ULONG MaximumLength;                                                    //0x0
    ULONG Length;                                                           //0x4
    ULONG Flags;                                                            //0x8
    ULONG DebugFlags;                                                       //0xc
    VOID* ConsoleHandle;                                                    //0x10
    ULONG ConsoleFlags;                                                     //0x18
    VOID* StandardInput;                                                    //0x20
    VOID* StandardOutput;                                                   //0x28
    VOID* StandardError;                                                    //0x30
    struct _CURDIR CurrentDirectory;                                        //0x38
    struct _UNICODE_STRING DllPath;                                         //0x50
    struct _UNICODE_STRING ImagePathName;                                   //0x60
    struct _UNICODE_STRING CommandLine;                                     //0x70
    VOID* Environment;                                                      //0x80
    ULONG StartingX;                                                        //0x88
    ULONG StartingY;                                                        //0x8c
    ULONG CountX;                                                           //0x90
    ULONG CountY;                                                           //0x94
    ULONG CountCharsX;                                                      //0x98
    ULONG CountCharsY;                                                      //0x9c
    ULONG FillAttribute;                                                    //0xa0
    ULONG WindowFlags;                                                      //0xa4
    ULONG ShowWindowFlags;                                                  //0xa8
    struct _UNICODE_STRING WindowTitle;                                     //0xb0
    struct _UNICODE_STRING DesktopInfo;                                     //0xc0
    struct _UNICODE_STRING ShellInfo;                                       //0xd0
    struct _UNICODE_STRING RuntimeData;                                     //0xe0
    struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];                  //0xf0
    ULONGLONG EnvironmentSize;                                              //0x3f0
    ULONGLONG EnvironmentVersion;                                           //0x3f8
    VOID* PackageDependencyData;                                            //0x400
    ULONG ProcessGroupId;                                                   //0x408
    ULONG LoaderThreads;                                                    //0x40c
    struct _UNICODE_STRING RedirectionDllName;                              //0x410
    struct _UNICODE_STRING HeapPartitionName;                               //0x420
    ULONGLONG* DefaultThreadpoolCpuSetMasks;                                //0x430
    ULONG DefaultThreadpoolCpuSetMaskCount;                                 //0x438
    ULONG DefaultThreadpoolThreadMaximum;                                   //0x43c
}; 

----------------------------------------
Structure: _SCATTER_GATHER_ELEMENT

//0x18 bytes (sizeof)
struct _SCATTER_GATHER_ELEMENT
{
    union _LARGE_INTEGER Address;                                           //0x0
    ULONG Length;                                                           //0x8
    ULONGLONG Reserved;                                                     //0x10
}; 

----------------------------------------
Structure: _SCATTER_GATHER_LIST

//0x10 bytes (sizeof)
struct _SCATTER_GATHER_LIST
{
    ULONG NumberOfElements;                                                 //0x0
    ULONGLONG Reserved;                                                     //0x8
    struct _SCATTER_GATHER_ELEMENT Elements[0];                             //0x10
}; 

----------------------------------------
Structure: _SCSI_REQUEST_BLOCK

//0x0 bytes (sizeof)
struct _SCSI_REQUEST_BLOCK; 

----------------------------------------
Structure: _SECONDARY_IC_LIST_ENTRY

//0xb0 bytes (sizeof)
struct _SECONDARY_IC_LIST_ENTRY
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG GsivBase;                                                         //0x10
    ULONG GsivSize;                                                         //0x14
    struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE Interface;               //0x18
    volatile LONG BusyCount;                                                //0x70
    volatile LONG ExclusiveWaiterCount;                                     //0x74
    struct _KEVENT NotificationEvent;                                       //0x78
    struct _LIST_ENTRY SignalListEntry;                                     //0x90
    struct _SECONDARY_INTERRUPT_LINE_STATE State[1];                        //0xa0
}; 

----------------------------------------
Structure: _SECONDARY_INTERRUPT_LINE_STATE

//0x10 bytes (sizeof)
struct _SECONDARY_INTERRUPT_LINE_STATE
{
    enum _KINTERRUPT_POLARITY Polarity;                                     //0x0
    enum _KINTERRUPT_MODE Mode;                                             //0x4
    ULONG Vector;                                                           //0x8
    UCHAR Unmasked;                                                         //0xc
}; 

----------------------------------------
Structure: _SECONDARY_INTERRUPT_PROVIDER_INTERFACE

//0x58 bytes (sizeof)
struct _SECONDARY_INTERRUPT_PROVIDER_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    ULONG GsivBase;                                                         //0x10
    USHORT GsivSize;                                                        //0x14
    struct _DRIVER_OBJECT* DriverObject;                                    //0x18
    VOID* Reserved1;                                                        //0x20
    VOID* Reserved2;                                                        //0x28
    VOID* Reserved3;                                                        //0x30
    VOID* Reserved4;                                                        //0x38
    VOID* Reserved5;                                                        //0x40
    VOID* Reserved6;                                                        //0x48
    VOID* Reserved7;                                                        //0x50
}; 

----------------------------------------
Structure: _SECTION

//0x40 bytes (sizeof)
struct _SECTION
{
    struct _RTL_BALANCED_NODE SectionNode;                                  //0x0
    ULONGLONG StartingVpn;                                                  //0x18
    ULONGLONG EndingVpn;                                                    //0x20
    union
    {
        struct _CONTROL_AREA* ControlArea;                                  //0x28
        struct _FILE_OBJECT* FileObject;                                    //0x28
        ULONGLONG RemoteImageFileObject:1;                                  //0x28
        ULONGLONG RemoteDataFileObject:1;                                   //0x28
    } u1;                                                                   //0x28
    ULONGLONG SizeOfSection;                                                //0x30
    union
    {
        ULONG LongFlags;                                                    //0x38
        struct _MMSECTION_FLAGS Flags;                                      //0x38
    } u;                                                                    //0x38
    ULONG InitialPageProtection:12;                                         //0x3c
    ULONG SessionId:19;                                                     //0x3c
    ULONG NoValidationNeeded:1;                                             //0x3c
}; 

----------------------------------------
Structure: _SECTION_IMAGE_INFORMATION

//0x40 bytes (sizeof)
struct _SECTION_IMAGE_INFORMATION
{
    VOID* TransferAddress;                                                  //0x0
    ULONG ZeroBits;                                                         //0x8
    ULONGLONG MaximumStackSize;                                             //0x10
    ULONGLONG CommittedStackSize;                                           //0x18
    ULONG SubSystemType;                                                    //0x20
    union
    {
        struct
        {
            USHORT SubSystemMinorVersion;                                   //0x24
            USHORT SubSystemMajorVersion;                                   //0x26
        };
        ULONG SubSystemVersion;                                             //0x24
    };
    union
    {
        struct
        {
            USHORT MajorOperatingSystemVersion;                             //0x28
            USHORT MinorOperatingSystemVersion;                             //0x2a
        };
        ULONG OperatingSystemVersion;                                       //0x28
    };
    USHORT ImageCharacteristics;                                            //0x2c
    USHORT DllCharacteristics;                                              //0x2e
    USHORT Machine;                                                         //0x30
    UCHAR ImageContainsCode;                                                //0x32
    union
    {
        UCHAR ImageFlags;                                                   //0x33
        struct
        {
            UCHAR ComPlusNativeReady:1;                                     //0x33
            UCHAR ComPlusILOnly:1;                                          //0x33
            UCHAR ImageDynamicallyRelocated:1;                              //0x33
            UCHAR ImageMappedFlat:1;                                        //0x33
            UCHAR BaseBelow4gb:1;                                           //0x33
            UCHAR ComPlusPrefer32bit:1;                                     //0x33
            UCHAR Reserved:2;                                               //0x33
        };
    };
    ULONG LoaderFlags;                                                      //0x34
    ULONG ImageFileSize;                                                    //0x38
    ULONG CheckSum;                                                         //0x3c
}; 

----------------------------------------
Structure: _SECTION_OBJECT_POINTERS

//0x18 bytes (sizeof)
struct _SECTION_OBJECT_POINTERS
{
    VOID* DataSectionObject;                                                //0x0
    VOID* SharedCacheMap;                                                   //0x8
    VOID* ImageSectionObject;                                               //0x10
}; 

----------------------------------------
Structure: _SECURITY_CLIENT_CONTEXT

//0x48 bytes (sizeof)
struct _SECURITY_CLIENT_CONTEXT
{
    struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;                        //0x0
    VOID* ClientToken;                                                      //0x10
    UCHAR DirectlyAccessClientToken;                                        //0x18
    UCHAR DirectAccessEffectiveOnly;                                        //0x19
    UCHAR ServerIsRemote;                                                   //0x1a
    struct _TOKEN_CONTROL ClientTokenControl;                               //0x1c
}; 

----------------------------------------
Structure: _SECURITY_DESCRIPTOR

//0x28 bytes (sizeof)
struct _SECURITY_DESCRIPTOR
{
    UCHAR Revision;                                                         //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT Control;                                                         //0x2
    VOID* Owner;                                                            //0x8
    VOID* Group;                                                            //0x10
    struct _ACL* Sacl;                                                      //0x18
    struct _ACL* Dacl;                                                      //0x20
}; 

----------------------------------------
Structure: _SECURITY_DESCRIPTOR_RELATIVE

//0x14 bytes (sizeof)
struct _SECURITY_DESCRIPTOR_RELATIVE
{
    UCHAR Revision;                                                         //0x0
    UCHAR Sbz1;                                                             //0x1
    USHORT Control;                                                         //0x2
    ULONG Owner;                                                            //0x4
    ULONG Group;                                                            //0x8
    ULONG Sacl;                                                             //0xc
    ULONG Dacl;                                                             //0x10
}; 

----------------------------------------
Structure: _SECURITY_QUALITY_OF_SERVICE

//0xc bytes (sizeof)
struct _SECURITY_QUALITY_OF_SERVICE
{
    ULONG Length;                                                           //0x0
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x4
    UCHAR ContextTrackingMode;                                              //0x8
    UCHAR EffectiveOnly;                                                    //0x9
}; 

----------------------------------------
Structure: _SECURITY_SUBJECT_CONTEXT

//0x20 bytes (sizeof)
struct _SECURITY_SUBJECT_CONTEXT
{
    VOID* ClientToken;                                                      //0x0
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x8
    VOID* PrimaryToken;                                                     //0x10
    VOID* ProcessAuditId;                                                   //0x18
}; 

----------------------------------------
Structure: _SEGMENT

//0x48 bytes (sizeof)
struct _SEGMENT
{
    struct _CONTROL_AREA* ControlArea;                                      //0x0
    ULONG TotalNumberOfPtes;                                                //0x8
    struct _SEGMENT_FLAGS SegmentFlags;                                     //0xc
    ULONGLONG NumberOfCommittedPages;                                       //0x10
    ULONGLONG SizeOfSegment;                                                //0x18
    union
    {
        struct _MMEXTEND_INFO* ExtendInfo;                                  //0x20
        VOID* BasedAddress;                                                 //0x20
    };
    struct _EX_PUSH_LOCK SegmentLock;                                       //0x28
    union
    {
        ULONGLONG ImageCommitment;                                          //0x30
        ULONG CreatingProcessId;                                            //0x30
    } u1;                                                                   //0x30
    union
    {
        struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;             //0x38
        VOID* FirstMappedVa;                                                //0x38
    } u2;                                                                   //0x38
    struct _MMPTE* PrototypePte;                                            //0x40
}; 

----------------------------------------
Structure: _SEGMENT_FLAGS

//0x4 bytes (sizeof)
struct _SEGMENT_FLAGS
{
    union
    {
        struct
        {
            USHORT TotalNumberOfPtes4132:10;                                //0x0
            USHORT Spare0:1;                                                //0x0
            USHORT SessionDriverProtos:1;                                   //0x0
            USHORT LargePages:1;                                            //0x0
            USHORT DebugSymbolsLoaded:1;                                    //0x0
            USHORT WriteCombined:1;                                         //0x0
            USHORT NoCache:1;                                               //0x0
        };
        USHORT Short0;                                                      //0x0
    };
    union
    {
        struct
        {
            UCHAR Spare:1;                                                  //0x2
            UCHAR DefaultProtectionMask:5;                                  //0x2
            UCHAR Binary32:1;                                               //0x2
            UCHAR ContainsDebug:1;                                          //0x2
        };
        UCHAR UChar1;                                                       //0x2
    };
    union
    {
        struct
        {
            UCHAR ForceCollision:1;                                         //0x3
            UCHAR ImageSigningType:3;                                       //0x3
            UCHAR ImageSigningLevel:4;                                      //0x3
        };
        UCHAR UChar2;                                                       //0x3
    };
}; 

----------------------------------------
Structure: _SEGMENT_HEAP

//0x800 bytes (sizeof)
struct _SEGMENT_HEAP
{
    struct RTL_HP_ENV_HANDLE EnvHandle;                                     //0x0
    ULONG Signature;                                                        //0x10
    ULONG GlobalFlags;                                                      //0x14
    ULONG Interceptor;                                                      //0x18
    USHORT ProcessHeapListIndex;                                            //0x1c
    USHORT AllocatedFromMetadata:1;                                         //0x1e
    union
    {
        struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;                 //0x20
        struct
        {
            ULONGLONG ReservedMustBeZero1;                                  //0x20
            VOID* UserContext;                                              //0x28
            ULONGLONG ReservedMustBeZero2;                                  //0x30
            VOID* Spare;                                                    //0x38
        };
    };
    ULONGLONG LargeMetadataLock;                                            //0x40
    struct _RTL_RB_TREE LargeAllocMetadata;                                 //0x48
    volatile ULONGLONG LargeReservedPages;                                  //0x58
    volatile ULONGLONG LargeCommittedPages;                                 //0x60
    union _RTL_RUN_ONCE StackTraceInitVar;                                  //0x68
    struct _HEAP_RUNTIME_MEMORY_STATS MemStats;                             //0x80
    USHORT GlobalLockCount;                                                 //0xd8
    ULONG GlobalLockOwner;                                                  //0xdc
    ULONGLONG ContextExtendLock;                                            //0xe0
    UCHAR* AllocatedBase;                                                   //0xe8
    UCHAR* UncommittedBase;                                                 //0xf0
    UCHAR* ReservedLimit;                                                   //0xf8
    struct _HEAP_SEG_CONTEXT SegContexts[2];                                //0x100
    struct _HEAP_VS_CONTEXT VsContext;                                      //0x280
    struct _HEAP_LFH_CONTEXT LfhContext;                                    //0x340
}; 

----------------------------------------
Structure: _SEGMENT_HEAP_EXTRA

//0x10 bytes (sizeof)
struct _SEGMENT_HEAP_EXTRA
{
    USHORT AllocationTag;                                                   //0x0
    UCHAR InterceptorIndex:4;                                               //0x2
    UCHAR UserFlags:4;                                                      //0x2
    UCHAR ExtraSizeInUnits;                                                 //0x3
    VOID* Settable;                                                         //0x8
}; 

----------------------------------------
Structure: _SEP_AUDIT_POLICY

//0x1f bytes (sizeof)
struct _SEP_AUDIT_POLICY
{
    struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;                              //0x0
    UCHAR PolicySetStatus;                                                  //0x1e
}; 

----------------------------------------
Structure: _SEP_CACHED_HANDLES_ENTRY

//0x48 bytes (sizeof)
struct _SEP_CACHED_HANDLES_ENTRY
{
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;            //0x20
    ULONG HandleCount;                                                      //0x38
    VOID** Handles;                                                         //0x40
}; 

----------------------------------------
Structure: _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR

//0x18 bytes (sizeof)
struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
{
    enum _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;                     //0x0
    union
    {
        VOID* PackageSid;                                                   //0x8
        struct _UNICODE_STRING IsolationPrefix;                             //0x8
    };
}; 

----------------------------------------
Structure: _SEP_CACHED_HANDLES_TABLE

//0x10 bytes (sizeof)
struct _SEP_CACHED_HANDLES_TABLE
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    struct _RTL_DYNAMIC_HASH_TABLE* HashTable;                              //0x8
}; 

----------------------------------------
Structure: _SEP_LOGON_SESSION_REFERENCES

//0xc0 bytes (sizeof)
struct _SEP_LOGON_SESSION_REFERENCES
{
    struct _SEP_LOGON_SESSION_REFERENCES* Next;                             //0x0
    struct _LUID LogonId;                                                   //0x8
    struct _LUID BuddyLogonId;                                              //0x10
    LONGLONG ReferenceCount;                                                //0x18
    ULONG Flags;                                                            //0x20
    struct _DEVICE_MAP* pDeviceMap;                                         //0x28
    VOID* Token;                                                            //0x30
    struct _UNICODE_STRING AccountName;                                     //0x38
    struct _UNICODE_STRING AuthorityName;                                   //0x48
    struct _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;                    //0x58
    struct _EX_PUSH_LOCK SharedDataLock;                                    //0x68
    struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* SharedClaimAttributes;  //0x70
    struct _SEP_SID_VALUES_BLOCK* SharedSidValues;                          //0x78
    struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;                     //0x80
    struct _EJOB* ServerSilo;                                               //0xa0
    struct _LUID SiblingAuthId;                                             //0xa8
    struct _LIST_ENTRY TokenList;                                           //0xb0
}; 

----------------------------------------
Structure: _SEP_LOWBOX_NUMBER_ENTRY

//0x38 bytes (sizeof)
struct _SEP_LOWBOX_NUMBER_ENTRY
{
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    VOID* PackageSid;                                                       //0x20
    ULONG LowboxNumber;                                                     //0x28
    VOID* AtomTable;                                                        //0x30
}; 

----------------------------------------
Structure: _SEP_LOWBOX_NUMBER_MAPPING

//0x28 bytes (sizeof)
struct _SEP_LOWBOX_NUMBER_MAPPING
{
    struct _EX_PUSH_LOCK Lock;                                              //0x0
    struct _RTL_BITMAP Bitmap;                                              //0x8
    struct _RTL_DYNAMIC_HASH_TABLE* HashTable;                              //0x18
    UCHAR Active;                                                           //0x20
}; 

----------------------------------------
Structure: _SEP_LUID_TO_INDEX_MAP_ENTRY

//0x38 bytes (sizeof)
struct _SEP_LUID_TO_INDEX_MAP_ENTRY
{
    struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;                         //0x0
    LONGLONG ReferenceCount;                                                //0x18
    ULONGLONG Luid;                                                         //0x20
    ULONGLONG IndexIntoGlobalSingletonTable;                                //0x28
    UCHAR MarkedForDeletion;                                                //0x30
}; 

----------------------------------------
Structure: _SEP_RM_LSA_CONNECTION_STATE

//0x50 bytes (sizeof)
struct _SEP_RM_LSA_CONNECTION_STATE
{
    VOID* LsaProcessHandle;                                                 //0x0
    VOID* LsaCommandPortHandle;                                             //0x8
    VOID* SepRmThreadHandle;                                                //0x10
    VOID* RmCommandPortHandle;                                              //0x18
    VOID* RmCommandServerPortHandle;                                        //0x20
    VOID* LsaCommandPortSectionHandle;                                      //0x28
    union _LARGE_INTEGER LsaCommandPortSectionSize;                         //0x30
    VOID* LsaViewPortMemory;                                                //0x38
    VOID* RmViewPortMemory;                                                 //0x40
    LONG LsaCommandPortMemoryDelta;                                         //0x48
    UCHAR LsaCommandPortActive;                                             //0x4c
}; 

----------------------------------------
Structure: _SEP_SID_VALUES_BLOCK

//0x20 bytes (sizeof)
struct _SEP_SID_VALUES_BLOCK
{
    ULONG BlockLength;                                                      //0x0
    LONGLONG ReferenceCount;                                                //0x8
    ULONG SidCount;                                                         //0x10
    ULONGLONG SidValuesStart;                                               //0x18
}; 

----------------------------------------
Structure: _SEP_SILOSTATE

//0x30 bytes (sizeof)
struct _SEP_SILOSTATE
{
    struct _SEP_LOGON_SESSION_REFERENCES* SystemLogonSession;               //0x0
    struct _SEP_LOGON_SESSION_REFERENCES* AnonymousLogonSession;            //0x8
    VOID* AnonymousLogonToken;                                              //0x10
    VOID* AnonymousLogonTokenNoEveryone;                                    //0x18
    struct _UNICODE_STRING* UncSystemPaths;                                 //0x20
    struct _CI_NGEN_PATHS* NgenPaths;                                       //0x28
}; 

----------------------------------------
Structure: _SEP_TOKEN_DIAG_TRACK_ENTRY

//0x120 bytes (sizeof)
struct _SEP_TOKEN_DIAG_TRACK_ENTRY
{
    VOID* ProcessCid;                                                       //0x0
    VOID* ThreadCid;                                                        //0x8
    UCHAR ImageFileName[16];                                                //0x10
    ULONG CreateMethod;                                                     //0x20
    ULONGLONG CreateTrace[30];                                              //0x28
    LONG Count;                                                             //0x118
    LONG CaptureCount;                                                      //0x11c
}; 

----------------------------------------
Structure: _SEP_TOKEN_PRIVILEGES

//0x18 bytes (sizeof)
struct _SEP_TOKEN_PRIVILEGES
{
    ULONGLONG Present;                                                      //0x0
    ULONGLONG Enabled;                                                      //0x8
    ULONGLONG EnabledByDefault;                                             //0x10
}; 

----------------------------------------
Structure: _SESSION_LOWBOX_MAP

//0x40 bytes (sizeof)
struct _SESSION_LOWBOX_MAP
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG SessionId;                                                        //0x10
    struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;                            //0x18
}; 

----------------------------------------
Structure: _SE_AUDIT_PROCESS_CREATION_INFO

//0x8 bytes (sizeof)
struct _SE_AUDIT_PROCESS_CREATION_INFO
{
    struct _OBJECT_NAME_INFORMATION* ImageFileName;                         //0x0
}; 

----------------------------------------
Structure: _SHARED_CACHE_MAP

//0x228 bytes (sizeof)
struct _SHARED_CACHE_MAP
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteSize;                                                     //0x2
    ULONG OpenCount;                                                        //0x4
    union _LARGE_INTEGER FileSize;                                          //0x8
    struct _LIST_ENTRY BcbList;                                             //0x10
    union _LARGE_INTEGER SectionSize;                                       //0x20
    union _LARGE_INTEGER ValidDataLength;                                   //0x28
    union _LARGE_INTEGER ValidDataGoal;                                     //0x30
    struct _VACB* InitialVacbs[4];                                          //0x38
    struct _VACB** Vacbs;                                                   //0x58
    struct _EX_FAST_REF FileObjectFastRef;                                  //0x60
    struct _EX_PUSH_LOCK VacbLock;                                          //0x68
    ULONG DirtyPages;                                                       //0x70
    struct _LIST_ENTRY LoggedStreamLinks;                                   //0x78
    struct _LIST_ENTRY SharedCacheMapLinks;                                 //0x88
    ULONG Flags;                                                            //0x98
    LONG Status;                                                            //0x9c
    struct _MBCB* Mbcb;                                                     //0xa0
    VOID* Section;                                                          //0xa8
    struct _KEVENT* CreateEvent;                                            //0xb0
    struct _KEVENT* WaitOnActiveCount;                                      //0xb8
    ULONG PagesToWrite;                                                     //0xc0
    LONGLONG BeyondLastFlush;                                               //0xc8
    struct _CACHE_MANAGER_CALLBACKS* Callbacks;                             //0xd0
    VOID* LazyWriteContext;                                                 //0xd8
    struct _LIST_ENTRY PrivateList;                                         //0xe0
    union
    {
        struct _LOGGED_STREAM_CALLBACK_V1 V1;                               //0xf0
        struct _LOGGED_STREAM_CALLBACK_V2 V2;                               //0xf0
    };
    union _LARGE_INTEGER LargestLSN;                                        //0x100
    ULONG DirtyPageThreshold;                                               //0x108
    ULONG LazyWritePassCount;                                               //0x10c
    struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;                    //0x110
    struct _FAST_MUTEX BcbLock;                                             //0x118
    union _LARGE_INTEGER LastUnmapBehindOffset;                             //0x150
    struct _KEVENT Event;                                                   //0x158
    union _LARGE_INTEGER HighWaterMappingOffset;                            //0x170
    struct _PRIVATE_CACHE_MAP PrivateCacheMap;                              //0x178
    VOID* WriteBehindWorkQueueEntry;                                        //0x1f0
    struct _VOLUME_CACHE_MAP* VolumeCacheMap;                               //0x1f8
    ULONG ProcImagePathHash;                                                //0x200
    ULONG WritesInProgress;                                                 //0x204
    ULONG AsyncReadRequestCount;                                            //0x208
    struct _CC_PARTITION* Partition;                                        //0x210
    ULONG InternalRefCount;                                                 //0x218
    ULONG NumMappedVacb;                                                    //0x21c
    ULONG NumActiveVacb;                                                    //0x220
}; 

----------------------------------------
Structure: _SHARED_CACHE_MAP_LIST_CURSOR

//0x18 bytes (sizeof)
struct _SHARED_CACHE_MAP_LIST_CURSOR
{
    struct _LIST_ENTRY SharedCacheMapLinks;                                 //0x0
    ULONG Flags;                                                            //0x10
}; 

----------------------------------------
Structure: _SID

//0xc bytes (sizeof)
struct _SID
{
    UCHAR Revision;                                                         //0x0
    UCHAR SubAuthorityCount;                                                //0x1
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;                   //0x2
    ULONG SubAuthority[1];                                                  //0x8
}; 

----------------------------------------
Structure: _SID_AND_ATTRIBUTES

//0x10 bytes (sizeof)
struct _SID_AND_ATTRIBUTES
{
    VOID* Sid;                                                              //0x0
    ULONG Attributes;                                                       //0x8
}; 

----------------------------------------
Structure: _SID_AND_ATTRIBUTES_HASH

//0x110 bytes (sizeof)
struct _SID_AND_ATTRIBUTES_HASH
{
    ULONG SidCount;                                                         //0x0
    struct _SID_AND_ATTRIBUTES* SidAttr;                                    //0x8
    ULONGLONG Hash[32];                                                     //0x10
}; 

----------------------------------------
Structure: _SID_IDENTIFIER_AUTHORITY

//0x6 bytes (sizeof)
struct _SID_IDENTIFIER_AUTHORITY
{
    UCHAR Value[6];                                                         //0x0
}; 

----------------------------------------
Structure: _SILO_USER_SHARED_DATA

//0x270 bytes (sizeof)
struct _SILO_USER_SHARED_DATA
{
    ULONG ServiceSessionId;                                                 //0x0
    ULONG ActiveConsoleId;                                                  //0x4
    LONGLONG ConsoleSessionForegroundProcessId;                             //0x8
    enum _NT_PRODUCT_TYPE NtProductType;                                    //0x10
    ULONG SuiteMask;                                                        //0x14
    ULONG SharedUserSessionId;                                              //0x18
    UCHAR IsMultiSessionSku;                                                //0x1c
    WCHAR NtSystemRoot[260];                                                //0x1e
    USHORT UserModeGlobalLogger[16];                                        //0x226
    ULONG TimeZoneId;                                                       //0x248
    volatile LONG TimeZoneBiasStamp;                                        //0x24c
    struct _KSYSTEM_TIME TimeZoneBias;                                      //0x250
    union _LARGE_INTEGER TimeZoneBiasEffectiveStart;                        //0x260
    union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;                          //0x268
}; 

----------------------------------------
Structure: _SINGLE_LIST_ENTRY

//0x8 bytes (sizeof)
struct _SINGLE_LIST_ENTRY
{
    struct _SINGLE_LIST_ENTRY* Next;                                        //0x0
}; 

----------------------------------------
Structure: _SINGLE_LIST_ENTRY32

//0x4 bytes (sizeof)
struct _SINGLE_LIST_ENTRY32
{
    ULONG Next;                                                             //0x0
}; 

----------------------------------------
Structure: _SK_CRASH_MINIDUMP

//0x1000 bytes (sizeof)
struct _SK_CRASH_MINIDUMP
{
    ULONG Size;                                                             //0x0
    ULONG Version;                                                          //0x4
    ULONG ModuleCount;                                                      //0x8
    ULONG FrameCount;                                                       //0xc
    struct _SK_CRASH_MODULE Modules[16];                                    //0x10
    struct _SK_CRASH_STACK_FRAME StackFrames[366];                          //0x490
}; 

----------------------------------------
Structure: _SK_CRASH_MODULE

//0x48 bytes (sizeof)
struct _SK_CRASH_MODULE
{
    WCHAR ImageName[32];                                                    //0x0
    ULONG SizeOfImage;                                                      //0x40
    ULONG TimeDateStamp;                                                    //0x44
}; 

----------------------------------------
Structure: _SK_CRASH_STACK_FRAME

//0x8 bytes (sizeof)
struct _SK_CRASH_STACK_FRAME
{
    union
    {
        struct
        {
            ULONG ModuleId;                                                 //0x0
            ULONG Rva;                                                      //0x4
        };
        ULONGLONG Pc;                                                       //0x0
    };
}; 

----------------------------------------
Structure: _SLIST_ENTRY

//0x10 bytes (sizeof)
struct _SLIST_ENTRY
{
    struct _SLIST_ENTRY* Next;                                              //0x0
}; 

----------------------------------------
Structure: _SMBIOS3_TABLE_HEADER

//0x18 bytes (sizeof)
struct _SMBIOS3_TABLE_HEADER
{
    UCHAR Signature[5];                                                     //0x0
    UCHAR Checksum;                                                         //0x5
    UCHAR Length;                                                           //0x6
    UCHAR MajorVersion;                                                     //0x7
    UCHAR MinorVersion;                                                     //0x8
    UCHAR Docrev;                                                           //0x9
    UCHAR EntryPointRevision;                                               //0xa
    UCHAR Reserved;                                                         //0xb
    ULONG StructureTableMaximumSize;                                        //0xc
    ULONGLONG StructureTableAddress;                                        //0x10
}; 

----------------------------------------
Structure: _STACK_TABLE

//0x8088 bytes (sizeof)
struct _STACK_TABLE
{
    USHORT NumStackTraces;                                                  //0x0
    USHORT TraceCapacity;                                                   //0x2
    struct _OBJECT_REF_TRACE* StackTrace[16];                               //0x8
    USHORT StackTableHash[16381];                                           //0x88
}; 

----------------------------------------
Structure: _STRING

//0x10 bytes (sizeof)
struct _STRING
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    CHAR* Buffer;                                                           //0x8
}; 

----------------------------------------
Structure: _STRING32

//0x8 bytes (sizeof)
struct _STRING32
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    ULONG Buffer;                                                           //0x4
}; 

----------------------------------------
Structure: _STRING64

//0x10 bytes (sizeof)
struct _STRING64
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    ULONGLONG Buffer;                                                       //0x8
}; 

----------------------------------------
Structure: _SUBSECTION

//0x38 bytes (sizeof)
struct _SUBSECTION
{
    struct _CONTROL_AREA* ControlArea;                                      //0x0
    struct _MMPTE* SubsectionBase;                                          //0x8
    struct _SUBSECTION* NextSubsection;                                     //0x10
    union
    {
        struct _RTL_AVL_TREE GlobalPerSessionHead;                          //0x18
        struct _MI_CONTROL_AREA_WAIT_BLOCK* CreationWaitList;               //0x18
        struct _MI_PER_SESSION_PROTOS* SessionDriverProtos;                 //0x18
    };
    union
    {
        ULONG LongFlags;                                                    //0x20
        struct _MMSUBSECTION_FLAGS SubsectionFlags;                         //0x20
    } u;                                                                    //0x20
    ULONG StartingSector;                                                   //0x24
    ULONG NumberOfFullSectors;                                              //0x28
    ULONG PtesInSubsection;                                                 //0x2c
    union
    {
        struct _MI_SUBSECTION_ENTRY1 e1;                                    //0x30
        ULONG EntireField;                                                  //0x30
    } u1;                                                                   //0x30
    ULONG UnusedPtes:30;                                                    //0x34
    ULONG ExtentQueryNeeded:1;                                              //0x34
    ULONG DirtyPages:1;                                                     //0x34
}; 

----------------------------------------
Structure: _SUPPORTED_RANGE

//0x28 bytes (sizeof)
struct _SUPPORTED_RANGE
{
    struct _SUPPORTED_RANGE* Next;                                          //0x0
    ULONG SystemAddressSpace;                                               //0x8
    LONGLONG SystemBase;                                                    //0x10
    LONGLONG Base;                                                          //0x18
    LONGLONG Limit;                                                         //0x20
}; 

----------------------------------------
Structure: _SUPPORTED_RANGES

//0xc0 bytes (sizeof)
struct _SUPPORTED_RANGES
{
    USHORT Version;                                                         //0x0
    UCHAR Sorted;                                                           //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG NoIO;                                                             //0x4
    struct _SUPPORTED_RANGE IO;                                             //0x8
    ULONG NoMemory;                                                         //0x30
    struct _SUPPORTED_RANGE Memory;                                         //0x38
    ULONG NoPrefetchMemory;                                                 //0x60
    struct _SUPPORTED_RANGE PrefetchMemory;                                 //0x68
    ULONG NoDma;                                                            //0x90
    struct _SUPPORTED_RANGE Dma;                                            //0x98
}; 

----------------------------------------
Structure: _SYNCH_COUNTERS

//0xb8 bytes (sizeof)
struct _SYNCH_COUNTERS
{
    ULONG SpinLockAcquireCount;                                             //0x0
    ULONG SpinLockContentionCount;                                          //0x4
    ULONG SpinLockSpinCount;                                                //0x8
    ULONG IpiSendRequestBroadcastCount;                                     //0xc
    ULONG IpiSendRequestRoutineCount;                                       //0x10
    ULONG IpiSendSoftwareInterruptCount;                                    //0x14
    ULONG ExInitializeResourceCount;                                        //0x18
    ULONG ExReInitializeResourceCount;                                      //0x1c
    ULONG ExDeleteResourceCount;                                            //0x20
    ULONG ExecutiveResourceAcquiresCount;                                   //0x24
    ULONG ExecutiveResourceContentionsCount;                                //0x28
    ULONG ExecutiveResourceReleaseExclusiveCount;                           //0x2c
    ULONG ExecutiveResourceReleaseSharedCount;                              //0x30
    ULONG ExecutiveResourceConvertsCount;                                   //0x34
    ULONG ExAcqResExclusiveAttempts;                                        //0x38
    ULONG ExAcqResExclusiveAcquiresExclusive;                               //0x3c
    ULONG ExAcqResExclusiveAcquiresExclusiveRecursive;                      //0x40
    ULONG ExAcqResExclusiveWaits;                                           //0x44
    ULONG ExAcqResExclusiveNotAcquires;                                     //0x48
    ULONG ExAcqResSharedAttempts;                                           //0x4c
    ULONG ExAcqResSharedAcquiresExclusive;                                  //0x50
    ULONG ExAcqResSharedAcquiresShared;                                     //0x54
    ULONG ExAcqResSharedAcquiresSharedRecursive;                            //0x58
    ULONG ExAcqResSharedWaits;                                              //0x5c
    ULONG ExAcqResSharedNotAcquires;                                        //0x60
    ULONG ExAcqResSharedStarveExclusiveAttempts;                            //0x64
    ULONG ExAcqResSharedStarveExclusiveAcquiresExclusive;                   //0x68
    ULONG ExAcqResSharedStarveExclusiveAcquiresShared;                      //0x6c
    ULONG ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;             //0x70
    ULONG ExAcqResSharedStarveExclusiveWaits;                               //0x74
    ULONG ExAcqResSharedStarveExclusiveNotAcquires;                         //0x78
    ULONG ExAcqResSharedWaitForExclusiveAttempts;                           //0x7c
    ULONG ExAcqResSharedWaitForExclusiveAcquiresExclusive;                  //0x80
    ULONG ExAcqResSharedWaitForExclusiveAcquiresShared;                     //0x84
    ULONG ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;            //0x88
    ULONG ExAcqResSharedWaitForExclusiveWaits;                              //0x8c
    ULONG ExAcqResSharedWaitForExclusiveNotAcquires;                        //0x90
    ULONG ExSetResOwnerPointerExclusive;                                    //0x94
    ULONG ExSetResOwnerPointerSharedNew;                                    //0x98
    ULONG ExSetResOwnerPointerSharedOld;                                    //0x9c
    ULONG ExTryToAcqExclusiveAttempts;                                      //0xa0
    ULONG ExTryToAcqExclusiveAcquires;                                      //0xa4
    ULONG ExBoostExclusiveOwner;                                            //0xa8
    ULONG ExBoostSharedOwners;                                              //0xac
    ULONG ExEtwSynchTrackingNotificationsCount;                             //0xb0
    ULONG ExEtwSynchTrackingNotificationsAccountedCount;                    //0xb4
}; 

----------------------------------------
Structure: _SYSPTES_HEADER

//0x118 bytes (sizeof)
struct _SYSPTES_HEADER
{
    struct _LIST_ENTRY ListHead[16];                                        //0x0
    ULONGLONG Count;                                                        //0x100
    ULONGLONG NumberOfEntries;                                              //0x108
    ULONGLONG NumberOfEntriesPeak;                                          //0x110
}; 

----------------------------------------
Structure: _SYSTEM_POWER_POLICY

//0xe8 bytes (sizeof)
struct _SYSTEM_POWER_POLICY
{
    ULONG Revision;                                                         //0x0
    struct POWER_ACTION_POLICY PowerButton;                                 //0x4
    struct POWER_ACTION_POLICY SleepButton;                                 //0x10
    struct POWER_ACTION_POLICY LidClose;                                    //0x1c
    enum _SYSTEM_POWER_STATE LidOpenWake;                                   //0x28
    ULONG Reserved;                                                         //0x2c
    struct POWER_ACTION_POLICY Idle;                                        //0x30
    ULONG IdleTimeout;                                                      //0x3c
    UCHAR IdleSensitivity;                                                  //0x40
    UCHAR DynamicThrottle;                                                  //0x41
    UCHAR Spare2[2];                                                        //0x42
    enum _SYSTEM_POWER_STATE MinSleep;                                      //0x44
    enum _SYSTEM_POWER_STATE MaxSleep;                                      //0x48
    enum _SYSTEM_POWER_STATE ReducedLatencySleep;                           //0x4c
    ULONG WinLogonFlags;                                                    //0x50
    ULONG Spare3;                                                           //0x54
    ULONG DozeS4Timeout;                                                    //0x58
    ULONG BroadcastCapacityResolution;                                      //0x5c
    struct SYSTEM_POWER_LEVEL DischargePolicy[4];                           //0x60
    ULONG VideoTimeout;                                                     //0xc0
    UCHAR VideoDimDisplay;                                                  //0xc4
    ULONG VideoReserved[3];                                                 //0xc8
    ULONG SpindownTimeout;                                                  //0xd4
    UCHAR OptimizeForPower;                                                 //0xd8
    UCHAR FanThrottleTolerance;                                             //0xd9
    UCHAR ForcedThrottle;                                                   //0xda
    UCHAR MinThrottle;                                                      //0xdb
    struct POWER_ACTION_POLICY OverThrottled;                               //0xdc
}; 

----------------------------------------
Structure: _SYSTEM_POWER_STATE_CONTEXT

//0x4 bytes (sizeof)
struct _SYSTEM_POWER_STATE_CONTEXT
{
    union
    {
        struct
        {
            ULONG Reserved1:8;                                              //0x0
            ULONG TargetSystemState:4;                                      //0x0
            ULONG EffectiveSystemState:4;                                   //0x0
            ULONG CurrentSystemState:4;                                     //0x0
            ULONG IgnoreHibernationPath:1;                                  //0x0
            ULONG PseudoTransition:1;                                       //0x0
            ULONG KernelSoftReboot:1;                                       //0x0
            ULONG DirectedDripsTransition:1;                                //0x0
            ULONG Reserved2:8;                                              //0x0
        };
        ULONG ContextAsUlong;                                               //0x0
    };
}; 

----------------------------------------
Structure: _TEB

//0x1838 bytes (sizeof)
struct _TEB
{
    struct _NT_TIB NtTib;                                                   //0x0
    VOID* EnvironmentPointer;                                               //0x38
    struct _CLIENT_ID ClientId;                                             //0x40
    VOID* ActiveRpcHandle;                                                  //0x50
    VOID* ThreadLocalStoragePointer;                                        //0x58
    struct _PEB* ProcessEnvironmentBlock;                                   //0x60
    ULONG LastErrorValue;                                                   //0x68
    ULONG CountOfOwnedCriticalSections;                                     //0x6c
    VOID* CsrClientThread;                                                  //0x70
    VOID* Win32ThreadInfo;                                                  //0x78
    ULONG User32Reserved[26];                                               //0x80
    ULONG UserReserved[5];                                                  //0xe8
    VOID* WOW32Reserved;                                                    //0x100
    ULONG CurrentLocale;                                                    //0x108
    ULONG FpSoftwareStatusRegister;                                         //0x10c
    VOID* ReservedForDebuggerInstrumentation[16];                           //0x110
    VOID* SystemReserved1[30];                                              //0x190
    CHAR PlaceholderCompatibilityMode;                                      //0x280
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x281
    CHAR PlaceholderReserved[10];                                           //0x282
    ULONG ProxiedProcessId;                                                 //0x28c
    struct _ACTIVATION_CONTEXT_STACK _ActivationStack;                      //0x290
    UCHAR WorkingOnBehalfTicket[8];                                         //0x2b8
    LONG ExceptionCode;                                                     //0x2c0
    UCHAR Padding0[4];                                                      //0x2c4
    struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;        //0x2c8
    ULONGLONG InstrumentationCallbackSp;                                    //0x2d0
    ULONGLONG InstrumentationCallbackPreviousPc;                            //0x2d8
    ULONGLONG InstrumentationCallbackPreviousSp;                            //0x2e0
    ULONG TxFsContext;                                                      //0x2e8
    UCHAR InstrumentationCallbackDisabled;                                  //0x2ec
    UCHAR UnalignedLoadStoreExceptions;                                     //0x2ed
    UCHAR Padding1[2];                                                      //0x2ee
    struct _GDI_TEB_BATCH GdiTebBatch;                                      //0x2f0
    struct _CLIENT_ID RealClientId;                                         //0x7d8
    VOID* GdiCachedProcessHandle;                                           //0x7e8
    ULONG GdiClientPID;                                                     //0x7f0
    ULONG GdiClientTID;                                                     //0x7f4
    VOID* GdiThreadLocalInfo;                                               //0x7f8
    ULONGLONG Win32ClientInfo[62];                                          //0x800
    VOID* glDispatchTable[233];                                             //0x9f0
    ULONGLONG glReserved1[29];                                              //0x1138
    VOID* glReserved2;                                                      //0x1220
    VOID* glSectionInfo;                                                    //0x1228
    VOID* glSection;                                                        //0x1230
    VOID* glTable;                                                          //0x1238
    VOID* glCurrentRC;                                                      //0x1240
    VOID* glContext;                                                        //0x1248
    ULONG LastStatusValue;                                                  //0x1250
    UCHAR Padding2[4];                                                      //0x1254
    struct _UNICODE_STRING StaticUnicodeString;                             //0x1258
    WCHAR StaticUnicodeBuffer[261];                                         //0x1268
    UCHAR Padding3[6];                                                      //0x1472
    VOID* DeallocationStack;                                                //0x1478
    VOID* TlsSlots[64];                                                     //0x1480
    struct _LIST_ENTRY TlsLinks;                                            //0x1680
    VOID* Vdm;                                                              //0x1690
    VOID* ReservedForNtRpc;                                                 //0x1698
    VOID* DbgSsReserved[2];                                                 //0x16a0
    ULONG HardErrorMode;                                                    //0x16b0
    UCHAR Padding4[4];                                                      //0x16b4
    VOID* Instrumentation[11];                                              //0x16b8
    struct _GUID ActivityId;                                                //0x1710
    VOID* SubProcessTag;                                                    //0x1720
    VOID* PerflibData;                                                      //0x1728
    VOID* EtwTraceData;                                                     //0x1730
    VOID* WinSockData;                                                      //0x1738
    ULONG GdiBatchCount;                                                    //0x1740
    union
    {
        struct _PROCESSOR_NUMBER CurrentIdealProcessor;                     //0x1744
        ULONG IdealProcessorValue;                                          //0x1744
        struct
        {
            UCHAR ReservedPad0;                                             //0x1744
            UCHAR ReservedPad1;                                             //0x1745
            UCHAR ReservedPad2;                                             //0x1746
            UCHAR IdealProcessor;                                           //0x1747
        };
    };
    ULONG GuaranteedStackBytes;                                             //0x1748
    UCHAR Padding5[4];                                                      //0x174c
    VOID* ReservedForPerf;                                                  //0x1750
    VOID* ReservedForOle;                                                   //0x1758
    ULONG WaitingOnLoaderLock;                                              //0x1760
    UCHAR Padding6[4];                                                      //0x1764
    VOID* SavedPriorityState;                                               //0x1768
    ULONGLONG ReservedForCodeCoverage;                                      //0x1770
    VOID* ThreadPoolData;                                                   //0x1778
    VOID** TlsExpansionSlots;                                               //0x1780
    VOID* DeallocationBStore;                                               //0x1788
    VOID* BStoreLimit;                                                      //0x1790
    ULONG MuiGeneration;                                                    //0x1798
    ULONG IsImpersonating;                                                  //0x179c
    VOID* NlsCache;                                                         //0x17a0
    VOID* pShimData;                                                        //0x17a8
    ULONG HeapData;                                                         //0x17b0
    UCHAR Padding7[4];                                                      //0x17b4
    VOID* CurrentTransactionHandle;                                         //0x17b8
    struct _TEB_ACTIVE_FRAME* ActiveFrame;                                  //0x17c0
    VOID* FlsData;                                                          //0x17c8
    VOID* PreferredLanguages;                                               //0x17d0
    VOID* UserPrefLanguages;                                                //0x17d8
    VOID* MergedPrefLanguages;                                              //0x17e0
    ULONG MuiImpersonation;                                                 //0x17e8
    union
    {
        volatile USHORT CrossTebFlags;                                      //0x17ec
        USHORT SpareCrossTebBits:16;                                        //0x17ec
    };
    union
    {
        USHORT SameTebFlags;                                                //0x17ee
        struct
        {
            USHORT SafeThunkCall:1;                                         //0x17ee
            USHORT InDebugPrint:1;                                          //0x17ee
            USHORT HasFiberData:1;                                          //0x17ee
            USHORT SkipThreadAttach:1;                                      //0x17ee
            USHORT WerInShipAssertCode:1;                                   //0x17ee
            USHORT RanProcessInit:1;                                        //0x17ee
            USHORT ClonedThread:1;                                          //0x17ee
            USHORT SuppressDebugMsg:1;                                      //0x17ee
            USHORT DisableUserStackWalk:1;                                  //0x17ee
            USHORT RtlExceptionAttached:1;                                  //0x17ee
            USHORT InitialThread:1;                                         //0x17ee
            USHORT SessionAware:1;                                          //0x17ee
            USHORT LoadOwner:1;                                             //0x17ee
            USHORT LoaderWorker:1;                                          //0x17ee
            USHORT SkipLoaderInit:1;                                        //0x17ee
            USHORT SpareSameTebBits:1;                                      //0x17ee
        };
    };
    VOID* TxnScopeEnterCallback;                                            //0x17f0
    VOID* TxnScopeExitCallback;                                             //0x17f8
    VOID* TxnScopeContext;                                                  //0x1800
    ULONG LockCount;                                                        //0x1808
    LONG WowTebOffset;                                                      //0x180c
    VOID* ResourceRetValue;                                                 //0x1810
    VOID* ReservedForWdf;                                                   //0x1818
    ULONGLONG ReservedForCrt;                                               //0x1820
    struct _GUID EffectiveContainerId;                                      //0x1828
}; 

----------------------------------------
Structure: _TEB32

//0x1000 bytes (sizeof)
struct _TEB32
{
    struct _NT_TIB32 NtTib;                                                 //0x0
    ULONG EnvironmentPointer;                                               //0x1c
    struct _CLIENT_ID32 ClientId;                                           //0x20
    ULONG ActiveRpcHandle;                                                  //0x28
    ULONG ThreadLocalStoragePointer;                                        //0x2c
    ULONG ProcessEnvironmentBlock;                                          //0x30
    ULONG LastErrorValue;                                                   //0x34
    ULONG CountOfOwnedCriticalSections;                                     //0x38
    ULONG CsrClientThread;                                                  //0x3c
    ULONG Win32ThreadInfo;                                                  //0x40
    ULONG User32Reserved[26];                                               //0x44
    ULONG UserReserved[5];                                                  //0xac
    ULONG WOW32Reserved;                                                    //0xc0
    ULONG CurrentLocale;                                                    //0xc4
    ULONG FpSoftwareStatusRegister;                                         //0xc8
    ULONG ReservedForDebuggerInstrumentation[16];                           //0xcc
    ULONG SystemReserved1[26];                                              //0x10c
    CHAR PlaceholderCompatibilityMode;                                      //0x174
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x175
    CHAR PlaceholderReserved[10];                                           //0x176
    ULONG ProxiedProcessId;                                                 //0x180
    struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack;                    //0x184
    UCHAR WorkingOnBehalfTicket[8];                                         //0x19c
    LONG ExceptionCode;                                                     //0x1a4
    ULONG ActivationContextStackPointer;                                    //0x1a8
    ULONG InstrumentationCallbackSp;                                        //0x1ac
    ULONG InstrumentationCallbackPreviousPc;                                //0x1b0
    ULONG InstrumentationCallbackPreviousSp;                                //0x1b4
    UCHAR InstrumentationCallbackDisabled;                                  //0x1b8
    UCHAR SpareBytes[23];                                                   //0x1b9
    ULONG TxFsContext;                                                      //0x1d0
    struct _GDI_TEB_BATCH32 GdiTebBatch;                                    //0x1d4
    struct _CLIENT_ID32 RealClientId;                                       //0x6b4
    ULONG GdiCachedProcessHandle;                                           //0x6bc
    ULONG GdiClientPID;                                                     //0x6c0
    ULONG GdiClientTID;                                                     //0x6c4
    ULONG GdiThreadLocalInfo;                                               //0x6c8
    ULONG Win32ClientInfo[62];                                              //0x6cc
    ULONG glDispatchTable[233];                                             //0x7c4
    ULONG glReserved1[29];                                                  //0xb68
    ULONG glReserved2;                                                      //0xbdc
    ULONG glSectionInfo;                                                    //0xbe0
    ULONG glSection;                                                        //0xbe4
    ULONG glTable;                                                          //0xbe8
    ULONG glCurrentRC;                                                      //0xbec
    ULONG glContext;                                                        //0xbf0
    ULONG LastStatusValue;                                                  //0xbf4
    struct _STRING32 StaticUnicodeString;                                   //0xbf8
    WCHAR StaticUnicodeBuffer[261];                                         //0xc00
    ULONG DeallocationStack;                                                //0xe0c
    ULONG TlsSlots[64];                                                     //0xe10
    struct LIST_ENTRY32 TlsLinks;                                           //0xf10
    ULONG Vdm;                                                              //0xf18
    ULONG ReservedForNtRpc;                                                 //0xf1c
    ULONG DbgSsReserved[2];                                                 //0xf20
    ULONG HardErrorMode;                                                    //0xf28
    ULONG Instrumentation[9];                                               //0xf2c
    struct _GUID ActivityId;                                                //0xf50
    ULONG SubProcessTag;                                                    //0xf60
    ULONG PerflibData;                                                      //0xf64
    ULONG EtwTraceData;                                                     //0xf68
    ULONG WinSockData;                                                      //0xf6c
    ULONG GdiBatchCount;                                                    //0xf70
    union
    {
        struct _PROCESSOR_NUMBER CurrentIdealProcessor;                     //0xf74
        ULONG IdealProcessorValue;                                          //0xf74
        struct
        {
            UCHAR ReservedPad0;                                             //0xf74
            UCHAR ReservedPad1;                                             //0xf75
            UCHAR ReservedPad2;                                             //0xf76
            UCHAR IdealProcessor;                                           //0xf77
        };
    };
    ULONG GuaranteedStackBytes;                                             //0xf78
    ULONG ReservedForPerf;                                                  //0xf7c
    ULONG ReservedForOle;                                                   //0xf80
    ULONG WaitingOnLoaderLock;                                              //0xf84
    ULONG SavedPriorityState;                                               //0xf88
    ULONG ReservedForCodeCoverage;                                          //0xf8c
    ULONG ThreadPoolData;                                                   //0xf90
    ULONG TlsExpansionSlots;                                                //0xf94
    ULONG MuiGeneration;                                                    //0xf98
    ULONG IsImpersonating;                                                  //0xf9c
    ULONG NlsCache;                                                         //0xfa0
    ULONG pShimData;                                                        //0xfa4
    ULONG HeapData;                                                         //0xfa8
    ULONG CurrentTransactionHandle;                                         //0xfac
    ULONG ActiveFrame;                                                      //0xfb0
    ULONG FlsData;                                                          //0xfb4
    ULONG PreferredLanguages;                                               //0xfb8
    ULONG UserPrefLanguages;                                                //0xfbc
    ULONG MergedPrefLanguages;                                              //0xfc0
    ULONG MuiImpersonation;                                                 //0xfc4
    union
    {
        volatile USHORT CrossTebFlags;                                      //0xfc8
        USHORT SpareCrossTebBits:16;                                        //0xfc8
    };
    union
    {
        USHORT SameTebFlags;                                                //0xfca
        struct
        {
            USHORT SafeThunkCall:1;                                         //0xfca
            USHORT InDebugPrint:1;                                          //0xfca
            USHORT HasFiberData:1;                                          //0xfca
            USHORT SkipThreadAttach:1;                                      //0xfca
            USHORT WerInShipAssertCode:1;                                   //0xfca
            USHORT RanProcessInit:1;                                        //0xfca
            USHORT ClonedThread:1;                                          //0xfca
            USHORT SuppressDebugMsg:1;                                      //0xfca
            USHORT DisableUserStackWalk:1;                                  //0xfca
            USHORT RtlExceptionAttached:1;                                  //0xfca
            USHORT InitialThread:1;                                         //0xfca
            USHORT SessionAware:1;                                          //0xfca
            USHORT LoadOwner:1;                                             //0xfca
            USHORT LoaderWorker:1;                                          //0xfca
            USHORT SkipLoaderInit:1;                                        //0xfca
            USHORT SpareSameTebBits:1;                                      //0xfca
        };
    };
    ULONG TxnScopeEnterCallback;                                            //0xfcc
    ULONG TxnScopeExitCallback;                                             //0xfd0
    ULONG TxnScopeContext;                                                  //0xfd4
    ULONG LockCount;                                                        //0xfd8
    LONG WowTebOffset;                                                      //0xfdc
    ULONG ResourceRetValue;                                                 //0xfe0
    ULONG ReservedForWdf;                                                   //0xfe4
    ULONGLONG ReservedForCrt;                                               //0xfe8
    struct _GUID EffectiveContainerId;                                      //0xff0
}; 

----------------------------------------
Structure: _TEB64

//0x1838 bytes (sizeof)
struct _TEB64
{
    struct _NT_TIB64 NtTib;                                                 //0x0
    ULONGLONG EnvironmentPointer;                                           //0x38
    struct _CLIENT_ID64 ClientId;                                           //0x40
    ULONGLONG ActiveRpcHandle;                                              //0x50
    ULONGLONG ThreadLocalStoragePointer;                                    //0x58
    ULONGLONG ProcessEnvironmentBlock;                                      //0x60
    ULONG LastErrorValue;                                                   //0x68
    ULONG CountOfOwnedCriticalSections;                                     //0x6c
    ULONGLONG CsrClientThread;                                              //0x70
    ULONGLONG Win32ThreadInfo;                                              //0x78
    ULONG User32Reserved[26];                                               //0x80
    ULONG UserReserved[5];                                                  //0xe8
    ULONGLONG WOW32Reserved;                                                //0x100
    ULONG CurrentLocale;                                                    //0x108
    ULONG FpSoftwareStatusRegister;                                         //0x10c
    ULONGLONG ReservedForDebuggerInstrumentation[16];                       //0x110
    ULONGLONG SystemReserved1[30];                                          //0x190
    CHAR PlaceholderCompatibilityMode;                                      //0x280
    UCHAR PlaceholderHydrationAlwaysExplicit;                               //0x281
    CHAR PlaceholderReserved[10];                                           //0x282
    ULONG ProxiedProcessId;                                                 //0x28c
    struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack;                    //0x290
    UCHAR WorkingOnBehalfTicket[8];                                         //0x2b8
    LONG ExceptionCode;                                                     //0x2c0
    UCHAR Padding0[4];                                                      //0x2c4
    ULONGLONG ActivationContextStackPointer;                                //0x2c8
    ULONGLONG InstrumentationCallbackSp;                                    //0x2d0
    ULONGLONG InstrumentationCallbackPreviousPc;                            //0x2d8
    ULONGLONG InstrumentationCallbackPreviousSp;                            //0x2e0
    ULONG TxFsContext;                                                      //0x2e8
    UCHAR InstrumentationCallbackDisabled;                                  //0x2ec
    UCHAR UnalignedLoadStoreExceptions;                                     //0x2ed
    UCHAR Padding1[2];                                                      //0x2ee
    struct _GDI_TEB_BATCH64 GdiTebBatch;                                    //0x2f0
    struct _CLIENT_ID64 RealClientId;                                       //0x7d8
    ULONGLONG GdiCachedProcessHandle;                                       //0x7e8
    ULONG GdiClientPID;                                                     //0x7f0
    ULONG GdiClientTID;                                                     //0x7f4
    ULONGLONG GdiThreadLocalInfo;                                           //0x7f8
    ULONGLONG Win32ClientInfo[62];                                          //0x800
    ULONGLONG glDispatchTable[233];                                         //0x9f0
    ULONGLONG glReserved1[29];                                              //0x1138
    ULONGLONG glReserved2;                                                  //0x1220
    ULONGLONG glSectionInfo;                                                //0x1228
    ULONGLONG glSection;                                                    //0x1230
    ULONGLONG glTable;                                                      //0x1238
    ULONGLONG glCurrentRC;                                                  //0x1240
    ULONGLONG glContext;                                                    //0x1248
    ULONG LastStatusValue;                                                  //0x1250
    UCHAR Padding2[4];                                                      //0x1254
    struct _STRING64 StaticUnicodeString;                                   //0x1258
    WCHAR StaticUnicodeBuffer[261];                                         //0x1268
    UCHAR Padding3[6];                                                      //0x1472
    ULONGLONG DeallocationStack;                                            //0x1478
    ULONGLONG TlsSlots[64];                                                 //0x1480
    struct LIST_ENTRY64 TlsLinks;                                           //0x1680
    ULONGLONG Vdm;                                                          //0x1690
    ULONGLONG ReservedForNtRpc;                                             //0x1698
    ULONGLONG DbgSsReserved[2];                                             //0x16a0
    ULONG HardErrorMode;                                                    //0x16b0
    UCHAR Padding4[4];                                                      //0x16b4
    ULONGLONG Instrumentation[11];                                          //0x16b8
    struct _GUID ActivityId;                                                //0x1710
    ULONGLONG SubProcessTag;                                                //0x1720
    ULONGLONG PerflibData;                                                  //0x1728
    ULONGLONG EtwTraceData;                                                 //0x1730
    ULONGLONG WinSockData;                                                  //0x1738
    ULONG GdiBatchCount;                                                    //0x1740
    union
    {
        struct _PROCESSOR_NUMBER CurrentIdealProcessor;                     //0x1744
        ULONG IdealProcessorValue;                                          //0x1744
        struct
        {
            UCHAR ReservedPad0;                                             //0x1744
            UCHAR ReservedPad1;                                             //0x1745
            UCHAR ReservedPad2;                                             //0x1746
            UCHAR IdealProcessor;                                           //0x1747
        };
    };
    ULONG GuaranteedStackBytes;                                             //0x1748
    UCHAR Padding5[4];                                                      //0x174c
    ULONGLONG ReservedForPerf;                                              //0x1750
    ULONGLONG ReservedForOle;                                               //0x1758
    ULONG WaitingOnLoaderLock;                                              //0x1760
    UCHAR Padding6[4];                                                      //0x1764
    ULONGLONG SavedPriorityState;                                           //0x1768
    ULONGLONG ReservedForCodeCoverage;                                      //0x1770
    ULONGLONG ThreadPoolData;                                               //0x1778
    ULONGLONG TlsExpansionSlots;                                            //0x1780
    ULONGLONG DeallocationBStore;                                           //0x1788
    ULONGLONG BStoreLimit;                                                  //0x1790
    ULONG MuiGeneration;                                                    //0x1798
    ULONG IsImpersonating;                                                  //0x179c
    ULONGLONG NlsCache;                                                     //0x17a0
    ULONGLONG pShimData;                                                    //0x17a8
    ULONG HeapData;                                                         //0x17b0
    UCHAR Padding7[4];                                                      //0x17b4
    ULONGLONG CurrentTransactionHandle;                                     //0x17b8
    ULONGLONG ActiveFrame;                                                  //0x17c0
    ULONGLONG FlsData;                                                      //0x17c8
    ULONGLONG PreferredLanguages;                                           //0x17d0
    ULONGLONG UserPrefLanguages;                                            //0x17d8
    ULONGLONG MergedPrefLanguages;                                          //0x17e0
    ULONG MuiImpersonation;                                                 //0x17e8
    union
    {
        volatile USHORT CrossTebFlags;                                      //0x17ec
        USHORT SpareCrossTebBits:16;                                        //0x17ec
    };
    union
    {
        USHORT SameTebFlags;                                                //0x17ee
        struct
        {
            USHORT SafeThunkCall:1;                                         //0x17ee
            USHORT InDebugPrint:1;                                          //0x17ee
            USHORT HasFiberData:1;                                          //0x17ee
            USHORT SkipThreadAttach:1;                                      //0x17ee
            USHORT WerInShipAssertCode:1;                                   //0x17ee
            USHORT RanProcessInit:1;                                        //0x17ee
            USHORT ClonedThread:1;                                          //0x17ee
            USHORT SuppressDebugMsg:1;                                      //0x17ee
            USHORT DisableUserStackWalk:1;                                  //0x17ee
            USHORT RtlExceptionAttached:1;                                  //0x17ee
            USHORT InitialThread:1;                                         //0x17ee
            USHORT SessionAware:1;                                          //0x17ee
            USHORT LoadOwner:1;                                             //0x17ee
            USHORT LoaderWorker:1;                                          //0x17ee
            USHORT SkipLoaderInit:1;                                        //0x17ee
            USHORT SpareSameTebBits:1;                                      //0x17ee
        };
    };
    ULONGLONG TxnScopeEnterCallback;                                        //0x17f0
    ULONGLONG TxnScopeExitCallback;                                         //0x17f8
    ULONGLONG TxnScopeContext;                                              //0x1800
    ULONG LockCount;                                                        //0x1808
    LONG WowTebOffset;                                                      //0x180c
    ULONGLONG ResourceRetValue;                                             //0x1810
    ULONGLONG ReservedForWdf;                                               //0x1818
    ULONGLONG ReservedForCrt;                                               //0x1820
    struct _GUID EffectiveContainerId;                                      //0x1828
}; 

----------------------------------------
Structure: _TEB_ACTIVE_FRAME

//0x18 bytes (sizeof)
struct _TEB_ACTIVE_FRAME
{
    ULONG Flags;                                                            //0x0
    struct _TEB_ACTIVE_FRAME* Previous;                                     //0x8
    struct _TEB_ACTIVE_FRAME_CONTEXT* Context;                              //0x10
}; 

----------------------------------------
Structure: _TEB_ACTIVE_FRAME_CONTEXT

//0x10 bytes (sizeof)
struct _TEB_ACTIVE_FRAME_CONTEXT
{
    ULONG Flags;                                                            //0x0
    CHAR* FrameName;                                                        //0x8
}; 

----------------------------------------
Structure: _TERMINATION_PORT

//0x10 bytes (sizeof)
struct _TERMINATION_PORT
{
    struct _TERMINATION_PORT* Next;                                         //0x0
    VOID* Port;                                                             //0x8
}; 

----------------------------------------
Structure: _THERMAL_COOLING_INTERFACE

//0x38 bytes (sizeof)
struct _THERMAL_COOLING_INTERFACE
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    VOID* Context;                                                          //0x8
    VOID (*InterfaceReference)(VOID* arg1);                                 //0x10
    VOID (*InterfaceDereference)(VOID* arg1);                               //0x18
    ULONG Flags;                                                            //0x20
    VOID (*ActiveCooling)(VOID* arg1, UCHAR arg2);                          //0x28
    VOID (*PassiveCooling)(VOID* arg1, ULONG arg2);                         //0x30
}; 

----------------------------------------
Structure: _THERMAL_INFORMATION

//0x58 bytes (sizeof)
struct _THERMAL_INFORMATION
{
    ULONG ThermalStamp;                                                     //0x0
    ULONG ThermalConstant1;                                                 //0x4
    ULONG ThermalConstant2;                                                 //0x8
    ULONGLONG Processors;                                                   //0x10
    ULONG SamplingPeriod;                                                   //0x18
    ULONG CurrentTemperature;                                               //0x1c
    ULONG PassiveTripPoint;                                                 //0x20
    ULONG CriticalTripPoint;                                                //0x24
    UCHAR ActiveTripPointCount;                                             //0x28
    ULONG ActiveTripPoint[10];                                              //0x2c
}; 

----------------------------------------
Structure: _THERMAL_INFORMATION_EX

//0x5c bytes (sizeof)
struct _THERMAL_INFORMATION_EX
{
    ULONG ThermalStamp;                                                     //0x0
    ULONG ThermalConstant1;                                                 //0x4
    ULONG ThermalConstant2;                                                 //0x8
    ULONG SamplingPeriod;                                                   //0xc
    ULONG CurrentTemperature;                                               //0x10
    ULONG PassiveTripPoint;                                                 //0x14
    ULONG ThermalStandbyTripPoint;                                          //0x18
    ULONG CriticalTripPoint;                                                //0x1c
    UCHAR ActiveTripPointCount;                                             //0x20
    UCHAR PassiveCoolingDevicesPresent;                                     //0x21
    ULONG ActiveTripPoint[10];                                              //0x24
    ULONG S4TransitionTripPoint;                                            //0x4c
    ULONG MinimumThrottle;                                                  //0x50
    ULONG OverThrottleThreshold;                                            //0x54
    ULONG PollingPeriod;                                                    //0x58
}; 

----------------------------------------
Structure: _THERMAL_POLICY

//0x18 bytes (sizeof)
struct _THERMAL_POLICY
{
    ULONG Version;                                                          //0x0
    UCHAR WaitForUpdate;                                                    //0x4
    UCHAR Hibernate;                                                        //0x5
    UCHAR Critical;                                                         //0x6
    UCHAR ThermalStandby;                                                   //0x7
    ULONG ActivationReasons;                                                //0x8
    ULONG PassiveLimit;                                                     //0xc
    ULONG ActiveLevel;                                                      //0x10
    UCHAR OverThrottled;                                                    //0x14
}; 

----------------------------------------
Structure: _THERMAL_ZONE_COUNTERS

//0x10 bytes (sizeof)
struct _THERMAL_ZONE_COUNTERS
{
    ULONG Temperature;                                                      //0x0
    ULONG ThrottleLimit;                                                    //0x4
    ULONG ThrottleReasons;                                                  //0x8
    ULONG TemperatureHighPrecision;                                         //0xc
}; 

----------------------------------------
Structure: _THREAD_ENERGY_VALUES

//0xc8 bytes (sizeof)
struct _THREAD_ENERGY_VALUES
{
    ULONGLONG Cycles[4][2];                                                 //0x0
    ULONGLONG AttributedCycles[4][2];                                       //0x40
    ULONGLONG WorkOnBehalfCycles[4][2];                                     //0x80
    union _TIMELINE_BITMAP CpuTimeline;                                     //0xc0
}; 

----------------------------------------
Structure: _THREAD_PERFORMANCE_DATA

//0x1c0 bytes (sizeof)
struct _THREAD_PERFORMANCE_DATA
{
    USHORT Size;                                                            //0x0
    USHORT Version;                                                         //0x2
    struct _PROCESSOR_NUMBER ProcessorNumber;                               //0x4
    ULONG ContextSwitches;                                                  //0x8
    ULONG HwCountersCount;                                                  //0xc
    volatile ULONGLONG UpdateCount;                                         //0x10
    ULONGLONG WaitReasonBitMap;                                             //0x18
    ULONGLONG HardwareCounters;                                             //0x20
    struct _COUNTER_READING CycleTime;                                      //0x28
    struct _COUNTER_READING HwCounters[16];                                 //0x40
}; 

----------------------------------------
Structure: _TIMEZONE_CHANGE_EVENT

//0xa0 bytes (sizeof)
struct _TIMEZONE_CHANGE_EVENT
{
    struct _KDPC Dpc;                                                       //0x0
    struct _KTIMER Timer;                                                   //0x40
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x80
}; 

----------------------------------------
Structure: _TIME_FIELDS

//0x10 bytes (sizeof)
struct _TIME_FIELDS
{
    SHORT Year;                                                             //0x0
    SHORT Month;                                                            //0x2
    SHORT Day;                                                              //0x4
    SHORT Hour;                                                             //0x6
    SHORT Minute;                                                           //0x8
    SHORT Second;                                                           //0xa
    SHORT Milliseconds;                                                     //0xc
    SHORT Weekday;                                                          //0xe
}; 

----------------------------------------
Structure: _TOKEN

//0x498 bytes (sizeof)
struct _TOKEN
{
    struct _TOKEN_SOURCE TokenSource;                                       //0x0
    struct _LUID TokenId;                                                   //0x10
    struct _LUID AuthenticationId;                                          //0x18
    struct _LUID ParentTokenId;                                             //0x20
    union _LARGE_INTEGER ExpirationTime;                                    //0x28
    struct _ERESOURCE* TokenLock;                                           //0x30
    struct _LUID ModifiedId;                                                //0x38
    struct _SEP_TOKEN_PRIVILEGES Privileges;                                //0x40
    struct _SEP_AUDIT_POLICY AuditPolicy;                                   //0x58
    ULONG SessionId;                                                        //0x78
    ULONG UserAndGroupCount;                                                //0x7c
    ULONG RestrictedSidCount;                                               //0x80
    ULONG VariableLength;                                                   //0x84
    ULONG DynamicCharged;                                                   //0x88
    ULONG DynamicAvailable;                                                 //0x8c
    ULONG DefaultOwnerIndex;                                                //0x90
    struct _SID_AND_ATTRIBUTES* UserAndGroups;                              //0x98
    struct _SID_AND_ATTRIBUTES* RestrictedSids;                             //0xa0
    VOID* PrimaryGroup;                                                     //0xa8
    ULONG* DynamicPart;                                                     //0xb0
    struct _ACL* DefaultDacl;                                               //0xb8
    enum _TOKEN_TYPE TokenType;                                             //0xc0
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0xc4
    ULONG TokenFlags;                                                       //0xc8
    UCHAR TokenInUse;                                                       //0xcc
    ULONG IntegrityLevelIndex;                                              //0xd0
    ULONG MandatoryPolicy;                                                  //0xd4
    struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;                     //0xd8
    struct _LUID OriginatingLogonSession;                                   //0xe0
    struct _SID_AND_ATTRIBUTES_HASH SidHash;                                //0xe8
    struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;                      //0x1f8
    struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes; //0x308
    VOID* Package;                                                          //0x310
    struct _SID_AND_ATTRIBUTES* Capabilities;                               //0x318
    ULONG CapabilityCount;                                                  //0x320
    struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;                       //0x328
    struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;                     //0x438
    struct _SEP_CACHED_HANDLES_ENTRY* LowboxHandlesEntry;                   //0x440
    struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;       //0x448
    VOID* TrustLevelSid;                                                    //0x450
    struct _TOKEN* TrustLinkedToken;                                        //0x458
    VOID* IntegrityLevelSidValue;                                           //0x460
    struct _SEP_SID_VALUES_BLOCK* TokenSidValues;                           //0x468
    struct _SEP_LUID_TO_INDEX_MAP_ENTRY* IndexEntry;                        //0x470
    struct _SEP_TOKEN_DIAG_TRACK_ENTRY* DiagnosticInfo;                     //0x478
    struct _SEP_CACHED_HANDLES_ENTRY* BnoIsolationHandlesEntry;             //0x480
    VOID* SessionObject;                                                    //0x488
    ULONGLONG VariablePart;                                                 //0x490
}; 

----------------------------------------
Structure: _TOKEN_ACCESS_INFORMATION

//0x58 bytes (sizeof)
struct _TOKEN_ACCESS_INFORMATION
{
    struct _SID_AND_ATTRIBUTES_HASH* SidHash;                               //0x0
    struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;                     //0x8
    struct _TOKEN_PRIVILEGES* Privileges;                                   //0x10
    struct _LUID AuthenticationId;                                          //0x18
    enum _TOKEN_TYPE TokenType;                                             //0x20
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                  //0x24
    struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;                         //0x28
    ULONG Flags;                                                            //0x2c
    ULONG AppContainerNumber;                                               //0x30
    VOID* PackageSid;                                                       //0x38
    struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;                      //0x40
    VOID* TrustLevelSid;                                                    //0x48
    VOID* SecurityAttributes;                                               //0x50
}; 

----------------------------------------
Structure: _TOKEN_AUDIT_POLICY

//0x1e bytes (sizeof)
struct _TOKEN_AUDIT_POLICY
{
    UCHAR PerUserPolicy[30];                                                //0x0
}; 

----------------------------------------
Structure: _TOKEN_CONTROL

//0x28 bytes (sizeof)
struct _TOKEN_CONTROL
{
    struct _LUID TokenId;                                                   //0x0
    struct _LUID AuthenticationId;                                          //0x8
    struct _LUID ModifiedId;                                                //0x10
    struct _TOKEN_SOURCE TokenSource;                                       //0x18
}; 

----------------------------------------
Structure: _TOKEN_MANDATORY_POLICY

//0x4 bytes (sizeof)
struct _TOKEN_MANDATORY_POLICY
{
    ULONG Policy;                                                           //0x0
}; 

----------------------------------------
Structure: _TOKEN_PRIVILEGES

//0x10 bytes (sizeof)
struct _TOKEN_PRIVILEGES
{
    ULONG PrivilegeCount;                                                   //0x0
    struct _LUID_AND_ATTRIBUTES Privileges[1];                              //0x4
}; 

----------------------------------------
Structure: _TOKEN_SOURCE

//0x10 bytes (sizeof)
struct _TOKEN_SOURCE
{
    CHAR SourceName[8];                                                     //0x0
    struct _LUID SourceIdentifier;                                          //0x8
}; 

----------------------------------------
Structure: _TP_CALLBACK_ENVIRON_V3

//0x48 bytes (sizeof)
struct _TP_CALLBACK_ENVIRON_V3
{
    ULONG Version;                                                          //0x0
    struct _TP_POOL* Pool;                                                  //0x8
    struct _TP_CLEANUP_GROUP* CleanupGroup;                                 //0x10
    VOID (*CleanupGroupCancelCallback)(VOID* arg1, VOID* arg2);             //0x18
    VOID* RaceDll;                                                          //0x20
    struct _ACTIVATION_CONTEXT* ActivationContext;                          //0x28
    VOID (*FinalizationCallback)(struct _TP_CALLBACK_INSTANCE* arg1, VOID* arg2); //0x30
    union
    {
        ULONG Flags;                                                        //0x38
        struct
        {
            ULONG LongFunction:1;                                           //0x38
            ULONG Persistent:1;                                             //0x38
            ULONG Private:30;                                               //0x38
        } s;                                                                //0x38
    } u;                                                                    //0x38
    enum _TP_CALLBACK_PRIORITY CallbackPriority;                            //0x3c
    ULONG Size;                                                             //0x40
}; 

----------------------------------------
Structure: _TP_CALLBACK_INSTANCE

//0x0 bytes (sizeof)
struct _TP_CALLBACK_INSTANCE; 

----------------------------------------
Structure: _TP_CLEANUP_GROUP

//0x0 bytes (sizeof)
struct _TP_CLEANUP_GROUP; 

----------------------------------------
Structure: _TP_POOL

//0x0 bytes (sizeof)
struct _TP_POOL; 

----------------------------------------
Structure: _TRACE_ENABLE_INFO

//0x20 bytes (sizeof)
struct _TRACE_ENABLE_INFO
{
    ULONG IsEnabled;                                                        //0x0
    UCHAR Level;                                                            //0x4
    UCHAR Reserved1;                                                        //0x5
    USHORT LoggerId;                                                        //0x6
    ULONG EnableProperty;                                                   //0x8
    ULONG Reserved2;                                                        //0xc
    ULONGLONG MatchAnyKeyword;                                              //0x10
    ULONGLONG MatchAllKeyword;                                              //0x18
}; 

----------------------------------------
Structure: _TRACE_LOGFILE_HEADER

//0x118 bytes (sizeof)
struct _TRACE_LOGFILE_HEADER
{
    ULONG BufferSize;                                                       //0x0
    union
    {
        ULONG Version;                                                      //0x4
        struct
        {
            UCHAR MajorVersion;                                             //0x4
            UCHAR MinorVersion;                                             //0x5
            UCHAR SubVersion;                                               //0x6
            UCHAR SubMinorVersion;                                          //0x7
        } VersionDetail;                                                    //0x4
    };
    ULONG ProviderVersion;                                                  //0x8
    ULONG NumberOfProcessors;                                               //0xc
    union _LARGE_INTEGER EndTime;                                           //0x10
    ULONG TimerResolution;                                                  //0x18
    ULONG MaximumFileSize;                                                  //0x1c
    ULONG LogFileMode;                                                      //0x20
    ULONG BuffersWritten;                                                   //0x24
    union
    {
        struct _GUID LogInstanceGuid;                                       //0x28
        struct
        {
            ULONG StartBuffers;                                             //0x28
            ULONG PointerSize;                                              //0x2c
            ULONG EventsLost;                                               //0x30
            ULONG CpuSpeedInMHz;                                            //0x34
        };
    };
    WCHAR* LoggerName;                                                      //0x38
    WCHAR* LogFileName;                                                     //0x40
    struct _RTL_TIME_ZONE_INFORMATION TimeZone;                             //0x48
    union _LARGE_INTEGER BootTime;                                          //0xf8
    union _LARGE_INTEGER PerfFreq;                                          //0x100
    union _LARGE_INTEGER StartTime;                                         //0x108
    ULONG ReservedFlags;                                                    //0x110
    ULONG BuffersLost;                                                      //0x114
}; 

----------------------------------------
Structure: _TRIAGE_9F_PNP

//0x20 bytes (sizeof)
struct _TRIAGE_9F_PNP
{
    USHORT Signature;                                                       //0x0
    USHORT Revision;                                                        //0x2
    struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE* CompletionQueue;            //0x8
    struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;                         //0x10
    struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;                       //0x18
}; 

----------------------------------------
Structure: _TRIAGE_9F_POWER

//0x28 bytes (sizeof)
struct _TRIAGE_9F_POWER
{
    USHORT Signature;                                                       //0x0
    USHORT Revision;                                                        //0x2
    struct _LIST_ENTRY* IrpList;                                            //0x8
    struct _LIST_ENTRY* ThreadList;                                         //0x10
    struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;                         //0x18
    struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;                       //0x20
}; 

----------------------------------------
Structure: _TRIAGE_DEVICE_NODE

//0x58 bytes (sizeof)
struct _TRIAGE_DEVICE_NODE
{
    struct _TRIAGE_DEVICE_NODE* Sibling;                                    //0x0
    struct _TRIAGE_DEVICE_NODE* Child;                                      //0x8
    struct _TRIAGE_DEVICE_NODE* Parent;                                     //0x10
    struct _TRIAGE_DEVICE_NODE* LastChild;                                  //0x18
    struct _DEVICE_OBJECT* PhysicalDeviceObject;                            //0x20
    struct _UNICODE_STRING InstancePath;                                    //0x28
    struct _UNICODE_STRING ServiceName;                                     //0x38
    struct _IRP* PendingIrp;                                                //0x48
    struct _TRIAGE_POP_FX_DEVICE* FxDevice;                                 //0x50
}; 

----------------------------------------
Structure: _TRIAGE_EX_WORK_QUEUE

//0x2b0 bytes (sizeof)
struct _TRIAGE_EX_WORK_QUEUE
{
    struct _KPRIQUEUE WorkPriQueue;                                         //0x0
}; 

----------------------------------------
Structure: _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE

//0x10 bytes (sizeof)
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
    struct _LIST_ENTRY DispatchedList;                                      //0x0
}; 

----------------------------------------
Structure: _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST

//0x18 bytes (sizeof)
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _TRIAGE_DEVICE_NODE* DeviceNode;                                 //0x10
}; 

----------------------------------------
Structure: _TRIAGE_POP_FX_DEVICE

//0x38 bytes (sizeof)
struct _TRIAGE_POP_FX_DEVICE
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _IRP* Irp;                                                       //0x10
    struct _TRIAGE_POP_IRP_DATA* IrpData;                                   //0x18
    LONG Status;                                                            //0x20
    LONG PowerReqCall;                                                      //0x24
    LONG PowerNotReqCall;                                                   //0x28
    struct _TRIAGE_DEVICE_NODE* DeviceNode;                                 //0x30
}; 

----------------------------------------
Structure: _TRIAGE_POP_IRP_DATA

//0x20 bytes (sizeof)
struct _TRIAGE_POP_IRP_DATA
{
    struct _LIST_ENTRY Link;                                                //0x0
    struct _IRP* Irp;                                                       //0x10
    struct _DEVICE_OBJECT* Pdo;                                             //0x18
}; 

----------------------------------------
Structure: _TRUSTLET_COLLABORATION_ID

//0x10 bytes (sizeof)
struct _TRUSTLET_COLLABORATION_ID
{
    ULONGLONG Value[2];                                                     //0x0
}; 

----------------------------------------
Structure: _TRUSTLET_MAILBOX_KEY

//0x10 bytes (sizeof)
struct _TRUSTLET_MAILBOX_KEY
{
    ULONGLONG SecretValue[2];                                               //0x0
}; 

----------------------------------------
Structure: _TXN_PARAMETER_BLOCK

//0x10 bytes (sizeof)
struct _TXN_PARAMETER_BLOCK
{
    USHORT Length;                                                          //0x0
    USHORT TxFsContext;                                                     //0x2
    VOID* TransactionObject;                                                //0x8
}; 

----------------------------------------
Structure: _TraceLoggingMetadata_t

//0x10 bytes (sizeof)
struct _TraceLoggingMetadata_t
{
    ULONG Signature;                                                        //0x0
    USHORT Size;                                                            //0x4
    UCHAR Version;                                                          //0x6
    UCHAR Flags;                                                            //0x7
    ULONGLONG Magic;                                                        //0x8
}; 

----------------------------------------
Structure: _UMS_CONTROL_BLOCK

//0x88 bytes (sizeof)
struct _UMS_CONTROL_BLOCK
{
    struct _RTL_UMS_CONTEXT* UmsContext;                                    //0x0
    struct _SINGLE_LIST_ENTRY* CompletionListEntry;                         //0x8
    struct _KEVENT* CompletionListEvent;                                    //0x10
    ULONG ServiceSequenceNumber;                                            //0x18
    union
    {
        struct
        {
            struct _KQUEUE UmsQueue;                                        //0x20
            struct _LIST_ENTRY QueueEntry;                                  //0x60
            struct _RTL_UMS_CONTEXT* YieldingUmsContext;                    //0x70
            VOID* YieldingParam;                                            //0x78
            VOID* UmsTeb;                                                   //0x80
        };
        struct
        {
            struct _KQUEUE* UmsAssociatedQueue;                             //0x20
            struct _LIST_ENTRY* UmsQueueListEntry;                          //0x28
            struct _KEVENT UmsWaitEvent;                                    //0x30
            VOID* StagingArea;                                              //0x48
            union
            {
                struct
                {
                    ULONG UmsPrimaryDeliveredContext:1;                     //0x50
                    ULONG UmsAssociatedQueueUsed:1;                         //0x50
                    ULONG UmsThreadParked:1;                                //0x50
                };
                ULONG UmsFlags;                                             //0x50
            };
        };
    };
}; 

----------------------------------------
Structure: _UNEXPECTED_INTERRUPT

//0x8 bytes (sizeof)
struct _UNEXPECTED_INTERRUPT
{
    UCHAR PushImm;                                                          //0x0
    UCHAR Vector;                                                           //0x1
    UCHAR PushRbp;                                                          //0x2
    UCHAR JmpOp;                                                            //0x3
    LONG JmpOffset;                                                         //0x4
}; 

----------------------------------------
Structure: _UNICODE_STRING

//0x10 bytes (sizeof)
struct _UNICODE_STRING
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    WCHAR* Buffer;                                                          //0x8
}; 

----------------------------------------
Structure: _VACB

//0x28 bytes (sizeof)
struct _VACB
{
    VOID* BaseAddress;                                                      //0x0
    struct _SHARED_CACHE_MAP* SharedCacheMap;                               //0x8
    union
    {
        union _LARGE_INTEGER FileOffset;                                    //0x10
        USHORT ActiveCount;                                                 //0x10
        struct _LIST_ENTRY Links;                                           //0x10
    } Overlay;                                                              //0x10
    struct _VACB_ARRAY_HEADER* ArrayHead;                                   //0x20
}; 

----------------------------------------
Structure: _VACB_ARRAY_HEADER

//0x10 bytes (sizeof)
struct _VACB_ARRAY_HEADER
{
    ULONG VacbArrayIndex;                                                   //0x0
    ULONG MappingCount;                                                     //0x4
    ULONG HighestMappedIndex;                                               //0x8
    ULONG Reserved;                                                         //0xc
}; 

----------------------------------------
Structure: _VACB_LEVEL_REFERENCE

//0x8 bytes (sizeof)
struct _VACB_LEVEL_REFERENCE
{
    LONG Reference;                                                         //0x0
    LONG SpecialReference;                                                  //0x4
}; 

----------------------------------------
Structure: _VERIFIER_SHARED_EXPORT_THUNK

//0x0 bytes (sizeof)
struct _VERIFIER_SHARED_EXPORT_THUNK; 

----------------------------------------
Structure: _VF_ADDRESS_RANGE

//0x10 bytes (sizeof)
struct _VF_ADDRESS_RANGE
{
    UCHAR* Start;                                                           //0x0
    UCHAR* End;                                                             //0x8
}; 

----------------------------------------
Structure: _VF_AVL_TABLE

//0xc0 bytes (sizeof)
struct _VF_AVL_TABLE
{
    struct _RTL_AVL_TABLE RtlTable;                                         //0x0
    struct _VF_AVL_TREE_NODE* ReservedNode;                                 //0x68
    VOID* NodeToFree;                                                       //0x70
    volatile LONG Lock;                                                     //0x80
}; 

----------------------------------------
Structure: _VF_AVL_TREE

//0x28 bytes (sizeof)
struct _VF_AVL_TREE
{
    ULONGLONG NodeRangeSize;                                                //0x0
    volatile ULONGLONG NodeCount;                                           //0x8
    struct _VF_AVL_TABLE* Tables;                                           //0x10
    ULONG TablesNo;                                                         //0x18
    UCHAR UseSessionId;                                                     //0x1c
    union
    {
        ULONG NodeSize;                                                     //0x20
        ULONG UseLookaside;                                                 //0x20
    } u1;                                                                   //0x20
}; 

----------------------------------------
Structure: _VF_AVL_TREE_NODE

//0x10 bytes (sizeof)
struct _VF_AVL_TREE_NODE
{
    VOID* p;                                                                //0x0
    ULONGLONG RangeSize;                                                    //0x8
}; 

----------------------------------------
Structure: _VF_AVL_TREE_NODE_EX

//0x18 bytes (sizeof)
struct _VF_AVL_TREE_NODE_EX
{
    struct _VF_AVL_TREE_NODE Base;                                          //0x0
    ULONG SessionId;                                                        //0x10
}; 

----------------------------------------
Structure: _VF_DRIVER_IO_CALLBACKS

//0x100 bytes (sizeof)
struct _VF_DRIVER_IO_CALLBACKS
{
    LONG (*DriverInit)(struct _DRIVER_OBJECT* arg1, struct _UNICODE_STRING* arg2); //0x0
    VOID (*DriverStartIo)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2);  //0x8
    VOID (*DriverUnload)(struct _DRIVER_OBJECT* arg1);                      //0x10
    LONG (*AddDevice)(struct _DRIVER_OBJECT* arg1, struct _DEVICE_OBJECT* arg2); //0x18
    LONG (*MajorFunction[28])(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2); //0x20
}; 

----------------------------------------
Structure: _VF_KE_CRITICAL_REGION_TRACE

//0x40 bytes (sizeof)
struct _VF_KE_CRITICAL_REGION_TRACE
{
    struct _ETHREAD* Thread;                                                //0x0
    VOID* StackTrace[7];                                                    //0x8
}; 

----------------------------------------
Structure: _VF_POOL_TRACE

//0x80 bytes (sizeof)
struct _VF_POOL_TRACE
{
    VOID* Address;                                                          //0x0
    ULONGLONG Size;                                                         //0x8
    struct _ETHREAD* Thread;                                                //0x10
    VOID* StackTrace[13];                                                   //0x18
}; 

----------------------------------------
Structure: _VF_SUSPECT_DRIVER_ENTRY

//0x28 bytes (sizeof)
struct _VF_SUSPECT_DRIVER_ENTRY
{
    struct _LIST_ENTRY Links;                                               //0x0
    ULONG Loads;                                                            //0x10
    ULONG Unloads;                                                          //0x14
    struct _UNICODE_STRING BaseName;                                        //0x18
}; 

----------------------------------------
Structure: _VF_TARGET_ALL_SHARED_EXPORT_THUNKS

//0x20 bytes (sizeof)
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
    struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;               //0x0
    struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;           //0x8
    struct _VERIFIER_SHARED_EXPORT_THUNK* OrderDependentSharedExportThunks; //0x10
    struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;            //0x18
}; 

----------------------------------------
Structure: _VF_TARGET_DRIVER

//0x40 bytes (sizeof)
struct _VF_TARGET_DRIVER
{
    struct _VF_AVL_TREE_NODE_EX TreeNode;                                   //0x0
    union
    {
        struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;   //0x18
        struct
        {
            ULONG SnapSharedExportsFailed:1;                                //0x18
            ULONG Spare:31;                                                 //0x18
        } Flags;                                                            //0x18
    } u1;                                                                   //0x18
    struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;                   //0x38
}; 

----------------------------------------
Structure: _VF_TARGET_VERIFIED_DRIVER_DATA

//0x130 bytes (sizeof)
struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
    struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;                    //0x0
    VOID* WMICallback;                                                      //0x8
    struct _LIST_ENTRY EtwHandlesListHead;                                  //0x10
    union
    {
        struct
        {
            ULONG MissedEtwRegistration:1;                                  //0x20
            ULONG IsBootDriver:1;                                           //0x20
            ULONG Spare:30;                                                 //0x20
        } Flags;                                                            //0x20
        ULONG Whole;                                                        //0x20
    } u1;                                                                   //0x20
    ULONGLONG Signature;                                                    //0x28
    UCHAR SeSigningLevel;                                                   //0x30
    union _SLIST_HEADER PoolPageHeaders;                                    //0x40
    union _SLIST_HEADER PoolTrackers;                                       //0x50
    VOID** DifPluginData;                                                   //0x60
    volatile ULONG CurrentPagedPoolAllocations;                             //0x68
    volatile ULONG CurrentNonPagedPoolAllocations;                          //0x6c
    ULONG PeakPagedPoolAllocations;                                         //0x70
    ULONG PeakNonPagedPoolAllocations;                                      //0x74
    volatile ULONGLONG PagedBytes;                                          //0x78
    volatile ULONGLONG NonPagedBytes;                                       //0x80
    ULONGLONG PeakPagedBytes;                                               //0x88
    ULONGLONG PeakNonPagedBytes;                                            //0x90
    ULONG RaiseIrqls;                                                       //0x98
    ULONG AcquireSpinLocks;                                                 //0x9c
    ULONG SynchronizeExecutions;                                            //0xa0
    ULONG AllocationsWithNoTag;                                             //0xa4
    ULONG AllocationsFailed;                                                //0xa8
    ULONG AllocationsFailedDeliberately;                                    //0xac
    ULONGLONG LockedBytes;                                                  //0xb0
    ULONGLONG PeakLockedBytes;                                              //0xb8
    ULONGLONG MappedLockedBytes;                                            //0xc0
    ULONGLONG PeakMappedLockedBytes;                                        //0xc8
    ULONGLONG MappedIoSpaceBytes;                                           //0xd0
    ULONGLONG PeakMappedIoSpaceBytes;                                       //0xd8
    ULONGLONG PagesForMdlBytes;                                             //0xe0
    ULONGLONG PeakPagesForMdlBytes;                                         //0xe8
    ULONGLONG ContiguousMemoryBytes;                                        //0xf0
    ULONGLONG PeakContiguousMemoryBytes;                                    //0xf8
    struct _LIST_ENTRY ContiguousMemoryListHead;                            //0x100
    volatile ULONG ExecutePoolTypes;                                        //0x110
    volatile ULONG ExecutePageProtections;                                  //0x114
    volatile ULONG ExecutePageMappings;                                     //0x118
    volatile ULONG ExecuteWriteSections;                                    //0x11c
    volatile ULONG SectionAlignmentFailures;                                //0x120
    volatile ULONG IATInExecutableSection;                                  //0x124
}; 

----------------------------------------
Structure: _VF_TRACKER

//0x10 bytes (sizeof)
struct _VF_TRACKER
{
    ULONG TrackerFlags;                                                     //0x0
    ULONG TrackerSize;                                                      //0x4
    ULONG TrackerIndex;                                                     //0x8
    ULONG TraceDepth;                                                       //0xc
}; 

----------------------------------------
Structure: _VF_TRACKER_STAMP

//0x10 bytes (sizeof)
struct _VF_TRACKER_STAMP
{
    VOID* Thread;                                                           //0x0
    UCHAR Flags:8;                                                          //0x8
    UCHAR OldIrql:8;                                                        //0x9
    UCHAR NewIrql:8;                                                        //0xa
    UCHAR Processor:8;                                                      //0xb
}; 

----------------------------------------
Structure: _VF_WATCHDOG_IRP

//0x20 bytes (sizeof)
struct _VF_WATCHDOG_IRP
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    struct _IRP* Irp;                                                       //0x10
    ULONG DueTickCount;                                                     //0x18
    volatile UCHAR Inserted;                                                //0x1c
    CHAR TrackedStackLocation;                                              //0x1d
    USHORT CancelTimeoutTicks;                                              //0x1e
}; 

----------------------------------------
Structure: _VIRTUAL_EFI_RUNTIME_SERVICES

//0x70 bytes (sizeof)
struct _VIRTUAL_EFI_RUNTIME_SERVICES
{
    ULONGLONG GetTime;                                                      //0x0
    ULONGLONG SetTime;                                                      //0x8
    ULONGLONG GetWakeupTime;                                                //0x10
    ULONGLONG SetWakeupTime;                                                //0x18
    ULONGLONG SetVirtualAddressMap;                                         //0x20
    ULONGLONG ConvertPointer;                                               //0x28
    ULONGLONG GetVariable;                                                  //0x30
    ULONGLONG GetNextVariableName;                                          //0x38
    ULONGLONG SetVariable;                                                  //0x40
    ULONGLONG GetNextHighMonotonicCount;                                    //0x48
    ULONGLONG ResetSystem;                                                  //0x50
    ULONGLONG UpdateCapsule;                                                //0x58
    ULONGLONG QueryCapsuleCapabilities;                                     //0x60
    ULONGLONG QueryVariableInfo;                                            //0x68
}; 

----------------------------------------
Structure: _VI_DEADLOCK_GLOBALS

//0x8180 bytes (sizeof)
struct _VI_DEADLOCK_GLOBALS
{
    LONGLONG TimeAcquire;                                                   //0x0
    LONGLONG TimeRelease;                                                   //0x8
    struct _LIST_ENTRY* ResourceDatabase;                                   //0x10
    ULONGLONG ResourceDatabaseCount;                                        //0x18
    struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];                    //0x20
    struct _LIST_ENTRY* ThreadDatabase;                                     //0x4010
    ULONGLONG ThreadDatabaseCount;                                          //0x4018
    struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];                      //0x4020
    volatile ULONG AllocationFailures;                                      //0x8010
    ULONG NodesTrimmedBasedOnAge;                                           //0x8014
    ULONG NodesTrimmedBasedOnCount;                                         //0x8018
    ULONG NodesSearched;                                                    //0x801c
    ULONG MaxNodesSearched;                                                 //0x8020
    ULONG SequenceNumber;                                                   //0x8024
    ULONG RecursionDepthLimit;                                              //0x8028
    ULONG SearchedNodesLimit;                                               //0x802c
    ULONG DepthLimitHits;                                                   //0x8030
    ULONG SearchLimitHits;                                                  //0x8034
    ULONG StackLimitHits;                                                   //0x8038
    ULONG ABC_ACB_Skipped;                                                  //0x803c
    ULONG OutOfOrderReleases;                                               //0x8040
    ULONG NodesReleasedOutOfOrder;                                          //0x8044
    ULONG TotalReleases;                                                    //0x8048
    ULONG RootNodesDeleted;                                                 //0x804c
    ULONG ForgetHistoryCounter;                                             //0x8050
    VOID* Instigator;                                                       //0x8058
    ULONG NumberOfParticipants;                                             //0x8060
    struct _VI_DEADLOCK_NODE* Participant[32];                              //0x8068
    LONG ChildrenCountWatermark;                                            //0x8168
    enum _KERNEL_STACK_LIMITS StackType;                                    //0x816c
    ULONGLONG StackLowLimit;                                                //0x8170
    ULONGLONG StackHighLimit;                                               //0x8178
}; 

----------------------------------------
Structure: _VI_DEADLOCK_NODE

//0xd0 bytes (sizeof)
struct _VI_DEADLOCK_NODE
{
    struct _VI_DEADLOCK_NODE* Parent;                                       //0x0
    struct _LIST_ENTRY ChildrenList;                                        //0x8
    struct _LIST_ENTRY SiblingsList;                                        //0x18
    union
    {
        struct _LIST_ENTRY ResourceList;                                    //0x28
        struct _LIST_ENTRY FreeListEntry;                                   //0x28
    };
    struct _VI_DEADLOCK_RESOURCE* Root;                                     //0x38
    struct _VI_DEADLOCK_THREAD* ThreadEntry;                                //0x40
    union
    {
        ULONG Active:1;                                                     //0x48
        ULONG OnlyTryAcquireUsed:1;                                         //0x48
        ULONG ReleasedOutOfOrder:1;                                         //0x48
        ULONG SequenceNumber:29;                                            //0x48
        ULONG Whole;                                                        //0x48
    } u1;                                                                   //0x48
    LONG ChildrenCount;                                                     //0x4c
    VOID* StackTrace[8];                                                    //0x50
    VOID* ParentStackTrace[8];                                              //0x90
}; 

----------------------------------------
Structure: _VI_DEADLOCK_RESOURCE

//0xf8 bytes (sizeof)
struct _VI_DEADLOCK_RESOURCE
{
    enum _VI_DEADLOCK_RESOURCE_TYPE Type;                                   //0x0
    ULONG NodeCount:16;                                                     //0x4
    ULONG RecursionCount:16;                                                //0x4
    VOID* ResourceAddress;                                                  //0x8
    struct _VI_DEADLOCK_THREAD* ThreadOwner;                                //0x10
    struct _LIST_ENTRY ResourceList;                                        //0x18
    union
    {
        struct _LIST_ENTRY HashChainList;                                   //0x28
        struct _LIST_ENTRY FreeListEntry;                                   //0x28
    };
    VOID* StackTrace[8];                                                    //0x38
    VOID* LastAcquireTrace[8];                                              //0x78
    VOID* LastReleaseTrace[8];                                              //0xb8
}; 

----------------------------------------
Structure: _VI_DEADLOCK_THREAD

//0x38 bytes (sizeof)
struct _VI_DEADLOCK_THREAD
{
    struct _KTHREAD* Thread;                                                //0x0
    struct _VI_DEADLOCK_NODE* CurrentSpinNode;                              //0x8
    struct _VI_DEADLOCK_NODE* CurrentOtherNode;                             //0x10
    union
    {
        struct _LIST_ENTRY ListEntry;                                       //0x18
        struct _LIST_ENTRY FreeListEntry;                                   //0x18
    };
    ULONG NodeCount;                                                        //0x28
    volatile ULONG PagingCount;                                             //0x2c
    UCHAR ThreadUsesEresources;                                             //0x30
}; 

----------------------------------------
Structure: _VI_FAULT_TRACE

//0x48 bytes (sizeof)
struct _VI_FAULT_TRACE
{
    struct _ETHREAD* Thread;                                                //0x0
    VOID* StackTrace[8];                                                    //0x8
}; 

----------------------------------------
Structure: _VI_POOL_ENTRY

//0x20 bytes (sizeof)
struct _VI_POOL_ENTRY
{
    union
    {
        struct _VI_POOL_PAGE_HEADER PageHeader;                             //0x0
        struct _VI_POOL_ENTRY_INUSE InUse;                                  //0x0
        struct _SLIST_ENTRY* NextFree;                                      //0x0
    };
}; 

----------------------------------------
Structure: _VI_POOL_ENTRY_INUSE

//0x20 bytes (sizeof)
struct _VI_POOL_ENTRY_INUSE
{
    VOID* VirtualAddress;                                                   //0x0
    VOID* CallingAddress;                                                   //0x8
    ULONGLONG NumberOfBytes;                                                //0x10
    ULONGLONG Tag;                                                          //0x18
}; 

----------------------------------------
Structure: _VI_POOL_PAGE_HEADER

//0x18 bytes (sizeof)
struct _VI_POOL_PAGE_HEADER
{
    struct _SLIST_ENTRY* NextPage;                                          //0x0
    VOID* VerifierEntry;                                                    //0x8
    ULONGLONG Signature;                                                    //0x10
}; 

----------------------------------------
Structure: _VI_TRACK_IRQL

//0x38 bytes (sizeof)
struct _VI_TRACK_IRQL
{
    VOID* Thread;                                                           //0x0
    UCHAR OldIrql;                                                          //0x8
    UCHAR NewIrql;                                                          //0x9
    USHORT Processor;                                                       //0xa
    ULONG TickCount;                                                        //0xc
    VOID* StackTrace[5];                                                    //0x10
}; 

----------------------------------------
Structure: _VI_VERIFIER_ISSUE

//0x20 bytes (sizeof)
struct _VI_VERIFIER_ISSUE
{
    ULONGLONG IssueType;                                                    //0x0
    VOID* Address;                                                          //0x8
    ULONGLONG Parameters[2];                                                //0x10
}; 

----------------------------------------
Structure: _VI_VERIFIER_POOL_HEADER

//0x8 bytes (sizeof)
struct _VI_VERIFIER_POOL_HEADER
{
    struct _VI_POOL_ENTRY* VerifierPoolEntry;                               //0x0
}; 

----------------------------------------
Structure: _VOLUME_CACHE_MAP

//0xd0 bytes (sizeof)
struct _VOLUME_CACHE_MAP
{
    SHORT NodeTypeCode;                                                     //0x0
    SHORT NodeByteCode;                                                     //0x2
    ULONG UseCount;                                                         //0x4
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    struct _LIST_ENTRY VolumeCacheMapLinks;                                 //0x10
    ULONGLONG DirtyPages;                                                   //0x20
    struct _LOG_HANDLE_CONTEXT LogHandleContext;                            //0x28
    ULONG Flags;                                                            //0xc0
    ULONG PagesQueuedToDisk;                                                //0xc4
    ULONG LoggedPagesQueuedToDisk;                                          //0xc8
}; 

----------------------------------------
Structure: _VPB

//0x60 bytes (sizeof)
struct _VPB
{
    SHORT Type;                                                             //0x0
    SHORT Size;                                                             //0x2
    USHORT Flags;                                                           //0x4
    USHORT VolumeLabelLength;                                               //0x6
    struct _DEVICE_OBJECT* DeviceObject;                                    //0x8
    struct _DEVICE_OBJECT* RealDevice;                                      //0x10
    ULONG SerialNumber;                                                     //0x18
    ULONG ReferenceCount;                                                   //0x1c
    WCHAR VolumeLabel[32];                                                  //0x20
}; 

----------------------------------------
Structure: _VSM_PERFORMANCE_DATA

//0x40 bytes (sizeof)
struct _VSM_PERFORMANCE_DATA
{
    ULONGLONG LaunchVsmMark[8];                                             //0x0
}; 

----------------------------------------
Structure: _WAITING_IRP

//0x40 bytes (sizeof)
struct _WAITING_IRP
{
    struct _LIST_ENTRY Links;                                               //0x0
    struct _IRP* Irp;                                                       //0x10
    VOID (*CompletionRoutine)(VOID* arg1, struct _IRP* arg2);               //0x18
    VOID* Context;                                                          //0x20
    struct _KEVENT* Event;                                                  //0x28
    ULONG Information;                                                      //0x30
    UCHAR BreakAllRH;                                                       //0x34
    UCHAR OplockBreakNotify;                                                //0x35
    struct _FILE_OBJECT* FileObject;                                        //0x38
}; 

----------------------------------------
Structure: _WAIT_CONTEXT_BLOCK

//0x48 bytes (sizeof)
struct _WAIT_CONTEXT_BLOCK
{
    union
    {
        struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;                         //0x0
        struct
        {
            struct _LIST_ENTRY DmaWaitEntry;                                //0x0
            ULONG NumberOfChannels;                                         //0x10
            ULONG SyncCallback:1;                                           //0x14
            ULONG DmaContext:1;                                             //0x14
            ULONG ZeroMapRegisters:1;                                       //0x14
            ULONG Reserved:9;                                               //0x14
            ULONG NumberOfRemapPages:20;                                    //0x14
        };
    };
    enum _IO_ALLOCATION_ACTION (*DeviceRoutine)(struct _DEVICE_OBJECT* arg1, struct _IRP* arg2, VOID* arg3, VOID* arg4); //0x18
    VOID* DeviceContext;                                                    //0x20
    ULONG NumberOfMapRegisters;                                             //0x28
    VOID* DeviceObject;                                                     //0x30
    VOID* CurrentIrp;                                                       //0x38
    struct _KDPC* BufferChainingDpc;                                        //0x40
}; 

----------------------------------------
Structure: _WDT_HANDLE

//0x1 bytes (sizeof)
struct _WDT_HANDLE
{
    CHAR Reserved;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEAP_ERROR_RECORD_WRAPPER

//0xf0 bytes (sizeof)
struct _WHEAP_ERROR_RECORD_WRAPPER
{
    struct _LIST_ENTRY WorkEntry;                                           //0x0
    ULONG Length;                                                           //0x10
    ULONG ProcessorNumber;                                                  //0x14
    union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;                          //0x18
    volatile LONG InUse;                                                    //0x1c
    struct _WHEAP_ERROR_SOURCE* ErrorSource;                                //0x20
    struct _WHEA_ERROR_RECORD ErrorRecord;                                  //0x28
}; 

----------------------------------------
Structure: _WHEAP_ERROR_SOURCE

//0x430 bytes (sizeof)
struct _WHEAP_ERROR_SOURCE
{
    struct _LIST_ENTRY ListEntry;                                           //0x0
    ULONG FailedAllocations;                                                //0x10
    ULONG PlatformErrorSourceId;                                            //0x14
    LONG ErrorCount;                                                        //0x18
    ULONG RecordCount;                                                      //0x1c
    ULONG RecordLength;                                                     //0x20
    ULONG PoolTag;                                                          //0x24
    enum _WHEA_ERROR_SOURCE_TYPE Type;                                      //0x28
    struct _WHEAP_ERROR_RECORD_WRAPPER* Records;                            //0x30
    VOID* Context;                                                          //0x38
    ULONG SectionCount;                                                     //0x40
    ULONG SectionLength;                                                    //0x44
    union _LARGE_INTEGER TickCountAtLastError;                              //0x48
    ULONG AccumulatedErrors;                                                //0x50
    ULONG TotalErrors;                                                      //0x54
    UCHAR Deferred;                                                         //0x58
    volatile LONG Busy;                                                     //0x5c
    struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;                        //0x60
}; 

----------------------------------------
Structure: _WHEAP_ERROR_SOURCE_TABLE

//0x38 bytes (sizeof)
struct _WHEAP_ERROR_SOURCE_TABLE
{
    ULONG Signature;                                                        //0x0
    LONG Count;                                                             //0x4
    ULONG NextId;                                                           //0x8
    struct _LIST_ENTRY Items;                                               //0x10
    struct _KEVENT InsertLock;                                              //0x20
}; 

----------------------------------------
Structure: _WHEAP_INFO_BLOCK

//0x18 bytes (sizeof)
struct _WHEAP_INFO_BLOCK
{
    ULONG ErrorSourceCount;                                                 //0x0
    struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;                     //0x8
    struct _WHEAP_WORK_QUEUE* WorkQueue;                                    //0x10
}; 

----------------------------------------
Structure: _WHEAP_WORK_QUEUE

//0x88 bytes (sizeof)
struct _WHEAP_WORK_QUEUE
{
    struct _LIST_ENTRY ListHead;                                            //0x0
    ULONGLONG ListLock;                                                     //0x10
    volatile LONG ItemCount;                                                //0x18
    struct _KDPC Dpc;                                                       //0x20
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x60
    VOID (*WorkRoutine)(struct _WHEAP_WORK_QUEUE* arg1, struct _LIST_ENTRY* arg2); //0x80
}; 

----------------------------------------
Structure: _WHEA_AER_BRIDGE_DESCRIPTOR

//0x2c bytes (sizeof)
struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    struct _WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;                               //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
    ULONG SecondaryUncorrectableErrorMask;                                  //0x20
    ULONG SecondaryUncorrectableErrorSev;                                   //0x24
    ULONG SecondaryCapsAndControl;                                          //0x28
}; 

----------------------------------------
Structure: _WHEA_AER_ENDPOINT_DESCRIPTOR

//0x20 bytes (sizeof)
struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    struct _WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;                             //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
}; 

----------------------------------------
Structure: _WHEA_AER_ROOTPORT_DESCRIPTOR

//0x24 bytes (sizeof)
struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    ULONG BusNumber;                                                        //0x4
    struct _WHEA_PCI_SLOT_NUMBER Slot;                                      //0x8
    USHORT DeviceControl;                                                   //0xc
    union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;                             //0xe
    ULONG UncorrectableErrorMask;                                           //0x10
    ULONG UncorrectableErrorSeverity;                                       //0x14
    ULONG CorrectableErrorMask;                                             //0x18
    ULONG AdvancedCapsAndControl;                                           //0x1c
    ULONG RootErrorCommand;                                                 //0x20
}; 

----------------------------------------
Structure: _WHEA_AMD_EXTENDED_REGISTERS

//0xc0 bytes (sizeof)
struct _WHEA_AMD_EXTENDED_REGISTERS
{
    ULONGLONG IPID;                                                         //0x0
    ULONGLONG SYND;                                                         //0x8
    ULONGLONG CONFIG;                                                       //0x10
    ULONGLONG DESTAT;                                                       //0x18
    ULONGLONG DEADDR;                                                       //0x20
    ULONGLONG MISC1;                                                        //0x28
    ULONGLONG MISC2;                                                        //0x30
    ULONGLONG MISC3;                                                        //0x38
    ULONGLONG MISC4;                                                        //0x40
    ULONGLONG RasCap;                                                       //0x48
    ULONGLONG Reserved[14];                                                 //0x50
}; 

----------------------------------------
Structure: _WHEA_DEVICE_DRIVER_DESCRIPTOR

//0x74 bytes (sizeof)
struct _WHEA_DEVICE_DRIVER_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
    struct _GUID SourceGuid;                                                //0x4
    USHORT LogTag;                                                          //0x14
    USHORT Reserved2;                                                       //0x16
    ULONG PacketLength;                                                     //0x18
    ULONG PacketCount;                                                      //0x1c
    UCHAR* PacketBuffer;                                                    //0x20
    struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD Config;                      //0x28
    struct _GUID CreatorId;                                                 //0x40
    struct _GUID PartitionId;                                               //0x50
    ULONG MaxSectionDataLength;                                             //0x60
    ULONG MaxSectionsPerRecord;                                             //0x64
    UCHAR* PacketStateBuffer;                                               //0x68
    LONG OpenHandles;                                                       //0x70
}; 

----------------------------------------
Structure: _WHEA_ERROR_PACKET_V2

//0x50 bytes (sizeof)
struct _WHEA_ERROR_PACKET_V2
{
    ULONG Signature;                                                        //0x0
    ULONG Version;                                                          //0x4
    ULONG Length;                                                           //0x8
    union _WHEA_ERROR_PACKET_FLAGS Flags;                                   //0xc
    enum _WHEA_ERROR_TYPE ErrorType;                                        //0x10
    enum _WHEA_ERROR_SEVERITY ErrorSeverity;                                //0x14
    ULONG ErrorSourceId;                                                    //0x18
    enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;                           //0x1c
    struct _GUID NotifyType;                                                //0x20
    ULONGLONG Context;                                                      //0x30
    enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;                         //0x38
    ULONG Reserved1;                                                        //0x3c
    ULONG DataOffset;                                                       //0x40
    ULONG DataLength;                                                       //0x44
    ULONG PshedDataOffset;                                                  //0x48
    ULONG PshedDataLength;                                                  //0x4c
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD

//0xc8 bytes (sizeof)
struct _WHEA_ERROR_RECORD
{
    struct _WHEA_ERROR_RECORD_HEADER Header;                                //0x0
    struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];      //0x80
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_HEADER

//0x80 bytes (sizeof)
struct _WHEA_ERROR_RECORD_HEADER
{
    ULONG Signature;                                                        //0x0
    union _WHEA_REVISION Revision;                                          //0x4
    ULONG SignatureEnd;                                                     //0x6
    USHORT SectionCount;                                                    //0xa
    enum _WHEA_ERROR_SEVERITY Severity;                                     //0xc
    union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;                    //0x10
    ULONG Length;                                                           //0x14
    union _WHEA_TIMESTAMP Timestamp;                                        //0x18
    struct _GUID PlatformId;                                                //0x20
    struct _GUID PartitionId;                                               //0x30
    struct _GUID CreatorId;                                                 //0x40
    struct _GUID NotifyType;                                                //0x50
    ULONGLONG RecordId;                                                     //0x60
    union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;                            //0x68
    union _WHEA_PERSISTENCE_INFO PersistenceInfo;                           //0x6c
    UCHAR Reserved[12];                                                     //0x74
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR

//0x48 bytes (sizeof)
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
    ULONG SectionOffset;                                                    //0x0
    ULONG SectionLength;                                                    //0x4
    union _WHEA_REVISION Revision;                                          //0x8
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;        //0xa
    UCHAR Reserved;                                                         //0xb
    union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;                //0xc
    struct _GUID SectionType;                                               //0x10
    struct _GUID FRUId;                                                     //0x20
    enum _WHEA_ERROR_SEVERITY SectionSeverity;                              //0x30
    CHAR FRUText[20];                                                       //0x34
}; 

----------------------------------------
Structure: _WHEA_ERROR_SOURCE_CONFIGURATION_DD

//0x18 bytes (sizeof)
struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD
{
    LONG (*Initialize)(VOID* arg1, ULONG arg2);                             //0x0
    VOID (*Uninitialize)(VOID* arg1);                                       //0x8
    LONG (*Correct)(VOID* arg1, ULONG* arg2);                               //0x10
}; 

----------------------------------------
Structure: _WHEA_ERROR_SOURCE_DESCRIPTOR

//0x3cc bytes (sizeof)
struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
    ULONG Length;                                                           //0x0
    ULONG Version;                                                          //0x4
    enum _WHEA_ERROR_SOURCE_TYPE Type;                                      //0x8
    enum _WHEA_ERROR_SOURCE_STATE State;                                    //0xc
    ULONG MaxRawDataLength;                                                 //0x10
    ULONG NumRecordsToPreallocate;                                          //0x14
    ULONG MaxSectionsPerRecord;                                             //0x18
    ULONG ErrorSourceId;                                                    //0x1c
    ULONG PlatformErrorSourceId;                                            //0x20
    ULONG Flags;                                                            //0x24
    union
    {
        struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;                   //0x28
        struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;                   //0x28
        struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;                   //0x28
        struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;                   //0x28
        struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;                   //0x28
        struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;                   //0x28
        struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;         //0x28
        struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;         //0x28
        struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;             //0x28
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;             //0x28
        struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;        //0x28
        struct _WHEA_DEVICE_DRIVER_DESCRIPTOR DeviceDriverDescriptor;       //0x28
    } Info;                                                                 //0x28
}; 

----------------------------------------
Structure: _WHEA_EVENT_LOG_ENTRY

//0x20 bytes (sizeof)
struct _WHEA_EVENT_LOG_ENTRY
{
    struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;                             //0x0
}; 

----------------------------------------
Structure: _WHEA_EVENT_LOG_ENTRY_HEADER

//0x20 bytes (sizeof)
struct _WHEA_EVENT_LOG_ENTRY_HEADER
{
    ULONG Signature;                                                        //0x0
    ULONG Version;                                                          //0x4
    ULONG Length;                                                           //0x8
    enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;                                   //0xc
    ULONG OwnerTag;                                                         //0x10
    enum _WHEA_EVENT_LOG_ENTRY_ID Id;                                       //0x14
    union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;                                //0x18
    ULONG PayloadLength;                                                    //0x1c
}; 

----------------------------------------
Structure: _WHEA_GENERIC_ERROR_DESCRIPTOR

//0x34 bytes (sizeof)
struct _WHEA_GENERIC_ERROR_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Reserved;                                                         //0x2
    UCHAR Enabled;                                                          //0x3
    ULONG ErrStatusBlockLength;                                             //0x4
    ULONG RelatedErrorSourceId;                                             //0x8
    UCHAR ErrStatusAddressSpaceID;                                          //0xc
    UCHAR ErrStatusAddressBitWidth;                                         //0xd
    UCHAR ErrStatusAddressBitOffset;                                        //0xe
    UCHAR ErrStatusAddressAccessSize;                                       //0xf
    union _LARGE_INTEGER ErrStatusAddress;                                  //0x10
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x18
}; 

----------------------------------------
Structure: _WHEA_GENERIC_ERROR_DESCRIPTOR_V2

//0x50 bytes (sizeof)
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
{
    USHORT Type;                                                            //0x0
    UCHAR Reserved;                                                         //0x2
    UCHAR Enabled;                                                          //0x3
    ULONG ErrStatusBlockLength;                                             //0x4
    ULONG RelatedErrorSourceId;                                             //0x8
    UCHAR ErrStatusAddressSpaceID;                                          //0xc
    UCHAR ErrStatusAddressBitWidth;                                         //0xd
    UCHAR ErrStatusAddressBitOffset;                                        //0xe
    UCHAR ErrStatusAddressAccessSize;                                       //0xf
    union _LARGE_INTEGER ErrStatusAddress;                                  //0x10
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x18
    UCHAR ReadAckAddressSpaceID;                                            //0x34
    UCHAR ReadAckAddressBitWidth;                                           //0x35
    UCHAR ReadAckAddressBitOffset;                                          //0x36
    UCHAR ReadAckAddressAccessSize;                                         //0x37
    union _LARGE_INTEGER ReadAckAddress;                                    //0x38
    ULONGLONG ReadAckPreserveMask;                                          //0x40
    ULONGLONG ReadAckWriteMask;                                             //0x48
}; 

----------------------------------------
Structure: _WHEA_IPF_CMC_DESCRIPTOR

//0x4 bytes (sizeof)
struct _WHEA_IPF_CMC_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}; 

----------------------------------------
Structure: _WHEA_IPF_CPE_DESCRIPTOR

//0x4 bytes (sizeof)
struct _WHEA_IPF_CPE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}; 

----------------------------------------
Structure: _WHEA_IPF_MCA_DESCRIPTOR

//0x4 bytes (sizeof)
struct _WHEA_IPF_MCA_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR Reserved;                                                         //0x3
}; 

----------------------------------------
Structure: _WHEA_MEMORY_ERROR_SECTION

//0x50 bytes (sizeof)
struct _WHEA_MEMORY_ERROR_SECTION
{
    union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;                   //0x0
    union _WHEA_ERROR_STATUS ErrorStatus;                                   //0x8
    ULONGLONG PhysicalAddress;                                              //0x10
    ULONGLONG PhysicalAddressMask;                                          //0x18
    USHORT Node;                                                            //0x20
    USHORT Card;                                                            //0x22
    USHORT Module;                                                          //0x24
    USHORT Bank;                                                            //0x26
    USHORT Device;                                                          //0x28
    USHORT Row;                                                             //0x2a
    USHORT Column;                                                          //0x2c
    USHORT BitPosition;                                                     //0x2e
    ULONGLONG RequesterId;                                                  //0x30
    ULONGLONG ResponderId;                                                  //0x38
    ULONGLONG TargetId;                                                     //0x40
    UCHAR ErrorType;                                                        //0x48
    UCHAR Extended;                                                         //0x49
    USHORT RankNumber;                                                      //0x4a
    USHORT CardHandle;                                                      //0x4c
    USHORT ModuleHandle;                                                    //0x4e
}; 

----------------------------------------
Structure: _WHEA_NOTIFICATION_DESCRIPTOR

//0x1c bytes (sizeof)
struct _WHEA_NOTIFICATION_DESCRIPTOR
{
    UCHAR Type;                                                             //0x0
    UCHAR Length;                                                           //0x1
    union _WHEA_NOTIFICATION_FLAGS Flags;                                   //0x2
    union
    {
        struct
        {
            ULONG PollInterval;                                             //0x4
        } Polled;                                                           //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Interrupt;                                                        //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } LocalInterrupt;                                                   //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sci;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Nmi;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sea;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Sei;                                                              //0x4
        struct
        {
            ULONG PollInterval;                                             //0x4
            ULONG Vector;                                                   //0x8
            ULONG SwitchToPollingThreshold;                                 //0xc
            ULONG SwitchToPollingWindow;                                    //0x10
            ULONG ErrorThreshold;                                           //0x14
            ULONG ErrorThresholdWindow;                                     //0x18
        } Gsiv;                                                             //0x4
    } u;                                                                    //0x4
}; 

----------------------------------------
Structure: _WHEA_PCI_SLOT_NUMBER

//0x4 bytes (sizeof)
struct _WHEA_PCI_SLOT_NUMBER
{
    union
    {
        struct
        {
            ULONG DeviceNumber:5;                                           //0x0
            ULONG FunctionNumber:3;                                         //0x0
            ULONG Reserved:24;                                              //0x0
        } bits;                                                             //0x0
        ULONG AsULONG;                                                      //0x0
    } u;                                                                    //0x0
}; 

----------------------------------------
Structure: _WHEA_PROCESSOR_GENERIC_ERROR_SECTION

//0xc0 bytes (sizeof)
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
{
    union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;        //0x0
    UCHAR ProcessorType;                                                    //0x8
    UCHAR InstructionSet;                                                   //0x9
    UCHAR ErrorType;                                                        //0xa
    UCHAR Operation;                                                        //0xb
    UCHAR Flags;                                                            //0xc
    UCHAR Level;                                                            //0xd
    USHORT Reserved;                                                        //0xe
    ULONGLONG CPUVersion;                                                   //0x10
    UCHAR CPUBrandString[128];                                              //0x18
    ULONGLONG ProcessorId;                                                  //0x98
    ULONGLONG TargetAddress;                                                //0xa0
    ULONGLONG RequesterId;                                                  //0xa8
    ULONGLONG ResponderId;                                                  //0xb0
    ULONGLONG InstructionPointer;                                           //0xb8
}; 

----------------------------------------
Structure: _WHEA_RECOVERY_CONTEXT

//0x20 bytes (sizeof)
struct _WHEA_RECOVERY_CONTEXT
{
    union
    {
        struct
        {
            ULONGLONG Address;                                              //0x0
            UCHAR Consumed;                                                 //0x8
            USHORT ErrorCode;                                               //0xa
            UCHAR ErrorIpValid;                                             //0xc
            UCHAR RestartIpValid;                                           //0xd
            UCHAR ClearPoison;                                              //0xe
        } MemoryError;                                                      //0x0
        struct
        {
            ULONGLONG PmemErrInfo;                                          //0x0
        } PmemError;                                                        //0x0
    };
    ULONGLONG PartitionId;                                                  //0x10
    ULONG VpIndex;                                                          //0x18
    enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType;                       //0x1c
}; 

----------------------------------------
Structure: _WHEA_XPF_CMC_DESCRIPTOR

//0x3a4 bytes (sizeof)
struct _WHEA_XPF_CMC_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR NumberOfBanks;                                                    //0x3
    ULONG Reserved;                                                         //0x4
    struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;                            //0x8
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                          //0x24
}; 

----------------------------------------
Structure: _WHEA_XPF_MCA_SECTION

//0x110 bytes (sizeof)
struct _WHEA_XPF_MCA_SECTION
{
    ULONG VersionNumber;                                                    //0x0
    enum _WHEA_CPU_VENDOR CpuVendor;                                        //0x4
    union _LARGE_INTEGER Timestamp;                                         //0x8
    ULONG ProcessorNumber;                                                  //0x10
    union _MCG_STATUS GlobalStatus;                                         //0x14
    ULONGLONG InstructionPointer;                                           //0x1c
    ULONG BankNumber;                                                       //0x24
    union _MCI_STATUS Status;                                               //0x28
    ULONGLONG Address;                                                      //0x30
    ULONGLONG Misc;                                                         //0x38
    ULONG ExtendedRegisterCount;                                            //0x40
    ULONG ApicId;                                                           //0x44
    union
    {
        ULONGLONG ExtendedRegisters[24];                                    //0x48
        struct _WHEA_AMD_EXTENDED_REGISTERS AMDExtendedRegisters;           //0x48
    };
    union _MCG_CAP GlobalCapability;                                        //0x108
}; 

----------------------------------------
Structure: _WHEA_XPF_MCE_DESCRIPTOR

//0x398 bytes (sizeof)
struct _WHEA_XPF_MCE_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
    UCHAR NumberOfBanks;                                                    //0x3
    union _XPF_MCE_FLAGS Flags;                                             //0x4
    ULONGLONG MCG_Capability;                                               //0x8
    ULONGLONG MCG_GlobalControl;                                            //0x10
    struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                          //0x18
}; 

----------------------------------------
Structure: _WHEA_XPF_MC_BANK_DESCRIPTOR

//0x1c bytes (sizeof)
struct _WHEA_XPF_MC_BANK_DESCRIPTOR
{
    UCHAR BankNumber;                                                       //0x0
    UCHAR ClearOnInitialization;                                            //0x1
    UCHAR StatusDataFormat;                                                 //0x2
    union _XPF_MC_BANK_FLAGS Flags;                                         //0x3
    ULONG ControlMsr;                                                       //0x4
    ULONG StatusMsr;                                                        //0x8
    ULONG AddressMsr;                                                       //0xc
    ULONG MiscMsr;                                                          //0x10
    ULONGLONG ControlData;                                                  //0x14
}; 

----------------------------------------
Structure: _WHEA_XPF_NMI_DESCRIPTOR

//0x3 bytes (sizeof)
struct _WHEA_XPF_NMI_DESCRIPTOR
{
    USHORT Type;                                                            //0x0
    UCHAR Enabled;                                                          //0x2
}; 

----------------------------------------
Structure: _WHEA_XPF_PROCESSOR_ERROR_SECTION

//0x41 bytes (sizeof)
struct _WHEA_XPF_PROCESSOR_ERROR_SECTION
{
    union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;            //0x0
    ULONGLONG LocalAPICId;                                                  //0x8
    UCHAR CpuId[48];                                                        //0x10
    UCHAR VariableInfo[1];                                                  //0x40
}; 

----------------------------------------
Structure: _WMI_BUFFER_HEADER

//0x48 bytes (sizeof)
struct _WMI_BUFFER_HEADER
{
    ULONG BufferSize;                                                       //0x0
    ULONG SavedOffset;                                                      //0x4
    volatile ULONG CurrentOffset;                                           //0x8
    volatile LONG ReferenceCount;                                           //0xc
    union _LARGE_INTEGER TimeStamp;                                         //0x10
    LONGLONG SequenceNumber;                                                //0x18
    union
    {
        struct
        {
            ULONGLONG ClockType:3;                                          //0x20
            ULONGLONG Frequency:61;                                         //0x20
        };
        struct _SINGLE_LIST_ENTRY SlistEntry;                               //0x20
        struct _WMI_BUFFER_HEADER* NextBuffer;                              //0x20
    };
    struct _ETW_BUFFER_CONTEXT ClientContext;                               //0x28
    enum _ETW_BUFFER_STATE State;                                           //0x2c
    ULONG Offset;                                                           //0x30
    USHORT BufferFlag;                                                      //0x34
    USHORT BufferType;                                                      //0x36
    union
    {
        ULONG Padding1[4];                                                  //0x38
        struct _ETW_REF_CLOCK ReferenceTime;                                //0x38
        struct _LIST_ENTRY GlobalEntry;                                     //0x38
        struct
        {
            VOID* Pointer0;                                                 //0x38
            VOID* Pointer1;                                                 //0x40
        };
    };
}; 

----------------------------------------
Structure: _WMI_LOGGER_CONTEXT

//0x530 bytes (sizeof)
struct _WMI_LOGGER_CONTEXT
{
    ULONG LoggerId;                                                         //0x0
    ULONG BufferSize;                                                       //0x4
    ULONG MaximumEventSize;                                                 //0x8
    ULONG LoggerMode;                                                       //0xc
    LONG AcceptNewEvents;                                                   //0x10
    ULONG EventMarker[2];                                                   //0x14
    ULONG ErrorMarker;                                                      //0x1c
    ULONG SizeMask;                                                         //0x20
    ULONGLONG GetCpuClock;                                                  //0x28
    struct _ETHREAD* LoggerThread;                                          //0x30
    LONG LoggerStatus;                                                      //0x38
    ULONG FailureReason;                                                    //0x3c
    struct _ETW_BUFFER_QUEUE BufferQueue;                                   //0x40
    struct _ETW_BUFFER_QUEUE OverflowQueue;                                 //0x50
    struct _LIST_ENTRY GlobalList;                                          //0x60
    struct _LIST_ENTRY DebugIdTrackingList;                                 //0x70
    struct _ETW_DECODE_CONTROL_ENTRY* DecodeControlList;                    //0x80
    ULONG DecodeControlCount;                                               //0x88
    union
    {
        struct _WMI_BUFFER_HEADER* BatchedBufferList;                       //0x90
        struct _EX_FAST_REF CurrentBuffer;                                  //0x90
    };
    struct _UNICODE_STRING LoggerName;                                      //0x98
    struct _UNICODE_STRING LogFileName;                                     //0xa8
    struct _UNICODE_STRING LogFilePattern;                                  //0xb8
    struct _UNICODE_STRING NewLogFileName;                                  //0xc8
    ULONG ClockType;                                                        //0xd8
    ULONG LastFlushedBuffer;                                                //0xdc
    ULONG FlushTimer;                                                       //0xe0
    ULONG FlushThreshold;                                                   //0xe4
    union _LARGE_INTEGER ByteOffset;                                        //0xe8
    ULONG MinimumBuffers;                                                   //0xf0
    volatile LONG BuffersAvailable;                                         //0xf4
    volatile LONG NumberOfBuffers;                                          //0xf8
    ULONG MaximumBuffers;                                                   //0xfc
    volatile ULONG EventsLost;                                              //0x100
    volatile LONG PeakBuffersCount;                                         //0x104
    ULONG BuffersWritten;                                                   //0x108
    ULONG LogBuffersLost;                                                   //0x10c
    ULONG RealTimeBuffersDelivered;                                         //0x110
    ULONG RealTimeBuffersLost;                                              //0x114
    LONG* SequencePtr;                                                      //0x118
    ULONG LocalSequence;                                                    //0x120
    struct _GUID InstanceGuid;                                              //0x124
    ULONG MaximumFileSize;                                                  //0x134
    LONG FileCounter;                                                       //0x138
    enum _POOL_TYPE PoolType;                                               //0x13c
    struct _ETW_REF_CLOCK ReferenceTime;                                    //0x140
    LONG CollectionOn;                                                      //0x150
    ULONG ProviderInfoSize;                                                 //0x154
    struct _LIST_ENTRY Consumers;                                           //0x158
    ULONG NumConsumers;                                                     //0x168
    struct _ETW_REALTIME_CONSUMER* TransitionConsumer;                      //0x170
    VOID* RealtimeLogfileHandle;                                            //0x178
    struct _UNICODE_STRING RealtimeLogfileName;                             //0x180
    union _LARGE_INTEGER RealtimeWriteOffset;                               //0x190
    union _LARGE_INTEGER RealtimeReadOffset;                                //0x198
    union _LARGE_INTEGER RealtimeLogfileSize;                               //0x1a0
    ULONGLONG RealtimeLogfileUsage;                                         //0x1a8
    ULONGLONG RealtimeMaximumFileSize;                                      //0x1b0
    ULONG RealtimeBuffersSaved;                                             //0x1b8
    struct _ETW_REF_CLOCK RealtimeReferenceTime;                            //0x1c0
    enum _ETW_RT_EVENT_LOSS NewRTEventsLost;                                //0x1d0
    struct _KEVENT LoggerEvent;                                             //0x1d8
    struct _KEVENT FlushEvent;                                              //0x1f0
    struct _KTIMER FlushTimeOutTimer;                                       //0x208
    struct _KDPC LoggerDpc;                                                 //0x248
    struct _KMUTANT LoggerMutex;                                            //0x288
    struct _EX_PUSH_LOCK LoggerLock;                                        //0x2c0
    union
    {
        ULONGLONG BufferListSpinLock;                                       //0x2c8
        struct _EX_PUSH_LOCK BufferListPushLock;                            //0x2c8
    };
    struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;                  //0x2d0
    struct _TOKEN_ACCESS_INFORMATION* TokenAccessInformation;               //0x318
    struct _EX_FAST_REF SecurityDescriptor;                                 //0x320
    union _LARGE_INTEGER StartTime;                                         //0x328
    VOID* LogFileHandle;                                                    //0x330
    LONGLONG BufferSequenceNumber;                                          //0x338
    union
    {
        ULONG Flags;                                                        //0x340
        struct
        {
            ULONG Persistent:1;                                             //0x340
            ULONG AutoLogger:1;                                             //0x340
            ULONG FsReady:1;                                                //0x340
            ULONG RealTime:1;                                               //0x340
            ULONG Wow:1;                                                    //0x340
            ULONG KernelTrace:1;                                            //0x340
            ULONG NoMoreEnable:1;                                           //0x340
            ULONG StackTracing:1;                                           //0x340
            ULONG ErrorLogged:1;                                            //0x340
            ULONG RealtimeLoggerContextFreed:1;                             //0x340
            ULONG PebsTracing:1;                                            //0x340
            ULONG PmcCounters:1;                                            //0x340
            ULONG PageAlignBuffers:1;                                       //0x340
            ULONG StackLookasideListAllocated:1;                            //0x340
            ULONG SecurityTrace:1;                                          //0x340
            ULONG LastBranchTracing:1;                                      //0x340
            ULONG SystemLoggerIndex:8;                                      //0x340
            ULONG StackCaching:1;                                           //0x340
            ULONG ProviderTracking:1;                                       //0x340
            ULONG ProcessorTrace:1;                                         //0x340
            ULONG QpcDeltaTracking:1;                                       //0x340
            ULONG MarkerBufferSaved:1;                                      //0x340
            ULONG LargeMdlPages:1;                                          //0x340
            ULONG ExcludeKernelStack:1;                                     //0x340
            ULONG SpareFlags2:1;                                            //0x340
        };
    };
    union
    {
        volatile ULONG RequestFlag;                                         //0x344
        struct
        {
            ULONG DbgRequestNewFile:1;                                      //0x344
            ULONG DbgRequestUpdateFile:1;                                   //0x344
            ULONG DbgRequestFlush:1;                                        //0x344
            ULONG DbgRequestDisableRealtime:1;                              //0x344
            ULONG DbgRequestDisconnectConsumer:1;                           //0x344
            ULONG DbgRequestConnectConsumer:1;                              //0x344
            ULONG DbgRequestNotifyConsumer:1;                               //0x344
            ULONG DbgRequestUpdateHeader:1;                                 //0x344
            ULONG DbgRequestDeferredFlush:1;                                //0x344
            ULONG DbgRequestDeferredFlushTimer:1;                           //0x344
            ULONG DbgRequestFlushTimer:1;                                   //0x344
            ULONG DbgRequestUpdateDebugger:1;                               //0x344
            ULONG DbgSpareRequestFlags:20;                                  //0x344
        };
    };
    struct _ETW_STACK_TRACE_BLOCK StackTraceBlock;                          //0x350
    struct _RTL_BITMAP HookIdMap;                                           //0x3d0
    struct _ETW_STACK_CACHE* StackCache;                                    //0x3e0
    struct _ETW_PMC_SUPPORT* PmcData;                                       //0x3e8
    struct _ETW_LBR_SUPPORT* LbrData;                                       //0x3f0
    struct _ETW_IPT_SUPPORT* IptData;                                       //0x3f8
    struct _LIST_ENTRY BinaryTrackingList;                                  //0x400
    struct _WMI_BUFFER_HEADER** ScratchArray;                               //0x410
    struct _DISALLOWED_GUIDS DisallowedGuids;                               //0x418
    struct PERIODIC_CAPTURE_STATE_CONTEXT* PeriodicCaptureStateContext;     //0x428
    struct _ETW_SOFT_RESTART_CONTEXT* SoftRestartContext;                   //0x430
    struct _ETW_SILODRIVERSTATE* SiloState;                                 //0x438
    struct _WORK_QUEUE_ITEM CompressionWorkItem;                            //0x440
    LONG CompressionWorkItemState;                                          //0x460
    struct _EX_PUSH_LOCK CompressionLock;                                   //0x468
    struct _WMI_BUFFER_HEADER* CompressionTarget;                           //0x470
    VOID* CompressionWorkspace;                                             //0x478
    LONG CompressionOn;                                                     //0x480
    ULONG CompressionRatioGuess;                                            //0x484
    ULONG PartialBufferCompressionLevel;                                    //0x488
    enum ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;         //0x48c
    struct _SINGLE_LIST_ENTRY PlaceholderList;                              //0x490
    struct _KDPC CompressionDpc;                                            //0x498
    union _LARGE_INTEGER LastBufferSwitchTime;                              //0x4d8
    union _LARGE_INTEGER BufferWriteDuration;                               //0x4e0
    union _LARGE_INTEGER BufferCompressDuration;                            //0x4e8
    LONGLONG ReferenceQpcDelta;                                             //0x4f0
    struct _ETW_EVENT_CALLBACK_CONTEXT* CallbackContext;                    //0x4f8
    union _LARGE_INTEGER* LastDroppedTime;                                  //0x500
    union _LARGE_INTEGER* FlushingLastDroppedTime;                          //0x508
    LONGLONG FlushingSequenceNumber;                                        //0x510
    struct _ETW_PARTITION_CONTEXT PartitionContext;                         //0x518
    struct _MDL* BufferMdl;                                                 //0x520
}; 

----------------------------------------
Structure: _WNF_DELIVERY_DESCRIPTOR

//0x30 bytes (sizeof)
struct _WNF_DELIVERY_DESCRIPTOR
{
    ULONGLONG SubscriptionId;                                               //0x0
    struct _WNF_STATE_NAME StateName;                                       //0x8
    ULONG ChangeStamp;                                                      //0x10
    ULONG StateDataSize;                                                    //0x14
    ULONG EventMask;                                                        //0x18
    struct _WNF_TYPE_ID TypeId;                                             //0x1c
    ULONG StateDataOffset;                                                  //0x2c
}; 

----------------------------------------
Structure: _WNF_DISPATCHER

//0x30 bytes (sizeof)
struct _WNF_DISPATCHER
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _WORK_QUEUE_ITEM WorkItem;                                       //0x8
    LONG State;                                                             //0x28
}; 

----------------------------------------
Structure: _WNF_LOCK

//0x8 bytes (sizeof)
struct _WNF_LOCK
{
    struct _EX_PUSH_LOCK PushLock;                                          //0x0
}; 

----------------------------------------
Structure: _WNF_NAME_INSTANCE

//0xa8 bytes (sizeof)
struct _WNF_NAME_INSTANCE
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _EX_RUNDOWN_REF RunRef;                                          //0x8
    struct _RTL_BALANCED_NODE TreeLinks;                                    //0x10
    struct _WNF_STATE_NAME_STRUCT StateName;                                //0x28
    struct _WNF_SCOPE_INSTANCE* ScopeInstance;                              //0x30
    struct _WNF_STATE_NAME_REGISTRATION StateNameInfo;                      //0x38
    struct _WNF_LOCK StateDataLock;                                         //0x50
    struct _WNF_STATE_DATA* StateData;                                      //0x58
    ULONG CurrentChangeStamp;                                               //0x60
    VOID* PermanentDataStore;                                               //0x68
    struct _WNF_LOCK StateSubscriptionListLock;                             //0x70
    struct _LIST_ENTRY StateSubscriptionListHead;                           //0x78
    struct _LIST_ENTRY TemporaryNameListEntry;                              //0x88
    struct _EPROCESS* CreatorProcess;                                       //0x98
    LONG DataSubscribersCount;                                              //0xa0
    LONG CurrentDeliveryCount;                                              //0xa4
}; 

----------------------------------------
Structure: _WNF_NODE_HEADER

//0x4 bytes (sizeof)
struct _WNF_NODE_HEADER
{
    USHORT NodeTypeCode;                                                    //0x0
    USHORT NodeByteSize;                                                    //0x2
}; 

----------------------------------------
Structure: _WNF_PROCESS_CONTEXT

//0x88 bytes (sizeof)
struct _WNF_PROCESS_CONTEXT
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _EPROCESS* Process;                                              //0x8
    struct _LIST_ENTRY WnfProcessesListEntry;                               //0x10
    VOID* ImplicitScopeInstances[3];                                        //0x20
    struct _WNF_LOCK TemporaryNamesListLock;                                //0x38
    struct _LIST_ENTRY TemporaryNamesListHead;                              //0x40
    struct _WNF_LOCK ProcessSubscriptionListLock;                           //0x50
    struct _LIST_ENTRY ProcessSubscriptionListHead;                         //0x58
    struct _WNF_LOCK DeliveryPendingListLock;                               //0x68
    struct _LIST_ENTRY DeliveryPendingListHead;                             //0x70
    struct _KEVENT* NotificationEvent;                                      //0x80
}; 

----------------------------------------
Structure: _WNF_SCOPE_INSTANCE

//0x50 bytes (sizeof)
struct _WNF_SCOPE_INSTANCE
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _EX_RUNDOWN_REF RunRef;                                          //0x8
    enum _WNF_DATA_SCOPE DataScope;                                         //0x10
    ULONG InstanceIdSize;                                                   //0x14
    VOID* InstanceIdData;                                                   //0x18
    struct _LIST_ENTRY ResolverListEntry;                                   //0x20
    struct _WNF_LOCK NameSetLock;                                           //0x30
    struct _RTL_AVL_TREE NameSet;                                           //0x38
    VOID* PermanentDataStore;                                               //0x40
    VOID* VolatilePermanentDataStore;                                       //0x48
}; 

----------------------------------------
Structure: _WNF_SCOPE_MAP

//0xb0 bytes (sizeof)
struct _WNF_SCOPE_MAP
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _WNF_SCOPE_INSTANCE* SystemScopeInstance;                        //0x8
    struct _WNF_SCOPE_INSTANCE* MachineScopeInstance;                       //0x10
    struct _WNF_SCOPE_INSTANCE* PhysicalMachineScopeInstance;               //0x18
    struct _WNF_SCOPE_MAP_ENTRY ByDataScope[6];                             //0x20
}; 

----------------------------------------
Structure: _WNF_SCOPE_MAP_ENTRY

//0x18 bytes (sizeof)
struct _WNF_SCOPE_MAP_ENTRY
{
    struct _WNF_LOCK MapEntryLock;                                          //0x0
    struct _LIST_ENTRY MapEntryHead;                                        //0x8
}; 

----------------------------------------
Structure: _WNF_SILODRIVERSTATE

//0x38 bytes (sizeof)
struct _WNF_SILODRIVERSTATE
{
    struct _WNF_SCOPE_MAP* ScopeMap;                                        //0x0
    VOID* volatile PermanentNameStoreRootKey;                               //0x8
    VOID* volatile PersistentNameStoreRootKey;                              //0x10
    volatile LONGLONG PermanentNameSequenceNumber;                          //0x18
    struct _WNF_LOCK PermanentNameSequenceNumberLock;                       //0x20
    volatile LONGLONG PermanentNameSequenceNumberPool;                      //0x28
    volatile LONGLONG RuntimeNameSequenceNumber;                            //0x30
}; 

----------------------------------------
Structure: _WNF_STATE_DATA

//0x10 bytes (sizeof)
struct _WNF_STATE_DATA
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    ULONG AllocatedSize;                                                    //0x4
    ULONG DataSize;                                                         //0x8
    ULONG ChangeStamp;                                                      //0xc
}; 

----------------------------------------
Structure: _WNF_STATE_NAME

//0x8 bytes (sizeof)
struct _WNF_STATE_NAME
{
    ULONG Data[2];                                                          //0x0
}; 

----------------------------------------
Structure: _WNF_STATE_NAME_REGISTRATION

//0x18 bytes (sizeof)
struct _WNF_STATE_NAME_REGISTRATION
{
    ULONG MaxStateSize;                                                     //0x0
    struct _WNF_TYPE_ID* TypeId;                                            //0x8
    struct _SECURITY_DESCRIPTOR* SecurityDescriptor;                        //0x10
}; 

----------------------------------------
Structure: _WNF_STATE_NAME_STRUCT

//0x8 bytes (sizeof)
struct _WNF_STATE_NAME_STRUCT
{
    ULONGLONG Version:4;                                                    //0x0
    ULONGLONG NameLifetime:2;                                               //0x0
    ULONGLONG DataScope:4;                                                  //0x0
    ULONGLONG PermanentData:1;                                              //0x0
    ULONGLONG Sequence:53;                                                  //0x0
}; 

----------------------------------------
Structure: _WNF_SUBSCRIPTION

//0x88 bytes (sizeof)
struct _WNF_SUBSCRIPTION
{
    struct _WNF_NODE_HEADER Header;                                         //0x0
    struct _EX_RUNDOWN_REF RunRef;                                          //0x8
    ULONGLONG SubscriptionId;                                               //0x10
    struct _LIST_ENTRY ProcessSubscriptionListEntry;                        //0x18
    struct _EPROCESS* Process;                                              //0x28
    struct _WNF_NAME_INSTANCE* NameInstance;                                //0x30
    struct _WNF_STATE_NAME_STRUCT StateName;                                //0x38
    struct _LIST_ENTRY StateSubscriptionListEntry;                          //0x40
    ULONGLONG CallbackRoutine;                                              //0x50
    VOID* CallbackContext;                                                  //0x58
    ULONG CurrentChangeStamp;                                               //0x60
    ULONG SubscribedEventSet;                                               //0x64
    struct _LIST_ENTRY PendingSubscriptionListEntry;                        //0x68
    enum _WNF_SUBSCRIPTION_STATE SubscriptionState;                         //0x78
    ULONG SignaledEventSet;                                                 //0x7c
    ULONG InDeliveryEventSet;                                               //0x80
}; 

----------------------------------------
Structure: _WNF_TYPE_ID

//0x10 bytes (sizeof)
struct _WNF_TYPE_ID
{
    struct _GUID TypeId;                                                    //0x0
}; 

----------------------------------------
Structure: _WORK_QUEUE_ENTRY

//0x88 bytes (sizeof)
struct _WORK_QUEUE_ENTRY
{
    struct _LIST_ENTRY WorkQueueLinks;                                      //0x0
    union
    {
        struct
        {
            struct _FILE_OBJECT* FileObject;                                //0x10
            VOID* DiskIoAttribution;                                        //0x18
        } Read;                                                             //0x10
        struct
        {
            struct _SHARED_CACHE_MAP* SharedCacheMap;                       //0x10
        } Write;                                                            //0x10
        struct
        {
            struct _KEVENT* Event;                                          //0x10
        } Event;                                                            //0x10
        struct
        {
            ULONG Reason;                                                   //0x10
        } Notification;                                                     //0x10
        struct
        {
            struct _SHARED_CACHE_MAP* SharedCacheMap;                       //0x10
            struct _IO_STATUS_BLOCK* IoStatus;                              //0x18
            struct _KEVENT CallerWaitEvent;                                 //0x20
            UCHAR IsLowPriWriteBehind;                                      //0x38
        } LowPriWrite;                                                      //0x10
        struct
        {
            struct _SHARED_CACHE_MAP* SharedCacheMap;                       //0x10
            union _LARGE_INTEGER FileOffset;                                //0x18
            struct _FILE_OBJECT* FileObject;                                //0x20
            ULONG Length;                                                   //0x28
            struct _SINGLE_LIST_ENTRY* PrefetchList;                        //0x30
            ULONG PrefetchPagePriority;                                     //0x38
            struct _MDL* Mdl;                                               //0x40
            struct _IO_STATUS_BLOCK* IoStatusBlock;                         //0x48
            struct _CC_ASYNC_READ_CONTEXT* CallbackContext;                 //0x50
            struct _EPROCESS* OriginatingProcess;                           //0x58
            struct _ETHREAD* IoIssuerThread;                                //0x60
            VOID* DiskIoAttribution;                                        //0x68
            CHAR RequestorMode;                                             //0x70
            ULONG NestingLevel;                                             //0x74
        } AsyncRead;                                                        //0x10
    } Parameters;                                                           //0x10
    UCHAR Function;                                                         //0x78
    struct _CC_PARTITION* Partition;                                        //0x80
}; 

----------------------------------------
Structure: _WORK_QUEUE_ITEM

//0x20 bytes (sizeof)
struct _WORK_QUEUE_ITEM
{
    struct _LIST_ENTRY List;                                                //0x0
    VOID (*WorkerRoutine)(VOID* arg1);                                      //0x10
    VOID* Parameter;                                                        //0x18
}; 

----------------------------------------
Structure: _WRITE_BEHIND_THROUGHPUT

//0x8 bytes (sizeof)
struct _WRITE_BEHIND_THROUGHPUT
{
    ULONG PagesYetToWrite;                                                  //0x0
    ULONG Throughput;                                                       //0x4
}; 

----------------------------------------
Structure: _X86_DBGKD_CONTROL_SET

//0x10 bytes (sizeof)
struct _X86_DBGKD_CONTROL_SET
{
    ULONG TraceFlag;                                                        //0x0
    ULONG Dr7;                                                              //0x4
    ULONG CurrentSymbolStart;                                               //0x8
    ULONG CurrentSymbolEnd;                                                 //0xc
}; 

----------------------------------------
Structure: _X86_KTRAP_FRAME

//0x8c bytes (sizeof)
struct _X86_KTRAP_FRAME
{
    ULONG DbgEbp;                                                           //0x0
    ULONG DbgEip;                                                           //0x4
    ULONG DbgArgMark;                                                       //0x8
    ULONG DbgArgPointer;                                                    //0xc
    ULONG TempSegCs;                                                        //0x10
    ULONG TempEsp;                                                          //0x14
    ULONG Dr0;                                                              //0x18
    ULONG Dr1;                                                              //0x1c
    ULONG Dr2;                                                              //0x20
    ULONG Dr3;                                                              //0x24
    ULONG Dr6;                                                              //0x28
    ULONG Dr7;                                                              //0x2c
    ULONG SegGs;                                                            //0x30
    ULONG SegEs;                                                            //0x34
    ULONG SegDs;                                                            //0x38
    ULONG Edx;                                                              //0x3c
    ULONG Ecx;                                                              //0x40
    ULONG Eax;                                                              //0x44
    UCHAR PreviousPreviousMode;                                             //0x48
    UCHAR EntropyQueueDpc;                                                  //0x49
    UCHAR Reserved[2];                                                      //0x4a
    ULONG ExceptionList;                                                    //0x4c
    ULONG SegFs;                                                            //0x50
    ULONG Edi;                                                              //0x54
    ULONG Esi;                                                              //0x58
    ULONG Ebx;                                                              //0x5c
    ULONG Ebp;                                                              //0x60
    ULONG ErrCode;                                                          //0x64
    ULONG Eip;                                                              //0x68
    ULONG SegCs;                                                            //0x6c
    ULONG EFlags;                                                           //0x70
    ULONG HardwareEsp;                                                      //0x74
    ULONG HardwareSegSs;                                                    //0x78
    ULONG V86Es;                                                            //0x7c
    ULONG V86Ds;                                                            //0x80
    ULONG V86Fs;                                                            //0x84
    ULONG V86Gs;                                                            //0x88
}; 

----------------------------------------
Structure: _X86_KTRAP_FRAME_BLUE

//0x8c bytes (sizeof)
struct _X86_KTRAP_FRAME_BLUE
{
    ULONG DbgEbp;                                                           //0x0
    ULONG DbgEip;                                                           //0x4
    ULONG DbgArgMark;                                                       //0x8
    USHORT TempSegCs;                                                       //0xc
    UCHAR Logging;                                                          //0xe
    UCHAR FrameType;                                                        //0xf
    ULONG TempEsp;                                                          //0x10
    ULONG Dr0;                                                              //0x14
    ULONG Dr1;                                                              //0x18
    ULONG Dr2;                                                              //0x1c
    ULONG Dr3;                                                              //0x20
    ULONG Dr6;                                                              //0x24
    ULONG Dr7;                                                              //0x28
    ULONG SegGs;                                                            //0x2c
    ULONG SegEs;                                                            //0x30
    ULONG SegDs;                                                            //0x34
    ULONG Edx;                                                              //0x38
    ULONG Ecx;                                                              //0x3c
    ULONG Eax;                                                              //0x40
    UCHAR PreviousPreviousMode;                                             //0x44
    UCHAR EntropyQueueDpc;                                                  //0x45
    UCHAR Reserved[2];                                                      //0x46
    ULONG MxCsr;                                                            //0x48
    ULONG ExceptionList;                                                    //0x4c
    ULONG SegFs;                                                            //0x50
    ULONG Edi;                                                              //0x54
    ULONG Esi;                                                              //0x58
    ULONG Ebx;                                                              //0x5c
    ULONG Ebp;                                                              //0x60
    ULONG ErrCode;                                                          //0x64
    ULONG Eip;                                                              //0x68
    ULONG SegCs;                                                            //0x6c
    ULONG EFlags;                                                           //0x70
    ULONG HardwareEsp;                                                      //0x74
    ULONG HardwareSegSs;                                                    //0x78
    ULONG V86Es;                                                            //0x7c
    ULONG V86Ds;                                                            //0x80
    ULONG V86Fs;                                                            //0x84
    ULONG V86Gs;                                                            //0x88
}; 

----------------------------------------
Structure: _XSAVE_AREA

//0x240 bytes (sizeof)
struct _XSAVE_AREA
{
    struct _XSAVE_FORMAT LegacyState;                                       //0x0
    struct _XSAVE_AREA_HEADER Header;                                       //0x200
}; 

----------------------------------------
Structure: _XSAVE_AREA_HEADER

//0x40 bytes (sizeof)
struct _XSAVE_AREA_HEADER
{
    ULONGLONG Mask;                                                         //0x0
    ULONGLONG CompactionMask;                                               //0x8
    ULONGLONG Reserved2[6];                                                 //0x10
}; 

----------------------------------------
Structure: _XSAVE_FORMAT

//0x200 bytes (sizeof)
struct _XSAVE_FORMAT
{
    USHORT ControlWord;                                                     //0x0
    USHORT StatusWord;                                                      //0x2
    UCHAR TagWord;                                                          //0x4
    UCHAR Reserved1;                                                        //0x5
    USHORT ErrorOpcode;                                                     //0x6
    ULONG ErrorOffset;                                                      //0x8
    USHORT ErrorSelector;                                                   //0xc
    USHORT Reserved2;                                                       //0xe
    ULONG DataOffset;                                                       //0x10
    USHORT DataSelector;                                                    //0x14
    USHORT Reserved3;                                                       //0x16
    ULONG MxCsr;                                                            //0x18
    ULONG MxCsr_Mask;                                                       //0x1c
    struct _M128A FloatRegisters[8];                                        //0x20
    struct _M128A XmmRegisters[16];                                         //0xa0
    UCHAR Reserved4[96];                                                    //0x1a0
}; 

----------------------------------------
Structure: _XSDT

//0x2c bytes (sizeof)
struct _XSDT
{
    struct _DESCRIPTION_HEADER Header;                                      //0x0
    union _LARGE_INTEGER Tables[1];                                         //0x24
}; 

----------------------------------------
Structure: _XSTATE_CONFIGURATION

//0x338 bytes (sizeof)
struct _XSTATE_CONFIGURATION
{
    ULONGLONG EnabledFeatures;                                              //0x0
    ULONGLONG EnabledVolatileFeatures;                                      //0x8
    ULONG Size;                                                             //0x10
    union
    {
        ULONG ControlFlags;                                                 //0x14
        struct
        {
            ULONG OptimizedSave:1;                                          //0x14
            ULONG CompactionEnabled:1;                                      //0x14
        };
    };
    struct _XSTATE_FEATURE Features[64];                                    //0x18
    ULONGLONG EnabledSupervisorFeatures;                                    //0x218
    ULONGLONG AlignedFeatures;                                              //0x220
    ULONG AllFeatureSize;                                                   //0x228
    ULONG AllFeatures[64];                                                  //0x22c
    ULONGLONG EnabledUserVisibleSupervisorFeatures;                         //0x330
}; 

----------------------------------------
Structure: _XSTATE_CONTEXT

//0x20 bytes (sizeof)
struct _XSTATE_CONTEXT
{
    ULONGLONG Mask;                                                         //0x0
    ULONG Length;                                                           //0x8
    ULONG Reserved1;                                                        //0xc
    struct _XSAVE_AREA* Area;                                               //0x10
    VOID* Buffer;                                                           //0x18
}; 

----------------------------------------
Structure: _XSTATE_FEATURE

//0x8 bytes (sizeof)
struct _XSTATE_FEATURE
{
    ULONG Offset;                                                           //0x0
    ULONG Size;                                                             //0x4
}; 

----------------------------------------
Structure: _XSTATE_SAVE

//0x38 bytes (sizeof)
struct _XSTATE_SAVE
{
    struct _XSTATE_SAVE* Prev;                                              //0x0
    struct _KTHREAD* Thread;                                                //0x8
    UCHAR Level;                                                            //0x10
    struct _XSTATE_CONTEXT XStateContext;                                   //0x18
}; 

----------------------------------------
Structure: __WIL__WNF_STATE_NAME

//0x8 bytes (sizeof)
struct __WIL__WNF_STATE_NAME
{
    ULONG Data[2];                                                          //0x0
}; 

----------------------------------------
Structure: __WIL__WNF_TYPE_ID

//0x10 bytes (sizeof)
struct __WIL__WNF_TYPE_ID
{
    struct _GUID TypeId;                                                    //0x0
}; 

----------------------------------------
Structure: __WIL__WNF_USER_SUBSCRIPTION

//0x0 bytes (sizeof)
struct __WIL__WNF_USER_SUBSCRIPTION; 

----------------------------------------
Structure: _flags

//0x1 bytes (sizeof)
struct _flags
{
    UCHAR Removable:1;                                                      //0x0
    UCHAR GroupAssigned:1;                                                  //0x0
    UCHAR GroupCommitted:1;                                                 //0x0
    UCHAR GroupAssignmentFixed:1;                                           //0x0
    UCHAR ProcessorOnly:1;                                                  //0x0
    UCHAR SmtSetsPresent:1;                                                 //0x0
    UCHAR Fill:2;                                                           //0x0
}; 

----------------------------------------
Structure: _iobuf

//0x30 bytes (sizeof)
struct _iobuf
{
    CHAR* _ptr;                                                             //0x0
    LONG _cnt;                                                              //0x8
    CHAR* _base;                                                            //0x10
    LONG _flag;                                                             //0x18
    LONG _file;                                                             //0x1c
    LONG _charbuf;                                                          //0x20
    LONG _bufsiz;                                                           //0x24
    CHAR* _tmpfname;                                                        //0x28
}; 

----------------------------------------
Structure: _tlgProviderMetadata_t

//0x13 bytes (sizeof)
struct _tlgProviderMetadata_t
{
    UCHAR Type;                                                             //0x0
    struct _GUID ProviderId;                                                //0x1
    USHORT RemainingSize;                                                   //0x11
}; 

----------------------------------------
Structure: _tlgProvider_t

//0x38 bytes (sizeof)
struct _tlgProvider_t
{
    ULONG LevelPlus1;                                                       //0x0
    USHORT* ProviderMetadataPtr;                                            //0x8
    ULONGLONG KeywordAny;                                                   //0x10
    ULONGLONG KeywordAll;                                                   //0x18
    ULONGLONG RegHandle;                                                    //0x20
    VOID (*EnableCallback)(struct _GUID* arg1, ULONG arg2, UCHAR arg3, ULONGLONG arg4, ULONGLONG arg5, struct _EVENT_FILTER_DESCRIPTOR* arg6, VOID* arg7); //0x28
    VOID* CallbackContext;                                                  //0x30
}; 

----------------------------------------
Structure: _wil_details_UsageSubscriptionData

//0x8 bytes (sizeof)
struct _wil_details_UsageSubscriptionData
{
    ULONG featureId;                                                        //0x0
    USHORT serviceReportingKind;                                            //0x4
}; 

----------------------------------------
Structure: tagSWITCH_CONTEXT

//0x358 bytes (sizeof)
struct tagSWITCH_CONTEXT
{
    struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;                           //0x0
    struct tagSWITCH_CONTEXT_DATA Data;                                     //0x18
}; 

----------------------------------------
Structure: tagSWITCH_CONTEXT_ATTRIBUTE

//0x18 bytes (sizeof)
struct tagSWITCH_CONTEXT_ATTRIBUTE
{
    ULONGLONG ulContextUpdateCounter;                                       //0x0
    LONG fAllowContextUpdate;                                               //0x8
    LONG fEnableTrace;                                                      //0xc
    ULONGLONG EtwHandle;                                                    //0x10
}; 

----------------------------------------
Structure: tagSWITCH_CONTEXT_DATA

//0x340 bytes (sizeof)
struct tagSWITCH_CONTEXT_DATA
{
    ULONGLONG ullOsMaxVersionTested;                                        //0x0
    ULONG ulTargetPlatform;                                                 //0x8
    ULONGLONG ullContextMinimum;                                            //0x10
    struct _GUID guPlatform;                                                //0x18
    struct _GUID guMinPlatform;                                             //0x28
    ULONG ulContextSource;                                                  //0x38
    ULONG ulElementCount;                                                   //0x3c
    struct _GUID guElements[48];                                            //0x40
}; 

----------------------------------------
Structure: wil_FeatureState

//0x18 bytes (sizeof)
struct wil_FeatureState
{
    enum wil_FeatureEnabledState enabledState;                              //0x0
    UCHAR variant;                                                          //0x4
    enum wil_FeatureVariantPayloadKind payloadKind;                         //0x8
    ULONG payload;                                                          //0xc
    LONG hasNotification;                                                   //0x10
    LONG isVariantConfiguration;                                            //0x14
}; 

----------------------------------------
Structure: wil_StagingConfig

//0x0 bytes (sizeof)
struct wil_StagingConfig; 

----------------------------------------
Structure: wil_details_FeatureDescriptor

//0x20 bytes (sizeof)
struct wil_details_FeatureDescriptor
{
    union wil_details_FeatureStateCache* featureStateCache;                 //0x0
    struct wil_details_FeatureReportingCache* featureReportingCache;        //0x8
    ULONG featureId;                                                        //0x10
    UCHAR changeTime;                                                       //0x14
    UCHAR isAlwaysDisabled;                                                 //0x15
    UCHAR isAlwaysEnabled;                                                  //0x16
    UCHAR isEnabledByDefault;                                               //0x17
    struct wil_details_FeatureDescriptor** requiresFeatures;                //0x18
}; 

----------------------------------------
Structure: wil_details_FeatureReportingCache

//0x8 bytes (sizeof)
struct wil_details_FeatureReportingCache
{
    union wil_details_ReportedState reported;                               //0x0
    union wil_details_RecordedState recorded;                               //0x4
}; 

----------------------------------------
Structure: wil_details_FeatureTestState

//0x20 bytes (sizeof)
struct wil_details_FeatureTestState
{
    enum wil_details_FeatureTestStateKind kind;                             //0x0
    ULONG featureId;                                                        //0x4
    enum wil_FeatureEnabledState state;                                     //0x8
    UCHAR variant;                                                          //0xc
    ULONG payload;                                                          //0x10
    enum wil_FeatureVariantPayloadKind payloadKind;                         //0x14
    struct wil_details_FeatureTestState* next;                              //0x18
}; 

----------------------------------------
Structure: wil_details_RecordUsageResult

//0x18 bytes (sizeof)
struct wil_details_RecordUsageResult
{
    LONG queueBackground;                                                   //0x0
    ULONG countImmediate;                                                   //0x4
    enum wil_details_ServiceReportingKind kindImmediate;                    //0x8
    ULONG payloadId;                                                        //0xc
    LONG ignoredUse;                                                        //0x10
    LONG isVariantConfiguration;                                            //0x14
}; 

----------------------------------------
Structure: wil_details_StagingConfig

//0x58 bytes (sizeof)
struct wil_details_StagingConfig
{
    enum wil_FeatureStore store;                                            //0x0
    LONG forUpdate;                                                         //0x4
    ULONG readChangeStamp;                                                  //0x8
    UCHAR readVersion;                                                      //0xc
    LONG modified;                                                          //0x10
    struct wil_details_StagingConfigHeader* header;                         //0x18
    struct wil_details_StagingConfigFeature* features;                      //0x20
    struct wil_details_StagingConfigUsageTrigger* triggers;                 //0x28
    LONG changedInSession;                                                  //0x30
    VOID* buffer;                                                           //0x38
    ULONGLONG bufferSize;                                                   //0x40
    ULONGLONG bufferAlloc;                                                  //0x48
    LONG bufferOwned;                                                       //0x50
}; 

----------------------------------------
Structure: wil_details_StagingConfigFeature

//0xc bytes (sizeof)
struct wil_details_StagingConfigFeature
{
    ULONG featureId;                                                        //0x0
    ULONG changedInSession:1;                                               //0x4
    ULONG isVariantConfig:1;                                                //0x4
    ULONG unused1:6;                                                        //0x4
    ULONG serviceState:2;                                                   //0x4
    ULONG userState:2;                                                      //0x4
    ULONG testState:2;                                                      //0x4
    ULONG unused2:2;                                                        //0x4
    ULONG unused3:8;                                                        //0x4
    ULONG variant:6;                                                        //0x4
    ULONG payloadKind:2;                                                    //0x4
    ULONG payload;                                                          //0x8
}; 

----------------------------------------
Structure: wil_details_StagingConfigHeader

//0x10 bytes (sizeof)
struct wil_details_StagingConfigHeader
{
    UCHAR version;                                                          //0x0
    UCHAR versionMinor;                                                     //0x1
    USHORT headerSizeBytes;                                                 //0x2
    USHORT featureCount;                                                    //0x4
    USHORT featureUsageTriggerCount;                                        //0x6
    struct wil_details_StagingConfigHeaderProperties sessionProperties;     //0x8
    struct wil_details_StagingConfigHeaderProperties properties;            //0xc
}; 

----------------------------------------
Structure: wil_details_StagingConfigHeaderProperties

//0x4 bytes (sizeof)
struct wil_details_StagingConfigHeaderProperties
{
    ULONG ignoreServiceState:1;                                             //0x0
    ULONG ignoreUserState:1;                                                //0x0
    ULONG ignoreTestState:1;                                                //0x0
    ULONG ignoreVariants:1;                                                 //0x0
    ULONG unused:28;                                                        //0x0
}; 

----------------------------------------
Structure: wil_details_StagingConfigUsageTrigger

//0x10 bytes (sizeof)
struct wil_details_StagingConfigUsageTrigger
{
    ULONG featureId;                                                        //0x0
    struct wil_details_StagingConfigWnfStateName trigger;                   //0x4
    ULONG serviceReportingKind:16;                                          //0xc
    ULONG isVariantConfig:1;                                                //0xc
    ULONG unused:15;                                                        //0xc
}; 

----------------------------------------
Structure: wil_details_StagingConfigWnfStateName

//0x8 bytes (sizeof)
struct wil_details_StagingConfigWnfStateName
{
    ULONG Data[2];                                                          //0x0
}; 

----------------------------------------
Structure: 

//0x4 bytes (sizeof)
enum 
{
    KTMOH_CommitTransaction_Result = 1,
    KTMOH_RollbackTransaction_Result = 2
}; 

----------------------------------------
Structure: BUS_QUERY_ID_TYPE

//0x4 bytes (sizeof)
enum BUS_QUERY_ID_TYPE
{
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5
}; 

----------------------------------------
Structure: DEVICE_TEXT_TYPE

//0x4 bytes (sizeof)
enum DEVICE_TEXT_TYPE
{
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1
}; 

----------------------------------------
Structure: DMA_COMPLETION_STATUS

//0x4 bytes (sizeof)
enum DMA_COMPLETION_STATUS
{
    DmaComplete = 0,
    DmaAborted = 1,
    DmaError = 2,
    DmaCancelled = 3
}; 

----------------------------------------
Structure: ETW_COMPRESSION_RESUMPTION_MODE

//0x4 bytes (sizeof)
enum ETW_COMPRESSION_RESUMPTION_MODE
{
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2
}; 

----------------------------------------
Structure: FEATURE_CHANGE_TIME

//0x4 bytes (sizeof)
enum FEATURE_CHANGE_TIME
{
    FEATURE_CHANGE_TIME_READ = 0,
    FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
    FEATURE_CHANGE_TIME_SESSION = 2,
    FEATURE_CHANGE_TIME_REBOOT = 3,
    FEATURE_CHANGE_TIME_USER_FLAG = 128
}; 

----------------------------------------
Structure: FEATURE_ENABLED_STATE

//0x4 bytes (sizeof)
enum FEATURE_ENABLED_STATE
{
    FEATURE_ENABLED_STATE_DEFAULT = 0,
    FEATURE_ENABLED_STATE_DISABLED = 1,
    FEATURE_ENABLED_STATE_ENABLED = 2,
    FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
    FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64
}; 

----------------------------------------
Structure: HAL_APIC_DESTINATION_MODE

//0x4 bytes (sizeof)
enum HAL_APIC_DESTINATION_MODE
{
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat = 2,
    ApicDestinationModeLogicalClustered = 3,
    ApicDestinationModeUnknown = 4
}; 

----------------------------------------
Structure: HSTORAGE_TYPE

//0x4 bytes (sizeof)
enum HSTORAGE_TYPE
{
    Stable = 0,
    Volatile = 1,
    InvalidStorage = 2
}; 

----------------------------------------
Structure: INTERRUPT_CONNECTION_TYPE

//0x4 bytes (sizeof)
enum INTERRUPT_CONNECTION_TYPE
{
    InterruptTypeControllerInput = 0,
    InterruptTypeXapicMessage = 1,
    InterruptTypeHypertransport = 2,
    InterruptTypeMessageRequest = 3
}; 

----------------------------------------
Structure: IRPLOCK

//0x4 bytes (sizeof)
enum IRPLOCK
{
    IRPLOCK_CANCELABLE = 0,
    IRPLOCK_CANCEL_STARTED = 1,
    IRPLOCK_CANCEL_COMPLETE = 2,
    IRPLOCK_COMPLETED = 3
}; 

----------------------------------------
Structure: JOB_OBJECT_IO_RATE_CONTROL_FLAGS

//0x4 bytes (sizeof)
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
}; 

----------------------------------------
Structure: JOB_OBJECT_NET_RATE_CONTROL_FLAGS

//0x4 bytes (sizeof)
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
}; 

----------------------------------------
Structure: KD_CALLBACK_ACTION

//0x4 bytes (sizeof)
enum KD_CALLBACK_ACTION
{
    KdConfigureDeviceAndContinue = 0,
    KdSkipDeviceAndContinue = 1,
    KdConfigureDeviceAndStop = 2,
    KdSkipDeviceAndStop = 3
}; 

----------------------------------------
Structure: KD_NAMESPACE_ENUM

//0x4 bytes (sizeof)
enum KD_NAMESPACE_ENUM
{
    KdNameSpacePCI = 0,
    KdNameSpaceACPI = 1,
    KdNameSpaceAny = 2,
    KdNameSpaceNone = 3,
    KdNameSpaceMax = 4
}; 

----------------------------------------
Structure: KTM_STATE

//0x4 bytes (sizeof)
enum KTM_STATE
{
    KKtmUninitialized = 0,
    KKtmInitialized = 1,
    KKtmRecovering = 2,
    KKtmOnline = 3,
    KKtmRecoveryFailed = 4,
    KKtmOffline = 5
}; 

----------------------------------------
Structure: LSA_FOREST_TRUST_RECORD_TYPE

//0x4 bytes (sizeof)
enum LSA_FOREST_TRUST_RECORD_TYPE
{
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2,
    ForestTrustBinaryInfo = 3,
    ForestTrustScannerInfo = 4,
    ForestTrustRecordTypeLast = 4
}; 

----------------------------------------
Structure: PDCCLIENTID

//0x4 bytes (sizeof)
enum PDCCLIENTID
{
    PDC_INVALID_CLIENT = 0,
    PDC_PLM_CLIENT = 1,
    PDC_NQM_CLIENT = 2,
    PDC_WNS_CLIENT = 3,
    PDC_DAM_CLIENT = 4,
    PDC_WCM_CLIENT = 5,
    PDC_NCSI_CLIENT = 7,
    PDC_DHCP_CLIENT = 8,
    PDC_TCPIP_CLIENT = 9,
    PDC_WU_CLIENT = 11,
    PDC_GP_CLIENT = 12,
    PDC_NCA_CLIENT = 14,
    PDC_BI_CLIENT = 15,
    PDC_MSCHED_CLIENT = 16,
    PDC_SUSPENDRESUME_CLIENT = 17,
    PDC_INTERNAL_CLIENT = 18,
    PDC_DEFAULT_KM_TEST_CLIENT_EXEMPTED = 19,
    PDC_DEFAULT_UM_TEST_CLIENT_EXEMPTED = 20,
    PDC_DAM_PHASE_TEST_CLIENT = 21,
    PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
    PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
    PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
    PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
    PDC_DAM_KM_TEST_CLIENT = 26,
    PDC_DAM_UM_TEST_CLIENT = 27,
    PDC_SINGLETON_TEST_CLIENT = 28,
    PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
    PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
    PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
    PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
    PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
    PDC_SHELL_CLIENT = 34,
    PDC_MAINTENANCE_CLIENT = 35,
    PDC_SYNC_CLIENT = 36,
    PDC_IDM_CLIENT = 37,
    PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
    PDC_TETHERING_CLIENT = 39,
    PDC_AUDIO_CLIENT = 40,
    PDC_LOCK_SCREEN = 41,
    PDC_LREC_CLIENT = 42,
    PDC_WP_BW_CLIENT = 43,
    PDC_WP_MEDIA_STREAMING_CLIENT = 44,
    PDC_WP_MAPS_CLIENT = 46,
    PDC_WP_SYNC_CLIENT = 47,
    PDC_SETTING_SYNC_CLIENT = 48,
    PDC_WP_EDM_CLIENT = 49,
    PDC_WP_WALLET_CLIENT = 50,
    PDC_WP_LOCATION_CLIENT = 51,
    PDC_WP_CM_CLIENT = 53,
    PDC_WP_DCP_CLIENT = 54,
    PDC_WP_WIFIAUTO_CLIENT = 55,
    PDC_BITLOCKER_CLIENT = 56,
    PDC_MDM_CERTINSTALLER_CLIENT = 57,
    PDC_WP_IM_CLIENT = 58,
    PDC_WP_MMS_CLIENT = 59,
    PDC_DEVICEENROLLER_CLIENT = 60,
    PDC_WP_WIFI_SCANNING_CLIENT = 61,
    PDC_WP_OMADM_CLIENT = 62,
    PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
    PDC_WP_DIS_CLIENT = 64,
    PDC_BITS_CLIENT = 65,
    PDC_WP_VOIP_EXECUTION_CLIENT = 66,
    PDC_WP_RESERVED_CLIENT3 = 67,
    PDC_SLEEP_STUDY_CLIENT = 68,
    PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
    PDC_HYPERV_CLIENT = 70,
    PDC_KM_SIGNAL_CLIENT = 71,
    PDC_UM_SIGNAL_CLIENT = 72,
    PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
    PDC_XB_SYSTEM_CLIENT = 74,
    PDC_XB_HOST_CLIENT = 75,
    PDC_PRINT_JOB_MANAGER_CLIENT = 76,
    PDC_TELEMETRY_CLIENT = 77,
    PDC_ERROR_REPORTING_CLIENT = 78,
    PDC_XBOX_NTM = 79,
    PDC_CBE_CLIENT = 80,
    PDC_FIND_MY_PHONE_CLIENT = 81,
    PDC_COMMAND_CHANNEL_CLIENT = 82,
    PDC_PPM_PROFILES_CLIENT = 83,
    PDC_WIFI_CALLING_CLIENT = 84,
    PDC_WU_REBOOT_CLIENT = 85,
    PDC_SYSMAIN_CLIENT = 86,
    PDC_XBOX_UPDATE_CLIENT = 87,
    PDC_CHAT_SERVICE_CLIENT = 88,
    PDC_FIND_MY_DEVICE_CLIENT = 89,
    PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
    PDC_INSTALL_AGENT_CLIENT = 91,
    PDC_XBOX_WAKE_ON_VOICE = 92,
    PDC_PLM_AUDIO_CLIENT = 93,
    PDC_WP_BCKAUDIO_CLIENT = 94,
    PDC_WAKE_ON_LAN_CLIENT = 95,
    PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
    PDC_DATA_MIGRATION_MANAGER = 97,
    PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
    PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
    PDC_HAM_CLIENT = 100,
    PDC_FILESHARINGSERVER_CLIENT = 101,
    PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
    PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
    PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
    PDC_HTTPSDATASOURCE_CLIENT = 105,
    PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
    PDC_TERMINALSERVER_SESSION_CLIENT = 107,
    PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
    PDC_XBOX_NUI_CLIENT = 110,
    PDC_WIFI_CALLING_IMS_CLIENT = 111,
    PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,
    PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,
    PDC_CONTAINER_MANAGER_CLIENT = 114,
    PDC_NUMBER_OF_CLIENTS = 115
}; 

----------------------------------------
Structure: PDC_ACTIVITY_TYPE

//0x4 bytes (sizeof)
enum PDC_ACTIVITY_TYPE
{
    PdcNetwork = 0,
    PdcSystem = 1,
    PdcTimer = 2,
    PdcAllNetworks = 3,
    PdcAnyNetwork = 4,
    PdcInvalidActivity = 5,
    PdcMaxActivity = 5
}; 

----------------------------------------
Structure: PDC_CS_PHASE

//0x4 bytes (sizeof)
enum PDC_CS_PHASE
{
    PdcNoCsPhase = 0,
    PdcConnectionPhase = 1,
    PdcShellPhase = 2,
    PdcPlmPhase = 3,
    PdcMaintenancePhase = 4,
    PdcDamPhase = 5,
    PdcLowPowerPhase = 6,
    PdcResiliencyNotificationPhase = 7,
    PdcResiliencyPhase = 8,
    PdcInvalidPhase = 9,
    PdcMaxPhase = 9
}; 

----------------------------------------
Structure: PDC_RESOURCE

//0x4 bytes (sizeof)
enum PDC_RESOURCE
{
    PdcResourceSystemForeground = 0,
    PdcResourceUniversalApplications = 1,
    PdcResourceWin32 = 2,
    PdcResourceNetwork = 3,
    PdcResourceSystemBackground = 4,
    PdcResourceMin = 0,
    PdcResourceMax = 4
}; 

----------------------------------------
Structure: POWER_ACTION

//0x4 bytes (sizeof)
enum POWER_ACTION
{
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8
}; 

----------------------------------------
Structure: POWER_POLICY_DEVICE_TYPE

//0x4 bytes (sizeof)
enum POWER_POLICY_DEVICE_TYPE
{
    PolicyDeviceSystemButton = 0,
    PolicyDeviceThermalZone = 1,
    PolicyDeviceBattery = 2,
    PolicyDeviceMemory = 3,
    PolicyInitiatePowerActionAPI = 4,
    PolicySetPowerStateAPI = 5,
    PolicyImmediateDozeS4 = 6,
    PolicySystemIdle = 7,
    PolicyDeviceWakeAlarm = 8,
    PolicyDeviceFan = 9,
    PolicyCsBatterySaver = 10,
    PolicyImmediateDozeS4Predicted = 11,
    PolicyImmediateDozeS4PredictedNoWake = 12,
    PolicyImmediateDozeS4AdaptiveBudget = 13,
    PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
    PolicySystemInitiatedShutdown = 15,
    PolicyDeviceMax = 16
}; 

----------------------------------------
Structure: PPM_IDLE_BUCKET_TIME_TYPE

//0x4 bytes (sizeof)
enum PPM_IDLE_BUCKET_TIME_TYPE
{
    PpmIdleBucketTimeInQpc = 0,
    PpmIdleBucketTimeIn100ns = 1,
    PpmIdleBucketTimeMaximum = 2
}; 

----------------------------------------
Structure: PROFILE_DEPARTURE_STYLE

//0x4 bytes (sizeof)
enum PROFILE_DEPARTURE_STYLE
{
    PDS_UPDATE_DEFAULT = 1,
    PDS_UPDATE_ON_REMOVE = 2,
    PDS_UPDATE_ON_INTERFACE = 3,
    PDS_UPDATE_ON_EJECT = 4
}; 

----------------------------------------
Structure: PROFILE_STATUS

//0x4 bytes (sizeof)
enum PROFILE_STATUS
{
    DOCK_NOTDOCKDEVICE = 0,
    DOCK_QUIESCENT = 1,
    DOCK_ARRIVING = 2,
    DOCK_DEPARTING = 3,
    DOCK_EJECTIRP_COMPLETED = 4
}; 

----------------------------------------
Structure: PS_CREATE_STATE

//0x4 bytes (sizeof)
enum PS_CREATE_STATE
{
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7
}; 

----------------------------------------
Structure: RTLP_CSPARSE_BITMAP_STATE

//0x4 bytes (sizeof)
enum RTLP_CSPARSE_BITMAP_STATE
{
    CommitBitmapInvalid = 0,
    UserBitmapInvalid = 1,
    UserBitmapValid = 2
}; 

----------------------------------------
Structure: ReplacesCorHdrNumericDefines

//0x4 bytes (sizeof)
enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
    COMIMAGE_FLAGS_32BITPREFERRED = 131072,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024
}; 

----------------------------------------
Structure: SE_WS_APPX_SIGNATURE_ORIGIN

//0x4 bytes (sizeof)
enum SE_WS_APPX_SIGNATURE_ORIGIN
{
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4
}; 

----------------------------------------
Structure: SLEEPSTUDY_SPM_SCENARIO_CS_EXIT

//0x4 bytes (sizeof)
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
    SpmScenarioStopReasonUnspecified = 16,
    SpmScenarioStopReasonCsExit = 17,
    SpmScenarioStopReasonInternalSegmentTransition = 18,
    SpmScenarioStopReasonMax = 19
}; 

----------------------------------------
Structure: SYSTEM_POWER_CONDITION

//0x4 bytes (sizeof)
enum SYSTEM_POWER_CONDITION
{
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3
}; 

----------------------------------------
Structure: TlgIn_t

//0x4 bytes (sizeof)
enum TlgIn_t
{
    TlgInNULL = 0,
    TlgInUNICODESTRING = 1,
    TlgInANSISTRING = 2,
    TlgInINT8 = 3,
    TlgInUINT8 = 4,
    TlgInINT16 = 5,
    TlgInUINT16 = 6,
    TlgInINT32 = 7,
    TlgInUINT32 = 8,
    TlgInINT64 = 9,
    TlgInUINT64 = 10,
    TlgInFLOAT = 11,
    TlgInDOUBLE = 12,
    TlgInBOOL32 = 13,
    TlgInBINARY = 14,
    TlgInGUID = 15,
    _TlgInPOINTER_unsupported = 16,
    TlgInFILETIME = 17,
    TlgInSYSTEMTIME = 18,
    TlgInSID = 19,
    TlgInHEXINT32 = 20,
    TlgInHEXINT64 = 21,
    TlgInCOUNTEDSTRING = 22,
    TlgInCOUNTEDANSISTRING = 23,
    _TlgInSTRUCT = 24,
    TlgInCOUNTEDBINARY = 25,
    _TlgInMax = 26,
    TlgInINTPTR = 9,
    TlgInUINTPTR = 10,
    TlgInPOINTER = 21,
    TlgInLONG = 7,
    TlgInULONG = 8,
    TlgInHEXLONG = 20,
    _TlgInCcount = 32,
    TlgInVcount = 64,
    _TlgInChain = 128,
    _TlgInCustom = 96,
    _TlgInTypeMask = 31,
    _TlgInCountMask = 96,
    _TlgInFlagMask = 224
}; 

----------------------------------------
Structure: TlgOut_t

//0x4 bytes (sizeof)
enum TlgOut_t
{
    TlgOutNULL = 0,
    TlgOutNOPRINT = 1,
    TlgOutSTRING = 2,
    TlgOutBOOLEAN = 3,
    TlgOutHEX = 4,
    TlgOutPID = 5,
    TlgOutTID = 6,
    TlgOutPORT = 7,
    TlgOutIPV4 = 8,
    TlgOutIPV6 = 9,
    TlgOutSOCKETADDRESS = 10,
    TlgOutXML = 11,
    TlgOutJSON = 12,
    TlgOutWIN32ERROR = 13,
    TlgOutNTSTATUS = 14,
    TlgOutHRESULT = 15,
    TlgOutFILETIME = 16,
    TlgOutSIGNED = 17,
    TlgOutUNSIGNED = 18,
    TlgOutUTF8 = 35,
    TlgOutPKCS7_WITH_TYPE_INFO = 36,
    TlgOutCODE_POINTER = 37,
    TlgOutDATETIME_UTC = 38,
    _TlgOutMax = 39,
    _TlgOutChain = 128,
    _TlgOutTypeMask = 127
}; 

----------------------------------------
Structure: UoWActionType

//0x4 bytes (sizeof)
enum UoWActionType
{
    UoWAddThisKey = 0,
    UoWAddChildKey = 1,
    UoWDeleteThisKey = 2,
    UoWDeleteChildKey = 3,
    UoWSetValueNew = 4,
    UoWSetValueExisting = 5,
    UoWDeleteValue = 6,
    UoWSetKeyUserFlags = 7,
    UoWSetLastWriteTime = 8,
    UoWSetSecurityDescriptor = 9,
    UoWRenameSubKey = 10,
    UoWRenameOldSubKey = 11,
    UoWRenameNewSubKey = 12,
    UoWIsolation = 13,
    UoWInvalid = 14
}; 

----------------------------------------
Structure: _ADD_DRIVER_STAGE

//0x4 bytes (sizeof)
enum _ADD_DRIVER_STAGE
{
    ClassConfigFilters = 0,
    LowerDeviceFilters = 1,
    LowerClassFilters = 2,
    DeviceService = 3,
    UpperDeviceFilters = 4,
    UpperClassFilters = 5,
    MaximumAddStage = 6
}; 

----------------------------------------
Structure: _ALTERNATIVE_ARCHITECTURE_TYPE

//0x4 bytes (sizeof)
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2
}; 

----------------------------------------
Structure: _ARBITER_ACTION

//0x4 bytes (sizeof)
enum _ARBITER_ACTION
{
    ArbiterActionTestAllocation = 0,
    ArbiterActionRetestAllocation = 1,
    ArbiterActionCommitAllocation = 2,
    ArbiterActionRollbackAllocation = 3,
    ArbiterActionQueryAllocatedResources = 4,
    ArbiterActionWriteReservedResources = 5,
    ArbiterActionQueryConflict = 6,
    ArbiterActionQueryArbitrate = 7,
    ArbiterActionAddReserved = 8,
    ArbiterActionBootAllocation = 9
}; 

----------------------------------------
Structure: _ARBITER_REQUEST_SOURCE

//0x4 bytes (sizeof)
enum _ARBITER_REQUEST_SOURCE
{
    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported = 0,
    ArbiterRequestHalReported = 1,
    ArbiterRequestLegacyAssigned = 2,
    ArbiterRequestPnpDetected = 3,
    ArbiterRequestPnpEnumerated = 4
}; 

----------------------------------------
Structure: _ARBITER_RESULT

//0x4 bytes (sizeof)
enum _ARBITER_RESULT
{
    ArbiterResultUndefined = -1,
    ArbiterResultSuccess = 0,
    ArbiterResultExternalConflict = 1,
    ArbiterResultNullRequest = 2
}; 

----------------------------------------
Structure: _BLOB_ID

//0x4 bytes (sizeof)
enum _BLOB_ID
{
    BLOB_TYPE_UNKNOWN = 0,
    BLOB_TYPE_CONNECTION_INFO = 1,
    BLOB_TYPE_MESSAGE = 2,
    BLOB_TYPE_SECURITY_CONTEXT = 3,
    BLOB_TYPE_SECTION = 4,
    BLOB_TYPE_REGION = 5,
    BLOB_TYPE_VIEW = 6,
    BLOB_TYPE_RESERVE = 7,
    BLOB_TYPE_DIRECT_TRANSFER = 8,
    BLOB_TYPE_HANDLE_DATA = 9,
    BLOB_TYPE_MAX_ID = 10
}; 

----------------------------------------
Structure: _BOOT_ENTROPY_SOURCE_ID

//0x4 bytes (sizeof)
enum _BOOT_ENTROPY_SOURCE_ID
{
    BootEntropySourceNone = 0,
    BootEntropySourceSeedfile = 1,
    BootEntropySourceExternal = 2,
    BootEntropySourceTpm = 3,
    BootEntropySourceRdrand = 4,
    BootEntropySourceTime = 5,
    BootEntropySourceAcpiOem0 = 6,
    BootEntropySourceUefi = 7,
    BootEntropySourceCng = 8,
    BootEntropySourceTcbTpm = 9,
    BootEntropySourceTcbRdrand = 10,
    BootMaxEntropySources = 10
}; 

----------------------------------------
Structure: _BOOT_ENTROPY_SOURCE_RESULT_CODE

//0x4 bytes (sizeof)
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
    BootEntropySourceStructureUninitialized = 0,
    BootEntropySourceDisabledByPolicy = 1,
    BootEntropySourceNotPresent = 2,
    BootEntropySourceError = 3,
    BootEntropySourceSuccess = 4
}; 

----------------------------------------
Structure: _BUGCHECK_RECOVERY_LOG_EVENT

//0x4 bytes (sizeof)
enum _BUGCHECK_RECOVERY_LOG_EVENT
{
    RecoveryEventStart = 0,
    RecoveryEventPhase1Status = 1,
    RecoveryEventPhase2Status = 2,
    RecoveryEventMax = 3
}; 

----------------------------------------
Structure: _BUS_DATA_TYPE

//0x4 bytes (sizeof)
enum _BUS_DATA_TYPE
{
    ConfigurationSpaceUndefined = -1,
    Cmos = 0,
    EisaConfiguration = 1,
    Pos = 2,
    CbusConfiguration = 3,
    PCIConfiguration = 4,
    VMEConfiguration = 5,
    NuBusConfiguration = 6,
    PCMCIAConfiguration = 7,
    MPIConfiguration = 8,
    MPSAConfiguration = 9,
    PNPISAConfiguration = 10,
    SgiInternalConfiguration = 11,
    MaximumBusDataType = 12
}; 

----------------------------------------
Structure: _CMP_FAILURE_INJECTION_POINT

//0x4 bytes (sizeof)
enum _CMP_FAILURE_INJECTION_POINT
{
    CmpFailurePointPoolAllocation = 0,
    CmpFailurePointViewMapping = 1,
    CmpFailurePointViewPinning = 2,
    CmpFailurePointResourceCharging = 3,
    CmpFailurePointFileWrite = 4,
    CmpFailurePointFileRead = 5,
    CmpFailurePointCacheFlush = 6,
    CmpFailurePointFlush = 7,
    CmpFailurePointFlushAndPurge = 8,
    CmpFailurePointForceLargeBin = 9,
    CmpFailurePointDontFixAlignment = 10,
    CmpFailurePointAllocateCell = 11,
    CmpFailurePointMarkDirty = 12,
    CmpFailurePointForceMultiLevelMap = 13,
    CmpFailurePointAllocateContiguousLogEntry = 14,
    CmpFailurePointAllocateKcb = 15,
    CmpFailurePointCreateKeyBody = 16,
    CmpFailurePointForceFreeKcb = 17,
    CmpFailurePointKcbLockUpgrade = 18,
    CmpFailurePointKcbLockUpgradeDelay = 19,
    CmpFailurePointKeyEnumResumeContextVerification = 20,
    CmpFailurePointKeyEnumForceRetry = 21,
    CmpFailurePointForceReorganization = 22,
    CmpFailurePointForceLazyCOWByPolicy = 23,
    CmpFailureInjectionPointCount = 24
}; 

----------------------------------------
Structure: _CM_DIRTY_VECTOR_OPERATION

//0x4 bytes (sizeof)
enum _CM_DIRTY_VECTOR_OPERATION
{
    DirtyVectorModified = 0,
    DirtyDataCaptureStart = 1,
    DirtyDataCaptureEnd = 2
}; 

----------------------------------------
Structure: _CM_LOAD_FAILURE_TYPE

//0x4 bytes (sizeof)
enum _CM_LOAD_FAILURE_TYPE
{
    _None = 0,
    _CmpCreateHive = 1,
    _HvpBuildMap = 3,
    _HvpBuildMapForLoaderHive = 4,
    _HvpInitMap = 5,
    _HvLoadHive = 6,
    _HvpMapHiveImage = 7,
    _HvpRecoverData = 8,
    _CmpValidateHiveSecurityDescriptors = 9,
    _HvpEnlistBinInMap = 10,
    _CmCheckRegistry = 11,
    _CmRegistryIO = 12,
    _CmCheckRegistry2 = 13,
    _CmpCheckKey = 14,
    _CmpCheckValueList = 15,
    _HvCheckHive = 16,
    _HvCheckBin = 17,
    _HvpGetLogEntryDirtyVector = 18,
    _HvpReadLogEntryHeader = 19,
    _HvpReadLogEntry = 20,
    _CmpMountPreloadedHives = 21,
    _CmpLoadHiveThread = 22,
    _CmpCheckLeaf = 23,
    _HvHiveStartFileBacked = 24,
    _HvStartHiveMemoryBacked = 25,
    _HvpEnlistFreeCells = 26,
    _HvpPerformLogFileRecovery = 27,
    _CmpInitHiveFromFile = 28,
    _CmpLoadKeyCommon = 29,
    _CmpLinkHiveToMaster = 30,
    _CmLoadKey = 31,
    _CmLoadAppKey = 32,
    _CmpResolveHiveLoadConflict = 33
}; 

----------------------------------------
Structure: _CM_SHARE_DISPOSITION

//0x4 bytes (sizeof)
enum _CM_SHARE_DISPOSITION
{
    CmResourceShareUndetermined = 0,
    CmResourceShareDeviceExclusive = 1,
    CmResourceShareDriverExclusive = 2,
    CmResourceShareShared = 3
}; 

----------------------------------------
Structure: _CONFIGURATION_CLASS

//0x4 bytes (sizeof)
enum _CONFIGURATION_CLASS
{
    SystemClass = 0,
    ProcessorClass = 1,
    CacheClass = 2,
    AdapterClass = 3,
    ControllerClass = 4,
    PeripheralClass = 5,
    MemoryClass = 6,
    MaximumClass = 7
}; 

----------------------------------------
Structure: _CONFIGURATION_TYPE

//0x4 bytes (sizeof)
enum _CONFIGURATION_TYPE
{
    ArcSystem = 0,
    CentralProcessor = 1,
    FloatingPointProcessor = 2,
    PrimaryIcache = 3,
    PrimaryDcache = 4,
    SecondaryIcache = 5,
    SecondaryDcache = 6,
    SecondaryCache = 7,
    EisaAdapter = 8,
    TcAdapter = 9,
    ScsiAdapter = 10,
    DtiAdapter = 11,
    MultiFunctionAdapter = 12,
    DiskController = 13,
    TapeController = 14,
    CdromController = 15,
    WormController = 16,
    SerialController = 17,
    NetworkController = 18,
    DisplayController = 19,
    ParallelController = 20,
    PointerController = 21,
    KeyboardController = 22,
    AudioController = 23,
    OtherController = 24,
    DiskPeripheral = 25,
    FloppyDiskPeripheral = 26,
    TapePeripheral = 27,
    ModemPeripheral = 28,
    MonitorPeripheral = 29,
    PrinterPeripheral = 30,
    PointerPeripheral = 31,
    KeyboardPeripheral = 32,
    TerminalPeripheral = 33,
    OtherPeripheral = 34,
    LinePeripheral = 35,
    NetworkPeripheral = 36,
    SystemMemory = 37,
    DockingInformation = 38,
    RealModeIrqRoutingTable = 39,
    RealModePCIEnumeration = 40,
    MaximumType = 41
}; 

----------------------------------------
Structure: _CREATE_FILE_TYPE

//0x4 bytes (sizeof)
enum _CREATE_FILE_TYPE
{
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2
}; 

----------------------------------------
Structure: _ConnectionResourceConsumerDesc

//0x4 bytes (sizeof)
enum _ConnectionResourceConsumerDesc
{
    ConnectionResourceConsumerDescIsUndefined = 0,
    ConnectionResourceConsumerDescIsDevice = 1,
    ConnectionResourceConsumerDescIsOpregion = 2,
    ConnectionResourceConsumerDescMax = 3
}; 

----------------------------------------
Structure: _DEVICE_POWER_STATE

//0x4 bytes (sizeof)
enum _DEVICE_POWER_STATE
{
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5
}; 

----------------------------------------
Structure: _DEVICE_RELATION_LEVEL

//0x4 bytes (sizeof)
enum _DEVICE_RELATION_LEVEL
{
    RELATION_LEVEL_REMOVE_EJECT = 0,
    RELATION_LEVEL_DEPENDENT = 1,
    RELATION_LEVEL_DIRECT_DESCENDANT = 2
}; 

----------------------------------------
Structure: _DEVICE_RELATION_TYPE

//0x4 bytes (sizeof)
enum _DEVICE_RELATION_TYPE
{
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6
}; 

----------------------------------------
Structure: _DEVICE_USAGE_NOTIFICATION_TYPE

//0x4 bytes (sizeof)
enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5,
    DeviceUsageTypeGuestAssigned = 6
}; 

----------------------------------------
Structure: _DEVICE_WAKE_DEPTH

//0x4 bytes (sizeof)
enum _DEVICE_WAKE_DEPTH
{
    DeviceWakeDepthNotWakeable = 0,
    DeviceWakeDepthD0 = 1,
    DeviceWakeDepthD1 = 2,
    DeviceWakeDepthD2 = 3,
    DeviceWakeDepthD3hot = 4,
    DeviceWakeDepthD3cold = 5,
    DeviceWakeDepthMaximum = 6
}; 

----------------------------------------
Structure: _DEVPROP_OPERATOR

//0x4 bytes (sizeof)
enum _DEVPROP_OPERATOR
{
    DEVPROP_OPERATOR_MODIFIER_NOT = 65536,
    DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 131072,
    DEVPROP_OPERATOR_NONE = 0,
    DEVPROP_OPERATOR_EXISTS = 1,
    DEVPROP_OPERATOR_NOT_EXISTS = 65537,
    DEVPROP_OPERATOR_EQUALS = 2,
    DEVPROP_OPERATOR_NOT_EQUALS = 65538,
    DEVPROP_OPERATOR_GREATER_THAN = 3,
    DEVPROP_OPERATOR_LESS_THAN = 4,
    DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
    DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
    DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 131074,
    DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 196610,
    DEVPROP_OPERATOR_BITWISE_AND = 7,
    DEVPROP_OPERATOR_BITWISE_OR = 8,
    DEVPROP_OPERATOR_BEGINS_WITH = 9,
    DEVPROP_OPERATOR_ENDS_WITH = 10,
    DEVPROP_OPERATOR_CONTAINS = 11,
    DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 131081,
    DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 131082,
    DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 131083,
    DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
    DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 135168,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 139264,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 143360,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 147456,
    DEVPROP_OPERATOR_AND_OPEN = 1048576,
    DEVPROP_OPERATOR_AND_CLOSE = 2097152,
    DEVPROP_OPERATOR_OR_OPEN = 3145728,
    DEVPROP_OPERATOR_OR_CLOSE = 4194304,
    DEVPROP_OPERATOR_NOT_OPEN = 5242880,
    DEVPROP_OPERATOR_NOT_CLOSE = 6291456,
    DEVPROP_OPERATOR_ARRAY_CONTAINS = 268435456,
    DEVPROP_OPERATOR_MASK_EVAL = 4095,
    DEVPROP_OPERATOR_MASK_LIST = 61440,
    DEVPROP_OPERATOR_MASK_MODIFIER = 983040,
    DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
    DEVPROP_OPERATOR_MASK_LOGICAL = 267386880,
    DEVPROP_OPERATOR_MASK_ARRAY = -268435456
}; 

----------------------------------------
Structure: _DIRECTORY_NOTIFY_INFORMATION_CLASS

//0x4 bytes (sizeof)
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2
}; 

----------------------------------------
Structure: _DMA_INTERRUPT_TYPE

//0x4 bytes (sizeof)
enum _DMA_INTERRUPT_TYPE
{
    InterruptTypeCompletion = 0,
    InterruptTypeError = 1,
    InterruptTypeCancelled = 2
}; 

----------------------------------------
Structure: _DMA_SPEED

//0x4 bytes (sizeof)
enum _DMA_SPEED
{
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5
}; 

----------------------------------------
Structure: _DMA_WIDTH

//0x4 bytes (sizeof)
enum _DMA_WIDTH
{
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5
}; 

----------------------------------------
Structure: _DOMAIN_CONFIGURATION_ARCH

//0x4 bytes (sizeof)
enum _DOMAIN_CONFIGURATION_ARCH
{
    DomainConfigurationArm64 = 0,
    DomainConfigurationInvalid = 1
}; 

----------------------------------------
Structure: _DUMP_EVENTS

//0x4 bytes (sizeof)
enum _DUMP_EVENTS
{
    DUMP_EVENT_NONE = 0,
    DUMP_EVENT_HIBER_RESUME = 1,
    DUMP_EVENT_HIBER_RESUME_END = 2
}; 

----------------------------------------
Structure: _ETW_BUFFER_STATE

//0x4 bytes (sizeof)
enum _ETW_BUFFER_STATE
{
    EtwBufferStateFree = 0,
    EtwBufferStateGeneralLogging = 1,
    EtwBufferStateCSwitch = 2,
    EtwBufferStateFlush = 3,
    EtwBufferStatePendingCompression = 4,
    EtwBufferStateCompressed = 5,
    EtwBufferStatePlaceholder = 6,
    EtwBufferStateMaximum = 7
}; 

----------------------------------------
Structure: _ETW_GUID_TYPE

//0x4 bytes (sizeof)
enum _ETW_GUID_TYPE
{
    EtwTraceGuidType = 0,
    EtwNotificationGuidType = 1,
    EtwGroupGuidType = 2,
    EtwGuidTypeMax = 3
}; 

----------------------------------------
Structure: _ETW_HEADER_TYPE

//0x4 bytes (sizeof)
enum _ETW_HEADER_TYPE
{
    EtwHeaderTypeNative = 0,
    EtwHeaderTypeWow = 1,
    EtwHeaderTypeMax = 2
}; 

----------------------------------------
Structure: _ETW_NOTIFICATION_TYPE

//0x4 bytes (sizeof)
enum _ETW_NOTIFICATION_TYPE
{
    EtwNotificationTypeNoReply = 1,
    EtwNotificationTypeLegacyEnable = 2,
    EtwNotificationTypeEnable = 3,
    EtwNotificationTypePrivateLogger = 4,
    EtwNotificationTypePerflib = 5,
    EtwNotificationTypeAudio = 6,
    EtwNotificationTypeSession = 7,
    EtwNotificationTypeReserved = 8,
    EtwNotificationTypeCredentialUI = 9,
    EtwNotificationTypeInProcSession = 10,
    EtwNotificationTypeFilteredPrivateLogger = 11,
    EtwNotificationTypeMax = 12
}; 

----------------------------------------
Structure: _ETW_PERFECT_HASH_FUNCTION_TYPE

//0x4 bytes (sizeof)
enum _ETW_PERFECT_HASH_FUNCTION_TYPE
{
    ETW_PHF_EVENT_ID = 0,
    ETW_PHF_STACK_WALK = 1,
    ETW_PHF_MAX_COUNT = 2
}; 

----------------------------------------
Structure: _ETW_PERIODIC_TIMER_STATE

//0x4 bytes (sizeof)
enum _ETW_PERIODIC_TIMER_STATE
{
    EtwpPeriodicTimerUnset = 0,
    EtwpPeriodicTimerSet = 1
}; 

----------------------------------------
Structure: _ETW_RT_EVENT_LOSS

//0x4 bytes (sizeof)
enum _ETW_RT_EVENT_LOSS
{
    EtwRtEventNoLoss = 0,
    EtwRtEventLost = 1,
    EtwRtBufferLost = 2,
    EtwRtBackupLost = 3,
    EtwRtEventLossMax = 4
}; 

----------------------------------------
Structure: _ETW_STRING_TOKEN_TYPE

//0x4 bytes (sizeof)
enum _ETW_STRING_TOKEN_TYPE
{
    ETW_STRING_TOKEN_EXE = 0,
    ETW_STRING_TOKEN_PACKAGE_ID = 1,
    ETW_STRING_TOKEN_PKG_APP_ID = 2,
    ETW_STRING_TOKEN_CONTAINER = 3,
    ETW_STRING_TOKEN_MAX_COUNT = 4
}; 

----------------------------------------
Structure: _EVENT_INFO_CLASS

//0x4 bytes (sizeof)
enum _EVENT_INFO_CLASS
{
    EventProviderBinaryTrackInfo = 0,
    EventProviderSetReserved1 = 1,
    EventProviderSetTraits = 2,
    EventProviderUseDescriptorType = 3,
    MaxEventInfo = 4
}; 

----------------------------------------
Structure: _EVENT_TYPE

//0x4 bytes (sizeof)
enum _EVENT_TYPE
{
    NotificationEvent = 0,
    SynchronizationEvent = 1
}; 

----------------------------------------
Structure: _EXCEPTION_DISPOSITION

//0x4 bytes (sizeof)
enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3
}; 

----------------------------------------
Structure: _EXQUEUEINDEX

//0x4 bytes (sizeof)
enum _EXQUEUEINDEX
{
    ExPoolUntrusted = 0,
    IoPoolUntrusted = 1,
    ExPoolMax = 8
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_TYPE

//0x4 bytes (sizeof)
enum _EXT_IOMMU_DEVICE_TYPE
{
    EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
    EXT_IOMMU_DEVICE_TYPE_PCI = 1,
    EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
    EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
    EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
    EXT_IOMMU_DEVICE_TYPE_GIC = 5,
    EXT_IOMMU_DEVICE_TYPE_TEST = 6,
    EXT_IOMMU_DEVICE_TYPE_MAX = 7
}; 

----------------------------------------
Structure: _EXT_IOMMU_TRANSLATION_TYPE

//0x4 bytes (sizeof)
enum _EXT_IOMMU_TRANSLATION_TYPE
{
    ExtTranslationTypePassThrough = 0,
    ExtTranslationTypeBlocked = 1,
    ExtTranslationTypeTranslate = 2,
    ExtTranslationTypeSafePassThrough = 3,
    ExtTranslationTypeInvalid = 4
}; 

----------------------------------------
Structure: _EX_GEN_RANDOM_DOMAIN

//0x4 bytes (sizeof)
enum _EX_GEN_RANDOM_DOMAIN
{
    ExGenRandomDomainKernel = 0,
    ExGenRandomDomainFirst = 0,
    ExGenRandomDomainUserVisible = 1,
    ExGenRandomDomainMax = 2
}; 

----------------------------------------
Structure: _EX_HEAP_TYPE

//0x4 bytes (sizeof)
enum _EX_HEAP_TYPE
{
    ExHeapTypeNonPagedMin = 0,
    ExHeapTypeNonPaged = 0,
    ExHeapTypeNonPagedMax = 1,
    ExHeapTypeNonPagedNx = 1,
    ExHeapTypePagedMin = 2,
    ExHeapTypePaged = 2,
    ExHeapTypePagedMax = 3,
    ExHeapTypeMmSt = 3,
    ExHeapTypeMax = 4,
    ExHeapTypeSpecialMax = 4
}; 

----------------------------------------
Structure: _EX_POOL_PRIORITY

//0x4 bytes (sizeof)
enum _EX_POOL_PRIORITY
{
    LowPoolPriority = 0,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_ARCH

//0x4 bytes (sizeof)
enum _FAULT_INFORMATION_ARCH
{
    FaultInformationInvalid = 0,
    FaultInformationArm64 = 1,
    FaultInformationX64 = 2
}; 

----------------------------------------
Structure: _FAULT_INFORMATION_ARM64_TYPE

//0x4 bytes (sizeof)
enum _FAULT_INFORMATION_ARM64_TYPE
{
    UnsupportedUpstreamTransaction = 0,
    AddressSizeFault = 1,
    TlbMatchConflict = 2,
    ExternalFault = 3,
    PermissionFault = 4,
    AccessFlagFault = 5,
    TranslationFault = 6,
    MaxFaultType = 7
}; 

----------------------------------------
Structure: _FILE_INFORMATION_CLASS

//0x4 bytes (sizeof)
enum _FILE_INFORMATION_CLASS
{
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileMaximumInformation = 76
}; 

----------------------------------------
Structure: _FILE_OBJECT_EXTENSION_TYPE

//0x4 bytes (sizeof)
enum _FILE_OBJECT_EXTENSION_TYPE
{
    FoExtTypeTransactionParams = 0,
    FoExtTypeInternal = 1,
    FoExtTypeIosbRange = 2,
    FoExtTypeGeneric = 3,
    FoExtTypeSfio = 4,
    FoExtTypeSymlink = 5,
    FoExtTypeOplockKey = 6,
    FoExtTypeSilo = 7,
    FoExtTypeMemoryPartitionInfo = 8,
    MaxFoExtTypes = 9
}; 

----------------------------------------
Structure: _FSINFOCLASS

//0x4 bytes (sizeof)
enum _FSINFOCLASS
{
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsMaximumInformation = 15
}; 

----------------------------------------
Structure: _FS_FILTER_SECTION_SYNC_TYPE

//0x4 bytes (sizeof)
enum _FS_FILTER_SECTION_SYNC_TYPE
{
    SyncTypeOther = 0,
    SyncTypeCreateSection = 1
}; 

----------------------------------------
Structure: _FUNCTION_TABLE_TYPE

//0x4 bytes (sizeof)
enum _FUNCTION_TABLE_TYPE
{
    RF_SORTED = 0,
    RF_UNSORTED = 1,
    RF_CALLBACK = 2,
    RF_KERNEL_DYNAMIC = 3
}; 

----------------------------------------
Structure: _GPIO_PIN_CONFIG_TYPE

//0x4 bytes (sizeof)
enum _GPIO_PIN_CONFIG_TYPE
{
    PullDefault = 0,
    PullUp = 1,
    PullDown = 2,
    PullNone = 3
}; 

----------------------------------------
Structure: _GPIO_PIN_IORESTRICTION_TYPE

//0x4 bytes (sizeof)
enum _GPIO_PIN_IORESTRICTION_TYPE
{
    IoRestrictionNone = 0,
    IoRestrictionInputOnly = 1,
    IoRestrictionOutputOnly = 2,
    IoRestrictionNoneAndPreserve = 3
}; 

----------------------------------------
Structure: _HALP_DMA_ADAPTER_ALLOCATION_STATE

//0x4 bytes (sizeof)
enum _HALP_DMA_ADAPTER_ALLOCATION_STATE
{
    HalpDmaAdapterAllocationStateNone = 0,
    HalpDmaAdapterAllocateChannel = 1,
    HalpDmaAdapterAllocateMapRegisters = 2,
    HalpDmaAdapterAllocateChannelRemapResources = 3,
    HalpDmaAdapterAllocationStateComplete = 4,
    HalpDmaAdapterAllocationStateMax = 5
}; 

----------------------------------------
Structure: _HALP_DMA_MAP_BUFFER_TYPE

//0x4 bytes (sizeof)
enum _HALP_DMA_MAP_BUFFER_TYPE
{
    HalpDmaContiguousMapBuffer = 0,
    HalpDmaNonContiguousMapBuffer = 1,
    HalpDmaMaximumMapBufferType = 2
}; 

----------------------------------------
Structure: _HALP_EMERGENCY_LA_QUEUE_TYPE

//0x4 bytes (sizeof)
enum _HALP_EMERGENCY_LA_QUEUE_TYPE
{
    HalpDmaLegacyLaQueueEntry = 0,
    HalpDmaThinLaQueueEntry = 1,
    HalpDmaLaQueueEntryMax = 2
}; 

----------------------------------------
Structure: _HAL_CLOCK_TIMER_MODE

//0x4 bytes (sizeof)
enum _HAL_CLOCK_TIMER_MODE
{
    HalClockTimerModePeriodic = 0,
    HalClockTimerModeOneShot = 1,
    HalClockTimerModeMax = 2
}; 

----------------------------------------
Structure: _HAL_DMA_CRASH_DUMP_REGISTER_TYPE

//0x4 bytes (sizeof)
enum _HAL_DMA_CRASH_DUMP_REGISTER_TYPE
{
    HalDmaCrashDumpRegisterSet1 = 0,
    HalDmaCrashDumpRegisterSet2 = 1,
    HalDmaCrashDumpRegisterSetMax = 2
}; 

----------------------------------------
Structure: _HAL_INIT_PHASE

//0x4 bytes (sizeof)
enum _HAL_INIT_PHASE
{
    HalInitPhaseBspProcEarly = 0,
    HalInitPhaseBspProcEarlyMmReady = 1,
    HalInitPhaseBspProcEarlyTimerReady = 2,
    HalInitPhaseBspProcEarlyEnd = 3,
    HalInitPhasePnProcEarly = 4,
    HalInitPhasePnProcEarlyInterruptsReady = 5,
    HalInitPhasePnProcEarlyEnd = 6,
    HalInitPhaseBspSystemEarly = 7,
    HalInitPhaseBspSystemEarlyAcpiReady = 8,
    HalInitPhaseBspSystemEarlyHalExtensionsReady = 9,
    HalInitPhaseBspSystemEarlyInterruptsAlmostReady = 10,
    HalInitPhaseBspSystemEarlyIommusReady = 11,
    HalInitPhaseBspSystemEarlyInterruptsReady = 12,
    HalInitPhaseBspSystemEarlyDmaReady = 12,
    HalInitPhaseBspSystemEarlyProcReady = 13,
    HalInitPhaseBspSystemEarlyHwPerfCntReady = 14,
    HalInitPhaseBspSystemEarlyAllocationDone = 15,
    HalInitPhaseBspSystemEarlyEnd = 16,
    HalInitPhaseBspSystemLate = 17,
    HalInitPhaseBspSystemLateEnd = 18,
    HalInitPhasePnSystemLate = 19,
    HalInitPhasePnSystemLateEnd = 20,
    HalInitPhaseAllProcStartComplete = 21,
    HalInitPhaseAllProcStartCompleteEnd = 22,
    HalInitPhaseExPhase1Ready = 23,
    HalInitPhaseExPhase1ReadyEnd = 24,
    HalInitPhaseAcpiPdoStarted = 25,
    HalInitPhaseAcpiPdoStartedEnd = 26,
    HalInitPhaseReportResources = 27,
    HalInitPhaseReportResourcesEnd = 28,
    HalInitPhaseReportCoreSystemResources = 29,
    HalInitPhaseReportCoreSystemResourcesEnd = 30,
    HalInitPhaseLateSystemActions = 31,
    HalInitPhaseLateSystemActionsTelemetryReady = 32,
    HalInitPhaseLateSystemActionsEnd = 33
}; 

----------------------------------------
Structure: _HAL_PROCESSOR_STAT_TYPE

//0x4 bytes (sizeof)
enum _HAL_PROCESSOR_STAT_TYPE
{
    HalProcessorStatResidency = 0,
    HalProcessorStatCount = 1,
    HalProcessorStatMax = 2
}; 

----------------------------------------
Structure: _HARDWARE_COUNTER_TYPE

//0x4 bytes (sizeof)
enum _HARDWARE_COUNTER_TYPE
{
    PMCCounter = 0,
    MaxHardwareCounterType = 1
}; 

----------------------------------------
Structure: _HEAP_FAILURE_TYPE

//0x4 bytes (sizeof)
enum _HEAP_FAILURE_TYPE
{
    heap_failure_internal = 0,
    heap_failure_unknown = 1,
    heap_failure_generic = 2,
    heap_failure_entry_corruption = 3,
    heap_failure_multiple_entries_corruption = 4,
    heap_failure_virtual_block_corruption = 5,
    heap_failure_buffer_overrun = 6,
    heap_failure_buffer_underrun = 7,
    heap_failure_block_not_busy = 8,
    heap_failure_invalid_argument = 9,
    heap_failure_invalid_allocation_type = 10,
    heap_failure_usage_after_free = 11,
    heap_failure_cross_heap_operation = 12,
    heap_failure_freelists_corruption = 13,
    heap_failure_listentry_corruption = 14,
    heap_failure_lfh_bitmap_mismatch = 15,
    heap_failure_segment_lfh_bitmap_corruption = 16,
    heap_failure_segment_lfh_double_free = 17,
    heap_failure_vs_subsegment_corruption = 18,
    heap_failure_null_heap = 19,
    heap_failure_allocation_limit = 20,
    heap_failure_commit_limit = 21,
    heap_failure_invalid_va_mgr_query = 22
}; 

----------------------------------------
Structure: _HEAP_LFH_LOCKMODE

//0x4 bytes (sizeof)
enum _HEAP_LFH_LOCKMODE
{
    HeapLockNotHeld = 0,
    HeapLockShared = 1,
    HeapLockExclusive = 2
}; 

----------------------------------------
Structure: _HEAP_SEGMGR_LARGE_PAGE_POLICY

//0x4 bytes (sizeof)
enum _HEAP_SEGMGR_LARGE_PAGE_POLICY
{
    HeapSegMgrNoLargePages = 0,
    HeapSegMgrEnableLargePages = 1,
    HeapSegMgrNormalPolicy = 1,
    HeapSegMgrForceSmall = 2,
    HeapSegMgrForceLarge = 3,
    HeapSegMgrForceRandom = 4,
    HeapSegMgrLargePagePolicyMax = 5
}; 

----------------------------------------
Structure: _HEAP_SEG_RANGE_TYPE

//0x4 bytes (sizeof)
enum _HEAP_SEG_RANGE_TYPE
{
    HeapSegRangeUser = 0,
    HeapSegRangeInternal = 1,
    HeapSegRangeLFH = 2,
    HeapSegRangeVS = 3,
    HeapSegRangeTypeMax = 3
}; 

----------------------------------------
Structure: _HV_EXT_EPF_MODE

//0x4 bytes (sizeof)
enum _HV_EXT_EPF_MODE
{
    HvExtEpfModeMin = 0,
    HvExtEpfModeNt = 0,
    HvExtEpfModeMax = 1
}; 

----------------------------------------
Structure: _INTERFACE_TYPE

//0x4 bytes (sizeof)
enum _INTERFACE_TYPE
{
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18
}; 

----------------------------------------
Structure: _INTERLOCKED_RESULT

//0x4 bytes (sizeof)
enum _INTERLOCKED_RESULT
{
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
}; 

----------------------------------------
Structure: _INTERRUPT_PROBLEM

//0x4 bytes (sizeof)
enum _INTERRUPT_PROBLEM
{
    InterruptProblemNone = 0,
    InterruptProblemMadtParsingFailure = 1,
    InterruptProblemNoControllersFound = 2,
    InterruptProblemFailedDiscovery = 3,
    InterruptProblemInitializeLocalUnitFailed = 4,
    InterruptProblemInitializeIoUnitFailed = 5,
    InterruptProblemSetLogicalIdFailed = 6,
    InterruptProblemSetLineStateFailed = 7,
    InterruptProblemGenerateMessageFailed = 8,
    InterruptProblemConvertIdFailed = 9,
    InterruptProblemCmciSetupFailed = 10,
    InterruptProblemQueryMaxProcessorsCalledTooEarly = 11,
    InterruptProblemProcessorReset = 12,
    InterruptProblemStartProcessorFailed = 13,
    InterruptProblemProcessorNotAlive = 14,
    InterruptProblemLowerIrqlViolation = 15,
    InterruptProblemInvalidIrql = 16,
    InterruptProblemNoSuchController = 17,
    InterruptProblemNoSuchLines = 18,
    InterruptProblemBadConnectionData = 19,
    InterruptProblemBadRoutingData = 20,
    InterruptProblemInvalidProcessor = 21,
    InterruptProblemFailedToAttainTarget = 22,
    InterruptProblemUnsupportedWiringConfiguration = 23,
    InterruptProblemSpareAlreadyStarted = 24,
    InterruptProblemClusterNotFullyReplaced = 25,
    InterruptProblemNewClusterAlreadyActive = 26,
    InterruptProblemNewClusterTooLarge = 27,
    InterruptProblemCannotHardwareQuiesce = 28,
    InterruptProblemIpiDestinationUpdateFailed = 29,
    InterruptProblemNoMemory = 30,
    InterruptProblemNoIrtEntries = 31,
    InterruptProblemConnectionDataBaitAndSwitch = 32,
    InterruptProblemInvalidLogicalFlatId = 33,
    InterruptProblemDeinitializeLocalUnitFailed = 34,
    InterruptProblemDeinitializeIoUnitFailed = 35,
    InterruptProblemMismatchedThermalLvtIsr = 36,
    InterruptProblemHvRetargetFailed = 37,
    InterruptProblemDeferredErrorSetupFailed = 38
}; 

----------------------------------------
Structure: _INTERRUPT_RESULT

//0x4 bytes (sizeof)
enum _INTERRUPT_RESULT
{
    InterruptBeginFatalError = 0,
    InterruptBeginLine = 1,
    InterruptBeginSpurious = 2,
    InterruptBeginVector = 3,
    InterruptBeginNone = 4
}; 

----------------------------------------
Structure: _INTERRUPT_TARGET_TYPE

//0x4 bytes (sizeof)
enum _INTERRUPT_TARGET_TYPE
{
    InterruptTargetInvalid = 0,
    InterruptTargetAllIncludingSelf = 1,
    InterruptTargetAllExcludingSelf = 2,
    InterruptTargetSelfOnly = 3,
    InterruptTargetPhysical = 4,
    InterruptTargetLogicalFlat = 5,
    InterruptTargetLogicalClustered = 6,
    InterruptTargetRemapIndex = 7,
    InterruptTargetHypervisor = 8
}; 

----------------------------------------
Structure: _INVPCID_TYPE

//0x4 bytes (sizeof)
enum _INVPCID_TYPE
{
    InvpcidIndividualAddress = 0,
    InvpcidSingleContext = 1,
    InvpcidAllContextAndGlobals = 2,
    InvpcidAllContext = 3
}; 

----------------------------------------
Structure: _IOP_PRIORITY_HINT

//0x4 bytes (sizeof)
enum _IOP_PRIORITY_HINT
{
    IopIoPriorityNotSet = 0,
    IopIoPriorityVeryLow = 1,
    IopIoPriorityLow = 2,
    IopIoPriorityNormal = 3,
    IopIoPriorityHigh = 4,
    IopIoPriorityCritical = 5,
    MaxIopIoPriorityTypes = 6
}; 

----------------------------------------
Structure: _IO_ALLOCATION_ACTION

//0x4 bytes (sizeof)
enum _IO_ALLOCATION_ACTION
{
    KeepObject = 1,
    DeallocateObject = 2,
    DeallocateObjectKeepRegisters = 3
}; 

----------------------------------------
Structure: _IO_PRIORITY_HINT

//0x4 bytes (sizeof)
enum _IO_PRIORITY_HINT
{
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5
}; 

----------------------------------------
Structure: _IO_RATE_CONTROL_TYPE

//0x4 bytes (sizeof)
enum _IO_RATE_CONTROL_TYPE
{
    IoRateControlTypeCapMin = 0,
    IoRateControlTypeIopsCap = 0,
    IoRateControlTypeBandwidthCap = 1,
    IoRateControlTypeTimePercentCap = 2,
    IoRateControlTypeCapMax = 2,
    IoRateControlTypeReservationMin = 3,
    IoRateControlTypeIopsReservation = 3,
    IoRateControlTypeBandwidthReservation = 4,
    IoRateControlTypeTimePercentReservation = 5,
    IoRateControlTypeReservationMax = 5,
    IoRateControlTypeCriticalReservationMin = 6,
    IoRateControlTypeIopsCriticalReservation = 6,
    IoRateControlTypeBandwidthCriticalReservation = 7,
    IoRateControlTypeTimePercentCriticalReservation = 8,
    IoRateControlTypeCriticalReservationMax = 8,
    IoRateControlTypeSoftCapMin = 9,
    IoRateControlTypeIopsSoftCap = 9,
    IoRateControlTypeBandwidthSoftCap = 10,
    IoRateControlTypeTimePercentSoftCap = 11,
    IoRateControlTypeSoftCapMax = 11,
    IoRateControlTypeLimitExcessNotifyMin = 12,
    IoRateControlTypeIopsLimitExcessNotify = 12,
    IoRateControlTypeBandwidthLimitExcessNotify = 13,
    IoRateControlTypeTimePercentLimitExcessNotify = 14,
    IoRateControlTypeLimitExcessNotifyMax = 14,
    IoRateControlTypeMax = 15
}; 

----------------------------------------
Structure: _IO_SESSION_STATE

//0x4 bytes (sizeof)
enum _IO_SESSION_STATE
{
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9
}; 

----------------------------------------
Structure: _IRQ_PRIORITY

//0x4 bytes (sizeof)
enum _IRQ_PRIORITY
{
    IrqPriorityUndefined = 0,
    IrqPriorityLow = 1,
    IrqPriorityNormal = 2,
    IrqPriorityHigh = 3
}; 

----------------------------------------
Structure: _JOBOBJECTINFOCLASS

//0x4 bytes (sizeof)
enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectFreezeInformation = 18,
    JobObjectExtendedAccountingInformation = 19,
    JobObjectWakeInformation = 20,
    JobObjectBackgroundInformation = 21,
    JobObjectSchedulingRankBiasInformation = 22,
    JobObjectTimerVirtualizationInformation = 23,
    JobObjectCycleTimeNotification = 24,
    JobObjectClearEvent = 25,
    JobObjectInterferenceInformation = 26,
    JobObjectClearPeakJobMemoryUsed = 27,
    JobObjectMemoryUsageInformation = 28,
    JobObjectSharedCommit = 29,
    JobObjectContainerId = 30,
    JobObjectIoRateControlInformation = 31,
    JobObjectSiloRootDirectory = 37,
    JobObjectServerSiloBasicInformation = 38,
    JobObjectServerSiloUserSharedData = 39,
    JobObjectServerSiloInitialize = 40,
    JobObjectServerSiloRunningState = 41,
    JobObjectIoAttribution = 42,
    JobObjectMemoryPartitionInformation = 43,
    JobObjectContainerTelemetryId = 44,
    JobObjectSiloSystemRoot = 45,
    JobObjectEnergyTrackingState = 46,
    JobObjectThreadImpersonationInformation = 47,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48
}; 

----------------------------------------
Structure: _KCONTINUE_TYPE

//0x4 bytes (sizeof)
enum _KCONTINUE_TYPE
{
    KCONTINUE_UNWIND = 0,
    KCONTINUE_RESUME = 1,
    KCONTINUE_LONGJUMP = 2,
    KCONTINUE_SET = 3,
    KCONTINUE_LAST = 4
}; 

----------------------------------------
Structure: _KENLISTMENT_STATE

//0x4 bytes (sizeof)
enum _KENLISTMENT_STATE
{
    KEnlistmentUninitialized = 0,
    KEnlistmentActive = 256,
    KEnlistmentPreparing = 257,
    KEnlistmentPrepared = 258,
    KEnlistmentInDoubt = 259,
    KEnlistmentCommitted = 260,
    KEnlistmentCommittedNotify = 261,
    KEnlistmentCommitRequested = 262,
    KEnlistmentAborted = 263,
    KEnlistmentDelegated = 264,
    KEnlistmentDelegatedDisconnected = 265,
    KEnlistmentPrePreparing = 266,
    KEnlistmentForgotten = 267,
    KEnlistmentRecovering = 268,
    KEnlistmentAborting = 269,
    KEnlistmentReadOnly = 270,
    KEnlistmentOutcomeUnavailable = 271,
    KEnlistmentOffline = 272,
    KEnlistmentPrePrepared = 273,
    KEnlistmentInitialized = 274
}; 

----------------------------------------
Structure: _KERNEL_STACK_LIMITS

//0x4 bytes (sizeof)
enum _KERNEL_STACK_LIMITS
{
    BugcheckStackLimits = 0,
    DPCStackLimits = 1,
    ExpandedStackLimits = 2,
    NormalStackLimits = 3,
    Win32kStackLimits = 4,
    SwapBusyStackLimits = 5,
    IsrStackLimits = 6,
    DebuggerStackLimits = 7,
    NmiStackLimits = 8,
    MachineCheckStackLimits = 9,
    ExceptionStackLimits = 10,
    MaximumStackLimits = 11
}; 

----------------------------------------
Structure: _KE_WAKE_SOURCE_TYPE

//0x4 bytes (sizeof)
enum _KE_WAKE_SOURCE_TYPE
{
    KeWakeSourceTypeSpuriousWake = 0,
    KeWakeSourceTypeSpuriousClock = 1,
    KeWakeSourceTypeSpuriousInterrupt = 2,
    KeWakeSourceTypeQueryFailure = 3,
    KeWakeSourceTypeAccountingFailure = 4,
    KeWakeSourceTypeStaticSourceMax = 4,
    KeWakeSourceTypeInterrupt = 5,
    KeWakeSourceTypeIRTimer = 6,
    KeWakeSourceTypeMax = 7
}; 

----------------------------------------
Structure: _KHETERO_CPU_POLICY

//0x4 bytes (sizeof)
enum _KHETERO_CPU_POLICY
{
    KHeteroCpuPolicyAll = 0,
    KHeteroCpuPolicyLarge = 1,
    KHeteroCpuPolicyLargeOrIdle = 2,
    KHeteroCpuPolicySmall = 3,
    KHeteroCpuPolicySmallOrIdle = 4,
    KHeteroCpuPolicyDynamic = 5,
    KHeteroCpuPolicyStaticMax = 5,
    KHeteroCpuPolicyBiasedSmall = 6,
    KHeteroCpuPolicyBiasedLarge = 7,
    KHeteroCpuPolicyDefault = 8,
    KHeteroCpuPolicyMax = 9
}; 

----------------------------------------
Structure: _KHETERO_CPU_QOS

//0x4 bytes (sizeof)
enum _KHETERO_CPU_QOS
{
    KHeteroCpuQosDefault = 0,
    KHeteroCpuQosHigh = 0,
    KHeteroCpuQosMedium = 1,
    KHeteroCpuQosLow = 2,
    KHeteroCpuQosMultimedia = 3,
    KHeteroCpuQosDeadline = 4,
    KHeteroCpuQosDynamic = 5,
    KHeteroCpuQosMax = 5
}; 

----------------------------------------
Structure: _KHETERO_RUNNING_TYPE

//0x4 bytes (sizeof)
enum _KHETERO_RUNNING_TYPE
{
    KHeteroShortRunning = 0,
    KHeteroLongRunning = 1,
    KHeteroRunningTypeMax = 2
}; 

----------------------------------------
Structure: _KINTERRUPT_MODE

//0x4 bytes (sizeof)
enum _KINTERRUPT_MODE
{
    LevelSensitive = 0,
    Latched = 1
}; 

----------------------------------------
Structure: _KINTERRUPT_POLARITY

//0x4 bytes (sizeof)
enum _KINTERRUPT_POLARITY
{
    InterruptPolarityUnknown = 0,
    InterruptActiveHigh = 1,
    InterruptRisingEdge = 1,
    InterruptActiveLow = 2,
    InterruptFallingEdge = 2,
    InterruptActiveBoth = 3,
    InterruptActiveBothTriggerLow = 3,
    InterruptActiveBothTriggerHigh = 4
}; 

----------------------------------------
Structure: _KI_CALLBACK

//0x4 bytes (sizeof)
enum _KI_CALLBACK
{
    KiCallbackNmi = 0,
    KiCallbackBound = 1,
    KiCallbackSx = 2,
    KiCallbackCount = 3,
    KiFirstCallback = 0
}; 

----------------------------------------
Structure: _KNOWN_CONTROLLER_TYPE

//0x4 bytes (sizeof)
enum _KNOWN_CONTROLLER_TYPE
{
    InterruptControllerInvalid = 0,
    InterruptControllerPic = 1,
    InterruptControllerApic = 2,
    InterruptControllerGic = 3,
    InterruptControllerGicV3 = 4,
    InterruptControllerGicV4 = 5,
    InterruptControllerBcm = 6,
    InterruptControllerUnknown = 4096
}; 

----------------------------------------
Structure: _KOBJECTS

//0x4 bytes (sizeof)
enum _KOBJECTS
{
    EventNotificationObject = 0,
    EventSynchronizationObject = 1,
    MutantObject = 2,
    ProcessObject = 3,
    QueueObject = 4,
    SemaphoreObject = 5,
    ThreadObject = 6,
    GateObject = 7,
    TimerNotificationObject = 8,
    TimerSynchronizationObject = 9,
    Spare2Object = 10,
    Spare3Object = 11,
    Spare4Object = 12,
    Spare5Object = 13,
    Spare6Object = 14,
    Spare7Object = 15,
    Spare8Object = 16,
    ProfileCallbackObject = 17,
    ApcObject = 18,
    DpcObject = 19,
    DeviceQueueObject = 20,
    PriQueueObject = 21,
    InterruptObject = 22,
    ProfileObject = 23,
    Timer2NotificationObject = 24,
    Timer2SynchronizationObject = 25,
    ThreadedDpcObject = 26,
    MaximumKernelObject = 27
}; 

----------------------------------------
Structure: _KPROCESS_PPM_POLICY

//0x4 bytes (sizeof)
enum _KPROCESS_PPM_POLICY
{
    ProcessPpmDefault = 0,
    ProcessPpmThrottle = 1,
    ProcessPpmSemiThrottle = 2,
    ProcessPpmNoThrottle = 3,
    ProcessPpmWindowMinimized = 4,
    ProcessPpmWindowOccluded = 5,
    ProcessPpmWindowVisible = 6,
    ProcessPpmWindowInFocus = 7,
    MaxProcessPpmPolicy = 8
}; 

----------------------------------------
Structure: _KPROCESS_STATE

//0x4 bytes (sizeof)
enum _KPROCESS_STATE
{
    ProcessInMemory = 0,
    ProcessOutOfMemory = 1,
    ProcessInTransition = 2,
    ProcessOutTransition = 3,
    ProcessInSwap = 4,
    ProcessOutSwap = 5,
    ProcessRetryOutSwap = 6,
    ProcessAllSwapStates = 7
}; 

----------------------------------------
Structure: _KPROFILE_SOURCE

//0x4 bytes (sizeof)
enum _KPROFILE_SOURCE
{
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24
}; 

----------------------------------------
Structure: _KRESOURCEMANAGER_STATE

//0x4 bytes (sizeof)
enum _KRESOURCEMANAGER_STATE
{
    KResourceManagerUninitialized = 0,
    KResourceManagerOffline = 1,
    KResourceManagerOnline = 2
}; 

----------------------------------------
Structure: _KTHREAD_PPM_POLICY

//0x4 bytes (sizeof)
enum _KTHREAD_PPM_POLICY
{
    ThreadPpmDefault = 0,
    ThreadPpmThrottle = 1,
    ThreadPpmSemiThrottle = 2,
    ThreadPpmNoThrottle = 3,
    MaxThreadPpmPolicy = 4
}; 

----------------------------------------
Structure: _KTHREAD_STATE

//0x4 bytes (sizeof)
enum _KTHREAD_STATE
{
    Initialized = 0,
    Ready = 1,
    Running = 2,
    Standby = 3,
    Terminated = 4,
    Waiting = 5,
    Transition = 6,
    DeferredReady = 7,
    GateWaitObsolete = 8,
    WaitingForProcessInSwap = 9
}; 

----------------------------------------
Structure: _KTHREAD_TAG

//0x4 bytes (sizeof)
enum _KTHREAD_TAG
{
    KThreadTagNone = 0,
    KThreadTagMediaBuffering = 1,
    KThreadTagDeadline = 2,
    KThreadTagMax = 3
}; 

----------------------------------------
Structure: _KTIMER2_COLLECTION_INDEX

//0x4 bytes (sizeof)
enum _KTIMER2_COLLECTION_INDEX
{
    KTimer2CollectionNoWake = 0,
    KTimer2CollectionHr = 1,
    KTimer2CollectionPseudoHr = 2,
    KTimer2CollectionFinite = 3,
    KTimer2CollectionIr = 4,
    KTimer2CollectionNotInserted = 16,
    KTimer2CollectionInvalid = 21,
    KTimer2CollectionOptional = 32,
    KTimer2CollectionMin = 0,
    KTimer2CollectionMax = 5,
    KTimer2CollectionNode1 = 2
}; 

----------------------------------------
Structure: _KTRANSACTION_OUTCOME

//0x4 bytes (sizeof)
enum _KTRANSACTION_OUTCOME
{
    KTxOutcomeUninitialized = 0,
    KTxOutcomeUndetermined = 1,
    KTxOutcomeCommitted = 2,
    KTxOutcomeAborted = 3,
    KTxOutcomeUnavailable = 4
}; 

----------------------------------------
Structure: _KTRANSACTION_STATE

//0x4 bytes (sizeof)
enum _KTRANSACTION_STATE
{
    KTransactionUninitialized = 0,
    KTransactionActive = 1,
    KTransactionPreparing = 2,
    KTransactionPrepared = 3,
    KTransactionInDoubt = 4,
    KTransactionCommitted = 5,
    KTransactionAborted = 6,
    KTransactionDelegated = 7,
    KTransactionPrePreparing = 8,
    KTransactionForgotten = 9,
    KTransactionRecovering = 10,
    KTransactionPrePrepared = 11
}; 

----------------------------------------
Structure: _KWAIT_BLOCK_STATE

//0x4 bytes (sizeof)
enum _KWAIT_BLOCK_STATE
{
    WaitBlockBypassStart = 0,
    WaitBlockBypassComplete = 1,
    WaitBlockSuspendBypassStart = 2,
    WaitBlockSuspendBypassComplete = 3,
    WaitBlockActive = 4,
    WaitBlockInactive = 5,
    WaitBlockSuspended = 6,
    WaitBlockAllStates = 7
}; 

----------------------------------------
Structure: _KWAIT_REASON

//0x4 bytes (sizeof)
enum _KWAIT_REASON
{
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrSpare0 = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    MaximumWaitReason = 40
}; 

----------------------------------------
Structure: _KWAIT_STATE

//0x4 bytes (sizeof)
enum _KWAIT_STATE
{
    WaitInProgress = 0,
    WaitCommitted = 1,
    WaitAborted = 2,
    WaitSuspendInProgress = 3,
    WaitSuspended = 4,
    WaitResumeInProgress = 5,
    WaitResumeAborted = 6,
    WaitFirstSuspendState = 3,
    WaitLastSuspendState = 6,
    MaximumWaitState = 7
}; 

----------------------------------------
Structure: _LDR_DDAG_STATE

//0x4 bytes (sizeof)
enum _LDR_DDAG_STATE
{
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9
}; 

----------------------------------------
Structure: _LDR_DLL_LOAD_REASON

//0x4 bytes (sizeof)
enum _LDR_DLL_LOAD_REASON
{
    LoadReasonStaticDependency = 0,
    LoadReasonStaticForwarderDependency = 1,
    LoadReasonDynamicForwarderDependency = 2,
    LoadReasonDelayloadDependency = 3,
    LoadReasonDynamicLoad = 4,
    LoadReasonAsImageLoad = 5,
    LoadReasonAsDataLoad = 6,
    LoadReasonEnclavePrimary = 7,
    LoadReasonEnclaveDependency = 8,
    LoadReasonUnknown = -1
}; 

----------------------------------------
Structure: _LOCK_OPERATION

//0x4 bytes (sizeof)
enum _LOCK_OPERATION
{
    IoReadAccess = 0,
    IoWriteAccess = 1,
    IoModifyAccess = 2
}; 

----------------------------------------
Structure: _MACHINE_CHECK_NESTING_LEVEL

//0x4 bytes (sizeof)
enum _MACHINE_CHECK_NESTING_LEVEL
{
    McheckNormal = 0,
    McheckNmi = 1,
    McheckNestingLevels = 2
}; 

----------------------------------------
Structure: _MEMORY_CACHING_TYPE

//0x4 bytes (sizeof)
enum _MEMORY_CACHING_TYPE
{
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = 2,
    MmHardwareCoherentCached = 3,
    MmNonCachedUnordered = 4,
    MmUSWCCached = 5,
    MmMaximumCacheType = 6,
    MmNotMapped = -1
}; 

----------------------------------------
Structure: _MEMORY_CACHING_TYPE_ORIG

//0x4 bytes (sizeof)
enum _MEMORY_CACHING_TYPE_ORIG
{
    MmFrameBufferCached = 2
}; 

----------------------------------------
Structure: _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE

//0x4 bytes (sizeof)
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
    MemoryNotContiguous = 0,
    MemoryAlignedAndContiguous = 1,
    MemoryNotResident = 2,
    MemoryNotEligibleToMakeContiguous = 3,
    MemoryContiguityStateMax = 4
}; 

----------------------------------------
Structure: _MI_ALTERNATE_LOCK_VA_TYPE

//0x4 bytes (sizeof)
enum _MI_ALTERNATE_LOCK_VA_TYPE
{
    AlternateLockVaTypeSystemPtes = 0,
    AlternateLockVaTypeNonPagedPool = 1,
    AlternateLockVaTypeUser = 2,
    AlternateLockVaTypeSystem = 3,
    AlternateLockVaTypeMaximum = 4
}; 

----------------------------------------
Structure: _MI_ASSIGNED_REGION_TYPES

//0x4 bytes (sizeof)
enum _MI_ASSIGNED_REGION_TYPES
{
    AssignedRegionNonPagedPool = 0,
    AssignedRegionPagedPool = 1,
    AssignedRegionSystemCache = 2,
    AssignedRegionSystemPtes = 3,
    AssignedRegionUltraZero = 4,
    AssignedRegionPfnDatabase = 5,
    AssignedRegionCfg = 6,
    AssignedRegionHyperSpace = 7,
    AssignedRegionKernelStacks = 8,
    AssignedRegionPageTables = 9,
    AssignedRegionSession = 10,
    AssignedRegionSecureNonPagedPool = 11,
    AssignedRegionSystemImages = 12,
    AssignedRegionMaximum = 13
}; 

----------------------------------------
Structure: _MI_AVAILABLE_PAGE_WAIT_TYPES

//0x4 bytes (sizeof)
enum _MI_AVAILABLE_PAGE_WAIT_TYPES
{
    AvailablePagesWaitLow = 0,
    AvailablePagesWaitHigh = 1,
    AvailablePagesWaitVeryHigh = 2,
    AvailablePagesWaitMaximum = 3
}; 

----------------------------------------
Structure: _MI_CFG_BITMAP_TYPE

//0x4 bytes (sizeof)
enum _MI_CFG_BITMAP_TYPE
{
    CfgBitMapNative = 0,
    CfgBitMapWow64 = 1,
    CfgBitMapMax = 2
}; 

----------------------------------------
Structure: _MI_CROSS_PARTITION_CHARGE_TYPE

//0x4 bytes (sizeof)
enum _MI_CROSS_PARTITION_CHARGE_TYPE
{
    MiCrossPartitionSectionResAvailCharge = 0,
    MiCrossPartitionSectionCommitCharge = 1,
    MiCrossPartitionPageCombineResAvailCharge = 2,
    MiCrossPartitionPageCombineCommitCharge = 3,
    MiCrossPartitionLargePageResAvailCharge = 4,
    MiCrossPartitionLargePageCommitCharge = 5,
    MiCrossPartitionPageCloneResAvailCharge = 6,
    MiCrossPartitionMaximumCharge = 7
}; 

----------------------------------------
Structure: _MI_DYNAMICBASE_BITMAP

//0x4 bytes (sizeof)
enum _MI_DYNAMICBASE_BITMAP
{
    DynamicBaseBitMapNative = 0,
    DynamicBaseBitMap64Low = 1,
    DynamicBaseBitMap64LowWow = 2,
    DynamicBaseBitMap32WowFirst = 3,
    DynamicBaseBitMap32WowLast = 3,
    DynamicBaseBitMapInvalid = 4,
    DynamicBaseBitMapMax = 4
}; 

----------------------------------------
Structure: _MI_ENCLAVE_TYPE

//0x4 bytes (sizeof)
enum _MI_ENCLAVE_TYPE
{
    MiEnclaveNone = 0,
    MiEnclaveHardware = 1,
    MiEnclaveVsm = 2,
    MiEnclaveMax = 3
}; 

----------------------------------------
Structure: _MI_INPAGE_SUPPORT_TYPES

//0x4 bytes (sizeof)
enum _MI_INPAGE_SUPPORT_TYPES
{
    MiInPageSupportExpanded = 0,
    MiInPageSupportRegular = 1,
    MiInPageSupportMaximum = 2
}; 

----------------------------------------
Structure: _MI_IO_PFN_TYPE

//0x4 bytes (sizeof)
enum _MI_IO_PFN_TYPE
{
    MiIoPfnProbes = 0,
    MiIoPfnMaps = 1,
    MiIoPfnUnmapped = 2,
    MiMaximumIoPfnType = 3
}; 

----------------------------------------
Structure: _MI_KSTACK_TYPE

//0x4 bytes (sizeof)
enum _MI_KSTACK_TYPE
{
    MiRegularKstack = 0,
    MiShortLivedKstack = 1,
    MiMaximumKstack = 2
}; 

----------------------------------------
Structure: _MI_MEMORY_EVENT_TYPES

//0x4 bytes (sizeof)
enum _MI_MEMORY_EVENT_TYPES
{
    LowPagedPoolEvent = 0,
    HighPagedPoolEvent = 1,
    LowNonPagedPoolEvent = 2,
    HighNonPagedPoolEvent = 3,
    LowAvailablePagesEvent = 4,
    HighAvailablePagesEvent = 5,
    LowCommitEvent = 6,
    HighCommitEvent = 7,
    MaximumCommitEvent = 8,
    BadMemoryDetectedEvent = 9,
    PhysicalMemoryChangeEvent = 10,
    TotalNumberOfMemoryEvents = 11
}; 

----------------------------------------
Structure: _MI_MEMORY_HIGHLOW

//0x4 bytes (sizeof)
enum _MI_MEMORY_HIGHLOW
{
    MiMemoryHigh = 0,
    MiMemoryLow = 1,
    MiMemoryHighLow = 2
}; 

----------------------------------------
Structure: _MI_MIRROR_BITMAP_TYPES

//0x4 bytes (sizeof)
enum _MI_MIRROR_BITMAP_TYPES
{
    MirrorBitmapTypeNormal = 0,
    MirrorBitmapTypeInterlocked = 1,
    MirrorBitmapTypeMaximum = 2
}; 

----------------------------------------
Structure: _MI_PARTITION_THREAD

//0x4 bytes (sizeof)
enum _MI_PARTITION_THREAD
{
    MiZeroPageThreadSlot = 0,
    MiRebuildLargePagesThreadSlot = 1,
    MiPartitionWorkingSetManagerSlot = 2,
    MiDereferenceSegmentThreadSlot = 3,
    MiModifiedPageWriterSlot = 4,
    MiMappedPageWriterSlot = 5,
    MiNumberOfPartitionThreads = 6
}; 

----------------------------------------
Structure: _MI_PFN_CACHE_ATTRIBUTE

//0x4 bytes (sizeof)
enum _MI_PFN_CACHE_ATTRIBUTE
{
    MiNonCached = 0,
    MiCached = 1,
    MiWriteCombined = 2,
    MiNotMapped = 3
}; 

----------------------------------------
Structure: _MI_SHARED_USER_PAGE_TYPES

//0x4 bytes (sizeof)
enum _MI_SHARED_USER_PAGE_TYPES
{
    MiSharedUserPageKernel = 0,
    MiSharedUserPageHypervisor = 1,
    MiSharedUserPageMaximum = 2
}; 

----------------------------------------
Structure: _MI_SLAB_ALLOCATOR_PROTECTION

//0x4 bytes (sizeof)
enum _MI_SLAB_ALLOCATOR_PROTECTION
{
    MiSlabAllocatorProtectionReadExecute = 0,
    MiSlabAllocatorProtectionReadOnly = 1,
    MiSlabAllocatorProtectionNoAccess = 2,
    MiSlabAllocatorProtectionReadWrite = 3,
    MiSlabAllocatorProtectionMax = 4
}; 

----------------------------------------
Structure: _MI_SLAB_ALLOCATOR_TYPE

//0x4 bytes (sizeof)
enum _MI_SLAB_ALLOCATOR_TYPE
{
    MiSlabAllocatorTypeSlatProtected = 0,
    MiSlabAllocatorTypeUnprotected = 1,
    MiSlabAllocatorTypeMax = 2
}; 

----------------------------------------
Structure: _MI_SUBVAD_LISTS

//0x4 bytes (sizeof)
enum _MI_SUBVAD_LISTS
{
    MiSubVadPebTebAny = 0,
    MiSubVadPebTebBelow4gb = 1,
    MiSubVadMaximum = 2
}; 

----------------------------------------
Structure: _MI_SYSTEM_VA_TYPE

//0x4 bytes (sizeof)
enum _MI_SYSTEM_VA_TYPE
{
    MiVaUnused = 0,
    MiVaSessionSpace = 1,
    MiVaProcessSpace = 2,
    MiVaBootLoaded = 3,
    MiVaPfnDatabase = 4,
    MiVaNonPagedPool = 5,
    MiVaPagedPool = 6,
    MiVaSpecialPoolPaged = 7,
    MiVaSystemCache = 8,
    MiVaSystemPtes = 9,
    MiVaHal = 10,
    MiVaSessionGlobalSpace = 11,
    MiVaDriverImages = 12,
    MiVaSystemPtesLarge = 13,
    MiVaKernelStacks = 14,
    MiVaSecureNonPagedPool = 15,
    MiVaMaximumType = 16
}; 

----------------------------------------
Structure: _MI_VAD_64K_TYPES

//0x4 bytes (sizeof)
enum _MI_VAD_64K_TYPES
{
    MiVad64KPrivate = 0,
    MiVad64KShared = 1,
    MiVad64KTypes = 2
}; 

----------------------------------------
Structure: _MI_VAD_ALLOCATION_CELL_TYPE

//0x4 bytes (sizeof)
enum _MI_VAD_ALLOCATION_CELL_TYPE
{
    MiVadBottomUp = 0,
    MiVadStackPebTeb = 1,
    MiVadReserved64 = 2,
    MiVadAllocationCellMaximum = 3
}; 

----------------------------------------
Structure: _MI_WORKING_SET_TYPE

//0x4 bytes (sizeof)
enum _MI_WORKING_SET_TYPE
{
    MiWorkingSetTypeSystemCache = 0,
    MiWorkingSetTypeSystemViews = 1,
    MiWorkingSetTypePartitionMaximum = 1,
    MiWorkingSetTypePagedPool = 2,
    MiWorkingSetTypePagableMaximum = 2,
    MiWorkingSetTypeSystemPtes = 3,
    MiWorkingSetTypeKernelStacks = 4,
    MiWorkingSetTypeNonPagedPool = 5,
    MiWorkingSetTypeMaximum = 6
}; 

----------------------------------------
Structure: _MI_WRITE_TYPES

//0x4 bytes (sizeof)
enum _MI_WRITE_TYPES
{
    WriteTypeCached = 0,
    WriteTypeNonTemporal = 1,
    WriteTypeMaximum = 2
}; 

----------------------------------------
Structure: _MMLISTS

//0x4 bytes (sizeof)
enum _MMLISTS
{
    ZeroedPageList = 0,
    FreePageList = 1,
    StandbyPageList = 2,
    ModifiedPageList = 3,
    ModifiedNoWritePageList = 4,
    BadPageList = 5,
    ActiveAndValid = 6,
    TransitionPage = 7
}; 

----------------------------------------
Structure: _MM_PAGE_ACCESS_TYPE

//0x4 bytes (sizeof)
enum _MM_PAGE_ACCESS_TYPE
{
    MmPteAccessType = 0,
    MmCcReadAheadType = 1,
    MmPfnRepurposeType = 2,
    MmMaximumPageAccessType = 3
}; 

----------------------------------------
Structure: _MODE

//0x4 bytes (sizeof)
enum _MODE
{
    KernelMode = 0,
    UserMode = 1,
    MaximumMode = 2
}; 

----------------------------------------
Structure: _NT_PRODUCT_TYPE

//0x4 bytes (sizeof)
enum _NT_PRODUCT_TYPE
{
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3
}; 

----------------------------------------
Structure: _OBJECT_INFORMATION_CLASS

//0x4 bytes (sizeof)
enum _OBJECT_INFORMATION_CLASS
{
    ObjectBasicInformation = 0,
    ObjectNameInformation = 1,
    ObjectTypeInformation = 2,
    ObjectTypesInformation = 3,
    ObjectHandleFlagInformation = 4,
    ObjectSessionInformation = 5,
    ObjectSessionObjectInformation = 6,
    MaxObjectInfoClass = 7
}; 

----------------------------------------
Structure: _OB_OPEN_REASON

//0x4 bytes (sizeof)
enum _OB_OPEN_REASON
{
    ObCreateHandle = 0,
    ObOpenHandle = 1,
    ObDuplicateHandle = 2,
    ObInheritHandle = 3,
    ObMaxOpenReason = 4
}; 

----------------------------------------
Structure: _OPENCOUNT_REASON

//0x4 bytes (sizeof)
enum _OPENCOUNT_REASON
{
    OpenCount_SkipLogging = 0,
    OpenCount_AsyncRead = 1,
    OpenCount_FlushCache = 2,
    OpenCount_GetDirtyPage = 3,
    OpenCount_GetFlushedVDL = 4,
    OpenCount_InitCachemap1 = 5,
    OpenCount_InitCachemap2 = 6,
    OpenCount_InitCachemap3 = 7,
    OpenCount_InitCachemap4 = 8,
    OpenCount_InitCachemap5 = 9,
    OpenCount_MdlWrite = 10,
    OpenCount_MdlWriteAbort = 11,
    OpenCount_NotifyMappedWrite = 12,
    OpenCount_NotifyMappedWriteCompCallback = 13,
    OpenCount_PurgeCache = 14,
    OpenCount_PurgeCacheActiveViews = 15,
    OpenCount_ReadAhead = 16,
    OpenCount_SetFileSize = 17,
    OpenCount_SetFileSizeSection = 18,
    OpenCount_UninitCachemapReadAhead = 19,
    OpenCount_UninitCachemapReg = 20,
    OpenCount_UnmapInactiveViews = 21,
    OpenCount_UnmapInactiveViews1 = 22,
    OpenCount_UnmapInactiveViews2 = 23,
    OpenCount_UnmapInactiveViews3 = 24,
    OpenCount_WriteBehind = 25,
    OpenCount_WriteBehindComplete = 26,
    OpenCount_WriteBehindFailAcquire = 27
}; 

----------------------------------------
Structure: _PCI_BUSMASTER_RID_TYPE

//0x4 bytes (sizeof)
enum _PCI_BUSMASTER_RID_TYPE
{
    BusmasterRidInvalid = 0,
    BusmasterRidFromDeviceRid = 1,
    BusmasterRidFromBridgeRid = 2,
    BusmasterRidFromMultipleBridges = 3
}; 

----------------------------------------
Structure: _PCW_CALLBACK_TYPE

//0x4 bytes (sizeof)
enum _PCW_CALLBACK_TYPE
{
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter = 1,
    PcwCallbackEnumerateInstances = 2,
    PcwCallbackCollectData = 3
}; 

----------------------------------------
Structure: _PEP_ACPI_RESOURCE_TYPE

//0x4 bytes (sizeof)
enum _PEP_ACPI_RESOURCE_TYPE
{
    PepAcpiMemory = 0,
    PepAcpiIoPort = 1,
    PepAcpiInterrupt = 2,
    PepAcpiGpioIo = 3,
    PepAcpiGpioInt = 4,
    PepAcpiSpbI2c = 5,
    PepAcpiSpbSpi = 6,
    PepAcpiSpbUart = 7,
    PepAcpiExtendedMemory = 8,
    PepAcpiExtendedIo = 9
}; 

----------------------------------------
Structure: _PEP_WORK_TYPE

//0x4 bytes (sizeof)
enum _PEP_WORK_TYPE
{
    PepWorkActiveComplete = 0,
    PepWorkRequestIdleState = 1,
    PepWorkDevicePower = 2,
    PepWorkRequestPowerControl = 3,
    PepWorkDeviceIdle = 4,
    PepWorkCompleteIdleState = 5,
    PepWorkCompletePerfState = 6,
    PepWorkAcpiNotify = 7,
    PepWorkAcpiEvaluateControlMethodComplete = 8,
    PepWorkMax = 9
}; 

----------------------------------------
Structure: _PERFINFO_KERNELMEMORY_USAGE_TYPE

//0x4 bytes (sizeof)
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1
}; 

----------------------------------------
Structure: _PERFINFO_MM_STAT

//0x4 bytes (sizeof)
enum _PERFINFO_MM_STAT
{
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3
}; 

----------------------------------------
Structure: _PF_FILE_ACCESS_TYPE

//0x4 bytes (sizeof)
enum _PF_FILE_ACCESS_TYPE
{
    PfFileAccessTypeRead = 0,
    PfFileAccessTypeWrite = 1,
    PfFileAccessTypeMax = 2
}; 

----------------------------------------
Structure: _PLUGPLAY_EVENT_CATEGORY

//0x4 bytes (sizeof)
enum _PLUGPLAY_EVENT_CATEGORY
{
    HardwareProfileChangeEvent = 0,
    TargetDeviceChangeEvent = 1,
    DeviceClassChangeEvent = 2,
    CustomDeviceEvent = 3,
    DeviceInstallEvent = 4,
    DeviceArrivalEvent = 5,
    VetoEvent = 6,
    BlockedDriverEvent = 7,
    InvalidIDEvent = 8,
    DevicePropertyChangeEvent = 9,
    DeviceInstanceRemovalEvent = 10,
    DeviceInstanceStartedEvent = 11,
    MaxPlugEventCategory = 12
}; 

----------------------------------------
Structure: _PNP_DEVICE_ACTION_REQUEST

//0x4 bytes (sizeof)
enum _PNP_DEVICE_ACTION_REQUEST
{
    AssignResources = 0,
    ClearDeviceProblem = 1,
    ClearProblem = 2,
    ClearEjectProblem = 3,
    HaltDevice = 4,
    QueryPowerRelations = 5,
    Rebalance = 6,
    ReenumerateBootDevices = 7,
    ReenumerateDeviceOnly = 8,
    ReenumerateDeviceTree = 9,
    ReenumerateRootDevices = 10,
    RequeryDeviceState = 11,
    ResetDevice = 12,
    ResourceRequirementsChanged = 13,
    RestartEnumeration = 14,
    SetDeviceProblem = 15,
    StartDevice = 16,
    StartSystemDevicesPass0 = 17,
    StartSystemDevicesPass1 = 18,
    NotifyTransportRelationsChange = 19,
    NotifyEjectionRelationsChange = 20,
    ConfigureDevice = 21,
    ConfigureDeviceClass = 22,
    ConfigureDeviceExtensions = 23,
    ConfigureDeviceReset = 24,
    ClearDmaGuardProblem = 25,
    PnpDeviceActionRequestMax = 26
}; 

----------------------------------------
Structure: _PNP_DEVICE_DELETE_TYPE

//0x4 bytes (sizeof)
enum _PNP_DEVICE_DELETE_TYPE
{
    QueryRemoveDevice = 0,
    CancelRemoveDevice = 1,
    RemoveDevice = 2,
    SurpriseRemoveDevice = 3,
    EjectDevice = 4,
    RemoveFailedDevice = 5,
    RemoveUnstartedFailedDevice = 6,
    MaxDeviceDeleteType = 7
}; 

----------------------------------------
Structure: _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON

//0x4 bytes (sizeof)
enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
{
    DeviceQueryRebalanceSucceeded = 0,
    DeviceQueryStopFailed = 1,
    DeviceFailedGetNewResourceRequirement = 2,
    DeviceInUnexpectedState = 3,
    DeviceNotSupportQueryRebalance = 4
}; 

----------------------------------------
Structure: _PNP_DEVNODE_STATE

//0x4 bytes (sizeof)
enum _PNP_DEVNODE_STATE
{
    DeviceNodeUnspecified = 768,
    DeviceNodeUninitialized = 769,
    DeviceNodeInitialized = 770,
    DeviceNodeDriversAdded = 771,
    DeviceNodeResourcesAssigned = 772,
    DeviceNodeStartPending = 773,
    DeviceNodeStartCompletion = 774,
    DeviceNodeStartPostWork = 775,
    DeviceNodeStarted = 776,
    DeviceNodeQueryStopped = 777,
    DeviceNodeStopped = 778,
    DeviceNodeRestartCompletion = 779,
    DeviceNodeEnumeratePending = 780,
    DeviceNodeEnumerateCompletion = 781,
    DeviceNodeAwaitingQueuedDeletion = 782,
    DeviceNodeAwaitingQueuedRemoval = 783,
    DeviceNodeQueryRemoved = 784,
    DeviceNodeRemovePendingCloses = 785,
    DeviceNodeRemoved = 786,
    DeviceNodeDeletePendingCloses = 787,
    DeviceNodeDeleted = 788,
    MaxDeviceNodeState = 789
}; 

----------------------------------------
Structure: _PNP_REBALANCE_FAILURE

//0x4 bytes (sizeof)
enum _PNP_REBALANCE_FAILURE
{
    RebalanceFailureNone = 0,
    RebalanceFailureDisabled = 1,
    RebalanceFailureNoMemory = 2,
    RebalanceFailureQueryStopUnexpectedVeto = 3,
    RebalanceFailureNoRequirements = 4,
    RebalanceFailureNoCandidates = 5,
    RebalanceFailureNoConfiguration = 6
}; 

----------------------------------------
Structure: _PNP_REBALANCE_REASON

//0x4 bytes (sizeof)
enum _PNP_REBALANCE_REASON
{
    RebalanceReasonUnknown = 0,
    RebalanceReasonRequirementsChanged = 1,
    RebalanceReasonNewDevice = 2
}; 

----------------------------------------
Structure: _PNP_VETO_TYPE

//0x4 bytes (sizeof)
enum _PNP_VETO_TYPE
{
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12,
    PNP_VetoAlreadyRemoved = 13
}; 

----------------------------------------
Structure: _PNP_WATCHDOG_TYPE

//0x4 bytes (sizeof)
enum _PNP_WATCHDOG_TYPE
{
    PNP_EVENT_WORKER_WATCHDOG = 1,
    PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
    PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,
    PNP_ADD_DEVICE_WATCHDOG = 4,
    PNP_DRIVER_ENTRY_WATCHDOG = 5
}; 

----------------------------------------
Structure: _POLICY_AUDIT_EVENT_TYPE

//0x4 bytes (sizeof)
enum _POLICY_AUDIT_EVENT_TYPE
{
    AuditCategorySystem = 0,
    AuditCategoryLogon = 1,
    AuditCategoryObjectAccess = 2,
    AuditCategoryPrivilegeUse = 3,
    AuditCategoryDetailedTracking = 4,
    AuditCategoryPolicyChange = 5,
    AuditCategoryAccountManagement = 6,
    AuditCategoryDirectoryServiceAccess = 7,
    AuditCategoryAccountLogon = 8
}; 

----------------------------------------
Structure: _POOL_TYPE

//0x4 bytes (sizeof)
enum _POOL_TYPE
{
    NonPagedPool = 0,
    NonPagedPoolExecute = 0,
    PagedPool = 1,
    NonPagedPoolMustSucceed = 2,
    DontUseThisType = 3,
    NonPagedPoolCacheAligned = 4,
    PagedPoolCacheAligned = 5,
    NonPagedPoolCacheAlignedMustS = 6,
    MaxPoolType = 7,
    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = 2,
    NonPagedPoolBaseCacheAligned = 4,
    NonPagedPoolBaseCacheAlignedMustS = 6,
    NonPagedPoolSession = 32,
    PagedPoolSession = 33,
    NonPagedPoolMustSucceedSession = 34,
    DontUseThisTypeSession = 35,
    NonPagedPoolCacheAlignedSession = 36,
    PagedPoolCacheAlignedSession = 37,
    NonPagedPoolCacheAlignedMustSSession = 38,
    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = 516,
    NonPagedPoolSessionNx = 544
}; 

----------------------------------------
Structure: _POP_DEEP_SLEEP_DISENGAGE_REASON

//0x4 bytes (sizeof)
enum _POP_DEEP_SLEEP_DISENGAGE_REASON
{
    PopDeepSleepDisengageReasonInactive = 0,
    PopDeepSleepDisengageReasonNonAoAc = 1,
    PopDeepSleepDisengageReasonPendingIrps = 2,
    PopDeepSleepDisengageReasonPowerSettings = 3,
    PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,
    PopDeepSleepDisengageReasonSystemPowerTransition = 5,
    PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,
    PopDeepSleepDisengageReasonAcpi = 7,
    PopDeepSleepDisengageReasonDirectedDripsTransition = 8,
    PopDeepSleepDisengageReasonPepPreVeto = 9,
    PopDeepSleepDisengageReasonMax = 10
}; 

----------------------------------------
Structure: _POP_DEVICE_IDLE_TYPE

//0x4 bytes (sizeof)
enum _POP_DEVICE_IDLE_TYPE
{
    DeviceIdleNormal = 0,
    DeviceIdleDisk = 1
}; 

----------------------------------------
Structure: _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON

//0x4 bytes (sizeof)
enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON
{
    DirectedDripsProblemDeviceReasonSpecialDevice = 0,
    DirectedDripsProblemDeviceReasonNoDfx = 1,
    DirectedDripsProblemDeviceReasonNoPs4 = 2,
    DirectedDripsProblemDeviceReasonNoPs4Root = 3,
    DirectedDripsProblemDeviceReasonComponentContraint = 4,
    DirectedDripsProblemDeviceReasonDfxFailure = 5,
    DirectedDripsProblemDeviceReasonPagingDevice = 6,
    DirectedDripsProblemDeviceReasonDebuggingDevice = 7,
    DirectedDripsProblemDeviceReasonDfxNotAllowed = 8,
    DirectedDripsProblemDeviceReasonMax = 9
}; 

----------------------------------------
Structure: _POP_FX_WORK_POOL_QUEUE

//0x4 bytes (sizeof)
enum _POP_FX_WORK_POOL_QUEUE
{
    PopFxWorkPoolQueueEmergency = 0,
    PopFxWorkPoolQueuePlugin = 1,
    PopFxWorkPoolQueueMax = 2
}; 

----------------------------------------
Structure: _POP_IO_STATUS

//0x4 bytes (sizeof)
enum _POP_IO_STATUS
{
    IoReady = 0,
    IoPending = 1,
    IoDone = 2
}; 

----------------------------------------
Structure: _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON

//0x4 bytes (sizeof)
enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON
{
    PepNotifyDeviceDStateReasonNone = 0,
    PepNotifyDeviceDStateReasonSystemTransition = 1,
    PepNotifyDeviceDStateReasonDfx = 2,
    PepNotifyDeviceDStateReasonMax = 3
}; 

----------------------------------------
Structure: _POP_POWER_ACTION_WATCHDOG_STATE

//0x4 bytes (sizeof)
enum _POP_POWER_ACTION_WATCHDOG_STATE
{
    PopPowerActionWatchdogStateDisabled = 0,
    PopPowerActionWatchdogStateTransitioning = 1,
    PopPowerActionWatchdogStateResuming = 2,
    PopPowerActionWatchdogStateMax = 3
}; 

----------------------------------------
Structure: _POP_SLEEP_CHECKPOINT

//0x4 bytes (sizeof)
enum _POP_SLEEP_CHECKPOINT
{
    PopSleepCheckpointInvalid = 0,
    PopSleepCheckpointPowerTransitionStart = 1,
    PopSleepCheckpointSuspendAppsBefore = 2,
    PopSleepCheckpointSuspendAppsAfter = 3,
    PopSleepCheckpointSuspendServicesBefore = 4,
    PopSleepCheckpointSuspendServicesAfter = 5,
    PopSleepCheckpointNotifySuperfetchBefore = 6,
    PopSleepCheckpointNotifySuperfetchAfter = 7,
    PopSleepCheckpointNotifyCallbacksBefore = 8,
    PopSleepCheckpointNotifyCallbacksAfter = 9,
    PopSleepCheckpointSleepTransactionCommitted = 10,
    PopSleepCheckpointQueryDriversBefore = 11,
    PopSleepCheckpointQueryDriversAfter = 12,
    PopSleepCheckpointAllocatingHiberContext = 13,
    PopSleepCheckpointSuspendDriversBefore = 14,
    PopSleepCheckpointPreSleepNotification = 16,
    PopSleepCheckpointInterruptsDisabledBegin = 17,
    PopSleepCheckpointInvokeHandlerBefore = 18,
    PopSleepCheckpointSaveHiberContextBegin = 19,
    PopSleepCheckpointInitializeDumpStackFailed = 20,
    PopSleepCheckpointHiberWriteFailed = 21,
    PopSleepCheckpointHiberFileTooSmall = 22,
    PopSleepCheckpointSaveHiberContextFailed = 23,
    PopSleepCheckpointSaveHiberContextEnd = 24,
    PopSleepCheckpointHiberKernelHandoff = 25,
    PopSleepCheckpointInvokeHandlerAfter = 26,
    PopSleepCheckpointReadHiberfileBefore = 27,
    PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
    PopSleepCheckpointHiberReadFailed = 29,
    PopSleepCheckpointChecksumFailure = 30,
    PopSleepCheckpointDecompressionFailed = 31,
    PopSleepCheckpointReadHiberfileAfter = 32,
    PopSleepCheckpointInterruptsDisabledEnd = 33,
    PopSleepCheckpointWakeDriversAfter = 36,
    PopSleepCheckpointResumeAppsBefore = 37,
    PopSleepCheckpointResumeAppsAfter = 38,
    PopSleepCheckpointResumeServicesBefore = 39,
    PopSleepCheckpointResumeServicesAfter = 40,
    PopSleepCheckpointPowerTransitionEnd = 41,
    PopSleepCheckpointAllocatingHiberContextNoFileObject = 42,
    PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed = 43,
    PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed = 44,
    PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45,
    PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46,
    PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed = 47,
    PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed = 48,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 = 49,
    PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed = 50,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 = 51,
    PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed = 52,
    PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed = 53,
    PopSleepCheckpointPrepareSleepBefore = 54,
    PopSleepCheckpointPrepareSleepAfter = 55,
    PopSleepCheckpointBootstatAvailable = 56,
    PopSleepCheckpointMax = 57
}; 

----------------------------------------
Structure: _POP_SLEEP_CHECKPOINT_STATUS

//0x4 bytes (sizeof)
enum _POP_SLEEP_CHECKPOINT_STATUS
{
    PopSleepCheckpointStatusDisabled = 0,
    PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
    PopSleepCheckpointStatusEnabledManually = 4,
    PopSleepCheckpointStatusEnabledExperiment = 4,
    PopSleepCheckpointStatusEnabledMax = 7,
    PopSleepCheckpointStatusFailedNotEfiSystem = 8,
    PopSleepCheckpointStatusFailedInsufficientSpace = 9,
    PopSleepCheckpointStatusFailedTooSlow = 10,
    PopSleepCheckpointStatusFailedOtherError = 15,
    PopSleepCheckpointStatusMax = 15
}; 

----------------------------------------
Structure: _POP_SYSTEM_IDLE_EVENT_TYPE

//0x4 bytes (sizeof)
enum _POP_SYSTEM_IDLE_EVENT_TYPE
{
    PopSystemIdleEventTypeMonitorOffUserInput = 0,
    PopSystemIdleEventTypeMonitorOnUserInput = 1,
    PopSystemIdleEventTypeUserPresence = 2,
    PopSystemIdleEventTypeResumeFromSxSystemPowerState = 3,
    PopSystemIdleEventTypeMax = 4,
    PopSystemIdleEventTypeInvalid = 4
}; 

----------------------------------------
Structure: _POWER_INFORMATION_LEVEL_INTERNAL

//0x4 bytes (sizeof)
enum _POWER_INFORMATION_LEVEL_INTERNAL
{
    PowerInternalAcpiInterfaceRegister = 0,
    PowerInternalS0LowPowerIdleInfo = 1,
    PowerInternalReapplyBrightnessSettings = 2,
    PowerInternalUserAbsencePrediction = 3,
    PowerInternalUserAbsencePredictionCapability = 4,
    PowerInternalPoProcessorLatencyHint = 5,
    PowerInternalStandbyNetworkRequest = 6,
    PowerInternalDirtyTransitionInformation = 7,
    PowerInternalSetBackgroundTaskState = 8,
    PowerInternalReservedDoNotUseEnum9 = 9,
    PowerInternalReservedDoNotUseEnum10 = 10,
    PowerInternalReservedDoNotUseEnum11 = 11,
    PowerInternalReservedDoNotUseEnum12 = 12,
    PowerInternalReservedDoNotUseEnum13 = 13,
    PowerInternalReservedDoNotUseEnum14 = 14,
    PowerInternalReservedDoNotUseEnum15 = 15,
    PowerInternalReservedDoNotUseEnum16 = 16,
    PowerInternalReservedDoNotUseEnum17 = 17,
    PowerInternalBootSessionStandbyActivationInformation = 18,
    PowerInternalSessionPowerState = 19,
    PowerInternalSessionTerminalInput = 20,
    PowerInternalSetWatchdog = 21,
    PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
    PowerInternalExternalMonitorConnected = 23,
    PowerInternalHighPrecisionBrightnessSettings = 24,
    PowerInternalWinrtScreenToggle = 25,
    PowerInternalPpmQosDisable = 26,
    PowerInternalTransitionCheckpoint = 27,
    PowerInternalInputControllerState = 28,
    PowerInternalFirmwareResetReason = 29,
    PowerInternalPpmSchedulerQosSupport = 30,
    PowerInternalBootStatGet = 31,
    PowerInternalBootStatSet = 32,
    PowerInternalCallHasNotReturnedWatchdog = 33,
    PowerInternalBootStatCheckIntegrity = 34,
    PowerInternalBootStatRestoreDefaults = 35,
    PowerInternalHostEsStateUpdate = 36,
    PowerInternalGetPowerActionState = 37,
    PowerInternalBootStatUnlock = 38,
    PowerInternalWakeOnVoiceState = 39,
    PowerInternalDeepSleepBlock = 40,
    PowerInternalIsPoFxDevice = 41,
    PowerInternalPowerTransitionExtensionAtBoot = 42,
    PowerInternalProcessorBrandedFrequency = 43,
    PowerInternalTimeBrokerExpirationReason = 44,
    PowerInternalNotifyUserShutdownStatus = 45,
    PowerInternalPowerRequestTerminalCoreWindow = 46,
    PowerInternalProcessorIdleVeto = 47,
    PowerInternalPlatformIdleVeto = 48,
    PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
    PowerInternalAutoChkCausedReboot = 50,
    PowerInternalSetWakeAlarmOverride = 51,
    PowerInternalDirectedFxAddTestDevice = 53,
    PowerInternalDirectedFxRemoveTestDevice = 54,
    PowerInternalDirectedFxSetMode = 56,
    PowerInternalRegisterPowerPlane = 57,
    PowerInternalSetDirectedDripsFlags = 58,
    PowerInternalClearDirectedDripsFlags = 59,
    PowerInternalRetrieveHiberFileResumeContext = 60,
    PowerInternalReadHiberFilePage = 61,
    PowerInternalLastBootSucceeded = 62,
    PowerInternalQuerySleepStudyHelperRoutineBlock = 63,
    PowerInternalDirectedDripsQueryCapabilities = 64,
    PowerInternalClearConstraints = 65,
    PowerInternalSoftParkVelocityEnabled = 66,
    PowerInternalQueryIntelPepCapabilities = 67,
    PowerInformationInternalMaximum = 68
}; 

----------------------------------------
Structure: _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI

//0x4 bytes (sizeof)
enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI
{
    PowerInformationInternalTtmFirst = 4096,
    PowerInternalTtmOpenTerminal = 4096,
    PowerInternalTtmCreateTerminal = 4097,
    PowerInternalTtmEvacuateDevices = 4098,
    PowerInternalTtmCreateTerminalEventQueue = 4099,
    PowerInternalTtmGetTerminalEvent = 4100,
    PowerInternalTtmSetDefaultDeviceAssignment = 4101,
    PowerInternalTtmAssignDevice = 4102,
    PowerInternalTtmSetDisplayState = 4103,
    PowerInternalTtmSetDisplayTimeouts = 4104,
    PowerInternalTtmSetDisplayPowerRequest = 4105,
    PowerInternalTtmSetInputWakeCapability = 4106,
    PowerInformationInternalTtmLast = 4106
}; 

----------------------------------------
Structure: _POWER_REQUEST_TYPE

//0x4 bytes (sizeof)
enum _POWER_REQUEST_TYPE
{
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3
}; 

----------------------------------------
Structure: _POWER_REQUEST_TYPE_INTERNAL

//0x4 bytes (sizeof)
enum _POWER_REQUEST_TYPE_INTERNAL
{
    PowerRequestDisplayRequiredInternal = 0,
    PowerRequestSystemRequiredInternal = 1,
    PowerRequestAwayModeRequiredInternal = 2,
    PowerRequestExecutionRequiredInternal = 3,
    PowerRequestPerfBoostRequiredInternal = 4,
    PowerRequestActiveLockScreenInternal = 5,
    PowerRequestInternalInvalid = 6
}; 

----------------------------------------
Structure: _POWER_STATE_TYPE

//0x4 bytes (sizeof)
enum _POWER_STATE_TYPE
{
    SystemPowerState = 0,
    DevicePowerState = 1
}; 

----------------------------------------
Structure: _PO_CS_DEVICE_NOTIFICATION_TYPE

//0x4 bytes (sizeof)
enum _PO_CS_DEVICE_NOTIFICATION_TYPE
{
    PoCsDeviceNotificationStorage = 0,
    PoCsDeviceNotificationWiFi = 1,
    PoCsDeviceNotificationMbn = 2,
    PoCsDeviceNotificationAudio = 3,
    PoCsDeviceNotificationEthernet = 4,
    PoCsDeviceNotificationMaximum = 5
}; 

----------------------------------------
Structure: _PO_FX_PERF_STATE_TYPE

//0x4 bytes (sizeof)
enum _PO_FX_PERF_STATE_TYPE
{
    PoFxPerfStateTypeDiscrete = 0,
    PoFxPerfStateTypeRange = 1,
    PoFxPerfStateTypeMaximum = 2
}; 

----------------------------------------
Structure: _PO_FX_PERF_STATE_UNIT

//0x4 bytes (sizeof)
enum _PO_FX_PERF_STATE_UNIT
{
    PoFxPerfStateUnitOther = 0,
    PoFxPerfStateUnitFrequency = 1,
    PoFxPerfStateUnitBandwidth = 2,
    PoFxPerfStateUnitMaximum = 3
}; 

----------------------------------------
Structure: _PO_HIBER_FORCE_DISABLE_REASON

//0x4 bytes (sizeof)
enum _PO_HIBER_FORCE_DISABLE_REASON
{
    PoHiberForceDisableReasonPolicy = 0,
    PoHiberForceDisableReasonGuardedHost = 1,
    PoHiberForceDisableReasonMax = 2
}; 

----------------------------------------
Structure: _PO_MODERN_SLEEP_ACTION

//0x4 bytes (sizeof)
enum _PO_MODERN_SLEEP_ACTION
{
    PoModernSleepActionGlobalActivatorsVeto = 0,
    PoModernSleepActionNonBlockingPhases = 1,
    PoModernSleepActionForceIdle = 2,
    PoModernSleepActionMinimalBlockingNotificationClients = 3,
    PoModernSleepActionMax = 4
}; 

----------------------------------------
Structure: _PPM_PERF_QOS_DISABLE_REASON

//0x4 bytes (sizeof)
enum _PPM_PERF_QOS_DISABLE_REASON
{
    PpmPerfQosDisableInternal = 0,
    PpmPerfQosDisableNoProfile = 1,
    PpmPerfQosDisableNoPolicy = 2,
    PpmPerfQosDisableInsufficientPolicy = 3,
    PpmPerfQosDisableMaxOverride = 4,
    PpmPerfQosDisableLowLatency = 5,
    PpmPerfQosDisableSmtScheduler = 6,
    PpmPerfQosDisableNoHardwareSupport = 7,
    PpmPerfQosDisableGroupPolicy = 8,
    PpmPerfQosDisableMax = 9
}; 

----------------------------------------
Structure: _PP_NPAGED_LOOKASIDE_NUMBER

//0x4 bytes (sizeof)
enum _PP_NPAGED_LOOKASIDE_NUMBER
{
    LookasideSmallIrpList = 0,
    LookasideMediumIrpList = 1,
    LookasideLargeIrpList = 2,
    LookasideMdlList = 3,
    LookasideCreateInfoList = 4,
    LookasideNameBufferList = 5,
    LookasideTwilightList = 6,
    LookasideCompletionList = 7,
    LookasideScratchBufferList = 8,
    LookasideMaximumList = 9
}; 

----------------------------------------
Structure: _PROCESSOR_CACHE_TYPE

//0x4 bytes (sizeof)
enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3
}; 

----------------------------------------
Structure: _PROCESSOR_PRESENCE

//0x4 bytes (sizeof)
enum _PROCESSOR_PRESENCE
{
    ProcessorPresenceNt = 0,
    ProcessorPresenceHv = 1,
    ProcessorPresenceHidden = 2
}; 

----------------------------------------
Structure: _PROCESS_SECTION_TYPE

//0x4 bytes (sizeof)
enum _PROCESS_SECTION_TYPE
{
    ProcessSectionData = 0,
    ProcessSectionImage = 1,
    ProcessSectionImageNx = 2,
    ProcessSectionPagefileBacked = 3,
    ProcessSectionMax = 4
}; 

----------------------------------------
Structure: _PROCESS_TERMINATE_REQUEST_REASON

//0x4 bytes (sizeof)
enum _PROCESS_TERMINATE_REQUEST_REASON
{
    ProcessTerminateRequestReasonNone = 0,
    ProcessTerminateCommitFail = 1,
    ProcessTerminateWriteToExecuteMemory = 2,
    ProcessTerminateAttachedWriteToExecuteMemory = 3,
    ProcessTerminateRequestReasonMax = 4
}; 

----------------------------------------
Structure: _PROCESS_VA_TYPE

//0x4 bytes (sizeof)
enum _PROCESS_VA_TYPE
{
    ProcessVAImage = 0,
    ProcessVASection = 1,
    ProcessVAPrivate = 2,
    ProcessVAMax = 3
}; 

----------------------------------------
Structure: _PROC_HYPERVISOR_STATE

//0x4 bytes (sizeof)
enum _PROC_HYPERVISOR_STATE
{
    ProcHypervisorNone = 0,
    ProcHypervisorPresent = 1,
    ProcHypervisorPower = 2,
    ProcHypervisorHvCounters = 3
}; 

----------------------------------------
Structure: _PS_ATTRIBUTE_NUM

//0x4 bytes (sizeof)
enum _PS_ATTRIBUTE_NUM
{
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMitigationAuditOptions = 27,
    PsAttributeMachineType = 28,
    PsAttributeComponentFilter = 29,
    PsAttributeMax = 30
}; 

----------------------------------------
Structure: _PS_MITIGATION_OPTION

//0x4 bytes (sizeof)
enum _PS_MITIGATION_OPTION
{
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
    PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 32,
    PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 33,
    PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 36,
    PS_MITIGATION_OPTION_REDIRECTION_TRUST = 37
}; 

----------------------------------------
Structure: _PS_PROTECTED_SIGNER

//0x4 bytes (sizeof)
enum _PS_PROTECTED_SIGNER
{
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9
}; 

----------------------------------------
Structure: _PS_PROTECTED_TYPE

//0x4 bytes (sizeof)
enum _PS_PROTECTED_TYPE
{
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3
}; 

----------------------------------------
Structure: _PS_RESOURCE_TYPE

//0x4 bytes (sizeof)
enum _PS_RESOURCE_TYPE
{
    PsResourceNonPagedPool = 0,
    PsResourcePagedPool = 1,
    PsResourcePageFile = 2,
    PsResourceWorkingSet = 3,
    PsResourceMax = 4
}; 

----------------------------------------
Structure: _PS_STD_HANDLE_STATE

//0x4 bytes (sizeof)
enum _PS_STD_HANDLE_STATE
{
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3
}; 

----------------------------------------
Structure: _PS_WAKE_REASON

//0x4 bytes (sizeof)
enum _PS_WAKE_REASON
{
    PsWakeReasonUser = 0,
    PsWakeReasonExecutionRequired = 1,
    PsWakeReasonKernel = 2,
    PsWakeReasonInstrumentation = 3,
    PsWakeReasonPreserveProcess = 4,
    PsWakeReasonActivityReference = 5,
    PsWakeReasonWorkOnBehalf = 6,
    PsMaxWakeReasons = 7
}; 

----------------------------------------
Structure: _REG_NOTIFY_CLASS

//0x4 bytes (sizeof)
enum _REG_NOTIFY_CLASS
{
    RegNtDeleteKey = 0,
    RegNtPreDeleteKey = 0,
    RegNtSetValueKey = 1,
    RegNtPreSetValueKey = 1,
    RegNtDeleteValueKey = 2,
    RegNtPreDeleteValueKey = 2,
    RegNtSetInformationKey = 3,
    RegNtPreSetInformationKey = 3,
    RegNtRenameKey = 4,
    RegNtPreRenameKey = 4,
    RegNtEnumerateKey = 5,
    RegNtPreEnumerateKey = 5,
    RegNtEnumerateValueKey = 6,
    RegNtPreEnumerateValueKey = 6,
    RegNtQueryKey = 7,
    RegNtPreQueryKey = 7,
    RegNtQueryValueKey = 8,
    RegNtPreQueryValueKey = 8,
    RegNtQueryMultipleValueKey = 9,
    RegNtPreQueryMultipleValueKey = 9,
    RegNtPreCreateKey = 10,
    RegNtPostCreateKey = 11,
    RegNtPreOpenKey = 12,
    RegNtPostOpenKey = 13,
    RegNtKeyHandleClose = 14,
    RegNtPreKeyHandleClose = 14,
    RegNtPostDeleteKey = 15,
    RegNtPostSetValueKey = 16,
    RegNtPostDeleteValueKey = 17,
    RegNtPostSetInformationKey = 18,
    RegNtPostRenameKey = 19,
    RegNtPostEnumerateKey = 20,
    RegNtPostEnumerateValueKey = 21,
    RegNtPostQueryKey = 22,
    RegNtPostQueryValueKey = 23,
    RegNtPostQueryMultipleValueKey = 24,
    RegNtPostKeyHandleClose = 25,
    RegNtPreCreateKeyEx = 26,
    RegNtPostCreateKeyEx = 27,
    RegNtPreOpenKeyEx = 28,
    RegNtPostOpenKeyEx = 29,
    RegNtPreFlushKey = 30,
    RegNtPostFlushKey = 31,
    RegNtPreLoadKey = 32,
    RegNtPostLoadKey = 33,
    RegNtPreUnLoadKey = 34,
    RegNtPostUnLoadKey = 35,
    RegNtPreQueryKeySecurity = 36,
    RegNtPostQueryKeySecurity = 37,
    RegNtPreSetKeySecurity = 38,
    RegNtPostSetKeySecurity = 39,
    RegNtCallbackObjectContextCleanup = 40,
    RegNtPreRestoreKey = 41,
    RegNtPostRestoreKey = 42,
    RegNtPreSaveKey = 43,
    RegNtPostSaveKey = 44,
    RegNtPreReplaceKey = 45,
    RegNtPostReplaceKey = 46,
    RegNtPreQueryKeyName = 47,
    RegNtPostQueryKeyName = 48,
    MaxRegNtNotifyClass = 49
}; 

----------------------------------------
Structure: _REQUESTER_TYPE

//0x4 bytes (sizeof)
enum _REQUESTER_TYPE
{
    KernelRequester = 0,
    UserProcessRequester = 1,
    UserSharedServiceRequester = 2
}; 

----------------------------------------
Structure: _RTLP_HP_ADDRESS_SPACE_TYPE

//0x4 bytes (sizeof)
enum _RTLP_HP_ADDRESS_SPACE_TYPE
{
    HeapAddressUser = 0,
    HeapAddressKernel = 1,
    HeapAddressSession = 2,
    HeapAddressSecureKernel = 3,
    HeapAddressTypeMax = 4
}; 

----------------------------------------
Structure: _RTLP_HP_ALLOCATOR

//0x4 bytes (sizeof)
enum _RTLP_HP_ALLOCATOR
{
    RtlpHpSegmentSm = 0,
    RtlpHpSegmentLg = 1,
    RtlpHpSegmentTypes = 2,
    RtlpHpHugeAllocator = 2,
    RtlpHpAllocatorMax = 3
}; 

----------------------------------------
Structure: _RTLP_HP_LOCK_TYPE

//0x4 bytes (sizeof)
enum _RTLP_HP_LOCK_TYPE
{
    HeapLockPaged = 0,
    HeapLockNonPaged = 1,
    HeapLockTypeMax = 2
}; 

----------------------------------------
Structure: _RTLP_HP_MEMORY_TYPE

//0x4 bytes (sizeof)
enum _RTLP_HP_MEMORY_TYPE
{
    HeapMemoryPaged = 0,
    HeapMemoryNonPaged = 1,
    HeapMemoryLargePage = 2,
    HeapMemoryHugePage = 3,
    HeapMemoryTypeMax = 4
}; 

----------------------------------------
Structure: _RTL_FEATURE_CONFIGURATION_PRIORITY

//0x4 bytes (sizeof)
enum _RTL_FEATURE_CONFIGURATION_PRIORITY
{
    FeatureConfigurationPriorityImageDefault = 0,
    FeatureConfigurationPriorityService = 4,
    FeatureConfigurationPriorityUser = 8,
    FeatureConfigurationPrioritySecurity = 9,
    FeatureConfigurationPriorityUserPolicy = 10,
    FeatureConfigurationPriorityTest = 12,
    FeatureConfigurationPriorityImageOverride = 15,
    FeatureConfigurationPriorityMax = 15
}; 

----------------------------------------
Structure: _RTL_FEATURE_CONFIGURATION_TYPE

//0x4 bytes (sizeof)
enum _RTL_FEATURE_CONFIGURATION_TYPE
{
    RtlFeatureConfigurationBoot = 0,
    RtlFeatureConfigurationRuntime = 1,
    RtlFeatureConfigurationCount = 2
}; 

----------------------------------------
Structure: _RTL_FEATURE_ENABLED_STATE_OPTIONS

//0x4 bytes (sizeof)
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS
{
    FeatureEnabledStateOptionsNone = 0,
    FeatureEnabledStateOptionsWexpConfig = 1
}; 

----------------------------------------
Structure: _RTL_GENERIC_COMPARE_RESULTS

//0x4 bytes (sizeof)
enum _RTL_GENERIC_COMPARE_RESULTS
{
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2
}; 

----------------------------------------
Structure: _RTL_MEMORY_TYPE

//0x4 bytes (sizeof)
enum _RTL_MEMORY_TYPE
{
    MemoryTypePaged = 0,
    MemoryTypeNonPaged = 1,
    MemoryTypeLargePage = 2,
    MemoryTypeHugePage = 3,
    MemoryTypeMax = 4
}; 

----------------------------------------
Structure: _SECURITY_IMPERSONATION_LEVEL

//0x4 bytes (sizeof)
enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3
}; 

----------------------------------------
Structure: _SECURITY_OPERATION_CODE

//0x4 bytes (sizeof)
enum _SECURITY_OPERATION_CODE
{
    SetSecurityDescriptor = 0,
    QuerySecurityDescriptor = 1,
    DeleteSecurityDescriptor = 2,
    AssignSecurityDescriptor = 3
}; 

----------------------------------------
Structure: _SEP_CACHED_HANDLES_ENTRY_TYPE

//0x4 bytes (sizeof)
enum _SEP_CACHED_HANDLES_ENTRY_TYPE
{
    SepCachedHandlesEntryLowbox = 0,
    SepCachedHandlesEntryBnoIsolation = 1
}; 

----------------------------------------
Structure: _SERVERSILO_STATE

//0x4 bytes (sizeof)
enum _SERVERSILO_STATE
{
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED = 1,
    SERVERSILO_SHUTTING_DOWN = 2,
    SERVERSILO_TERMINATING = 3,
    SERVERSILO_TERMINATED = 4
}; 

----------------------------------------
Structure: _SKSERVICE

//0x4 bytes (sizeof)
enum _SKSERVICE
{
    SECURESERVICE_NONE = 0,
    SECURESERVICE_PHASE4_INIT = 1,
    SECURESERVICE_START_PROCESSOR = 2,
    SECURESERVICE_FINISH_START_PROCESSOR = 3,
    SECURESERVICE_REGISTER_SYSTEM_DLLS = 4,
    SECURESERVICE_REGISTER_SYSTEM_PROCESS = 5,
    SECURESERVICE_CREATE_PROCESS = 6,
    SECURESERVICE_INITIALIZE_PROCESS = 7,
    SECURESERVICE_CREATE_THREAD = 8,
    SECURESERVICE_REQUEST_THREAD_EXIT = 9,
    SECURESERVICE_TERMINATE_THREAD = 10,
    SECURESERVICE_RUNDOWN_PROCESS = 11,
    SECURESERVICE_DEBUG_PROCESS = 12,
    SECURESERVICE_GET_TEB_ADDRESS = 13,
    SECURESERVICE_GET_CONTEXT = 14,
    SECURESERVICE_SET_CONTEXT = 15,
    SECURESERVICE_SEND_ATTACH_NOTIFICATIONS = 16,
    SECURESERVICE_GET_ETW_DEBUG_ID = 17,
    SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE = 18,
    SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 19,
    SECURESERVICE_RETRIEVE_MAILBOX = 20,
    SECURESERVICE_IS_TRUSTLET_RUNNING = 21,
    SECURESERVICE_CREATE_SECURE_ALLOCATION = 22,
    SECURESERVICE_FILL_SECURE_ALLOCATION = 23,
    SECURESERVICE_MAKE_CODE_CATALOG = 24,
    SECURESERVICE_CREATE_SECURE_IMAGE = 25,
    SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH = 26,
    SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION = 27,
    SECURESERVICE_PREPARE_IMAGE_RELOCATIONS = 28,
    SECURESERVICE_RELOCATE_IMAGE = 29,
    SECURESERVICE_CLOSE_SECURE_HANDLE = 30,
    SECURESERVICE_VALIDATE_DYNAMIC_CODE = 31,
    SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE = 32,
    SECURESERVICE_SET_CODE_INTEGRITY_POLICY = 33,
    SECURESERVICE_EXCHANGE_ENTROPY = 34,
    SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES = 35,
    SECURESERVICE_FREE_HIBERNATE_RESOURCES = 36,
    SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY = 37,
    SECURESERVICE_DEBUG_PROTECT_MEMORY = 38,
    SECURESERVICE_DEBUG_READ_WRITE_MEMORY = 39,
    SECURESERVICE_QUERY_VIRTUAL_MEMORY = 40,
    SECURESERVICE_CAPTURE_IMAGE_IAT = 41,
    SECURESERVICE_FREE_IMAGE_IAT = 42,
    SECURESERVICE_APPLY_FIXUPS = 43,
    SECURESERVICE_MARK_IMAGE_PROTECTED = 44,
    SECURESERVICE_CREATE_ENCLAVE = 45,
    SECURESERVICE_LOAD_ENCLAVE_DATA = 46,
    SECURESERVICE_LOAD_ENCLAVE_MODULE = 47,
    SECURESERVICE_INITIALIZE_ENCLAVE = 48,
    SECURESERVICE_TERMINATE_ENCLAVE = 49,
    SECURESERVICE_DELETE_ENCLAVE = 50,
    SECURESERVICE_CONNECT_SW_INTERRUPT = 51,
    SECURESERVICE_RELAX_HYPERGUARD_QUOTA = 52,
    SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE = 53,
    SECURESERVICE_LIVEDUMP_START = 54,
    SECURESERVICE_LIVEDUMP_ADD_BUFFER = 55,
    SECURESERVICE_LIVEDUMP_SETUP_BUFFER = 56,
    SECURESERVICE_LIVEDUMP_FINALIZE = 57,
    SECURESERVICE_LIVEDUMP_ABORT = 58,
    SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS = 59,
    SECURESERVICE_NOTIFY_POWER_STATE = 60,
    SECURESERVICE_QUERY_PROFILE_INFORMATION = 61,
    SECURESERVICE_UPDATE_FREEZE_BIAS = 62,
    SECURESERVICE_CREATE_SECURE_SECTION = 63,
    SECURESERVICE_DELETE_SECURE_SECTION = 64,
    SECURESERVICE_QUERY_SECURE_DEVICE = 65,
    SECURESERVICE_UNPROTECT_SECURE_DEVICE = 66,
    SECURESERVICE_DETERMINE_HOT_PATCH_TYPE = 67,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE_SIZE = 68,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE = 69,
    SECURESERVICE_APPLY_HOT_PATCH = 70,
    SECURESERVICE_REVERT_HOT_PATCH = 71,
    SECURESERVICE_PREPARE_DRIVER_FOR_PATCH = 72,
    SECURESERVICE_PROVISION_DUMP_KEYS = 73,
    SECURESERVICE_CAPTURE_PGO_DATA = 74,
    SECURESERVICE_START_PROFILE = 75,
    SECURESERVICE_STOP_PROFILE = 76,
    SECURESERVICE_SET_TRACEPOINT = 77,
    SECURESERVICE_NO_TRACING_FIRST = 191,
    SECURESERVICE_GET_PEB_ADDRESS = 192,
    SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES = 193,
    SECURESERVICE_PRE_INIT_FIRST = 207,
    SECURESERVICE_PHASE3_INIT = 208,
    SECURESERVICE_PERIODIC = 209,
    SECURESERVICE_WORK_QUEUE = 210,
    SECURESERVICE_RESERVE_PROTECTED_PAGES = 211,
    SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS = 212,
    SECURESERVICE_ETW_ENABLE_CALLBACK = 213,
    SECURESERVICE_INITIALIZE_SECURE_POOL = 214,
    SECURESERVICE_INITIALIZE_KERNEL_CFG = 215,
    SECURESERVICE_LOAD_DRIVER = 216,
    SECURESERVICE_UNLOAD_DRIVER = 217,
    SECURESERVICE_ENABLE_CFG_TARGET = 218,
    SECURESERVICE_COMPLETE_SLAB_CONFIGURATION = 219,
    SECURESERVICE_INITIALIZE_RETPOLINE = 220,
    SECURESERVICE_PERFORM_RETPOLINE_RELOCATIONS = 221,
    SECURESERVICE_UPDATE_IMPORT_RELOCATIONS = 222,
    SECURESERVICE_DISPATCH_LEVEL_FIRST = 239,
    SECURESERVICE_FLUSH_ADDRESS_SPACE = 240,
    SECURESERVICE_FAST_FLUSH_RANGE_LIST = 241,
    SECURESERVICE_SLOW_FLUSH_RANGE_LIST = 242,
    SECURESERVICE_REMOVE_PROTECTED_PAGE = 243,
    SECURESERVICE_COPY_PROTECTED_PAGE = 244,
    SECURESERVICE_REGISTER_PROTECTED_PAGE = 245,
    SECURESERVICE_DISAMBIGUATE_PROTECTED_PAGE = 246,
    SECURESERVICE_MAKE_PROTECTED_PAGE_WRITABLE = 247,
    SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE = 248,
    SECURESERVICE_QUERY_STRONG_CODE_FEATURES = 249,
    SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE = 250,
    SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP = 251,
    SECURESERVICE_REGISTER_LOG_PAGES = 252,
    SECURESERVICE_RECLAIM_PARTITION_PAGES = 253,
    SECURESERVICE_BIND_NT_KERNEL_IMPORTS = 254,
    SECURESERVICE_SET_PLACEHOLDER_PAGES = 255,
    SECURESERVICE_QUERY_SPECULATION_CONTROL_FEATURES = 256,
    SECURESERVICE_PROTECT_KERNEL_DATA_PAGE = 257,
    SECURESERVICE_VERIFY_PAGE = 258,
    SECURESERVICE_PREPARE_FOR_HIBERNATION = 259,
    SECURESERVICE_PREPARE_FOR_CRASHDUMP = 260,
    SECURESERVICE_REPORT_BUGCHECK_PROGRESS = 261,
    SECURESERVICE_SHUTDOWN = 262,
    SECURESERVICE_QUERY_SECURE_PCI_INFO = 263,
    SECURESERVICE_ACCESS_PCI_DEVICE = 264,
    SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT = 265,
    SECURESERVICE_KSR_CALL = 266,
    SECURESERVICE_SVC_CALL = 267,
    SECURESERVICE_BUGCHECK = 1792,
    SECURESERVICE_LIMITED_MODE_SERVICE_START = 2048
}; 

----------------------------------------
Structure: _SYSTEM_DLL_TYPE

//0x4 bytes (sizeof)
enum _SYSTEM_DLL_TYPE
{
    PsNativeSystemDll = 0,
    PsWowX86SystemDll = 1,
    PsWowArm32SystemDll = 2,
    PsWowAmd64SystemDll = 3,
    PsWowChpeX86SystemDll = 4,
    PsVsmEnclaveRuntimeDll = 5,
    PsSystemDllTotalTypes = 6
}; 

----------------------------------------
Structure: _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE

//0x4 bytes (sizeof)
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
    SystemFeatureConfigurationSectionTypeBoot = 0,
    SystemFeatureConfigurationSectionTypeRuntime = 1,
    SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
    SystemFeatureConfigurationSectionTypeCount = 3
}; 

----------------------------------------
Structure: _SYSTEM_INFORMATION_CLASS

//0x4 bytes (sizeof)
enum _SYSTEM_INFORMATION_CLASS
{
    SystemBasicInformation = 0,
    SystemProcessorInformation = 1,
    SystemPerformanceInformation = 2,
    SystemTimeOfDayInformation = 3,
    SystemPathInformation = 4,
    SystemProcessInformation = 5,
    SystemCallCountInformation = 6,
    SystemDeviceInformation = 7,
    SystemProcessorPerformanceInformation = 8,
    SystemFlagsInformation = 9,
    SystemCallTimeInformation = 10,
    SystemModuleInformation = 11,
    SystemLocksInformation = 12,
    SystemStackTraceInformation = 13,
    SystemPagedPoolInformation = 14,
    SystemNonPagedPoolInformation = 15,
    SystemHandleInformation = 16,
    SystemObjectInformation = 17,
    SystemPageFileInformation = 18,
    SystemVdmInstemulInformation = 19,
    SystemVdmBopInformation = 20,
    SystemFileCacheInformation = 21,
    SystemPoolTagInformation = 22,
    SystemInterruptInformation = 23,
    SystemDpcBehaviorInformation = 24,
    SystemFullMemoryInformation = 25,
    SystemLoadGdiDriverInformation = 26,
    SystemUnloadGdiDriverInformation = 27,
    SystemTimeAdjustmentInformation = 28,
    SystemSummaryMemoryInformation = 29,
    SystemMirrorMemoryInformation = 30,
    SystemPerformanceTraceInformation = 31,
    SystemObsolete0 = 32,
    SystemExceptionInformation = 33,
    SystemCrashDumpStateInformation = 34,
    SystemKernelDebuggerInformation = 35,
    SystemContextSwitchInformation = 36,
    SystemRegistryQuotaInformation = 37,
    SystemExtendServiceTableInformation = 38,
    SystemPrioritySeperation = 39,
    SystemVerifierAddDriverInformation = 40,
    SystemVerifierRemoveDriverInformation = 41,
    SystemProcessorIdleInformation = 42,
    SystemLegacyDriverInformation = 43,
    SystemCurrentTimeZoneInformation = 44,
    SystemLookasideInformation = 45,
    SystemTimeSlipNotification = 46,
    SystemSessionCreate = 47,
    SystemSessionDetach = 48,
    SystemSessionInformation = 49,
    SystemRangeStartInformation = 50,
    SystemVerifierInformation = 51,
    SystemVerifierThunkExtend = 52,
    SystemSessionProcessInformation = 53,
    SystemLoadGdiDriverInSystemSpace = 54,
    SystemNumaProcessorMap = 55,
    SystemPrefetcherInformation = 56,
    SystemExtendedProcessInformation = 57,
    SystemRecommendedSharedDataAlignment = 58,
    SystemComPlusPackage = 59,
    SystemNumaAvailableMemory = 60,
    SystemProcessorPowerInformation = 61,
    SystemEmulationBasicInformation = 62,
    SystemEmulationProcessorInformation = 63,
    SystemExtendedHandleInformation = 64,
    SystemLostDelayedWriteInformation = 65,
    SystemBigPoolInformation = 66,
    SystemSessionPoolTagInformation = 67,
    SystemSessionMappedViewInformation = 68,
    SystemHotpatchInformation = 69,
    SystemObjectSecurityMode = 70,
    SystemWatchdogTimerHandler = 71,
    SystemWatchdogTimerInformation = 72,
    SystemLogicalProcessorInformation = 73,
    SystemWow64SharedInformationObsolete = 74,
    SystemRegisterFirmwareTableInformationHandler = 75,
    SystemFirmwareTableInformation = 76,
    SystemModuleInformationEx = 77,
    SystemVerifierTriageInformation = 78,
    SystemSuperfetchInformation = 79,
    SystemMemoryListInformation = 80,
    SystemFileCacheInformationEx = 81,
    SystemThreadPriorityClientIdInformation = 82,
    SystemProcessorIdleCycleTimeInformation = 83,
    SystemVerifierCancellationInformation = 84,
    SystemProcessorPowerInformationEx = 85,
    SystemRefTraceInformation = 86,
    SystemSpecialPoolInformation = 87,
    SystemProcessIdInformation = 88,
    SystemErrorPortInformation = 89,
    SystemBootEnvironmentInformation = 90,
    SystemHypervisorInformation = 91,
    SystemVerifierInformationEx = 92,
    SystemTimeZoneInformation = 93,
    SystemImageFileExecutionOptionsInformation = 94,
    SystemCoverageInformation = 95,
    SystemPrefetchPatchInformation = 96,
    SystemVerifierFaultsInformation = 97,
    SystemSystemPartitionInformation = 98,
    SystemSystemDiskInformation = 99,
    SystemProcessorPerformanceDistribution = 100,
    SystemNumaProximityNodeInformation = 101,
    SystemDynamicTimeZoneInformation = 102,
    SystemCodeIntegrityInformation = 103,
    SystemProcessorMicrocodeUpdateInformation = 104,
    SystemProcessorBrandString = 105,
    SystemVirtualAddressInformation = 106,
    SystemLogicalProcessorAndGroupInformation = 107,
    SystemProcessorCycleTimeInformation = 108,
    SystemStoreInformation = 109,
    SystemRegistryAppendString = 110,
    SystemAitSamplingValue = 111,
    SystemVhdBootInformation = 112,
    SystemCpuQuotaInformation = 113,
    SystemNativeBasicInformation = 114,
    SystemErrorPortTimeouts = 115,
    SystemLowPriorityIoInformation = 116,
    SystemBootEntropyInformation = 117,
    SystemVerifierCountersInformation = 118,
    SystemPagedPoolInformationEx = 119,
    SystemSystemPtesInformationEx = 120,
    SystemNodeDistanceInformation = 121,
    SystemAcpiAuditInformation = 122,
    SystemBasicPerformanceInformation = 123,
    SystemQueryPerformanceCounterInformation = 124,
    SystemSessionBigPoolInformation = 125,
    SystemBootGraphicsInformation = 126,
    SystemScrubPhysicalMemoryInformation = 127,
    SystemBadPageInformation = 128,
    SystemProcessorProfileControlArea = 129,
    SystemCombinePhysicalMemoryInformation = 130,
    SystemEntropyInterruptTimingInformation = 131,
    SystemConsoleInformation = 132,
    SystemPlatformBinaryInformation = 133,
    SystemPolicyInformation = 134,
    SystemHypervisorProcessorCountInformation = 135,
    SystemDeviceDataInformation = 136,
    SystemDeviceDataEnumerationInformation = 137,
    SystemMemoryTopologyInformation = 138,
    SystemMemoryChannelInformation = 139,
    SystemBootLogoInformation = 140,
    SystemProcessorPerformanceInformationEx = 141,
    SystemCriticalProcessErrorLogInformation = 142,
    SystemSecureBootPolicyInformation = 143,
    SystemPageFileInformationEx = 144,
    SystemSecureBootInformation = 145,
    SystemEntropyInterruptTimingRawInformation = 146,
    SystemPortableWorkspaceEfiLauncherInformation = 147,
    SystemFullProcessInformation = 148,
    SystemKernelDebuggerInformationEx = 149,
    SystemBootMetadataInformation = 150,
    SystemSoftRebootInformation = 151,
    SystemElamCertificateInformation = 152,
    SystemOfflineDumpConfigInformation = 153,
    SystemProcessorFeaturesInformation = 154,
    SystemRegistryReconciliationInformation = 155,
    SystemEdidInformation = 156,
    SystemManufacturingInformation = 157,
    SystemEnergyEstimationConfigInformation = 158,
    SystemHypervisorDetailInformation = 159,
    SystemProcessorCycleStatsInformation = 160,
    SystemVmGenerationCountInformation = 161,
    SystemTrustedPlatformModuleInformation = 162,
    SystemKernelDebuggerFlags = 163,
    SystemCodeIntegrityPolicyInformation = 164,
    SystemIsolatedUserModeInformation = 165,
    SystemHardwareSecurityTestInterfaceResultsInformation = 166,
    SystemSingleModuleInformation = 167,
    SystemAllowedCpuSetsInformation = 168,
    SystemVsmProtectionInformation = 169,
    SystemInterruptCpuSetsInformation = 170,
    SystemSecureBootPolicyFullInformation = 171,
    SystemCodeIntegrityPolicyFullInformation = 172,
    SystemAffinitizedInterruptProcessorInformation = 173,
    SystemRootSiloInformation = 174,
    SystemCpuSetInformation = 175,
    SystemCpuSetTagInformation = 176,
    SystemWin32WerStartCallout = 177,
    SystemSecureKernelProfileInformation = 178,
    SystemCodeIntegrityPlatformManifestInformation = 179,
    SystemInterruptSteeringInformation = 180,
    SystemSupportedProcessorArchitectures = 181,
    SystemMemoryUsageInformation = 182,
    SystemCodeIntegrityCertificateInformation = 183,
    SystemPhysicalMemoryInformation = 184,
    SystemControlFlowTransition = 185,
    SystemKernelDebuggingAllowed = 186,
    SystemActivityModerationExeState = 187,
    SystemActivityModerationUserSettings = 188,
    SystemCodeIntegrityPoliciesFullInformation = 189,
    SystemCodeIntegrityUnlockInformation = 190,
    SystemIntegrityQuotaInformation = 191,
    SystemFlushInformation = 192,
    SystemProcessorIdleMaskInformation = 193,
    SystemSecureDumpEncryptionInformation = 194,
    SystemWriteConstraintInformation = 195,
    SystemKernelVaShadowInformation = 196,
    SystemHypervisorSharedPageInformation = 197,
    SystemFirmwareBootPerformanceInformation = 198,
    SystemCodeIntegrityVerificationInformation = 199,
    SystemFirmwarePartitionInformation = 200,
    SystemSpeculationControlInformation = 201,
    SystemDmaGuardPolicyInformation = 202,
    SystemEnclaveLaunchControlInformation = 203,
    SystemWorkloadAllowedCpuSetsInformation = 204,
    SystemCodeIntegrityUnlockModeInformation = 205,
    SystemLeapSecondInformation = 206,
    SystemFlags2Information = 207,
    SystemSecurityModelInformation = 208,
    SystemCodeIntegritySyntheticCacheInformation = 209,
    SystemFeatureConfigurationInformation = 210,
    SystemFeatureConfigurationSectionInformation = 211,
    SystemFeatureUsageSubscriptionInformation = 212,
    SystemSecureSpeculationControlInformation = 213,
    SystemSpacesBootInformation = 214,
    SystemFwRamdiskInformation = 215,
    SystemWheaIpmiHardwareInformation = 216,
    SystemDifSetRuleClassInformation = 217,
    SystemDifClearRuleClassInformation = 218,
    SystemDifApplyPluginVerificationOnDriver = 219,
    SystemDifRemovePluginVerificationOnDriver = 220,
    SystemShadowStackInformation = 221,
    SystemBuildVersionInformation = 222,
    SystemPoolLimitInformation = 223,
    SystemCodeIntegrityAddDynamicStore = 224,
    SystemCodeIntegrityClearDynamicStores = 225,
    SystemPoolZeroingInformation = 227,
    MaxSystemInfoClass = 228
}; 

----------------------------------------
Structure: _SYSTEM_POWER_STATE

//0x4 bytes (sizeof)
enum _SYSTEM_POWER_STATE
{
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
}; 

----------------------------------------
Structure: _SYSTEM_PROCESS_CLASSIFICATION

//0x4 bytes (sizeof)
enum _SYSTEM_PROCESS_CLASSIFICATION
{
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5
}; 

----------------------------------------
Structure: _THREAD_WORKLOAD_CLASS

//0x4 bytes (sizeof)
enum _THREAD_WORKLOAD_CLASS
{
    ThreadWorkloadClassDefault = 0,
    ThreadWorkloadClassGraphics = 1,
    MaxThreadWorkloadClass = 2
}; 

----------------------------------------
Structure: _TOKEN_TYPE

//0x4 bytes (sizeof)
enum _TOKEN_TYPE
{
    TokenPrimary = 1,
    TokenImpersonation = 2
}; 

----------------------------------------
Structure: _TP_CALLBACK_PRIORITY

//0x4 bytes (sizeof)
enum _TP_CALLBACK_PRIORITY
{
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3
}; 

----------------------------------------
Structure: _TRACE_INFORMATION_CLASS

//0x4 bytes (sizeof)
enum _TRACE_INFORMATION_CLASS
{
    TraceIdClass = 0,
    TraceHandleClass = 1,
    TraceEnableFlagsClass = 2,
    TraceEnableLevelClass = 3,
    GlobalLoggerHandleClass = 4,
    EventLoggerHandleClass = 5,
    AllLoggerHandlesClass = 6,
    TraceHandleByNameClass = 7,
    LoggerEventsLostClass = 8,
    TraceSessionSettingsClass = 9,
    LoggerEventsLoggedClass = 10,
    DiskIoNotifyRoutinesClass = 11,
    TraceInformationClassReserved1 = 12,
    AllPossibleNotifyRoutinesClass = 12,
    FltIoNotifyRoutinesClass = 13,
    TraceInformationClassReserved2 = 14,
    WdfNotifyRoutinesClass = 15,
    MaxTraceInformationClass = 16
}; 

----------------------------------------
Structure: _TRANSFER_TYPE

//0x4 bytes (sizeof)
enum _TRANSFER_TYPE
{
    ReadTransfer = 0,
    WriteTransfer = 1,
    OtherTransfer = 2
}; 

----------------------------------------
Structure: _TYPE_OF_MEMORY

//0x4 bytes (sizeof)
enum _TYPE_OF_MEMORY
{
    LoaderExceptionBlock = 0,
    LoaderSystemBlock = 1,
    LoaderFree = 2,
    LoaderBad = 3,
    LoaderLoadedProgram = 4,
    LoaderFirmwareTemporary = 5,
    LoaderFirmwarePermanent = 6,
    LoaderOsloaderHeap = 7,
    LoaderOsloaderStack = 8,
    LoaderSystemCode = 9,
    LoaderHalCode = 10,
    LoaderBootDriver = 11,
    LoaderConsoleInDriver = 12,
    LoaderConsoleOutDriver = 13,
    LoaderStartupDpcStack = 14,
    LoaderStartupKernelStack = 15,
    LoaderStartupPanicStack = 16,
    LoaderStartupPcrPage = 17,
    LoaderStartupPdrPage = 18,
    LoaderRegistryData = 19,
    LoaderMemoryData = 20,
    LoaderNlsData = 21,
    LoaderSpecialMemory = 22,
    LoaderBBTMemory = 23,
    LoaderZero = 24,
    LoaderXIPRom = 25,
    LoaderHALCachedMemory = 26,
    LoaderLargePageFiller = 27,
    LoaderErrorLogMemory = 28,
    LoaderVsmMemory = 29,
    LoaderFirmwareCode = 30,
    LoaderFirmwareData = 31,
    LoaderFirmwareReserved = 32,
    LoaderEnclaveMemory = 33,
    LoaderFirmwareKsr = 34,
    LoaderEnclaveKsr = 35,
    LoaderSkMemory = 36,
    LoaderSkFirmwareReserved = 37,
    LoaderIoSpaceMemoryZeroed = 38,
    LoaderIoSpaceMemoryFree = 39,
    LoaderIoSpaceMemoryKsr = 40,
    LoaderMaximum = 41
}; 

----------------------------------------
Structure: _TlgBlob_t

//0x4 bytes (sizeof)
enum _TlgBlob_t
{
    _TlgBlobNone = 0,
    _TlgBlobEnd = 1,
    _TlgBlobProvider = 2,
    _TlgBlobEvent3 = 3,
    _TlgBlobProvider3 = 4,
    _TlgBlobEvent2 = 5,
    _TlgBlobEvent4 = 6,
    _TlgBlobMax = 7
}; 

----------------------------------------
Structure: _USER_ACTIVITY_PRESENCE

//0x4 bytes (sizeof)
enum _USER_ACTIVITY_PRESENCE
{
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3
}; 

----------------------------------------
Structure: _VI_DEADLOCK_RESOURCE_TYPE

//0x4 bytes (sizeof)
enum _VI_DEADLOCK_RESOURCE_TYPE
{
    VfDeadlockUnknown = 0,
    VfDeadlockMutex = 1,
    VfDeadlockMutexAbandoned = 2,
    VfDeadlockFastMutex = 3,
    VfDeadlockFastMutexUnsafe = 4,
    VfDeadlockSpinLock = 5,
    VfDeadlockInStackQueuedSpinLock = 6,
    VfDeadlockUnusedSpinLock = 7,
    VfDeadlockEresource = 8,
    VfDeadlockTypeMaximum = 9
}; 

----------------------------------------
Structure: _VRF_RULE_CLASS_ID

//0x4 bytes (sizeof)
enum _VRF_RULE_CLASS_ID
{
    VrfSpecialPoolRuleClass = 0,
    VrfForceIrqlRuleClass = 1,
    VrfAllocationFailuresRuleClass = 2,
    VrfTrackingPoolAllocationsRuleClass = 3,
    VrfIORuleClass = 4,
    VrfDeadlockPreventionRuleClass = 5,
    VrfEnhancedIORuleClass = 6,
    VrfDMARuleClass = 7,
    VrfSecurityRuleClass = 8,
    VrfForcePendingIORequestRuleClass = 9,
    VrfIRPTrackingRuleClass = 10,
    VrfMiscellaneousRuleClass = 11,
    VrfMoreDebuggingRuleClass = 12,
    VrfMDLInvariantStackRuleClass = 13,
    VrfMDLInvariantDriverRuleClass = 14,
    VrfPowerDelayFuzzingRuleClass = 15,
    VrfPortMiniportRuleClass = 16,
    VrfStandardDDIRuleClass = 17,
    VrfAutoFailRuleClass = 18,
    VrfAdditionalDDIRuleClass = 19,
    VrfRuleClassBase = 20,
    VrfNdisWifiRuleClass = 21,
    VrfDriverLoggingRuleClass = 22,
    VrfSyncDelayFuzzingRuleClass = 23,
    VrfVMSwitchingRuleClass = 24,
    VrfCodeIntegrityRuleClass = 25,
    VrfBelow4GBAllocationRuleClass = 26,
    VrfProcessorBranchTraceRuleClass = 27,
    VrfAdvancedMMRuleClass = 28,
    VrfExtendingXDVTimeLimit = 29,
    VrfSystemBIOSRuleClass = 30,
    VrfHardwareRuleClass = 31,
    VrfStateSepRuleClass = 32,
    VrfWDFRuleClass = 33,
    VrfMoreIrqlRuleClass = 34,
    VrfXDVPlatformMode = 35,
    VrfStandalonePlatformMode = 36,
    VrfPlatformModeTest = 37,
    VrfInfoDisclosureIRPRule = 38,
    VrfLwSpecialPool = 39,
    VrfAVXCorruption = 40,
    VrfAccessModeMismatch = 41,
    ReservedForDVRF42 = 42,
    ReservedForDVRF43 = 43,
    ReservedForDVRF44 = 44,
    ReservedForDVRF45 = 45,
    ReservedForDVRF46 = 46,
    ReservedForDVRF47 = 47,
    ReservedForDVRF48 = 48,
    ReservedForDVRF49 = 49,
    ReservedForDVRF50 = 50,
    ReservedForDVRF51 = 51,
    ReservedForDVRF52 = 52,
    ReservedForDVRF53 = 53,
    ReservedForDVRF54 = 54,
    ReservedForDVRF55 = 55,
    ReservedForDVRF56 = 56,
    ReservedForDVRF57 = 57,
    ReservedForDVRF58 = 58,
    ReservedForDVRF59 = 59,
    ReservedForDVRF60 = 60,
    ReservedForDVRF61 = 61,
    ReservedForDVRF62 = 62,
    ReservedForDVRF63 = 63,
    VrfRuleClassSizeMax = 64
}; 

----------------------------------------
Structure: _VRF_TRIAGE_CONTEXT

//0x4 bytes (sizeof)
enum _VRF_TRIAGE_CONTEXT
{
    VRF_TRIAGE_CONTEXT_NONE = 0,
    VRF_TRIAGE_CONTEXT_DEFAULT = 1,
    VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,
    VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,
    VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 3,
    VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 4,
    VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 5,
    NUM_VRF_TRIAGE_CONTEXTS = 6
}; 

----------------------------------------
Structure: _WHEA_CPU_VENDOR

//0x4 bytes (sizeof)
enum _WHEA_CPU_VENDOR
{
    WheaCpuVendorOther = 0,
    WheaCpuVendorIntel = 1,
    WheaCpuVendorAmd = 2
}; 

----------------------------------------
Structure: _WHEA_ERROR_PACKET_DATA_FORMAT

//0x4 bytes (sizeof)
enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA = 1,
    WheaDataFormatMemory = 2,
    WheaDataFormatPCIExpress = 3,
    WheaDataFormatNMIPort = 4,
    WheaDataFormatPCIXBus = 5,
    WheaDataFormatPCIXDevice = 6,
    WheaDataFormatGeneric = 7,
    WheaDataFormatMax = 8
}; 

----------------------------------------
Structure: _WHEA_ERROR_SEVERITY

//0x4 bytes (sizeof)
enum _WHEA_ERROR_SEVERITY
{
    WheaErrSevRecoverable = 0,
    WheaErrSevFatal = 1,
    WheaErrSevCorrected = 2,
    WheaErrSevInformational = 3
}; 

----------------------------------------
Structure: _WHEA_ERROR_SOURCE_STATE

//0x4 bytes (sizeof)
enum _WHEA_ERROR_SOURCE_STATE
{
    WheaErrSrcStateStopped = 1,
    WheaErrSrcStateStarted = 2,
    WheaErrSrcStateRemoved = 3,
    WheaErrSrcStateRemovePending = 4
}; 

----------------------------------------
Structure: _WHEA_ERROR_SOURCE_TYPE

//0x4 bytes (sizeof)
enum _WHEA_ERROR_SOURCE_TYPE
{
    WheaErrSrcTypeMCE = 0,
    WheaErrSrcTypeCMC = 1,
    WheaErrSrcTypeCPE = 2,
    WheaErrSrcTypeNMI = 3,
    WheaErrSrcTypePCIe = 4,
    WheaErrSrcTypeGeneric = 5,
    WheaErrSrcTypeINIT = 6,
    WheaErrSrcTypeBOOT = 7,
    WheaErrSrcTypeSCIGeneric = 8,
    WheaErrSrcTypeIPFMCA = 9,
    WheaErrSrcTypeIPFCMC = 10,
    WheaErrSrcTypeIPFCPE = 11,
    WheaErrSrcTypeGenericV2 = 12,
    WheaErrSrcTypeSCIGenericV2 = 13,
    WheaErrSrcTypeBMC = 14,
    WheaErrSrcTypePMEM = 15,
    WheaErrSrcTypeDeviceDriver = 16,
    WheaErrSrcTypeMax = 17
}; 

----------------------------------------
Structure: _WHEA_ERROR_TYPE

//0x4 bytes (sizeof)
enum _WHEA_ERROR_TYPE
{
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory = 1,
    WheaErrTypePCIExpress = 2,
    WheaErrTypeNMI = 3,
    WheaErrTypePCIXBus = 4,
    WheaErrTypePCIXDevice = 5,
    WheaErrTypeGeneric = 6,
    WheaErrTypePmem = 7
}; 

----------------------------------------
Structure: _WHEA_EVENT_LOG_ENTRY_ID

//0x4 bytes (sizeof)
enum _WHEA_EVENT_LOG_ENTRY_ID
{
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
    WheaEventLogEntryIdWheaInit = -2147483646,
    WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,
    WheaEventLogEntryIdDroppedCorrectedError = -2147483644,
    WheaEventLogEntryIdStartedReportHwError = -2147483643,
    WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,
    WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641,
    WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,
    WheaEventLogEntryIdPshedInjectError = -2147483639,
    WheaEventLogEntryIdOscCapabilities = -2147483638,
    WheaEventLogEntryIdPshedPluginRegister = -2147483637,
    WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,
    WheaEventLogEntryIdWorkQueueItem = -2147483635,
    WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,
    WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,
    WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,
    WheaEventLogEntryIdMcaErrorCleared = -2147483631,
    WheaEventLogEntryIdClearedPoison = -2147483630,
    WheaEventLogEntryIdProcessEINJ = -2147483629,
    WheaEventLogEntryIdProcessHEST = -2147483628,
    WheaEventLogEntryIdCreateGenericRecord = -2147483627,
    WheaEventLogEntryIdErrorRecord = -2147483626,
    WheaEventLogEntryIdErrorRecordLimit = -2147483625,
    WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,
    WheaEventLogEntryIdAcpiTimeOut = -2147483622,
    WheaEventLogCmciRestart = -2147483621,
    WheaEventLogCmciFinalRestart = -2147483620,
    WheaEventLogEntryEtwOverFlow = -2147483619,
    WheaEventLogAzccRootBusSearchErr = -2147483618,
    WheaEventLogAzccRootBusList = -2147483617,
    WheaEventLogEntryIdErrSrcInvalid = -2147483616,
    WheaEventLogEntryIdGenericErrMemMap = -2147483615,
    WheaEventLogEntryIdPshedCallbackCollision = -2147483614,
    WheaEventLogEntryIdSELBugCheckProgress = -2147483613,
    WheaEventLogEntryIdPshedPluginLoad = -2147483612,
    WheaEventLogEntryIdPshedPluginUnload = -2147483611,
    WheaEventLogEntryIdPshedPluginSupported = -2147483610,
    WheaEventLogEntryIdDeviceDriver = -2147483609,
    WheaEventLogEntryIdCmciImplPresent = -2147483608,
    WheaEventLogEntryIdCmciInitError = -2147483607,
    WheaEventLogEntryIdSELBugCheckRecovery = -2147483606,
    WheaEventLogEntryIdDrvErrSrcInvalid = -2147483605,
    WheaEventLogEntryIdDrvHandleBusy = -2147483604,
    WheaEventLogEntryIdWheaHeartbeat = -2147483603,
    WheaEventLogAzccRootBusPoisonSet = -2147483602,
    WheaEventLogEntryIdSELBugCheckInfo = -2147483601,
    WheaEventLogEntryIdErrDimmInfoMismatch = -2147483600,
    WheaEventLogEntryIdeDpcEnabled = -2147483599
}; 

----------------------------------------
Structure: _WHEA_EVENT_LOG_ENTRY_TYPE

//0x4 bytes (sizeof)
enum _WHEA_EVENT_LOG_ENTRY_TYPE
{
    WheaEventLogEntryTypeInformational = 0,
    WheaEventLogEntryTypeWarning = 1,
    WheaEventLogEntryTypeError = 2
}; 

----------------------------------------
Structure: _WHEA_RECOVERY_CONTEXT_ERROR_TYPE

//0x4 bytes (sizeof)
enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE
{
    WheaRecoveryContextErrorTypeMemory = 1,
    WheaRecoveryContextErrorTypePmem = 2,
    WheaRecoveryContextErrorTypeMax = 3
}; 

----------------------------------------
Structure: _WNF_DATA_SCOPE

//0x4 bytes (sizeof)
enum _WNF_DATA_SCOPE
{
    WnfDataScopeSystem = 0,
    WnfDataScopeSession = 1,
    WnfDataScopeUser = 2,
    WnfDataScopeProcess = 3,
    WnfDataScopeMachine = 4,
    WnfDataScopePhysicalMachine = 5
}; 

----------------------------------------
Structure: _WNF_STATE_NAME_LIFETIME

//0x4 bytes (sizeof)
enum _WNF_STATE_NAME_LIFETIME
{
    WnfWellKnownStateName = 0,
    WnfPermanentStateName = 1,
    WnfPersistentStateName = 2,
    WnfTemporaryStateName = 3
}; 

----------------------------------------
Structure: _WNF_SUBSCRIPTION_STATE

//0x4 bytes (sizeof)
enum _WNF_SUBSCRIPTION_STATE
{
    WNF_SUB_STATE_QUIESCENT = 0,
    WNF_SUB_STATE_READY_TO_DELIVER = 1,
    WNF_SUB_STATE_IN_DELIVERY = 2,
    WNF_SUB_STATE_RETRY = 3
}; 

----------------------------------------
Structure: _WORKING_SET_TYPE

//0x4 bytes (sizeof)
enum _WORKING_SET_TYPE
{
    WorkingSetTypeUser = 0,
    WorkingSetTypeSession = 1,
    WorkingSetTypeSystemTypes = 2,
    WorkingSetTypeSystemCache = 2,
    WorkingSetTypePagedPool = 3,
    WorkingSetTypeSystemViews = 4,
    WorkingSetTypePagableMaximum = 4,
    WorkingSetTypeSystemPtes = 5,
    WorkingSetTypeKernelStacks = 6,
    WorkingSetTypeNonPagedPool = 7,
    WorkingSetTypeMaximum = 8
}; 

----------------------------------------
Structure: _WOW64_SHARED_INFORMATION

//0x4 bytes (sizeof)
enum _WOW64_SHARED_INFORMATION
{
    SharedNtdll32LdrInitializeThunk = 0,
    SharedNtdll32KiUserExceptionDispatcher = 1,
    SharedNtdll32KiUserApcDispatcher = 2,
    SharedNtdll32KiUserCallbackDispatcher = 3,
    SharedNtdll32RtlUserThreadStart = 4,
    SharedNtdll32pQueryProcessDebugInformationRemote = 5,
    SharedNtdll32BaseAddress = 6,
    SharedNtdll32LdrSystemDllInitBlock = 7,
    SharedNtdll32RtlpFreezeTimeBias = 8,
    Wow64SharedPageEntriesCount = 9
}; 

----------------------------------------
Structure: wil_FeatureChangeTime

//0x4 bytes (sizeof)
enum wil_FeatureChangeTime
{
    wil_FeatureChangeTime_OnRead = 0,
    wil_FeatureChangeTime_OnReload = 1,
    wil_FeatureChangeTime_OnSession = 2,
    wil_FeatureChangeTime_OnReboot = 3
}; 

----------------------------------------
Structure: wil_FeatureEnabledState

//0x4 bytes (sizeof)
enum wil_FeatureEnabledState
{
    wil_FeatureEnabledState_Default = 0,
    wil_FeatureEnabledState_Disabled = 1,
    wil_FeatureEnabledState_Enabled = 2
}; 

----------------------------------------
Structure: wil_FeatureEnabledStateKind

//0x4 bytes (sizeof)
enum wil_FeatureEnabledStateKind
{
    wil_FeatureEnabledStateKind_Service = 1,
    wil_FeatureEnabledStateKind_User = 2,
    wil_FeatureEnabledStateKind_Test = 3
}; 

----------------------------------------
Structure: wil_FeatureEnabledStateOptions

//0x4 bytes (sizeof)
enum wil_FeatureEnabledStateOptions
{
    wil_FeatureEnabledStateOptions_None = 0,
    wil_FeatureEnabledStateOptions_VariantConfig = 1
}; 

----------------------------------------
Structure: wil_FeatureStage

//0x4 bytes (sizeof)
enum wil_FeatureStage
{
    wil_FeatureStage_AlwaysDisabled = 0,
    wil_FeatureStage_DisabledByDefault = 1,
    wil_FeatureStage_EnabledByDefault = 2,
    wil_FeatureStage_AlwaysEnabled = 3
}; 

----------------------------------------
Structure: wil_FeatureStore

//0x4 bytes (sizeof)
enum wil_FeatureStore
{
    wil_FeatureStore_Machine = 0,
    wil_FeatureStore_User = 1,
    wil_FeatureStore_All = 2
}; 

----------------------------------------
Structure: wil_FeatureVariantPayloadKind

//0x4 bytes (sizeof)
enum wil_FeatureVariantPayloadKind
{
    wil_FeatureVariantPayloadKind_None = 0,
    wil_FeatureVariantPayloadKind_Resident = 1,
    wil_FeatureVariantPayloadKind_External = 2
}; 

----------------------------------------
Structure: wil_ReportingKind

//0x4 bytes (sizeof)
enum wil_ReportingKind
{
    wil_ReportingKind_None = 0,
    wil_ReportingKind_UniqueUsage = 1,
    wil_ReportingKind_UniqueOpportunity = 2,
    wil_ReportingKind_DeviceUsage = 3,
    wil_ReportingKind_DeviceOpportunity = 4,
    wil_ReportingKind_TotalDuration = 5,
    wil_ReportingKind_PausedDuration = 6
}; 

----------------------------------------
Structure: wil_UsageReportingMode

//0x4 bytes (sizeof)
enum wil_UsageReportingMode
{
    wil_UsageReportingMode_Default = 0,
    wil_UsageReportingMode_SuppressPotential = 1,
    wil_UsageReportingMode_SuppressImplicit = 2
}; 

----------------------------------------
Structure: wil_VariantReportingKind

//0x4 bytes (sizeof)
enum wil_VariantReportingKind
{
    wil_VariantReportingKind_None = 0,
    wil_VariantReportingKind_UniqueUsage = 1,
    wil_VariantReportingKind_DeviceUsage = 2
}; 

----------------------------------------
Structure: wil_details_FeatureTestStateKind

//0x4 bytes (sizeof)
enum wil_details_FeatureTestStateKind
{
    wil_details_FeatureTestStateKind_EnabledState = 0,
    wil_details_FeatureTestStateKind_Variant = 1
}; 

----------------------------------------
Structure: wil_details_ServiceReportingKind

//0x4 bytes (sizeof)
enum wil_details_ServiceReportingKind
{
    wil_details_ServiceReportingKind_UniqueUsage = 0,
    wil_details_ServiceReportingKind_UniqueOpportunity = 1,
    wil_details_ServiceReportingKind_DeviceUsage = 2,
    wil_details_ServiceReportingKind_DeviceOpportunity = 3,
    wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
    wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
    wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
    wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
    wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
    wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
    wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
    wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
    wil_details_ServiceReportingKind_CustomEnabledBase = 100,
    wil_details_ServiceReportingKind_CustomDisabledBase = 150,
    wil_details_ServiceReportingKind_Store = 254,
    wil_details_ServiceReportingKind_None = 255,
    wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
    wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
    wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
    wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448
}; 

----------------------------------------
Structure: wil_details_ServiceReportingOptions

//0x4 bytes (sizeof)
enum wil_details_ServiceReportingOptions
{
    wil_details_ServiceReportingOptions_None = 0,
    wil_details_ServiceReportingOptions_VariantConfig = 1
}; 

----------------------------------------
Structure: wil_details_StagingConfigFeatureFields

//0x4 bytes (sizeof)
enum wil_details_StagingConfigFeatureFields
{
    wil_details_StagingConfigFeatureFields_None = 0,
    wil_details_StagingConfigFeatureFields_ServiceState = 1,
    wil_details_StagingConfigFeatureFields_UserState = 2,
    wil_details_StagingConfigFeatureFields_TestState = 4,
    wil_details_StagingConfigFeatureFields_Variant = 8
}; 

----------------------------------------
Structure: RTLP_HP_LFH_PERF_FLAGS

//0x4 bytes (sizeof)
union RTLP_HP_LFH_PERF_FLAGS
{
    ULONG HotspotDetection:1;                                               //0x0
    ULONG HotspotFullCommit:1;                                              //0x0
    ULONG ActiveSubsegment:1;                                               //0x0
    ULONG SmallerSubsegment:1;                                              //0x0
    ULONG SingleAffinitySlot:1;                                             //0x0
    ULONG ApplyLfhDecommitPolicy:1;                                         //0x0
    ULONG EnableGarbageCollection:1;                                        //0x0
    ULONG LargePagePreCommit:1;                                             //0x0
    ULONG OpportunisticLargePreCommit:1;                                    //0x0
    ULONG LfhForcedAffinity:1;                                              //0x0
    ULONG LfhCachelinePadding:1;                                            //0x0
    ULONG AllFlags;                                                         //0x0
}; 

----------------------------------------
Structure: _AER_BRIDGE_DESCRIPTOR_FLAGS

//0x2 bytes (sizeof)
union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT SecondaryUncorrectableErrorMaskRW:1;                             //0x0
    USHORT SecondaryUncorrectableErrorSevRW:1;                              //0x0
    USHORT SecondaryCapsAndControlRW:1;                                     //0x0
    USHORT Reserved:9;                                                      //0x0
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _AER_ENDPOINT_DESCRIPTOR_FLAGS

//0x2 bytes (sizeof)
union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT Reserved:12;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _AER_ROOTPORT_DESCRIPTOR_FLAGS

//0x2 bytes (sizeof)
union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
    USHORT UncorrectableErrorMaskRW:1;                                      //0x0
    USHORT UncorrectableErrorSeverityRW:1;                                  //0x0
    USHORT CorrectableErrorMaskRW:1;                                        //0x0
    USHORT AdvancedCapsAndControlRW:1;                                      //0x0
    USHORT RootErrorCommandRW:1;                                            //0x0
    USHORT Reserved:11;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _CLS_LSN

//0x8 bytes (sizeof)
union _CLS_LSN
{
    struct
    {
        ULONG idxRecord;                                                    //0x0
        ULONG cidContainer;                                                 //0x4
    } offset;                                                               //0x0
    ULONGLONG ullOffset;                                                    //0x0
}; 

----------------------------------------
Structure: _CM_TRANS_PTR

//0x8 bytes (sizeof)
union _CM_TRANS_PTR
{
    ULONGLONG LightWeight:1;                                                //0x0
    VOID* TransPtr;                                                         //0x0
}; 

----------------------------------------
Structure: _CPU_INFO

//0x10 bytes (sizeof)
union _CPU_INFO
{
    ULONG AsUINT32[4];                                                      //0x0
    struct
    {
        ULONG Eax;                                                          //0x0
        ULONG Ebx;                                                          //0x4
    };
    struct
    {
        ULONG Ecx;                                                          //0x8
    };
    ULONG Edx;                                                              //0xc
}; 

----------------------------------------
Structure: _CVDD

//0x1c bytes (sizeof)
union _CVDD
{
    ULONG Signature;                                                        //0x0
    struct _NB10 NB10;                                                      //0x0
    struct _RSDS RsDs;                                                      //0x0
}; 

----------------------------------------
Structure: _ENERGY_STATE_DURATION

//0x8 bytes (sizeof)
union _ENERGY_STATE_DURATION
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG LastChangeTime;                                               //0x0
    ULONG Duration:31;                                                      //0x4
    };
    ULONG IsInState:1;                                                      //0x4
}; 

----------------------------------------
Structure: _EXT_IOMMU_DEVICE_ID_FLAGSnew

//0x2 bytes (sizeof)
union _EXT_IOMMU_DEVICE_ID_FLAGS
{
    USHORT AsUSHORT;                                                        //0x0
    USHORT IsAliased:1;                                                     //0x0
    USHORT HasMultipleIds:1;                                                //0x0
    USHORT Reserved:14;                                                     //0x0
}; 

----------------------------------------
Structure: _FILE_SEGMENT_ELEMENT

//0x8 bytes (sizeof)
union _FILE_SEGMENT_ELEMENT
{
    VOID* Buffer;                                                           //0x0
    ULONGLONG Alignment;                                                    //0x0
}; 

----------------------------------------
Structure: _FS_FILTER_PARAMETERS

//0x28 bytes (sizeof)
union _FS_FILTER_PARAMETERS
{
    struct
    {
        union _LARGE_INTEGER* EndingOffset;                                 //0x0
        struct _ERESOURCE** ResourceToRelease;                              //0x8
    } AcquireForModifiedPageWriter;                                         //0x0
    struct
    {
        struct _ERESOURCE* ResourceToRelease;                               //0x0
    } ReleaseForModifiedPageWriter;                                         //0x0
    struct
    {
        enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;                         //0x0
        ULONG PageProtection;                                               //0x4
        struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;           //0x8
        ULONG Flags;                                                        //0x10
    } AcquireForSectionSynchronization;                                     //0x0
    struct
    {
        struct _IRP* Irp;                                                   //0x0
        VOID* FileInformation;                                              //0x8
        ULONG* Length;                                                      //0x10
        enum _FILE_INFORMATION_CLASS FileInformationClass;                  //0x18
        LONG CompletionStatus;                                              //0x1c
    } QueryOpen;                                                            //0x0
    struct
    {
        VOID* Argument1;                                                    //0x0
        VOID* Argument2;                                                    //0x8
        VOID* Argument3;                                                    //0x10
        VOID* Argument4;                                                    //0x18
        VOID* Argument5;                                                    //0x20
    } Others;                                                               //0x0
}; 

----------------------------------------
Structure: _HAL_UNMASKED_INTERRUPT_FLAGS

//0x2 bytes (sizeof)
union _HAL_UNMASKED_INTERRUPT_FLAGS
{
    USHORT SecondaryInterrupt:1;                                            //0x0
    USHORT Reserved:15;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _HANDLE_TABLE_ENTRY

//0x10 bytes (sizeof)
union _HANDLE_TABLE_ENTRY
{
    volatile LONGLONG VolatileLowValue;                                     //0x0
    LONGLONG LowValue;                                                      //0x0
    struct
    {
        struct _HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;                //0x0
    LONGLONG HighValue;                                                     //0x8
    union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;                         //0x8
        struct _EXHANDLE LeafHandleValue;                                   //0x8
    };
    LONGLONG RefCountField;                                                 //0x0
    ULONGLONG Unlocked:1;                                                   //0x0
    ULONGLONG RefCnt:16;                                                    //0x0
    ULONGLONG Attributes:3;                                                 //0x0
    struct
    {
        ULONGLONG ObjectPointerBits:44;                                     //0x0
    ULONG GrantedAccessBits:25;                                             //0x8
    ULONG NoRightsUpgrade:1;                                                //0x8
        ULONG Spare1:6;                                                     //0x8
    };
    ULONG Spare2;                                                           //0xc
}; 

----------------------------------------
Structure: _HEAP_LFH_ONDEMAND_POINTER

//0x8 bytes (sizeof)
union _HEAP_LFH_ONDEMAND_POINTER
{
    USHORT Invalid:1;                                                       //0x0
    USHORT AllocationInProgress:1;                                          //0x0
    struct
    {
        USHORT Spare0:14;                                                   //0x0
        USHORT UsageData;                                                   //0x2
    };
    VOID* AllBits;                                                          //0x0
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT_DELAY_FREE

//0x8 bytes (sizeof)
union _HEAP_LFH_SUBSEGMENT_DELAY_FREE
{
    ULONGLONG DelayFree:1;                                                  //0x0
    ULONGLONG Count:63;                                                     //0x0
    VOID* AllBits;                                                          //0x0
}; 

----------------------------------------
Structure: _HEAP_LFH_SUBSEGMENT_STATS

//0x8 bytes (sizeof)
union _HEAP_LFH_SUBSEGMENT_STATS
{
    struct _HEAP_LFH_SUBSEGMENT_STAT Buckets[4];                            //0x0
    VOID* AllStats;                                                         //0x0
}; 

----------------------------------------
Structure: _HEAP_PAGE_SEGMENT

//0x2000 bytes (sizeof)
union _HEAP_PAGE_SEGMENT
{
    struct
    {
        struct _LIST_ENTRY ListEntry;                                       //0x0
        ULONGLONG Signature;                                                //0x10
    };
    struct
    {
        union _HEAP_SEGMENT_MGR_COMMIT_STATE* SegmentCommitState;           //0x18
        UCHAR UnusedWatermark;                                              //0x20
    };
    struct _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];                      //0x0
}; 

----------------------------------------
Structure: _HEAP_SEGMENT_MGR_COMMIT_STATE

//0x2 bytes (sizeof)
union _HEAP_SEGMENT_MGR_COMMIT_STATE
{
    USHORT CommittedPageCount:11;                                           //0x0
    USHORT Spare:3;                                                         //0x0
    USHORT LargePageOperationInProgress:1;                                  //0x0
    USHORT LargePageCommit:1;                                               //0x0
    volatile USHORT EntireUShortV;                                          //0x0
    USHORT EntireUShort;                                                    //0x0
}; 

----------------------------------------
Structure: _HEAP_VS_CHUNK_HEADER_SIZE

//0x8 bytes (sizeof)
union _HEAP_VS_CHUNK_HEADER_SIZE
{
    ULONG MemoryCost:16;                                                    //0x0
    struct
    {
        ULONG UnsafeSize:16;                                                //0x0
    ULONG UnsafePrevSize:16;                                                //0x4
        ULONG Allocated:8;                                                  //0x4
    };
    USHORT KeyUShort;                                                       //0x0
    ULONG KeyULong;                                                         //0x0
    ULONGLONG HeaderBits;                                                   //0x0
}; 

----------------------------------------
Structure: _HV_PARTITION_PRIVILEGE_MASK

//0x8 bytes (sizeof)
union _HV_PARTITION_PRIVILEGE_MASK
{
    ULONGLONG AsUINT64;                                                     //0x0
    ULONGLONG AccessVpRunTimeReg:1;                                         //0x0
    ULONGLONG AccessPartitionReferenceCounter:1;                            //0x0
    ULONGLONG AccessSynicRegs:1;                                            //0x0
    ULONGLONG AccessSyntheticTimerRegs:1;                                   //0x0
    ULONGLONG AccessIntrCtrlRegs:1;                                         //0x0
    ULONGLONG AccessHypercallMsrs:1;                                        //0x0
    ULONGLONG AccessVpIndex:1;                                              //0x0
    ULONGLONG AccessResetReg:1;                                             //0x0
    ULONGLONG AccessStatsReg:1;                                             //0x0
    ULONGLONG AccessPartitionReferenceTsc:1;                                //0x0
    ULONGLONG AccessGuestIdleReg:1;                                         //0x0
    ULONGLONG AccessFrequencyRegs:1;                                        //0x0
    ULONGLONG AccessDebugRegs:1;                                            //0x0
    ULONGLONG AccessReenlightenmentControls:1;                              //0x0
    ULONGLONG AccessRootSchedulerReg:1;                                     //0x0
    ULONGLONG AccessTscInvariantControls:1;                                 //0x0
    ULONGLONG Reserved1:16;                                                 //0x0
    ULONGLONG CreatePartitions:1;                                           //0x0
    ULONGLONG AccessPartitionId:1;                                          //0x0
    ULONGLONG AccessMemoryPool:1;                                           //0x0
    ULONGLONG AdjustMessageBuffers:1;                                       //0x0
    ULONGLONG PostMessages:1;                                               //0x0
    ULONGLONG SignalEvents:1;                                               //0x0
    ULONGLONG CreatePort:1;                                                 //0x0
    ULONGLONG ConnectPort:1;                                                //0x0
    ULONGLONG AccessStats:1;                                                //0x0
    ULONGLONG Reserved2:2;                                                  //0x0
    ULONGLONG Debugging:1;                                                  //0x0
    ULONGLONG CpuManagement:1;                                              //0x0
    ULONGLONG ConfigureProfiler:1;                                          //0x0
    ULONGLONG AccessVpExitTracing:1;                                        //0x0
    ULONGLONG EnableExtendedGvaRangesForFlushVirtualAddressList:1;          //0x0
    ULONGLONG AccessVsm:1;                                                  //0x0
    ULONGLONG AccessVpRegisters:1;                                          //0x0
    ULONGLONG UnusedBit:1;                                                  //0x0
    ULONGLONG FastHypercallOutput:1;                                        //0x0
    ULONGLONG EnableExtendedHypercalls:1;                                   //0x0
    ULONGLONG StartVirtualProcessor:1;                                      //0x0
    ULONGLONG Isolation:1;                                                  //0x0
    ULONGLONG Reserved3:9;                                                  //0x0
}; 

----------------------------------------
Structure: _INVPCID_DESCRIPTOR

//0x10 bytes (sizeof)
union _INVPCID_DESCRIPTOR
{
    struct
    {
        union
        {
            struct
            {
                ULONGLONG Pcid:12;                                          //0x0
                ULONGLONG Reserved:52;                                      //0x0
            };
            ULONGLONG EntirePcid;                                           //0x0
        };
        ULONGLONG Virtual;                                                  //0x8
    } IndividualAddress;                                                    //0x0
    struct
    {
        union
        {
            struct
            {
                ULONGLONG Pcid:12;                                          //0x0
                ULONGLONG Reserved:52;                                      //0x0
            };
            ULONGLONG EntirePcid;                                           //0x0
        };
        ULONGLONG Reserved2;                                                //0x8
    } SingleContext;                                                        //0x0
    struct
    {
        ULONGLONG Reserved[2];                                              //0x0
    } AllContextAndGlobals;                                                 //0x0
    struct
    {
        ULONGLONG Reserved[2];                                              //0x0
    } AllContext;                                                           //0x0
}; 

----------------------------------------
Structure: _IOMMU_SVM_CAPABILITIES

//0xc bytes (sizeof)
union _IOMMU_SVM_CAPABILITIES
{
    ULONG AtsCapability:1;                                                  //0x0
    ULONG PriCapability:1;                                                  //0x0
    struct
    {
        ULONG PasidCapability:1;                                            //0x0
        struct
    {
        ULONG PasidMaxWidth:5;                                              //0x4
        ULONG PasidExePerm:1;                                               //0x4
        ULONG PasidPrivMode:1;                                              //0x4
        ULONG AtsPageAlignedRequest:1;                                      //0x4
        ULONG AtsGlobalInvalidate:1;                                        //0x4
        ULONG AtsInvalidateQueueDepth:5;                                    //0x4
    } CapReg;                                                               //0x4
    };
    struct
    {
        ULONG Rsvd:15;                                                      //0x8
    };
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _JOBOBJECT_ENERGY_TRACKING_STATE

//0x8 bytes (sizeof)
union _JOBOBJECT_ENERGY_TRACKING_STATE
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG UpdateMask;                                                   //0x0
    };
    ULONG DesiredState;                                                     //0x4
}; 

----------------------------------------
Structure: _KALPC_DIRECT_EVENT

//0x8 bytes (sizeof)
union _KALPC_DIRECT_EVENT
{
    ULONGLONG Value;                                                        //0x0
    ULONGLONG DirectType:1;                                                 //0x0
    ULONGLONG EventReferenced:1;                                            //0x0
    ULONGLONG EventObjectBits:62;                                           //0x0
}; 

----------------------------------------
Structure: _KEXECUTE_OPTIONS

//0x1 bytes (sizeof)
union _KEXECUTE_OPTIONS
{
    UCHAR ExecuteDisable:1;                                                 //0x0
    UCHAR ExecuteEnable:1;                                                  //0x0
    UCHAR DisableThunkEmulation:1;                                          //0x0
    UCHAR Permanent:1;                                                      //0x0
    UCHAR ExecuteDispatchEnable:1;                                          //0x0
    UCHAR ImageDispatchEnable:1;                                            //0x0
    UCHAR DisableExceptionChainValidation:1;                                //0x0
    UCHAR Spare:1;                                                          //0x0
    volatile UCHAR ExecuteOptions;                                          //0x0
    UCHAR ExecuteOptionsNV;                                                 //0x0
}; 

----------------------------------------
Structure: _KGDTENTRY64

//0x10 bytes (sizeof)
union _KGDTENTRY64
{
    struct
    {
        USHORT LimitLow;                                                    //0x0
        USHORT BaseLow;                                                     //0x2
    };
    struct
    {
        UCHAR BaseMiddle;                                                   //0x4
        UCHAR Flags1;                                                       //0x5
        UCHAR Flags2;                                                       //0x6
        UCHAR BaseHigh;                                                     //0x7
    } Bytes;                                                                //0x4
    struct
    {
        struct
    {
        ULONG BaseMiddle:8;                                                 //0x4
        ULONG Type:5;                                                       //0x4
        ULONG Dpl:2;                                                        //0x4
        ULONG Present:1;                                                    //0x4
        ULONG LimitHigh:4;                                                  //0x4
        ULONG System:1;                                                     //0x4
        ULONG LongMode:1;                                                   //0x4
        ULONG DefaultBig:1;                                                 //0x4
        ULONG Granularity:1;                                                //0x4
        ULONG BaseHigh:8;                                                   //0x4
    } Bits;                                                                 //0x4
        ULONG BaseUpper;                                                    //0x8
    };
    struct
    {
        ULONG MustBeZero;                                                   //0xc
        LONGLONG DataLow;                                                   //0x0
    };
    LONGLONG DataHigh;                                                      //0x8
}; 

----------------------------------------
Structure: _KIDTENTRY64

//0x10 bytes (sizeof)
union _KIDTENTRY64
{
    struct
    {
        USHORT OffsetLow;                                                   //0x0
        USHORT Selector;                                                    //0x2
    };
    USHORT IstIndex:3;                                                      //0x4
    USHORT Reserved0:5;                                                     //0x4
    USHORT Type:5;                                                          //0x4
    USHORT Dpl:2;                                                           //0x4
    struct
    {
        USHORT Present:1;                                                   //0x4
        USHORT OffsetMiddle;                                                //0x6
    };
    struct
    {
        ULONG OffsetHigh;                                                   //0x8
        ULONG Reserved1;                                                    //0xc
    };
    ULONGLONG Alignment;                                                    //0x0
}; 

----------------------------------------
Structure: _KLOCK_ENTRY_BOOST_BITMAP

//0x4 bytes (sizeof)
union _KLOCK_ENTRY_BOOST_BITMAP
{
    ULONG AllFields;                                                        //0x0
    ULONG AllBoosts:17;                                                     //0x0
    ULONG Reserved:15;                                                      //0x0
    USHORT CpuBoostsBitmap:15;                                              //0x0
    struct
    {
        USHORT IoBoost:1;                                                   //0x0
    USHORT IoQoSBoost:1;                                                    //0x2
    USHORT IoNormalPriorityWaiterCount:8;                                   //0x2
    };
    USHORT IoQoSWaiterCount:7;                                              //0x2
}; 

----------------------------------------
Structure: _KPRCBFLAG

//0x4 bytes (sizeof)
union _KPRCBFLAG
{
    volatile LONG PrcbFlags;                                                //0x0
    ULONG BamQosLevel:8;                                                    //0x0
    ULONG PendingQosUpdate:2;                                               //0x0
    ULONG CacheIsolationEnabled:1;                                          //0x0
    ULONG TracepointActive:1;                                               //0x0
    ULONG PrcbFlagsReserved:20;                                             //0x0
}; 

----------------------------------------
Structure: _KQOS_GROUPING_SETS

//0x10 bytes (sizeof)
union _KQOS_GROUPING_SETS
{
    struct
    {
        ULONGLONG SingleCoreSet;                                            //0x0
    };
    ULONGLONG SmtSet;                                                       //0x8
}; 

----------------------------------------
Structure: _KSTACK_COUNT

//0x4 bytes (sizeof)
union _KSTACK_COUNT
{
    LONG Value;                                                             //0x0
    ULONG State:3;                                                          //0x0
    ULONG StackCount:29;                                                    //0x0
}; 

----------------------------------------
Structure: _KWAIT_STATUS_REGISTER

//0x1 bytes (sizeof)
union _KWAIT_STATUS_REGISTER
{
    UCHAR Flags;                                                            //0x0
    UCHAR State:3;                                                          //0x0
    UCHAR Affinity:1;                                                       //0x0
    UCHAR Priority:1;                                                       //0x0
    UCHAR Apc:1;                                                            //0x0
    UCHAR UserApc:1;                                                        //0x0
    UCHAR Alert:1;                                                          //0x0
}; 

----------------------------------------
Structure: _LARGE_INTEGER

//0x8 bytes (sizeof)
union _LARGE_INTEGER
{
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    };
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    } u;                                                                    //0x0
    LONGLONG QuadPart;                                                      //0x0
}; 

----------------------------------------
Structure: _LARGE_INTEGER

//0x8 bytes (sizeof)
union _LARGE_INTEGER
{
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    };
    struct
    {
        ULONG LowPart;                                                      //0x0
        LONG HighPart;                                                      //0x4
    } u;                                                                    //0x0
    LONGLONG QuadPart;                                                      //0x0
}; 

----------------------------------------
Structure: _LFH_RANDOM_DATA

//0x100 bytes (sizeof)
union _LFH_RANDOM_DATA
{
    UCHAR Bytes[256];                                                       //0x0
    USHORT Words[128];                                                      //0x0
    ULONGLONG Quadwords[32];                                                //0x0
}; 

----------------------------------------
Structure: _MCG_CAP

//0x8 bytes (sizeof)
union _MCG_CAP
{
    ULONGLONG CountField:8;                                                 //0x0
    ULONGLONG ControlMsrPresent:1;                                          //0x0
    ULONGLONG ExtendedMsrsPresent:1;                                        //0x0
    ULONGLONG SignalingExtensionPresent:1;                                  //0x0
    ULONGLONG ThresholdErrorStatusPresent:1;                                //0x0
    ULONGLONG Reserved:4;                                                   //0x0
    ULONGLONG ExtendedRegisterCount:8;                                      //0x0
    ULONGLONG SoftwareErrorRecoverySupported:1;                             //0x0
    ULONGLONG EnhancedMachineCheckCapability:1;                             //0x0
    ULONGLONG ExtendedErrorLogging:1;                                       //0x0
    ULONGLONG LocalMachineCheckException:1;                                 //0x0
    ULONGLONG QuadPart;                                                     //0x0
}; 

----------------------------------------
Structure: _MCG_STATUS

//0x8 bytes (sizeof)
union _MCG_STATUS
{
    ULONG RestartIpValid:1;                                                 //0x0
    ULONG ErrorIpValid:1;                                                   //0x0
    ULONG MachineCheckInProgress:1;                                         //0x0
    ULONG LocalMceValid:1;                                                  //0x0
    struct
    {
        ULONG Reserved1:28;                                                 //0x0
        ULONG Reserved2;                                                    //0x4
    };
    ULONGLONG QuadPart;                                                     //0x0
}; 

----------------------------------------
Structure: _MCI_STATUS

//0x8 bytes (sizeof)
union _MCI_STATUS
{
    struct _MCI_STATUS_BITS_COMMON CommonBits;                              //0x0
    struct _MCI_STATUS_AMD_BITS AmdBits;                                    //0x0
    struct _MCI_STATUS_INTEL_BITS IntelBits;                                //0x0
    ULONGLONG QuadPart;                                                     //0x0
}; 

----------------------------------------
Structure: _MI_FLAGS

//0x4 bytes (sizeof)
union _MI_FLAGS
{
    LONG EntireFlags;                                                       //0x0
    ULONG VerifierEnabled:1;                                                //0x0
    ULONG KernelVerifierEnabled:1;                                          //0x0
    ULONG LargePageKernel:1;                                                //0x0
    ULONG StopOn4d:1;                                                       //0x0
    ULONG InitializationPhase:2;                                            //0x0
    ULONG PageKernelStacks:1;                                               //0x0
    ULONG CheckZeroPages:1;                                                 //0x0
    ULONG ProcessorPrewalks:1;                                              //0x0
    ULONG ProcessorPostwalks:1;                                             //0x0
    ULONG CoverageBuild:1;                                                  //0x0
    ULONG AccessBitReplacementDisabled:1;                                   //0x0
    ULONG CheckExecute:1;                                                   //0x0
    ULONG ProtectedPagesEnabled:1;                                          //0x0
    ULONG SecureRelocations:1;                                              //0x0
    ULONG StrongPageIdentity:1;                                             //0x0
    ULONG StrongCodeGuarantees:1;                                           //0x0
    ULONG HardCodeGuarantees:1;                                             //0x0
    ULONG ExecutePagePrivilegeRequired:1;                                   //0x0
    ULONG SecureKernelCfgEnabled:1;                                         //0x0
    ULONG FullHvci:1;                                                       //0x0
    ULONG BootDebuggerActive:1;                                             //0x0
    ULONG ExceptionHandlingReady:1;                                         //0x0
    ULONG ShadowStacksSupported:1;                                          //0x0
    ULONG AccessBitFenceRequired:1;                                         //0x0
    ULONG PfnDatabaseExists:1;                                              //0x0
    ULONG DeferredHotAddsCompleted:1;                                       //0x0
    ULONG SystemPtesReady:1;                                                //0x0
}; 

----------------------------------------
Structure: _MI_RESERVATION_CLUSTER_INFO

//0x4 bytes (sizeof)
union _MI_RESERVATION_CLUSTER_INFO
{
    ULONG ClusterSize:10;                                                   //0x0
    ULONG SequenceNumber:22;                                                //0x0
    LONG EntireInfo;                                                        //0x0
}; 

----------------------------------------
Structure: _MM_PAGE_ACCESS_INFO_FLAGS

//0x4 bytes (sizeof)
union _MM_PAGE_ACCESS_INFO_FLAGS
{
    struct
    {
        ULONG FilePointerIndex:9;                                           //0x0
        ULONG HardFault:1;                                                  //0x0
        ULONG Image:1;                                                      //0x0
        ULONG Spare0:1;                                                     //0x0
    } File;                                                                 //0x0
    struct
    {
        ULONG FilePointerIndex:9;                                           //0x0
        ULONG HardFault:1;                                                  //0x0
        ULONG Spare1:2;                                                     //0x0
    } Private;                                                              //0x0
}; 

----------------------------------------
Structure: _MM_STORE_KEY

//0x8 bytes (sizeof)
union _MM_STORE_KEY
{
    ULONGLONG KeyLow:60;                                                    //0x0
    ULONGLONG KeyHigh:4;                                                    //0x0
    ULONGLONG EntireKey;                                                    //0x0
}; 

----------------------------------------
Structure: _PCW_CALLBACK_INFORMATION

//0x28 bytes (sizeof)
union _PCW_CALLBACK_INFORMATION
{
    struct _PCW_COUNTER_INFORMATION AddCounter;                             //0x0
    struct _PCW_COUNTER_INFORMATION RemoveCounter;                          //0x0
    struct _PCW_MASK_INFORMATION EnumerateInstances;                        //0x0
    struct _PCW_MASK_INFORMATION CollectData;                               //0x0
}; 

----------------------------------------
Structure: _PEP_ACPI_RESOURCE

//0x48 bytes (sizeof)
union _PEP_ACPI_RESOURCE
{
    enum _PEP_ACPI_RESOURCE_TYPE Type;                                      //0x0
    struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;                           //0x0
    struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;                          //0x0
    struct _PEP_ACPI_GPIO_RESOURCE Gpio;                                    //0x0
    struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;                               //0x0
    struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;                               //0x0
    struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;                             //0x0
    struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;                      //0x0
}; 

----------------------------------------
Structure: _PEP_ACPI_RESOURCE_FLAGS

//0x4 bytes (sizeof)
union _PEP_ACPI_RESOURCE_FLAGS
{
    ULONG AsULong;                                                          //0x0
    ULONG Shared:1;                                                         //0x0
    ULONG Wake:1;                                                           //0x0
    ULONG ResourceUsage:1;                                                  //0x0
    ULONG SlaveMode:1;                                                      //0x0
    ULONG AddressingMode:1;                                                 //0x0
    ULONG SharedMode:1;                                                     //0x0
    ULONG Reserved:26;                                                      //0x0
}; 

----------------------------------------
Structure: _POP_FX_COMPONENT_FLAGS

//0x8 bytes (sizeof)
union _POP_FX_COMPONENT_FLAGS
{
    struct
    {
        LONG Value;                                                         //0x0
        LONG Value2;                                                        //0x4
    };
    ULONG RefCount:30;                                                      //0x0
    ULONG Idling:1;                                                         //0x0
    struct
    {
        ULONG Active:1;                                                     //0x0
    ULONG CriticalIdleOverride:1;                                           //0x4
    ULONG ResidentOverride:1;                                               //0x4
    };
    ULONG Reserved:30;                                                      //0x4
}; 

----------------------------------------
Structure: _POP_FX_DEVICE_STATUS

//0x4 bytes (sizeof)
union _POP_FX_DEVICE_STATUS
{
    LONG Value;                                                             //0x0
    ULONG SystemTransition:1;                                               //0x0
    ULONG PepD0Notify:1;                                                    //0x0
    ULONG IdleTimerOn:1;                                                    //0x0
    ULONG IgnoreIdleTimeout:1;                                              //0x0
    ULONG IrpInUse:1;                                                       //0x0
    ULONG IrpPending:1;                                                     //0x0
    ULONG DPNRDeviceNotified:1;                                             //0x0
    ULONG DPNRReceivedFromPep:1;                                            //0x0
    ULONG IrpFirstPendingIndex:1;                                           //0x0
    ULONG IrpLastPendingIndex:1;                                            //0x0
    ULONG SIrpBlocked:1;                                                    //0x0
    ULONG BlockFastResume:1;                                                //0x0
    ULONG DirectedPoweredDown:1;                                            //0x0
    ULONG DirectedTransitionInProgress:1;                                   //0x0
    ULONG Reserved:18;                                                      //0x0
}; 

----------------------------------------
Structure: _POP_FX_PERF_FLAGS

//0x4 bytes (sizeof)
union _POP_FX_PERF_FLAGS
{
    LONG Value;                                                             //0x0
    ULONG Progress:3;                                                       //0x0
    ULONG Reserved:24;                                                      //0x0
    ULONG Synchronicity:2;                                                  //0x0
    ULONG RequestPepCompleted:1;                                            //0x0
    ULONG RequestSucceeded:1;                                               //0x0
    ULONG NestedCallback:1;                                                 //0x0
}; 

----------------------------------------
Structure: _POWER_STATE

//0x4 bytes (sizeof)
union _POWER_STATE
{
    enum _SYSTEM_POWER_STATE SystemState;                                   //0x0
    enum _DEVICE_POWER_STATE DeviceState;                                   //0x0
}; 

----------------------------------------
Structure: _PPM_COORDINATED_SYNCHRONIZATION

//0x4 bytes (sizeof)
union _PPM_COORDINATED_SYNCHRONIZATION
{
    LONG AsLong;                                                            //0x0
    ULONG EnterProcessor:12;                                                //0x0
    ULONG ExitProcessor:12;                                                 //0x0
    ULONG Transition:2;                                                     //0x0
    ULONG Entered:1;                                                        //0x0
    ULONG EntryPriority:5;                                                  //0x0
}; 

----------------------------------------
Structure: _PPM_IDLE_SYNCHRONIZATION_STATE

//0x4 bytes (sizeof)
union _PPM_IDLE_SYNCHRONIZATION_STATE
{
    LONG AsLong;                                                            //0x0
    LONG RefCount:24;                                                       //0x0
    ULONG State:8;                                                          //0x0
}; 

----------------------------------------
Structure: _PPM_POLICY_SETTINGS_MASK

//0x8 bytes (sizeof)
union _PPM_POLICY_SETTINGS_MASK
{
    ULONGLONG Value;                                                        //0x0
    ULONG PerfDecreaseTime:1;                                               //0x0
    ULONG PerfIncreaseTime:1;                                               //0x0
    ULONG PerfDecreasePolicy:1;                                             //0x0
    ULONG PerfIncreasePolicy:1;                                             //0x0
    ULONG PerfDecreaseThreshold:1;                                          //0x0
    ULONG PerfIncreaseThreshold:1;                                          //0x0
    ULONG PerfMinPolicy:1;                                                  //0x0
    ULONG PerfMaxPolicy:1;                                                  //0x0
    ULONG PerfTimeCheck:1;                                                  //0x0
    ULONG PerfBoostPolicy:1;                                                //0x0
    ULONG PerfBoostMode:1;                                                  //0x0
    ULONG AllowThrottling:1;                                                //0x0
    ULONG PerfHistoryCount:1;                                               //0x0
    ULONG ParkingPerfState:1;                                               //0x0
    ULONG LatencyHintPerf:1;                                                //0x0
    ULONG LatencyHintUnpark:1;                                              //0x0
    ULONG CoreParkingMinCores:1;                                            //0x0
    ULONG CoreParkingMaxCores:1;                                            //0x0
    ULONG CoreParkingDecreasePolicy:1;                                      //0x0
    ULONG CoreParkingIncreasePolicy:1;                                      //0x0
    ULONG CoreParkingDecreaseTime:1;                                        //0x0
    ULONG CoreParkingIncreaseTime:1;                                        //0x0
    ULONG CoreParkingOverUtilizationThreshold:1;                            //0x0
    ULONG CoreParkingDistributeUtility:1;                                   //0x0
    ULONG CoreParkingConcurrencyThreshold:1;                                //0x0
    ULONG CoreParkingHeadroomThreshold:1;                                   //0x0
    ULONG CoreParkingDistributionThreshold:1;                               //0x0
    ULONG IdleAllowScaling:1;                                               //0x0
    ULONG IdleDisable:1;                                                    //0x0
    ULONG IdleTimeCheck:1;                                                  //0x0
    ULONG IdleDemoteThreshold:1;                                            //0x0
    struct
    {
        ULONG IdlePromoteThreshold:1;                                       //0x0
    ULONG HeteroDecreaseTime:1;                                             //0x4
    ULONG HeteroIncreaseTime:1;                                             //0x4
    ULONG HeteroDecreaseThreshold:1;                                        //0x4
    ULONG HeteroIncreaseThreshold:1;                                        //0x4
    ULONG Class0FloorPerformance:1;                                         //0x4
    ULONG Class1InitialPerformance:1;                                       //0x4
    ULONG EnergyPerfPreference:1;                                           //0x4
    ULONG AutonomousActivityWindow:1;                                       //0x4
    ULONG AutonomousMode:1;                                                 //0x4
    ULONG DutyCycling:1;                                                    //0x4
    ULONG FrequencyCap:1;                                                   //0x4
    ULONG ThreadPolicy:1;                                                   //0x4
    ULONG ShortThreadPolicy:1;                                              //0x4
    ULONG IdleStateMax:1;                                                   //0x4
    ULONG ResponsivenessDisableThreshold:1;                                 //0x4
    ULONG ResponsivenessEnableThreshold:1;                                  //0x4
    ULONG ResponsivenessDisableTime:1;                                      //0x4
    ULONG ResponsivenessEnableTime:1;                                       //0x4
    ULONG ResponsivenessEppCeiling:1;                                       //0x4
    ULONG ResponsivenessPerfFloor:1;                                        //0x4
    ULONG SoftParkLatency:1;                                                //0x4
    };
    ULONG Spare:11;                                                         //0x4
}; 

----------------------------------------
Structure: _PS_CLIENT_SECURITY_CONTEXT

//0x8 bytes (sizeof)
union _PS_CLIENT_SECURITY_CONTEXT
{
    ULONGLONG ImpersonationData;                                            //0x0
    VOID* ImpersonationToken;                                               //0x0
    ULONGLONG ImpersonationLevel:2;                                         //0x0
    ULONGLONG EffectiveOnly:1;                                              //0x0
}; 

----------------------------------------
Structure: _PS_INTERLOCKED_TIMER_DELAY_VALUES

//0x8 bytes (sizeof)
union _PS_INTERLOCKED_TIMER_DELAY_VALUES
{
    ULONGLONG DelayMs:30;                                                   //0x0
    ULONGLONG CoalescingWindowMs:30;                                        //0x0
    ULONGLONG Reserved:1;                                                   //0x0
    ULONGLONG NewTimerWheel:1;                                              //0x0
    ULONGLONG Retry:1;                                                      //0x0
    ULONGLONG Locked:1;                                                     //0x0
    ULONGLONG All;                                                          //0x0
}; 

----------------------------------------
Structure: _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS

//0x1 bytes (sizeof)
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
    UCHAR Trustlet:1;                                                       //0x0
    UCHAR Ntos:1;                                                           //0x0
    UCHAR WriteHandle:1;                                                    //0x0
    UCHAR ReadHandle:1;                                                     //0x0
    UCHAR Reserved:4;                                                       //0x0
    UCHAR AccessRights;                                                     //0x0
}; 

----------------------------------------
Structure: _RTL_RUN_ONCE

//0x8 bytes (sizeof)
union _RTL_RUN_ONCE
{
    VOID* Ptr;                                                              //0x0
    ULONGLONG Value;                                                        //0x0
    ULONGLONG State:2;                                                      //0x0
}; 

----------------------------------------
Structure: _SLIST_HEADER

//0x10 bytes (sizeof)
union _SLIST_HEADER
{
    struct
    {
        ULONGLONG Alignment;                                                //0x0
        ULONGLONG Region;                                                   //0x8
    };
    struct
    {
        ULONGLONG Depth:16;                                                 //0x0
        ULONGLONG Sequence:48;                                              //0x0
        ULONGLONG Reserved:4;                                               //0x8
        ULONGLONG NextEntry:60;                                             //0x8
    } HeaderX64;                                                            //0x0
}; 

----------------------------------------
Structure: _TIMELINE_BITMAP

//0x8 bytes (sizeof)
union _TIMELINE_BITMAP
{
    ULONGLONG Value;                                                        //0x0
    struct
    {
        ULONG EndTime;                                                      //0x0
    };
    ULONG Bitmap;                                                           //0x4
}; 

----------------------------------------
Structure: _ULARGE_INTEGER

//0x8 bytes (sizeof)
union _ULARGE_INTEGER
{
    struct
    {
        ULONG LowPart;                                                      //0x0
        ULONG HighPart;                                                     //0x4
    };
    struct
    {
        ULONG LowPart;                                                      //0x0
        ULONG HighPart;                                                     //0x4
    } u;                                                                    //0x0
    ULONGLONG QuadPart;                                                     //0x0
}; 

----------------------------------------
Structure: _WHEAP_ERROR_RECORD_WRAPPER_FLAGS

//0x4 bytes (sizeof)
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
    ULONG Preallocated:1;                                                   //0x0
    ULONG FromPersistentStore:1;                                            //0x0
    ULONG PlatformPfaControl:1;                                             //0x0
    ULONG PlatformDirectedOffline:1;                                        //0x0
    ULONG Reserved:28;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_PACKET_FLAGS

//0x4 bytes (sizeof)
union _WHEA_ERROR_PACKET_FLAGS
{
    ULONG PreviousError:1;                                                  //0x0
    ULONG CriticalEvent:1;                                                  //0x0
    ULONG HypervisorError:1;                                                //0x0
    ULONG Simulated:1;                                                      //0x0
    ULONG PlatformPfaControl:1;                                             //0x0
    ULONG PlatformDirectedOffline:1;                                        //0x0
    ULONG AddressTranslationRequired:1;                                     //0x0
    ULONG AddressTranslationCompleted:1;                                    //0x0
    ULONG Reserved2:24;                                                     //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_HEADER_FLAGS

//0x4 bytes (sizeof)
union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
    ULONG Recovered:1;                                                      //0x0
    ULONG PreviousError:1;                                                  //0x0
    ULONG Simulated:1;                                                      //0x0
    ULONG DeviceDriver:1;                                                   //0x0
    ULONG CriticalEvent:1;                                                  //0x0
    ULONG PersistPfn:1;                                                     //0x0
    ULONG Reserved:26;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_HEADER_VALIDBITS

//0x4 bytes (sizeof)
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
    ULONG PlatformId:1;                                                     //0x0
    ULONG Timestamp:1;                                                      //0x0
    ULONG PartitionId:1;                                                    //0x0
    ULONG Reserved:29;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS

//0x4 bytes (sizeof)
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
    ULONG Primary:1;                                                        //0x0
    ULONG ContainmentWarning:1;                                             //0x0
    ULONG Reset:1;                                                          //0x0
    ULONG ThresholdExceeded:1;                                              //0x0
    ULONG ResourceNotAvailable:1;                                           //0x0
    ULONG LatentError:1;                                                    //0x0
    ULONG Propagated:1;                                                     //0x0
    ULONG Reserved:25;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS

//0x1 bytes (sizeof)
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
    UCHAR FRUId:1;                                                          //0x0
    UCHAR FRUText:1;                                                        //0x0
    UCHAR Reserved:6;                                                       //0x0
    UCHAR AsUCHAR;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_ERROR_STATUS

//0x8 bytes (sizeof)
union _WHEA_ERROR_STATUS
{
    ULONGLONG ErrorStatus;                                                  //0x0
    ULONGLONG Reserved1:8;                                                  //0x0
    ULONGLONG ErrorType:8;                                                  //0x0
    ULONGLONG Address:1;                                                    //0x0
    ULONGLONG Control:1;                                                    //0x0
    ULONGLONG Data:1;                                                       //0x0
    ULONGLONG Responder:1;                                                  //0x0
    ULONGLONG Requester:1;                                                  //0x0
    ULONGLONG FirstError:1;                                                 //0x0
    ULONGLONG Overflow:1;                                                   //0x0
    ULONGLONG Reserved2:41;                                                 //0x0
}; 

----------------------------------------
Structure: _WHEA_EVENT_LOG_ENTRY_FLAGS

//0x4 bytes (sizeof)
union _WHEA_EVENT_LOG_ENTRY_FLAGS
{
    ULONG Reserved1:1;                                                      //0x0
    ULONG LogInternalEtw:1;                                                 //0x0
    ULONG LogBlackbox:1;                                                    //0x0
    ULONG LogSel:1;                                                         //0x0
    ULONG RawSel:1;                                                         //0x0
    ULONG NoFormat:1;                                                       //0x0
    ULONG Driver:1;                                                         //0x0
    ULONG Reserved2:25;                                                     //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _WHEA_MEMORY_ERROR_SECTION_VALIDBITS

//0x8 bytes (sizeof)
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
    ULONGLONG ErrorStatus:1;                                                //0x0
    ULONGLONG PhysicalAddress:1;                                            //0x0
    ULONGLONG PhysicalAddressMask:1;                                        //0x0
    ULONGLONG Node:1;                                                       //0x0
    ULONGLONG Card:1;                                                       //0x0
    ULONGLONG Module:1;                                                     //0x0
    ULONGLONG Bank:1;                                                       //0x0
    ULONGLONG Device:1;                                                     //0x0
    ULONGLONG Row:1;                                                        //0x0
    ULONGLONG Column:1;                                                     //0x0
    ULONGLONG BitPosition:1;                                                //0x0
    ULONGLONG RequesterId:1;                                                //0x0
    ULONGLONG ResponderId:1;                                                //0x0
    ULONGLONG TargetId:1;                                                   //0x0
    ULONGLONG ErrorType:1;                                                  //0x0
    ULONGLONG RankNumber:1;                                                 //0x0
    ULONGLONG CardHandle:1;                                                 //0x0
    ULONGLONG ModuleHandle:1;                                               //0x0
    ULONGLONG ExtendedRow:1;                                                //0x0
    ULONGLONG BankGroup:1;                                                  //0x0
    ULONGLONG BankAddress:1;                                                //0x0
    ULONGLONG ChipIdentification:1;                                         //0x0
    ULONGLONG Reserved:42;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}; 

----------------------------------------
Structure: _WHEA_NOTIFICATION_FLAGS

//0x2 bytes (sizeof)
union _WHEA_NOTIFICATION_FLAGS
{
    USHORT PollIntervalRW:1;                                                //0x0
    USHORT SwitchToPollingThresholdRW:1;                                    //0x0
    USHORT SwitchToPollingWindowRW:1;                                       //0x0
    USHORT ErrorThresholdRW:1;                                              //0x0
    USHORT ErrorThresholdWindowRW:1;                                        //0x0
    USHORT Reserved:11;                                                     //0x0
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _WHEA_PERSISTENCE_INFO

//0x8 bytes (sizeof)
union _WHEA_PERSISTENCE_INFO
{
    ULONGLONG Signature:16;                                                 //0x0
    ULONGLONG Length:24;                                                    //0x0
    ULONGLONG Identifier:16;                                                //0x0
    ULONGLONG Attributes:2;                                                 //0x0
    ULONGLONG DoNotLog:1;                                                   //0x0
    ULONGLONG Reserved:5;                                                   //0x0
    ULONGLONG AsULONGLONG;                                                  //0x0
}; 

----------------------------------------
Structure: _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS

//0x8 bytes (sizeof)
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
{
    ULONGLONG ProcessorType:1;                                              //0x0
    ULONGLONG InstructionSet:1;                                             //0x0
    ULONGLONG ErrorType:1;                                                  //0x0
    ULONGLONG Operation:1;                                                  //0x0
    ULONGLONG Flags:1;                                                      //0x0
    ULONGLONG Level:1;                                                      //0x0
    ULONGLONG CPUVersion:1;                                                 //0x0
    ULONGLONG CPUBrandString:1;                                             //0x0
    ULONGLONG ProcessorId:1;                                                //0x0
    ULONGLONG TargetAddress:1;                                              //0x0
    ULONGLONG RequesterId:1;                                                //0x0
    ULONGLONG ResponderId:1;                                                //0x0
    ULONGLONG InstructionPointer:1;                                         //0x0
    ULONGLONG Reserved:51;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}; 

----------------------------------------
Structure: _WHEA_REVISION

//0x2 bytes (sizeof)
union _WHEA_REVISION
{
    struct
    {
        UCHAR MinorRevision;                                                //0x0
        UCHAR MajorRevision;                                                //0x1
    };
    USHORT AsUSHORT;                                                        //0x0
}; 

----------------------------------------
Structure: _WHEA_TIMESTAMP

//0x8 bytes (sizeof)
union _WHEA_TIMESTAMP
{
    ULONGLONG Seconds:8;                                                    //0x0
    ULONGLONG Minutes:8;                                                    //0x0
    ULONGLONG Hours:8;                                                      //0x0
    ULONGLONG Precise:1;                                                    //0x0
    ULONGLONG Reserved:7;                                                   //0x0
    ULONGLONG Day:8;                                                        //0x0
    ULONGLONG Month:8;                                                      //0x0
    ULONGLONG Year:8;                                                       //0x0
    ULONGLONG Century:8;                                                    //0x0
    union _LARGE_INTEGER AsLARGE_INTEGER;                                   //0x0
}; 

----------------------------------------
Structure: _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS

//0x8 bytes (sizeof)
union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
{
    ULONGLONG LocalAPICId:1;                                                //0x0
    ULONGLONG CpuId:1;                                                      //0x0
    ULONGLONG ProcInfoCount:6;                                              //0x0
    ULONGLONG ContextInfoCount:6;                                           //0x0
    ULONGLONG Reserved:50;                                                  //0x0
    ULONGLONG ValidBits;                                                    //0x0
}; 

----------------------------------------
Structure: _XPF_MCE_FLAGS

//0x4 bytes (sizeof)
union _XPF_MCE_FLAGS
{
    ULONG MCG_CapabilityRW:1;                                               //0x0
    ULONG MCG_GlobalControlRW:1;                                            //0x0
    ULONG Reserved:30;                                                      //0x0
    ULONG AsULONG;                                                          //0x0
}; 

----------------------------------------
Structure: _XPF_MC_BANK_FLAGS

//0x1 bytes (sizeof)
union _XPF_MC_BANK_FLAGS
{
    UCHAR ClearOnInitializationRW:1;                                        //0x0
    UCHAR ControlDataRW:1;                                                  //0x0
    UCHAR Reserved:6;                                                       //0x0
    UCHAR AsUCHAR;                                                          //0x0
}; 

----------------------------------------
Structure: __m128

//0x10 bytes (sizeof)
union __m128
{
    float m128_f32[4];                                                      //0x0
    ULONGLONG m128_u64[2];                                                  //0x0
    CHAR m128_i8[16];                                                       //0x0
    SHORT m128_i16[8];                                                      //0x0
    LONG m128_i32[4];                                                       //0x0
    LONGLONG m128_i64[2];                                                   //0x0
    UCHAR m128_u8[16];                                                      //0x0
    USHORT m128_u16[8];                                                     //0x0
    ULONG m128_u32[4];                                                      //0x0
}; 

----------------------------------------
Structure: __m64

//0x8 bytes (sizeof)
union __m64
{
    ULONGLONG m64_u64;                                                      //0x0
    float m64_f32[2];                                                       //0x0
    CHAR m64_i8[8];                                                         //0x0
    SHORT m64_i16[4];                                                       //0x0
    LONG m64_i32[2];                                                        //0x0
    LONGLONG m64_i64;                                                       //0x0
    UCHAR m64_u8[8];                                                        //0x0
    USHORT m64_u16[4];                                                      //0x0
    ULONG m64_u32[2];                                                       //0x0
}; 

----------------------------------------
Structure: _u

//0x50 bytes (sizeof)
union _u
{
    struct _CM_KEY_NODE KeyNode;                                            //0x0
    struct _CM_KEY_VALUE KeyValue;                                          //0x0
    struct _CM_KEY_SECURITY KeySecurity;                                    //0x0
    struct _CM_KEY_INDEX KeyIndex;                                          //0x0
    struct _CM_BIG_DATA ValueData;                                          //0x0
    ULONG KeyList[1];                                                       //0x0
    WCHAR KeyString[1];                                                     //0x0
}; 

----------------------------------------
Structure: wil_details_FeatureStateCache

//0x8 bytes (sizeof)
union wil_details_FeatureStateCache
{
    ULONG exchange;                                                         //0x0
    ULONG stateCached:1;                                                    //0x0
    ULONG hasNotificationCached:1;                                          //0x0
    ULONG variantCached:1;                                                  //0x0
    ULONG effectiveState:1;                                                 //0x0
    ULONG desiredState:1;                                                   //0x0
    ULONG configuredState:2;                                                //0x0
    ULONG needsRefresh:1;                                                   //0x0
    ULONG hasNotification:1;                                                //0x0
    ULONG isVariant:1;                                                      //0x0
    ULONG variant:6;                                                        //0x0
    struct
    {
        ULONG unused:16;                                                    //0x0
        ULONG payloadId;                                                    //0x4
    };
    ULONGLONG exchange64;                                                   //0x0
}; 

----------------------------------------
Structure: wil_details_RecordedState

//0x4 bytes (sizeof)
union wil_details_RecordedState
{
    ULONG exchange;                                                         //0x0
    ULONG recordedDeviceUsage:1;                                            //0x0
    ULONG recordedDevicePotential:1;                                        //0x0
    ULONG recordedDeviceOpportunity:1;                                      //0x0
    ULONG recordedDevicePotentialOpportunity:1;                             //0x0
    ULONG recordedVariantDeviceUsage:1;                                     //0x0
    ULONG recordedVariant:6;                                                //0x0
    ULONG unused:21;                                                        //0x0
}; 

----------------------------------------
Structure: wil_details_ReportedState

//0x4 bytes (sizeof)
union wil_details_ReportedState
{
    ULONG exchange;                                                         //0x0
    ULONG queuedForReporting:1;                                             //0x0
    ULONG reportedDeviceUsage:1;                                            //0x0
    ULONG reportedDevicePotential:1;                                        //0x0
    ULONG reportedDeviceOpportunity:1;                                      //0x0
    ULONG reportedDevicePotentialOpportunity:1;                             //0x0
    ULONG usageCount:9;                                                     //0x0
    ULONG usageCountRepresentsPotential:1;                                  //0x0
    ULONG opportunityCount:7;                                               //0x0
    ULONG opportunityCountRepresentsPotential:1;                            //0x0
    ULONG unused:9;                                                         //0x0
}; 

